{"version":3,"sources":["webpack:///./node_modules/@angular/cdk/esm5/portal.es5.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/util/Immediate.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/scheduler/asap.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/overlay.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/layout.es5.js.pre-build-optimizer.js","webpack:///./node_modules/rxjs/_esm5/internal/observable/fromEventPattern.js.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","CdkPortalOutlet","PortalModule","PortalInjector","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","this","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","template","context","templateRef","elementRef","undefined","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","length","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","_viewContainerRef","_isInitialized","attached","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","_parentInjector","_customTokens","token","notFoundValue","value","nextHandle","tasksByHandle","AsapAction_AsapAction","AsapAction","scheduler","work","tslib_es6","requestAsyncId","id","delay","actions","push","scheduled","cb","flush","bind","handle","Promise","resolve","then","runIfPresent","recycleAsyncId","AsapScheduler_AsapScheduler","AsapScheduler","apply","arguments","action","active","error","count","shift","execute","state","unsubscribe","asap","Overlay","OverlayContainer","OverlayKeyboardDispatcher","OverlayPositionBuilder","OverlayConfig","ScrollStrategyOptions","OverlayModule","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","tslib__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_12__","BlockScrollStrategy","_viewportRuler","document","_previousHTMLStyles","top","left","_isEnabled","_document","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","style","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","body","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","subscribe","scrollPosition","Math","abs","updatePosition","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","config","block","reposition","ngInjectableDef","factory","providedIn","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","keys","k","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","splice","removeEventListener","_containerElement","getContainerElement","_createContainer","container","createElement","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_keydownEventsObservable","observer","subscription","_positionStrategy","positionStrategy","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","pipe","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","getDirection","setAttribute","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId_1","finishDetach_1","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_origin","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","position","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","withPositions","positions","withViewportMargin","margin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","nativeElement","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","min","previousHeight","previousWidth","styles","_hasExactPosition","_getExactOverlayY","_getExactOverlayX","transformString","transform","trim","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","map","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","pair","dest","source","key","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","global","flexibleConnectedTo","nextUniqueId","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","layout_es5_BreakpointObserver","Breakpoints","mediaQueryStyleNode","mediaQueriesForWebkitCompatibility","Set","layout_es5_MediaMatcher","MediaMatcher","_matchMedia","matchMedia","noopMatchMedia","query","WEBKIT","has","sheet","insertRule","e","console","createEmptyStyleRule","core","platform_es5","matches","media","addListener","removeListener","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","Subject","isMatched","splitQueries","coercion_es5","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","debounceTime","breakpointStates","response","breakpoints","queryListener","output","fromEventPattern","addHandler","removeHandler","resultSelector","args","isArray","Observable","subscriber","retValue","handler","err","isFunction","listener","takeUntil","startWith","nextMql","queries","split","a1","a2","concat","XSmall","Small","Medium","Large","XLarge","Handset","Tablet","Web","HandsetPortrait","TabletPortrait","WebPortrait","HandsetLandscape","TabletLandscape","WebLandscape"],"mappings":"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","file":"default~code-code-example-module-ngfactory~code-code-tabs-module-ngfactory~getting-started-ng-for-ng~82f414e5.9b7990b05b1033765da2.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nvar  /**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nPortal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    };\n    /** Detach this portal from its host */\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nvar  /**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nvar  /**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nTemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nvar  /**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nBasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.hasAttached = /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attach = /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.detach = /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.dispose = /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.setDisposeFn = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\n     * @return {?}\n     */\n    function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar  /**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nDomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            /** @type {?} */\n            var index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalOutlet.prototype.dispose = /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalOutlet.prototype._getComponentRootNode = /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    CdkPortal.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-portal], [cdkPortal], [portal]',\n                    exportAs: 'cdkPortal',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ]; };\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        _this._isInitialized = false;\n        _this.attached = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: /**\n         * Portal associated with the Portal outlet.\n         * @return {?}\n         */\n        function () {\n            return this._attachedPortal;\n        },\n        set: /**\n         * @param {?} portal\n         * @return {?}\n         */\n        function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: /**\n         * Component or view reference that is attached to the portal.\n         * @return {?}\n         */\n        function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    CdkPortalOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                    inputs: ['portal: cdkPortalOutlet']\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef }\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\n    PortalModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkPortal, CdkPortalOutlet],\n                    declarations: [CdkPortal, CdkPortalOutlet],\n                },] },\n    ];\n    return PortalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nvar  /**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nPortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    PortalInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        /** @type {?} */\n        var value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.es5.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map\n","/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nvar AsapAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        scheduler.actions.push(this);\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map\n","/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, defineInjectable, inject } from '@angular/core';\nimport { __assign, __extends } from 'tslib';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nvar  /**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nBlockScrollStrategy = /** @class */ (function () {\n    function BlockScrollStrategy(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    function () { };\n    /** Blocks page-level scroll while the attached overlay is open. */\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.enable = /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            var root = /** @type {?} */ ((this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    };\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.disable = /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._isEnabled) {\n            /** @type {?} */\n            var html = /** @type {?} */ ((this._document.documentElement));\n            /** @type {?} */\n            var body = /** @type {?} */ ((this._document.body));\n            /** @type {?} */\n            var htmlStyle = /** @type {?} */ (html.style);\n            /** @type {?} */\n            var bodyStyle = /** @type {?} */ (body.style);\n            /** @type {?} */\n            var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype._canBeEnabled = /**\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var html = /** @type {?} */ ((this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        var body = this._document.body;\n        /** @type {?} */\n        var viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    };\n    return BlockScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(\"Scroll strategy has already been attached.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nvar  /**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nCloseScrollStrategy = /** @class */ (function () {\n    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = function () {\n            _this.disable();\n            if (_this._overlayRef.hasAttached()) {\n                _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables the closing of the attached overlay on scroll. */\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.enable = /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        var stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(function () {\n                /** @type {?} */\n                var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - _this._initialScrollPosition) > /** @type {?} */ ((/** @type {?} */ ((_this._config)).threshold))) {\n                    _this._detach();\n                }\n                else {\n                    _this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    };\n    /** Disables the closing the attached overlay on scroll. */\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.disable = /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return CloseScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nvar  /**\n * Scroll strategy that doesn't do anything.\n */\nNoopScrollStrategy = /** @class */ (function () {\n    function NoopScrollStrategy() {\n    }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.enable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.disable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.attach = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    return NoopScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(function (containerBounds) {\n        /** @type {?} */\n        var outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        var outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        var outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        var outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(function (scrollContainerRect) {\n        /** @type {?} */\n        var clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        var clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        var clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        var clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nvar  /**\n * Strategy that will update the element position as the user is scrolling.\n */\nRepositionScrollStrategy = /** @class */ (function () {\n    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables repositioning of the attached overlay on scroll. */\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.enable = /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            var throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(function () {\n                _this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (_this._config && _this._config.autoClose) {\n                    /** @type {?} */\n                    var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                    /** @type {?} */\n                    var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        _this.disable();\n                        _this._ngZone.run(function () { return _this._overlayRef.detach(); });\n                    }\n                }\n            });\n        }\n    };\n    /** Disables repositioning of the attached overlay on scroll. */\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.disable = /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    return RepositionScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nvar ScrollStrategyOptions = /** @class */ (function () {\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = function () { return new NoopScrollStrategy(); };\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); };\n        /**\n         * Block scrolling.\n         */\n        this.block = function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); };\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); };\n        this._document = document;\n    }\n    ScrollStrategyOptions.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    ScrollStrategyOptions.ctorParameters = function () { return [\n        { type: ScrollDispatcher },\n        { type: ViewportRuler },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = defineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(inject(ScrollDispatcher), inject(ViewportRuler), inject(NgZone), inject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n    return ScrollStrategyOptions;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nvar  /**\n * Initial configuration used when creating an overlay.\n */\nOverlayConfig = /** @class */ (function () {\n    function OverlayConfig(config) {\n        var _this = this;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach(function (k) {\n                /** @type {?} */\n                var key = /** @type {?} */ (k);\n                if (typeof config[key] !== 'undefined') {\n                    _this[key] = config[key];\n                }\n            });\n        }\n    }\n    return OverlayConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar  /**\n * The points of the origin element and the overlay element to connect.\n */\nConnectionPositionPair = /** @class */ (function () {\n    function ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nvar  /**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nScrollingVisibility = /** @class */ (function () {\n    function ScrollingVisibility() {\n    }\n    return ScrollingVisibility;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = /** @class */ (function () {\n    function ConnectedOverlayPositionChange(connectionPair, /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    /** @nocollapse */\n    ConnectedOverlayPositionChange.ctorParameters = function () { return [\n        { type: ConnectionPositionPair },\n        { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n    ]; };\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nvar OverlayKeyboardDispatcher = /** @class */ (function () {\n    function OverlayKeyboardDispatcher(document) {\n        var _this = this;\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = function (event) {\n            /** @type {?} */\n            var overlays = _this._attachedOverlays;\n            for (var i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._detach();\n    };\n    /** Add a new overlay to the list of attached overlay refs. */\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.add = /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    };\n    /** Remove an overlay from the list of attached overlay refs. */\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.remove = /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        /** @type {?} */\n        var index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    };\n    /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype._detach = /**\n     * Detaches the global keyboard event listener.\n     * @return {?}\n     */\n    function () {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    };\n    OverlayKeyboardDispatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayKeyboardDispatcher.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = defineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(inject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n    return OverlayKeyboardDispatcher;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        /** @type {?} */ ((\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nvar OverlayContainer = /** @class */ (function () {\n    function OverlayContainer(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    };\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    OverlayContainer.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ OverlayContainer.ngInjectableDef = defineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(inject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n    return OverlayContainer;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** *\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n  @type {?} */\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        /** @type {?} */ (DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n        ) // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar  /**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nOverlayRef = /** @class */ (function () {\n    function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        var _this = this;\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = Observable.create(function (observer) {\n            /** @type {?} */\n            var subscription = _this._keydownEvents.subscribe(observer);\n            _this._keydownEventSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._keydownEventSubscriptions--;\n            };\n        });\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            _config.scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /** The overlay's HTML element */\n        get: /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n        /** The overlay's backdrop HTML element. */\n        get: /**\n         * The overlay's backdrop HTML element.\n         * @return {?}\n         */\n        function () {\n            return this._backdropElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n        /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         */\n        get: /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         * @return {?}\n         */\n        function () {\n            return this._host;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(function () {\n            // The overlay could've been detached before the zone has stabilized.\n            if (_this.hasAttached()) {\n                _this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(function () { return _this.dispose(); });\n        }\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    OverlayRef.prototype.detach = /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    function () {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        /** @type {?} */\n        var detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    };\n    /** Cleans up the overlay from the DOM. */\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        if (this._config.scrollStrategy) {\n            this._config.scrollStrategy.disable();\n        }\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = /** @type {?} */ ((null));\n        }\n        this._previousHostParent = this._pane = /** @type {?} */ ((null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    };\n    /** Whether the overlay has attached content. */\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    function () {\n        return this._portalOutlet.hasAttached();\n    };\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    function () {\n        return this._backdropClick.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been attached. */\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.attachments = /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    function () {\n        return this._attachments.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been detached. */\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachments = /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    function () {\n        return this._detachments.asObservable();\n    };\n    /** Gets an observable of keydown events targeted to this overlay. */\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.keydownEvents = /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    function () {\n        return this._keydownEventsObservable;\n    };\n    /** Gets the the current overlay configuration, which is immutable. */\n    /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    OverlayRef.prototype.getConfig = /**\n     * Gets the the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    function () {\n        return this._config;\n    };\n    /** Updates the position of the overlay based on the position strategy. */\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    function () {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    };\n    /** Switches to a new position strategy and updates the overlay position. */\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePositionStrategy = /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    function (strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    };\n    /** Update the size properties of the overlay. */\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    function (sizeConfig) {\n        this._config = __assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    };\n    /** Sets the LTR/RTL direction for the overlay. */\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    OverlayRef.prototype.setDirection = /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        this._config = __assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    };\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype.getDirection = /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    };\n    /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementDirection = /**\n     * Updates the text direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        this._host.setAttribute('dir', this.getDirection());\n    };\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementSize = /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    };\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = /**\n     * Toggles the pointer events for the overlay pane element.\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = /**\n     * Attaches a backdrop for this overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        } /** @type {?} */\n        ((\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', function (event) { return _this._backdropClick.next(event); });\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(function () {\n                requestAnimationFrame(function () {\n                    if (_this._backdropElement) {\n                        _this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @return {?}\n     */\n    function () {\n        if (this._host.nextSibling) {\n            /** @type {?} */ ((this._host.parentNode)).appendChild(this._host);\n        }\n    };\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var backdropToDetach = this._backdropElement;\n        if (backdropToDetach) {\n            /** @type {?} */\n            var timeoutId_1 = void 0;\n            /** @type {?} */\n            var finishDetach_1 = function () {\n                // It may not be attached to anything in certain cases (e.g. unit tests).\n                if (backdropToDetach && backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n                // It is possible that a new portal has been attached to this overlay since we started\n                // removing the backdrop. If that is the case, only clear the backdrop reference if it\n                // is still the same instance that we started to remove.\n                if (_this._backdropElement == backdropToDetach) {\n                    _this._backdropElement = null;\n                }\n                clearTimeout(timeoutId_1);\n            };\n            backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            this._ngZone.runOutsideAngular(function () {\n                /** @type {?} */ ((backdropToDetach)).addEventListener('transitionend', finishDetach_1);\n            });\n            // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n            // In this case we make it unclickable and we try to remove it after a delay.\n            backdropToDetach.style.pointerEvents = 'none';\n            // Run this outside the Angular zone because there's nothing that Angular cares about.\n            // If it were to run inside the Angular zone, every test that used Overlay would have to be\n            // either async or fakeAsync.\n            timeoutId_1 = this._ngZone.runOutsideAngular(function () { return setTimeout(finishDetach_1, 500); });\n        }\n    };\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    OverlayRef.prototype._toggleClasses = /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (element, cssClasses, isAdd) {\n        /** @type {?} */\n        var classList = element.classList;\n        coerceArray(cssClasses).forEach(function (cssClass) {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        });\n    };\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    OverlayRef.prototype._detachContentWhenStable = /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(function () {\n            /** @type {?} */\n            var subscription = _this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(_this._attachments, _this._detachments)))\n                .subscribe(function () {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                    if (_this._pane && _this._config.panelClass) {\n                        _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                    }\n                    if (_this._host && _this._host.parentElement) {\n                        _this._previousHostParent = _this._host.parentElement;\n                        _this._previousHostParent.removeChild(_this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    };\n    return OverlayRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Class to be added to the overlay bounding box.\n  @type {?} */\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nFlexibleConnectedPositionStrategy = /** @class */ (function () {\n    function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        var _this = this;\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = Observable.create(function (observer) {\n            /** @type {?} */\n            var subscription = _this._positionChanges.subscribe(observer);\n            _this._positionChangeSubscriptions++;\n            return function () {\n                subscription.unsubscribe();\n                _this._positionChangeSubscriptions--;\n            };\n        });\n        this.setOrigin(connectedTo);\n    }\n    Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attaches this position strategy to an overlay. */\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.attach = /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        var _this = this;\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(function () {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            _this._isInitialRender = true;\n            _this.apply();\n        });\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        // @breaking-change 8.0.0 Remove `_platform` null check once it's guaranteed to be defined.\n        if (this._isDisposed || (this._platform && !this._platform.isBrowser)) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._origin.getBoundingClientRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        var originRect = this._originRect;\n        /** @type {?} */\n        var overlayRect = this._overlayRect;\n        /** @type {?} */\n        var viewportRect = this._viewportRect;\n        /** @type {?} */\n        var flexibleFits = [];\n        /** @type {?} */\n        var fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            /** @type {?} */\n            var originPoint = this._getOriginPoint(originRect, pos);\n            /** @type {?} */\n            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            /** @type {?} */\n            var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect: overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            var bestFit = null;\n            /** @type {?} */\n            var bestScore = -1;\n            for (var _b = 0, flexibleFits_1 = flexibleFits; _b < flexibleFits_1.length; _b++) {\n                var fit = flexibleFits_1[_b];\n                /** @type {?} */\n                var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(/** @type {?} */ ((bestFit)).position, /** @type {?} */ ((bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(/** @type {?} */ ((fallback)).position, /** @type {?} */ ((fallback)).originPoint);\n    };\n    /**\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    };\n    /** Cleanup after the element gets destroyed. */\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.dispose = /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    function () {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, /** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            }));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._origin.getBoundingClientRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            var lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this.scrollables = scrollables;\n    };\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPositions = /**\n     * Adds new preferred positions.\n     * @param {?} positions List of positions options for this overlay.\n     * @return {?}\n     */\n    function (positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(/** @type {?} */ ((this._lastPosition))) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    };\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withViewportMargin = /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {?}\n     */\n    function (margin) {\n        this._viewportMargin = margin;\n        return this;\n    };\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @param {?=} flexibleDimensions\n     * @return {?}\n     */\n    function (flexibleDimensions) {\n        if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    };\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @param {?=} growAfterOpen\n     * @return {?}\n     */\n    function (growAfterOpen) {\n        if (growAfterOpen === void 0) { growAfterOpen = true; }\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    };\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPush = /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @param {?=} canPush\n     * @return {?}\n     */\n    function (canPush) {\n        if (canPush === void 0) { canPush = true; }\n        this._canPush = canPush;\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    function (isLocked) {\n        if (isLocked === void 0) { isLocked = true; }\n        this._positionLocked = isLocked;\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    function (origin) {\n        this._origin = origin instanceof ElementRef ? origin.nativeElement : origin;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._offsetX = offset;\n        return this;\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._offsetY = offset;\n        return this;\n    };\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {?}\n     */\n    function (selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOriginPoint = /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originRect, pos) {\n        /** @type {?} */\n        var x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            var startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            var endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        var y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originPoint, overlayRect, pos) {\n        /** @type {?} */\n        var overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        var overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    };\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayFit = /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    function (point, overlay, viewport, position) {\n        var x = point.x, y = point.y;\n        /** @type {?} */\n        var offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        var offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        /** @type {?} */\n        var leftOverflow = 0 - x;\n        /** @type {?} */\n        var rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        var topOverflow = 0 - y;\n        /** @type {?} */\n        var bottomOverflow = (y + overlay.height) - viewport.height;\n        /** @type {?} */\n        var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        var visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea: visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    };\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    function (fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            var availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            var availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            var minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            var minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            var verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            var horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    };\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    function (start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        var viewport = this._viewportRect;\n        /** @type {?} */\n        var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        /** @type {?} */\n        var pushX = 0;\n        /** @type {?} */\n        var pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width < viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height < viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    };\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._applyPosition = /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    function (position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            var scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    };\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        var elements = /** @type {?} */ ((this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        var xOrigin;\n        /** @type {?} */\n        var yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n        }\n    };\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    function (origin, position) {\n        /** @type {?} */\n        var viewport = this._viewportRect;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        /** @type {?} */\n        var height;\n        /** @type {?} */\n        var top;\n        /** @type {?} */\n        var bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.bottom - origin.y;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            /** @type {?} */\n            var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            var previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        /** @type {?} */\n        var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        /** @type {?} */\n        var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        var width;\n        /** @type {?} */\n        var left;\n        /** @type {?} */\n        var right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            /** @type {?} */\n            var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            var previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: /** @type {?} */ ((top)), left: /** @type {?} */ ((left)), bottom: /** @type {?} */ ((bottom)), right: /** @type {?} */ ((right)), width: width, height: height };\n    };\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    function (origin, position) {\n        /** @type {?} */\n        var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        var styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            var maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            var maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, styles);\n    };\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @return {?}\n     */\n    function () {\n        extendStyles(/** @type {?} */ ((this._boundingBox)).style, /** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        }));\n    };\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @return {?}\n     */\n    function () {\n        extendStyles(this._pane.style, /** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n        }));\n    };\n    /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = /**\n     * Sets positioning styles to the overlay element.\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    function (originPoint, position) {\n        /** @type {?} */\n        var styles = /** @type {?} */ ({});\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        /** @type {?} */\n        var transformString = '';\n        /** @type {?} */\n        var offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        var offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += \"translateX(\" + offsetX + \"px) \";\n        }\n        if (offsetY) {\n            transformString += \"translateY(\" + offsetY + \"px)\";\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    };\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    function (position, originPoint, scrollPosition) {\n        /** @type {?} */\n        var styles = /** @type {?} */ ({ top: null, bottom: null });\n        /** @type {?} */\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        var virtualKeyboardOffset = this._overlayContainer ?\n            this._overlayContainer.getContainerElement().getBoundingClientRect().top : 0;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            /** @type {?} */\n            var documentHeight = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n            styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    };\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    function (position, originPoint, scrollPosition) {\n        /** @type {?} */\n        var styles = /** @type {?} */ ({ left: null, right: null });\n        /** @type {?} */\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        var horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            var documentWidth = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n            styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var originBounds = this._origin.getBoundingClientRect();\n        /** @type {?} */\n        var overlayBounds = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        var scrollContainerBounds = this.scrollables.map(function (scrollable) {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._subtractOverflows = /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce(function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    };\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var width = /** @type {?} */ ((this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        var height = /** @type {?} */ ((this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    };\n    /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._isRtl = /**\n     * Whether the we're dealing with an RTL context\n     * @return {?}\n     */\n    function () {\n        return this._overlayRef.getDirection() === 'rtl';\n    };\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasExactPosition = /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @return {?}\n     */\n    function () {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    };\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOffset = /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    function (position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    };\n    /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._validatePositions = /**\n     * Validates that the current position match the expected values.\n     * @return {?}\n     */\n    function () {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach(function (pair) {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        });\n    };\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._addPanelClasses = /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    function (cssClasses) {\n        var _this = this;\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(function (cssClass) {\n                if (_this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    _this._appliedPanelClasses.push(cssClass);\n                    _this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    };\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(function (cssClass) { return _this._pane.classList.remove(cssClass); });\n            this._appliedPanelClasses = [];\n        }\n    };\n    return FlexibleConnectedPositionStrategy;\n}());\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nConnectedPositionStrategy = /** @class */ (function () {\n    function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, \n    // @breaking-change 8.0.0 `platform` parameter to be made required.\n    platform) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy =\n            new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform)\n                .withFlexibleDimensions(false)\n                .withPush(false)\n                .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /** Whether the we're dealing with an RTL context */\n        get: /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /** Emits an event when the connection point changes. */\n        get: /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        function () {\n            return this._positionStrategy.positionChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attach this position strategy to an overlay. */\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.attach = /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    };\n    /** Disposes all resources used by the position strategy. */\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.dispose();\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.detach = /**\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.detach();\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.apply();\n    };\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.reapplyLastPosition();\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = /**\n     * Adds a new preferred fallback position.\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {?}\n     */\n    function (originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param {?} dir New layout direction.\n     * @return {?}\n     */\n    function (dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param {?} offset New offset in the X axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param {?} offset New offset in the Y axis.\n     * @return {?}\n     */\n    function (offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {?}\n     */\n    function (isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    };\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withPositions = /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {?}\n     */\n    function (positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param {?} origin Reference to the new origin element.\n     * @return {?}\n     */\n    function (origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    };\n    return ConnectedPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/** *\n * Class to be added to the overlay pane wrapper.\n  @type {?} */\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nGlobalPositionStrategy = /** @class */ (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.attach = /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        /** @type {?} */\n        var config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    };\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.top = /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New top offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.left = /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New left offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.bottom = /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param {?=} value New bottom offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.right = /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param {?=} value New right offset.\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.width = /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New width for the overlay\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.height = /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @param {?=} value New height for the overlay\n     * @return {?}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {?}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {?}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    };\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.apply = /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        var styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        var parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        var config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    };\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        var styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        var parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        var parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = /** @type {?} */ ((null));\n        this._isDisposed = true;\n    };\n    return GlobalPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = /** @class */ (function () {\n    function OverlayPositionBuilder(_viewportRuler, _document, \n    // @breaking-change 8.0.0 `_platform` and `_overlayContainer` parameters to be made required.\n    _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document);\n    };\n    /**\n     * Creates a flexible position strategy.\n     * @param elementRef\n     */\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.flexibleConnectedTo = /**\n     * Creates a flexible position strategy.\n     * @param {?} elementRef\n     * @return {?}\n     */\n    function (elementRef) {\n        return new FlexibleConnectedPositionStrategy(elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    OverlayPositionBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayPositionBuilder.ctorParameters = function () { return [\n        { type: ViewportRuler },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform, decorators: [{ type: Optional }] },\n        { type: OverlayContainer, decorators: [{ type: Optional }] }\n    ]; };\n    /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = defineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(inject(ViewportRuler), inject(DOCUMENT), inject(Platform, 8), inject(OverlayContainer, 8)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n    return OverlayPositionBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Next overlay unique ID.\n  @type {?} */\nvar nextUniqueId = 0;\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nvar Overlay = /** @class */ (function () {\n    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    function (config) {\n        /** @type {?} */\n        var host = this._createHostElement();\n        /** @type {?} */\n        var pane = this._createPaneElement(host);\n        /** @type {?} */\n        var portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    };\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    Overlay.prototype.position = /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    function (host) {\n        /** @type {?} */\n        var pane = this._document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    };\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    Overlay.prototype._createHostElement = /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @return {?} Newly-create host element.\n     */\n    function () {\n        /** @type {?} */\n        var host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    };\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    Overlay.prototype._createPortalOutlet = /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    function (pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    Overlay.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Overlay.ctorParameters = function () { return [\n        { type: ScrollStrategyOptions },\n        { type: OverlayContainer },\n        { type: ComponentFactoryResolver },\n        { type: OverlayPositionBuilder },\n        { type: OverlayKeyboardDispatcher },\n        { type: Injector },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Directionality },\n        { type: Location, decorators: [{ type: Optional }] }\n    ]; };\n    return Overlay;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n  @type {?} */\nvar defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** *\n * Injection token that determines the scroll handling while the connected overlay is open.\n  @type {?} */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar CdkOverlayOrigin = /** @class */ (function () {\n    function CdkOverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    CdkOverlayOrigin.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkOverlayOrigin.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    return CdkOverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nvar CdkConnectedOverlay = /** @class */ (function () {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n        /** The offset in pixels for the overlay connection point on the x-axis */\n        get: /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        function () { return this._offsetX; },\n        set: /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n        /** The offset in pixels for the overlay connection point on the y-axis */\n        get: /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        function () { return this._offsetY; },\n        set: /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n        /** Whether or not the overlay should attach a backdrop. */\n        get: /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        function () { return this._hasBackdrop; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._hasBackdrop = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n        /** Whether or not the overlay should be locked when scrolling. */\n        get: /**\n         * Whether or not the overlay should be locked when scrolling.\n         * @return {?}\n         */\n        function () { return this._lockPosition; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._lockPosition = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        get: /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         * @return {?}\n         */\n        function () { return this._flexibleDimensions; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._flexibleDimensions = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        get: /**\n         * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n         * @return {?}\n         */\n        function () { return this._growAfterOpen; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._growAfterOpen = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        get: /**\n         * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n         * @return {?}\n         */\n        function () { return this._push; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._push = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n        /** The associated overlay reference. */\n        get: /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n        /** The element's layout direction. */\n        get: /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyOverlay();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    };\n    /**\n     * Creates an overlay\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createOverlay = /**\n     * Creates an overlay\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe(function (event) {\n            _this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                _this._detachOverlay();\n            }\n        });\n    };\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._buildConfig = /**\n     * Builds the overlay config based on the directive's inputs\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy: positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    };\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._updatePositionStrategy = /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    function (positionStrategy) {\n        var _this = this;\n        /** @type {?} */\n        var positions = this.positions.map(function (currentPosition) { return ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || _this.offsetX,\n            offsetY: currentPosition.offsetY || _this.offsetY\n        }); });\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    };\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createPositionStrategy = /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe(function (p) { return _this.positionChange.emit(p); });\n        return strategy;\n    };\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._attachOverlay = /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(function (event) {\n                _this.backdropClick.emit(event);\n            });\n        }\n    };\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._detachOverlay = /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._destroyOverlay = /**\n     * Destroys the overlay created by this directive.\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    CdkConnectedOverlay.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkConnectedOverlay.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: TemplateRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    CdkConnectedOverlay.propDecorators = {\n        origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n        positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n        offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n        offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n        width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n        height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n        minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n        minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n        backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n        panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n        viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n        scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n        open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n        hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n        lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n        flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n        growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n        push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n        backdropClick: [{ type: Output }],\n        positionChange: [{ type: Output }],\n        attach: [{ type: Output }],\n        detach: [{ type: Output }],\n        overlayKeydown: [{ type: Output }]\n    };\n    return CdkConnectedOverlay;\n}());\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition(); };\n}\n/** *\n * \\@docs-private\n  @type {?} */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar OverlayModule = /** @class */ (function () {\n    function OverlayModule() {\n    }\n    OverlayModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [\n                        Overlay,\n                        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                    ],\n                },] },\n    ];\n    return OverlayModule;\n}());\n/** *\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n  @type {?} */\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nvar FullscreenOverlayContainer = /** @class */ (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer(_document) {\n        return _super.call(this, _document) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(function () { return _this._adjustParentForFullscreenChange(); });\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        var fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        var parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._getEventName = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if ((/** @type {?} */ (this._document)).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    function () {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            (/** @type {?} */ (this._document)).mozFullScreenElement ||\n            (/** @type {?} */ (this._document)).msFullscreenElement ||\n            null;\n    };\n    FullscreenOverlayContainer.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    FullscreenOverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n//# sourceMappingURL=overlay.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar LayoutModule = /** @class */ (function () {\n    function LayoutModule() {\n    }\n    LayoutModule.decorators = [\n        { type: NgModule },\n    ];\n    return LayoutModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Global registry for all dynamically-created, injected media queries.\n  @type {?} */\nvar mediaQueriesForWebkitCompatibility = new Set();\n/** *\n * Style tag that holds all of the dynamically-created media queries.\n  @type {?} */\nvar mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nvar MediaMatcher = /** @class */ (function () {\n    function MediaMatcher(platform) {\n        this.platform = platform;\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    MediaMatcher.prototype.matchMedia = /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    };\n    MediaMatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    MediaMatcher.ctorParameters = function () { return [\n        { type: Platform }\n    ]; };\n    /** @nocollapse */ MediaMatcher.ngInjectableDef = defineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(inject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n    return MediaMatcher;\n}());\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css'); /** @type {?} */\n            ((document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            (/** @type {?} */ (mediaQueryStyleNode.sheet))\n                .insertRule(\"@media \" + query + \" {.fx-query-test{ }}\", 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return /** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: function () { },\n        removeListener: function () { }\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nvar BreakpointObserver = /** @class */ (function () {\n    function BreakpointObserver(mediaMatcher, zone) {\n        this.mediaMatcher = mediaMatcher;\n        this.zone = zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    BreakpointObserver.prototype.ngOnDestroy = /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    function () {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    };\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    BreakpointObserver.prototype.isMatched = /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var queries = splitQueries(coerceArray(value));\n        return queries.some(function (mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; });\n    };\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    BreakpointObserver.prototype.observe = /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        var observables = queries.map(function (query) { return _this._registerQuery(query).observable; });\n        return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map(function (breakpointStates) {\n            /** @type {?} */\n            var response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(function (state) {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            });\n            return response;\n        }));\n    };\n    /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    BreakpointObserver.prototype._registerQuery = /**\n     * Registers a specific query to be listened for.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        var _this = this;\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return /** @type {?} */ ((this._queries.get(query)));\n        }\n        /** @type {?} */\n        var mql = this.mediaMatcher.matchMedia(query);\n        /** @type {?} */\n        var queryListener;\n        /** @type {?} */\n        var queryObservable = fromEventPattern(\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n        // back into the zone because matchMedia is only included in Zone.js by loading the\n        // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n        // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n        // patches it.\n        function (listener) {\n            queryListener = function (e) { return _this.zone.run(function () { return listener(e); }); };\n            mql.addListener(queryListener);\n        }, function () { return mql.removeListener(queryListener); })\n            .pipe(takeUntil(this._destroySubject), startWith(mql), map(function (nextMql) { return ({ query: query, matches: nextMql.matches }); }));\n        /** @type {?} */\n        var output = { observable: queryObservable, mql: mql };\n        this._queries.set(query, output);\n        return output;\n    };\n    BreakpointObserver.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    BreakpointObserver.ctorParameters = function () { return [\n        { type: MediaMatcher },\n        { type: NgZone }\n    ]; };\n    /** @nocollapse */ BreakpointObserver.ngInjectableDef = defineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(inject(MediaMatcher), inject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n    return BreakpointObserver;\n}());\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map(function (query) { return query.split(','); })\n        .reduce(function (a1, a2) { return a1.concat(a2); })\n        .map(function (query) { return query.trim(); });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n  @type {?} */\nvar Breakpoints = {\n    XSmall: '(max-width: 599px)',\n    Small: '(min-width: 600px) and (max-width: 959px)',\n    Medium: '(min-width: 960px) and (max-width: 1279px)',\n    Large: '(min-width: 1280px) and (max-width: 1919px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599px) and (orientation: portrait), ' +\n        '(max-width: 959px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n//# sourceMappingURL=layout.es5.js.map\n","/** PURE_IMPORTS_START _Observable,_util_isArray,_util_isFunction,_operators_map PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { map } from '../operators/map';\nexport function fromEventPattern(addHandler, removeHandler, resultSelector) {\n    if (resultSelector) {\n        return fromEventPattern(addHandler, removeHandler).pipe(map(function (args) { return isArray(args) ? resultSelector.apply(void 0, args) : resultSelector(args); }));\n    }\n    return new Observable(function (subscriber) {\n        var handler = function () {\n            var e = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                e[_i] = arguments[_i];\n            }\n            return subscriber.next(e.length === 1 ? e[0] : e);\n        };\n        var retValue;\n        try {\n            retValue = addHandler(handler);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        if (!isFunction(removeHandler)) {\n            return undefined;\n        }\n        return function () { return removeHandler(handler, retValue); };\n    });\n}\n//# sourceMappingURL=fromEventPattern.js.map\n"],"sourceRoot":""}