{"version":3,"sources":["webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/portal.js","webpack:///src/app/shared/copier.service.ts","webpack:///src/app/custom-elements/code/code.component.ts","webpack:///src/app/custom-elements/code/code.module.ts","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/overlay.js","webpack:///node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/layout.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/skip.js","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/snack-bar.js","webpack:///src/app/custom-elements/code/pretty-printer.service.ts"],"names":["Portal","host","this","_attachedHost","attach","detach","ComponentPortal","component","viewContainerRef","injector","componentFactoryResolver","super","TemplatePortal","template","context","templateRef","elementRef","DomPortal","element","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","setAttachedHost","_invokeDisposeFn","hasAttached","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","anchorNode","createComment","parentNode","insertBefore","appendChild","replaceChild","componentRef","componentFactory","resolveComponentFactory","createComponent","length","setDisposeFn","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","removeChild","CdkPortal","ɵfac","t","ɵdir","type","selectors","exportAs","features","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","_attachedRef","ref","emit","clear","nodeType","ELEMENT_NODE","inputs","outputs","PortalHostDirective","ɵPortalHostDirective_BaseFactory","provide","useExisting","PortalModule","ɵmod","ɵinj","factory","CopierService","textArea","currentFocus","document","activeElement","select","setSelectionRange","value","execCommand","focus","text","isRTL","documentElement","getAttribute","createElement","style","fontSize","border","padding","margin","opacity","position","top","setAttribute","createTextArea","body","success","copyTextArea","CodeComponent","snackbar","pretty","copier","logger","ariaLabel","codeFormatted","code","formatDisplayedCode","indent","lines","leftAlignedCode","Number","MAX_VALUE","split","line","lineIndent","search","Math","min","map","substr","join","trim","setCodeHtml","codeText","getCodeText","formatCode","language","getLinenums","pipe","subscribe","c","src","path","region","formattedCode","codeContainer","innerHTML","textContent","copyText","log","open","duration","error","Error","linenums","parseInt","isNaN","_code","showMissingCodeMessage","header","_header","CodeModule","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","classList","add","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","window","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","disable","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","ScrollStrategyOptions","OverlayOutsideClickDispatcher","OverlayKeyboardDispatcher","BaseOverlayDispatcher","OverlayContainer","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","noop","close","config","block","reposition","ɵprov","token","providedIn","OverlayConfig","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","Object","keys","key","configKeys","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","_attachedOverlays","push","splice","_keydownListener","event","overlays","i","_keydownEvents","observers","next","_isAttached","addEventListener","removeEventListener","_platform","_cursorStyleIsSet","_clickListener","target","composedPath","slice","_outsidePointerEvents","IOS","_cursorOriginalValue","cursor","isTestEnvironment","__karma__","jasmine","container","_containerElement","_createContainer","isBrowser","oppositePlatformContainers","querySelectorAll","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_outsideClickDispatcher","_backdropElement","_backdropClick","Subject","_attachments","_detachments","_locationChanges","Subscription","EMPTY","_backdropClickHandler","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","enable","onStable","take","_togglePointerEvents","_attachBackdrop","_toggleClasses","dispose","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","apply","strategy","sizeConfig","assign","dir","direction","classes","getDirection","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","requestAnimationFrame","runOutsideAngular","nextSibling","timeoutId","backdropToDetach","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","subscription","takeUntil","merge","children","cssUnitPattern","connectedTo","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","_scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","change","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","scrollables","positions","flexibleDimensions","growAfterOpen","canPush","isLocked","_origin","offset","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","overlayStartY","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","getPixelValue","getConfig","horizontalFit","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","styles","_hasExactPosition","transform","hasExactPosition","hasFlexibleDimensions","_getExactOverlayY","_getExactOverlayX","transformString","_pushOverlayOnScreen","virtualKeyboardOffset","getContainerElement","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","reduce","currentValue","currentOverflow","axis","Element","destination","source","hasOwnProperty","input","units","parseFloat","Overlay","OverlayPositionBuilder","OverlayModule","mediaQueryStyleNode","MediaMatcher","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFlexibleDimensions","withPush","withViewportMargin","withFallbackPosition","onPositionChange","_direction","setDirection","withScrollableContainers","withPositions","withDefaultOffsetX","withDefaultOffsetY","withLockedPosition","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","updateSize","parentStyles","shouldBeFlushHorizontally","shouldBeFlushVertically","marginLeft","marginTop","marginBottom","marginRight","parent","nextUniqueId","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","get","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER","deps","useFactory","providers","imports","SkipOperator","total","subscriber","count","Subscriber","mediaQueriesForWebkitCompatibility","Set","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","head","sheet","insertRule","e","console","matches","media","addListener","removeListener","BreakpointObserver","_mediaMatcher","_zone","_queries","Map","_destroySubject","splitQueries","mediaQuery","_registerQuery","mql","observables","observable","stateObservable","combineLatest","concat","lift","debounceTime","breakpointStates","response","breakpoints","output","Observable","observer","handler","startWith","set","queries","a1","a2","SimpleSnackBar_div_2_Template","rf","ctx","_r2","action","ctx_r0","data","MatSnackBarContainer_ng_template_0_Template","SimpleSnackBar","MatSnackBarModule","MatSnackBarContainer","MatSnackBar","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","MAX_TIMEOUT","pow","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","dismissedByAction","_onEnter","snackBarRef","ɵcmp","hostAttrs","decls","vars","consts","message","hasAction","directives","encapsulation","changeDetection","matSnackBarAnimations","snackBarState","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_assertNotAttached","_applySnackBarClasses","_role","fromState","toState","_completeExit","onEnter","onMicrotaskEmpty","panelClasses","Array","isArray","viewQuery","_t","first","hostVars","hostBindings","$event","onAnimationEnd","animation","MAT_SNACK_BAR_DEFAULT_OPTIONS","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","simpleSnackBarComponent","snackBarContainerComponent","handsetCssClass","_attach","openFromComponent","_openedSnackBarRef","useValue","containerPortal","containerRef","instance","content","userConfig","_createOverlay","_attachSnackBarContainer","$implicit","_createInjector","contentRef","observe","detachments","state","_animateSnackBar","afterDismissed","enter","afterOpened","_dismissAfter","announce","global","isLeft","isRight","centerHorizontally","PrettyPrinter","prettyPrintOne","getPrettyPrintOne","ppo","Promise","resolve","then","err","msg"],"mappings":"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","file":"x","sourcesContent":["import { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(template, viewContainerRef, context) {\n        super();\n        this.templateRef = template;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn((() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n}\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkPortal.ctorParameters = () => [\n    { type: TemplateRef },\n    { type: ViewContainerRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n}\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵTemplatePortalDirective_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : nativeElement.parentNode);\n    }\n}\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nCdkPortalOutlet.ctorParameters = () => [\n    { type: ComponentFactoryResolver },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\nCdkPortalOutlet.propDecorators = {\n    attached: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n}\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵPortalHostDirective_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\nclass PortalModule {\n}\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map","/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n *\n * It is also influenced by the Angular CDK `PendingCopy` class:\n * https://github.com/angular/components/blob/master/src/cdk/clipboard/pending-copy.ts\n */\n\n\nexport class CopierService {\n  /**\n   * Copy the contents of a `<textarea>` element to the clipboard.\n   *\n   * NOTE: For this method to work, the elements must be already inserted into the DOM.\n   *\n   * @param textArea The area containing the text to be copied to the clipboard.\n   * @return Whether the copy operation was successful.\n   */\n  private copyTextArea(textArea: HTMLTextAreaElement): boolean {\n    const currentFocus = document.activeElement as HTMLOrSVGElement | null;\n\n    try {\n      textArea.select();\n      textArea.setSelectionRange(0, textArea.value.length);\n\n      return document.execCommand('copy');\n    } catch {\n      return false;\n    } finally {\n      // Calling `.select()` on the `<textarea>` element may have also focused it.\n      // Change the focus back to the previously focused element.\n      currentFocus?.focus();\n    }\n  }\n\n  /**\n   * Create a temporary, hidden `<textarea>` element and set its value to the specified text.\n   *\n   * @param text The text to be inserted into the textarea.\n   * @return The temporary `<textarea>` element containing the specified text.\n   */\n  private createTextArea(text: string): HTMLTextAreaElement {\n    const docElem = document.documentElement!;\n    const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n    // Create a temporary element to hold the contents to copy.\n    const textArea = document.createElement('textarea');\n    const style = textArea.style;\n\n    // Prevent zooming on iOS.\n    style.fontSize = '12pt';\n\n    // Reset box model.\n    style.border = '0';\n    style.padding = '0';\n    style.margin = '0';\n\n    // Make the element invisible and move it out of screen horizontally.\n    style.opacity = '0';\n    style.position = 'fixed';\n    style.top = '0';\n    style[isRTL ? 'right' : 'left'] = '-999em';\n\n    textArea.setAttribute('aria-hidden', 'true');\n    textArea.setAttribute('readonly', '');\n    textArea.value = text;\n\n    return textArea;\n  }\n\n  /**\n   * Copy the specified text to the clipboard.\n   *\n   * @param text The text to be copied to the clipboard.\n   * @return Whether the copy operation was successful.\n   */\n  copyText(text: string): boolean {\n    // Create a `<textarea>` element with the specified text.\n    const textArea = this.createTextArea(text);\n\n    // Insert it into the DOM.\n    document.body.appendChild(textArea);\n\n    // Copy its contents to the clipboard.\n    const success = this.copyTextArea(textArea);\n\n    // Remove it from the DOM, so it can be garbage-collected.\n    if (textArea.parentNode) {\n      // We cannot use ChildNode.remove() because of IE11.\n      textArea.parentNode.removeChild(textArea);\n    }\n\n    return success;\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string | undefined;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string | undefined;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string | undefined) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string|undefined { return this._header; }\n  private _header: string | undefined;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums())\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), () => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums() {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    return (linenums != null) && !isNaN(linenums as number) && linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","import { ScrollDispatcher, ViewportRuler, ScrollingModule } from '@angular/cdk/scrolling';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/platform';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/common';\nexport { CdkScrollable, ScrollDispatcher, ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, Optional, SkipSelf, ElementRef, ApplicationRef, ComponentFactoryResolver, Injector, InjectionToken, Directive, EventEmitter, TemplateRef, ViewContainerRef, Input, Output, NgModule } from '@angular/core';\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Platform } from '@angular/cdk/platform';\nimport { Subject, Subscription, merge } from 'rxjs';\nimport { take, takeUntil, takeWhile } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nclass BlockScrollStrategy {\n    constructor(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach() { }\n    /** Blocks page-level scroll while the attached overlay is open. */\n    enable() {\n        if (this._canBeEnabled()) {\n            const root = this._document.documentElement;\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    }\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    disable() {\n        if (this._isEnabled) {\n            const html = this._document.documentElement;\n            const body = this._document.body;\n            const htmlStyle = html.style;\n            const bodyStyle = body.style;\n            const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            const previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    }\n    _canBeEnabled() {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        const html = this._document.documentElement;\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        const body = this._document.body;\n        const viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(`Scroll strategy has already been attached.`);\n}\n\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nclass CloseScrollStrategy {\n    constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /** Detaches the overlay ref and disables the scroll strategy. */\n        this._detach = () => {\n            this.disable();\n            if (this._overlayRef.hasAttached()) {\n                this._ngZone.run(() => this._overlayRef.detach());\n            }\n        };\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables the closing of the attached overlay on scroll. */\n    enable() {\n        if (this._scrollSubscription) {\n            return;\n        }\n        const stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe(() => {\n                const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {\n                    this._detach();\n                }\n                else {\n                    this._overlayRef.updatePosition();\n                }\n            });\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    }\n    /** Disables the closing the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Scroll strategy that doesn't do anything. */\nclass NoopScrollStrategy {\n    /** Does nothing, as this scroll strategy is a no-op. */\n    enable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    disable() { }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    attach() { }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is scrolled out of view\n * @docs-private\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some(containerBounds => {\n        const outsideAbove = element.bottom < containerBounds.top;\n        const outsideBelow = element.top > containerBounds.bottom;\n        const outsideLeft = element.right < containerBounds.left;\n        const outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    });\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * @param element Dimensions of the element (from getBoundingClientRect)\n * @param scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @returns Whether the element is clipped\n * @docs-private\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some(scrollContainerRect => {\n        const clippedAbove = element.top < scrollContainerRect.top;\n        const clippedBelow = element.bottom > scrollContainerRect.bottom;\n        const clippedLeft = element.left < scrollContainerRect.left;\n        const clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nclass RepositionScrollStrategy {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    }\n    /** Enables repositioning of the attached overlay on scroll. */\n    enable() {\n        if (!this._scrollSubscription) {\n            const throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {\n                this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (this._config && this._config.autoClose) {\n                    const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();\n                    const { width, height } = this._viewportRuler.getViewportSize();\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    const parentRects = [{ width, height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        this.disable();\n                        this._ngZone.run(() => this._overlayRef.detach());\n                    }\n                }\n            });\n        }\n    }\n    /** Disables repositioning of the attached overlay on scroll. */\n    disable() {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    }\n    detach() {\n        this.disable();\n        this._overlayRef = null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nclass ScrollStrategyOptions {\n    constructor(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /** Do nothing on scroll. */\n        this.noop = () => new NoopScrollStrategy();\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (config) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config);\n        /** Block scrolling. */\n        this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (config) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config);\n        this._document = document;\n    }\n}\nScrollStrategyOptions.ɵfac = function ScrollStrategyOptions_Factory(t) { return new (t || ScrollStrategyOptions)(ɵngcc0.ɵɵinject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nScrollStrategyOptions.ɵprov = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\nScrollStrategyOptions.ctorParameters = () => [\n    { type: ScrollDispatcher },\n    { type: ViewportRuler },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ScrollStrategyOptions, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Initial configuration used when creating an overlay. */\nclass OverlayConfig {\n    constructor(config) {\n        /** Strategy to be used when handling scroll events while the overlay is open. */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /** Custom class to add to the overlay pane. */\n        this.panelClass = '';\n        /** Whether the overlay has a backdrop. */\n        this.hasBackdrop = false;\n        /** Custom class to add to the backdrop */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n            // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n            // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n            const configKeys = Object.keys(config);\n            for (const key of configKeys) {\n                if (config[key] !== undefined) {\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\n                    // exact type with the same exact key, meaning that the value type must be identical.\n                    // So we use `any` to work around this.\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** The points of the origin element and the overlay element to connect. */\nclass ConnectionPositionPair {\n    constructor(origin, overlay, \n    /** Offset along the X axis. */\n    offsetX, \n    /** Offset along the Y axis. */\n    offsetY, \n    /** Class(es) to be applied to the panel while this position is active. */\n    panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n}\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n *  @docs-private\n */\nclass ScrollingVisibility {\n}\n/** The change event emitted by the strategy when a fallback position is used. */\nclass ConnectedOverlayPositionChange {\n    constructor(\n    /** The position used as a result of this change. */\n    connectionPair, \n    /** @docs-private */\n    scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n}\nConnectedOverlayPositionChange.ctorParameters = () => [\n    { type: ConnectionPositionPair },\n    { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n];\n/**\n * Validates whether a vertical position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"top\", \"bottom\" or \"center\".`);\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * @param property Name of the property being validated.\n * @param value Value of the property being validated.\n * @docs-private\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(`ConnectedPosition: Invalid ${property} \"${value}\". ` +\n            `Expected \"start\", \"end\" or \"center\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass BaseOverlayDispatcher {\n    constructor(document) {\n        /** Currently attached overlays in the order they were attached. */\n        this._attachedOverlays = [];\n        this._document = document;\n    }\n    ngOnDestroy() {\n        this.detach();\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        this._attachedOverlays.push(overlayRef);\n    }\n    /** Remove an overlay from the list of attached overlay refs. */\n    remove(overlayRef) {\n        const index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this.detach();\n        }\n    }\n}\nBaseOverlayDispatcher.ɵfac = function BaseOverlayDispatcher_Factory(t) { return new (t || BaseOverlayDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nBaseOverlayDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function BaseOverlayDispatcher_Factory() { return new BaseOverlayDispatcher(ɵɵinject(DOCUMENT)); }, token: BaseOverlayDispatcher, providedIn: \"root\" });\nBaseOverlayDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BaseOverlayDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayKeyboardDispatcher extends BaseOverlayDispatcher {\n    constructor(document) {\n        super(document);\n        /** Keyboard event listener that will be attached to the body. */\n        this._keydownListener = (event) => {\n            const overlays = this._attachedOverlays;\n            for (let i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEvents.observers.length > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener);\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener);\n            this._isAttached = false;\n        }\n    }\n}\nOverlayKeyboardDispatcher.ɵfac = function OverlayKeyboardDispatcher_Factory(t) { return new (t || OverlayKeyboardDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT)); };\nOverlayKeyboardDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\nOverlayKeyboardDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayKeyboardDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Service for dispatching mouse click events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nclass OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {\n    constructor(document, _platform) {\n        super(document);\n        this._platform = _platform;\n        this._cursorStyleIsSet = false;\n        /** Click event listener that will be attached to the body propagate phase. */\n        this._clickListener = (event) => {\n            // Get the target through the `composedPath` if possible to account for shadow DOM.\n            const target = event.composedPath ? event.composedPath()[0] : event.target;\n            // We copy the array because the original may be modified asynchronously if the\n            // outsidePointerEvents listener decides to detach overlays resulting in index errors inside\n            // the for loop.\n            const overlays = this._attachedOverlays.slice();\n            // Dispatch the mouse event to the top overlay which has subscribers to its mouse events.\n            // We want to target all overlays for which the click could be considered as outside click.\n            // As soon as we reach an overlay for which the click is not outside click we break off\n            // the loop.\n            for (let i = overlays.length - 1; i > -1; i--) {\n                const overlayRef = overlays[i];\n                if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {\n                    continue;\n                }\n                // If it's a click inside the overlay, just break - we should do nothing\n                // If it's an outside click dispatch the mouse event, and proceed with the next overlay\n                if (overlayRef.overlayElement.contains(target)) {\n                    break;\n                }\n                overlayRef._outsidePointerEvents.next(event);\n            }\n        };\n    }\n    /** Add a new overlay to the list of attached overlay refs. */\n    add(overlayRef) {\n        super.add(overlayRef);\n        // tslint:disable: max-line-length\n        // Safari on iOS does not generate click events for non-interactive\n        // elements. However, we want to receive a click for any element outside\n        // the overlay. We can force a \"clickable\" state by setting\n        // `cursor: pointer` on the document body.\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event#Safari_Mobile\n        // and https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\n        // tslint:enable: max-line-length\n        if (!this._isAttached) {\n            this._document.body.addEventListener('click', this._clickListener, true);\n            this._document.body.addEventListener('contextmenu', this._clickListener, true);\n            // click event is not fired on iOS. To make element \"clickable\" we are\n            // setting the cursor to pointer\n            if (this._platform.IOS && !this._cursorStyleIsSet) {\n                this._cursorOriginalValue = this._document.body.style.cursor;\n                this._document.body.style.cursor = 'pointer';\n                this._cursorStyleIsSet = true;\n            }\n            this._isAttached = true;\n        }\n    }\n    /** Detaches the global keyboard event listener. */\n    detach() {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('click', this._clickListener, true);\n            this._document.body.removeEventListener('contextmenu', this._clickListener, true);\n            if (this._platform.IOS && this._cursorStyleIsSet) {\n                this._document.body.style.cursor = this._cursorOriginalValue;\n                this._cursorStyleIsSet = false;\n            }\n            this._isAttached = false;\n        }\n    }\n}\nOverlayOutsideClickDispatcher.ɵfac = function OverlayOutsideClickDispatcher_Factory(t) { return new (t || OverlayOutsideClickDispatcher)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayOutsideClickDispatcher.ɵprov = ɵɵdefineInjectable({ factory: function OverlayOutsideClickDispatcher_Factory() { return new OverlayOutsideClickDispatcher(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayOutsideClickDispatcher, providedIn: \"root\" });\nOverlayOutsideClickDispatcher.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayOutsideClickDispatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Whether we're in a testing environment.\n * TODO(crisbeto): remove this once we have an overlay testing module.\n */\nconst isTestEnvironment = typeof window !== 'undefined' && !!window &&\n    !!(window.__karma__ || window.jasmine);\n/** Container inside which all overlays will render. */\nclass OverlayContainer {\n    constructor(document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    _platform) {\n        this._platform = _platform;\n        this._document = document;\n    }\n    ngOnDestroy() {\n        const container = this._containerElement;\n        if (container && container.parentNode) {\n            container.parentNode.removeChild(container);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    _createContainer() {\n        // @breaking-change 10.0.0 Remove null check for `_platform`.\n        const isBrowser = this._platform ? this._platform.isBrowser : typeof window !== 'undefined';\n        const containerClass = 'cdk-overlay-container';\n        if (isBrowser || isTestEnvironment) {\n            const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform=\"server\"], ` +\n                `.${containerClass}[platform=\"test\"]`);\n            // Remove any old containers from the opposite platform.\n            // This can happen when transitioning from the server to the client.\n            for (let i = 0; i < oppositePlatformContainers.length; i++) {\n                oppositePlatformContainers[i].parentNode.removeChild(oppositePlatformContainers[i]);\n            }\n        }\n        const container = this._document.createElement('div');\n        container.classList.add(containerClass);\n        // A long time ago we kept adding new overlay containers whenever a new app was instantiated,\n        // but at some point we added logic which clears the duplicate ones in order to avoid leaks.\n        // The new logic was a little too aggressive since it was breaking some legitimate use cases.\n        // To mitigate the problem we made it so that only containers from a different platform are\n        // cleared, but the side-effect was that people started depending on the overly-aggressive\n        // logic to clean up their tests for them. Until we can introduce an overlay-specific testing\n        // module which does the cleanup, we try to detect that we're in a test environment and we\n        // always clear the container. See #17006.\n        // TODO(crisbeto): remove the test environment check once we have an overlay testing module.\n        if (isTestEnvironment) {\n            container.setAttribute('platform', 'test');\n        }\n        else if (!isBrowser) {\n            container.setAttribute('platform', 'server');\n        }\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) { return new (t || OverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: OverlayContainer, providedIn: \"root\" });\nOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nconst OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        DOCUMENT // We need to use the InjectionToken somewhere to keep TS happy\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location, \n    // @breaking-change 9.0.0 `_mouseClickDispatcher` parameter to be made required.\n    _outsideClickDispatcher) {\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._backdropClickHandler = (event) => this._backdropClick.next(event);\n        /** Stream of keydown events dispatched to this overlay. */\n        this._keydownEvents = new Subject();\n        /** Stream of mouse outside events dispatched to this overlay. */\n        this._outsidePointerEvents = new Subject();\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    /** The overlay's HTML element */\n    get overlayElement() {\n        return this._pane;\n    }\n    /** The overlay's backdrop HTML element. */\n    get backdropElement() {\n        return this._backdropElement;\n    }\n    /**\n     * Wrapper around the panel element. Can be used for advanced\n     * positioning where a wrapper with specific styling is\n     * required around the overlay pane.\n     */\n    get hostElement() {\n        return this._host;\n    }\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    attach(portal) {\n        let attachResult = this._portalOutlet.attach(portal);\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .pipe(take(1))\n            .subscribe(() => {\n            // The overlay could've been detached before the zone has stabilized.\n            if (this.hasAttached()) {\n                this.updatePosition();\n            }\n        });\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe(() => this.dispose());\n        }\n        // @breaking-change 9.0.0 remove the null check for `_mouseClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.add(this);\n        }\n        return attachResult;\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    detach() {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        const detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in the DOM can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        // @breaking-change 9.0.0 remove the null check for `_outsideClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.remove(this);\n        }\n        return detachmentResult;\n    }\n    /** Cleans up the overlay from the DOM. */\n    dispose() {\n        const isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        this._outsidePointerEvents.complete();\n        // @breaking-change 9.0.0 remove the null check for `_outsideClickDispatcher`\n        if (this._outsideClickDispatcher) {\n            this._outsideClickDispatcher.remove(this);\n        }\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = null;\n        }\n        this._previousHostParent = this._pane = null;\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    }\n    /** Whether the overlay has attached content. */\n    hasAttached() {\n        return this._portalOutlet.hasAttached();\n    }\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    backdropClick() {\n        return this._backdropClick;\n    }\n    /** Gets an observable that emits when the overlay has been attached. */\n    attachments() {\n        return this._attachments;\n    }\n    /** Gets an observable that emits when the overlay has been detached. */\n    detachments() {\n        return this._detachments;\n    }\n    /** Gets an observable of keydown events targeted to this overlay. */\n    keydownEvents() {\n        return this._keydownEvents;\n    }\n    /** Gets an observable of pointer events targeted outside this overlay. */\n    outsidePointerEvents() {\n        return this._outsidePointerEvents;\n    }\n    /** Gets the current overlay configuration, which is immutable. */\n    getConfig() {\n        return this._config;\n    }\n    /** Updates the position of the overlay based on the position strategy. */\n    updatePosition() {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    }\n    /** Switches to a new position strategy and updates the overlay position. */\n    updatePositionStrategy(strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    }\n    /** Update the size properties of the overlay. */\n    updateSize(sizeConfig) {\n        this._config = Object.assign(Object.assign({}, this._config), sizeConfig);\n        this._updateElementSize();\n    }\n    /** Sets the LTR/RTL direction for the overlay. */\n    setDirection(dir) {\n        this._config = Object.assign(Object.assign({}, this._config), { direction: dir });\n        this._updateElementDirection();\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    }\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    getDirection() {\n        const direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    }\n    /** Switches to a new scroll strategy. */\n    updateScrollStrategy(strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    }\n    /** Updates the text direction of the overlay panel. */\n    _updateElementDirection() {\n        this._host.setAttribute('dir', this.getDirection());\n    }\n    /** Updates the size of the overlay element based on the overlay config. */\n    _updateElementSize() {\n        if (!this._pane) {\n            return;\n        }\n        const style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    }\n    /** Toggles the pointer events for the overlay pane element. */\n    _togglePointerEvents(enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    }\n    /** Attaches a backdrop for this overlay. */\n    _attachBackdrop() {\n        const showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        this._host.parentElement.insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    if (this._backdropElement) {\n                        this._backdropElement.classList.add(showingClass);\n                    }\n                });\n            });\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    }\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    _updateStackingOrder() {\n        if (this._host.nextSibling) {\n            this._host.parentNode.appendChild(this._host);\n        }\n    }\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    detachBackdrop() {\n        let backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        let timeoutId;\n        let finishDetach = () => {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach) {\n                backdropToDetach.removeEventListener('click', this._backdropClickHandler);\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\n                if (backdropToDetach.parentNode) {\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\n                }\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (this._backdropElement == backdropToDetach) {\n                this._backdropElement = null;\n            }\n            if (this._config.backdropClass) {\n                this._toggleClasses(backdropToDetach, this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        };\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular(() => {\n            backdropToDetach.addEventListener('transitionend', finishDetach);\n        });\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular(() => setTimeout(finishDetach, 500));\n    }\n    /** Toggles a single CSS class or an array of classes on an element. */\n    _toggleClasses(element, cssClasses, isAdd) {\n        const classList = element.classList;\n        coerceArray(cssClasses).forEach(cssClass => {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            // Also trying to add an empty string to a DOMTokenList will throw.\n            if (cssClass) {\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n            }\n        });\n    }\n    /** Detaches the overlay content next time the zone stabilizes. */\n    _detachContentWhenStable() {\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular(() => {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            const subscription = this._ngZone.onStable\n                .pipe(takeUntil(merge(this._attachments, this._detachments)))\n                .subscribe(() => {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!this._pane || !this._host || this._pane.children.length === 0) {\n                    if (this._pane && this._config.panelClass) {\n                        this._toggleClasses(this._pane, this._config.panelClass, false);\n                    }\n                    if (this._host && this._host.parentElement) {\n                        this._previousHostParent = this._host.parentElement;\n                        this._previousHostParent.removeChild(this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            });\n        });\n    }\n    /** Disposes of a scroll strategy. */\n    _disposeScrollStrategy() {\n        const scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/** Class to be added to the overlay bounding box. */\nconst boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/** Regex used to split a string on its CSS units. */\nconst cssUnitPattern = /([A-Za-z%]+)$/;\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nclass FlexibleConnectedPositionStrategy {\n    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /** Last size used for the bounding box. Used to avoid resizing the overlay after open. */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /** Whether the overlay was pushed in a previous positioning. */\n        this._isPushed = false;\n        /** Whether the overlay can be pushed on-screen on the initial open. */\n        this._canPush = true;\n        /** Whether the overlay can grow via flexible width/height after the initial open. */\n        this._growAfterOpen = false;\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        this._hasFlexibleDimensions = true;\n        /** Whether the overlay position is locked. */\n        this._positionLocked = false;\n        /** Amount of space that must be maintained between the overlay and the edge of the viewport. */\n        this._viewportMargin = 0;\n        /** The Scrollable containers used to check scrollable view properties on position change. */\n        this._scrollables = [];\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        /** Subject that emits whenever the position changes. */\n        this._positionChanges = new Subject();\n        /** Subscription to viewport size changes. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Default offset for the overlay along the x axis. */\n        this._offsetX = 0;\n        /** Default offset for the overlay along the y axis. */\n        this._offsetY = 0;\n        /** Keeps track of the CSS classes that the position strategy has applied on the overlay panel. */\n        this._appliedPanelClasses = [];\n        /** Observable sequence of position changes. */\n        this.positionChanges = this._positionChanges;\n        this.setOrigin(connectedTo);\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attaches this position strategy to an overlay. */\n    attach(overlayRef) {\n        if (this._overlayRef && overlayRef !== this._overlayRef &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe(() => {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            this._isInitialRender = true;\n            this.apply();\n        });\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    apply() {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        const originRect = this._originRect;\n        const overlayRect = this._overlayRect;\n        const viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        const flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        let fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (let pos of this._preferredPositions) {\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            let originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit, overlayPoint, originPoint, position: pos, overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            let bestFit = null;\n            let bestScore = -1;\n            for (const fit of flexibleFits) {\n                const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition(bestFit.position, bestFit.origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition(fallback.position, fallback.originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition(fallback.position, fallback.originPoint);\n    }\n    detach() {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    }\n    /** Cleanup after the element gets destroyed. */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, {\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            });\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = null;\n        this._isDisposed = true;\n    }\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    reapplyLastPosition() {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            const lastPosition = this._lastPosition || this._preferredPositions[0];\n            const originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._scrollables = scrollables;\n        return this;\n    }\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf(this._lastPosition) === -1) {\n            this._lastPosition = null;\n        }\n        this._validatePositions();\n        return this;\n    }\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    withViewportMargin(margin) {\n        this._viewportMargin = margin;\n        return this;\n    }\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    withFlexibleDimensions(flexibleDimensions = true) {\n        this._hasFlexibleDimensions = flexibleDimensions;\n        return this;\n    }\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    withGrowAfterOpen(growAfterOpen = true) {\n        this._growAfterOpen = growAfterOpen;\n        return this;\n    }\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    withPush(canPush = true) {\n        this._canPush = canPush;\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked = true) {\n        this._positionLocked = isLocked;\n        return this;\n    }\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    setOrigin(origin) {\n        this._origin = origin;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    withDefaultOffsetX(offset) {\n        this._offsetX = offset;\n        return this;\n    }\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    withDefaultOffsetY(offset) {\n        this._offsetY = offset;\n        return this;\n    }\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    withTransformOriginOn(selector) {\n        this._transformOriginSelector = selector;\n        return this;\n    }\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    _getOriginPoint(originRect, pos) {\n        let x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            const startX = this._isRtl() ? originRect.right : originRect.left;\n            const endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        let y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x, y };\n    }\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    _getOverlayPoint(originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        let overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        let overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    }\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    _getOverlayFit(point, overlay, viewport, position) {\n        let { x, y } = point;\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        let leftOverflow = 0 - x;\n        let rightOverflow = (x + overlay.width) - viewport.width;\n        let topOverflow = 0 - y;\n        let bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        let visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    }\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    _canFitWithFlexibleDimensions(fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            const availableHeight = viewport.bottom - point.y;\n            const availableWidth = viewport.right - point.x;\n            const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);\n            const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);\n            const verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            const horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n        return false;\n    }\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    _pushOverlayOnScreen(start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        const viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);\n        const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);\n        const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        let pushX = 0;\n        let pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    }\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    _applyPosition(position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChanges.observers.length) {\n            const scrollableViewProperties = this._getScrollVisibility();\n            const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    }\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    _setTransformOrigin(position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);\n        let xOrigin;\n        let yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (let i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;\n        }\n    }\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    _calculateBoundingBoxRect(origin, position) {\n        const viewport = this._viewportRect;\n        const isRtl = this._isRtl();\n        let height, top, bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            const previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        const isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        const isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        let width, left, right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.width - origin.x + this._viewportMargin;\n            width = origin.x - this._viewportMargin;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            const previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: top, left: left, bottom: bottom, right: right, width, height };\n    }\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    _setBoundingBoxStyles(origin, position) {\n        const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        const styles = {};\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            const maxHeight = this._overlayRef.getConfig().maxHeight;\n            const maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles(this._boundingBox.style, styles);\n    }\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    _resetBoundingBoxStyles() {\n        extendStyles(this._boundingBox.style, {\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        });\n    }\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    _resetOverlayElementStyles() {\n        extendStyles(this._pane.style, {\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        });\n    }\n    /** Sets positioning styles to the overlay element. */\n    _setOverlayElementStyles(originPoint, position) {\n        const styles = {};\n        const hasExactPosition = this._hasExactPosition();\n        const hasFlexibleDimensions = this._hasFlexibleDimensions;\n        const config = this._overlayRef.getConfig();\n        if (hasExactPosition) {\n            const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        let transformString = '';\n        let offsetX = this._getOffset(position, 'x');\n        let offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += `translateX(${offsetX}px) `;\n        }\n        if (offsetY) {\n            transformString += `translateY(${offsetY}px)`;\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        // Note that this doesn't apply when we have an exact position, in which case we do want to\n        // apply them because they'll be cleared from the bounding box.\n        if (config.maxHeight) {\n            if (hasExactPosition) {\n                styles.maxHeight = coerceCssPixelValue(config.maxHeight);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxHeight = '';\n            }\n        }\n        if (config.maxWidth) {\n            if (hasExactPosition) {\n                styles.maxWidth = coerceCssPixelValue(config.maxWidth);\n            }\n            else if (hasFlexibleDimensions) {\n                styles.maxWidth = '';\n            }\n        }\n        extendStyles(this._pane.style, styles);\n    }\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayY(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        let styles = { top: '', bottom: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        let virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            const documentHeight = this._document.documentElement.clientHeight;\n            styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    }\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    _getExactOverlayX(position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        let styles = { left: '', right: '' };\n        let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        let horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            const documentWidth = this._document.documentElement.clientWidth;\n            styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    }\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    _getScrollVisibility() {\n        // Note: needs fresh rects since the position could've changed.\n        const originBounds = this._getOriginRect();\n        const overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        const scrollContainerBounds = this._scrollables.map(scrollable => {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        });\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    }\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\n    _subtractOverflows(length, ...overflows) {\n        return overflows.reduce((currentValue, currentOverflow) => {\n            return currentValue - Math.max(currentOverflow, 0);\n        }, length);\n    }\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    _getNarrowedViewportRect() {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        const width = this._document.documentElement.clientWidth;\n        const height = this._document.documentElement.clientHeight;\n        const scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    }\n    /** Whether the we're dealing with an RTL context */\n    _isRtl() {\n        return this._overlayRef.getDirection() === 'rtl';\n    }\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    _hasExactPosition() {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    }\n    /** Retrieves the offset of a position along the x or y axis. */\n    _getOffset(position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    }\n    /** Validates that the current position match the expected values. */\n    _validatePositions() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!this._preferredPositions.length) {\n                throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n            }\n            // TODO(crisbeto): remove these once Angular's template type\n            // checking is advanced enough to catch these cases.\n            this._preferredPositions.forEach(pair => {\n                validateHorizontalPosition('originX', pair.originX);\n                validateVerticalPosition('originY', pair.originY);\n                validateHorizontalPosition('overlayX', pair.overlayX);\n                validateVerticalPosition('overlayY', pair.overlayY);\n            });\n        }\n    }\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    _addPanelClasses(cssClasses) {\n        if (this._pane) {\n            coerceArray(cssClasses).forEach(cssClass => {\n                if (cssClass !== '' && this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    this._appliedPanelClasses.push(cssClass);\n                    this._pane.classList.add(cssClass);\n                }\n            });\n        }\n    }\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    _clearPanelClasses() {\n        if (this._pane) {\n            this._appliedPanelClasses.forEach(cssClass => {\n                this._pane.classList.remove(cssClass);\n            });\n            this._appliedPanelClasses = [];\n        }\n    }\n    /** Returns the ClientRect of the current origin. */\n    _getOriginRect() {\n        const origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        // Check for Element so SVG elements are also supported.\n        if (origin instanceof Element) {\n            return origin.getBoundingClientRect();\n        }\n        const width = origin.width || 0;\n        const height = origin.height || 0;\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y + height,\n            left: origin.x,\n            right: origin.x + width,\n            height,\n            width\n        };\n    }\n}\n/** Shallow-extends a stylesheet object with another stylesheet object. */\nfunction extendStyles(destination, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            destination[key] = source[key];\n        }\n    }\n    return destination;\n}\n/**\n * Extracts the pixel value as a number from a value, if it's a number\n * or a CSS pixel string (e.g. `1337px`). Otherwise returns null.\n */\nfunction getPixelValue(input) {\n    if (typeof input !== 'number' && input != null) {\n        const [value, units] = input.split(cssUnitPattern);\n        return (!units || units === 'px') ? parseFloat(value) : null;\n    }\n    return input || null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * @breaking-change 8.0.0\n */\nclass ConnectedPositionStrategy {\n    constructor(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n        this.onPositionChange = this._positionStrategy.positionChanges;\n    }\n    /** Ordered list of preferred positions, from most to least desirable. */\n    get positions() {\n        return this._preferredPositions;\n    }\n    /** Attach this position strategy to an overlay. */\n    attach(overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    }\n    /** Disposes all resources used by the position strategy. */\n    dispose() {\n        this._positionStrategy.dispose();\n    }\n    /** @docs-private */\n    detach() {\n        this._positionStrategy.detach();\n    }\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    apply() {\n        this._positionStrategy.apply();\n    }\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    recalculateLastPosition() {\n        this._positionStrategy.reapplyLastPosition();\n    }\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    withScrollableContainers(scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    }\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    withFallbackPosition(originPos, overlayPos, offsetX, offsetY) {\n        const position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        this._preferredPositions.push(position);\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    withDirection(dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if (this._overlayRef) {\n            this._overlayRef.setDirection(dir);\n        }\n        else {\n            this._direction = dir;\n        }\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    withOffsetX(offset) {\n        this._positionStrategy.withDefaultOffsetX(offset);\n        return this;\n    }\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    withOffsetY(offset) {\n        this._positionStrategy.withDefaultOffsetY(offset);\n        return this;\n    }\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    withLockedPosition(isLocked) {\n        this._positionStrategy.withLockedPosition(isLocked);\n        return this;\n    }\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    withPositions(positions) {\n        this._preferredPositions = positions.slice();\n        this._positionStrategy.withPositions(this._preferredPositions);\n        return this;\n    }\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    setOrigin(origin) {\n        this._positionStrategy.setOrigin(origin);\n        return this;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Class to be added to the overlay pane wrapper. */\nconst wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nclass GlobalPositionStrategy {\n    constructor() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    attach(overlayRef) {\n        const config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    }\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    top(value = '') {\n        this._bottomOffset = '';\n        this._topOffset = value;\n        this._alignItems = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    left(value = '') {\n        this._rightOffset = '';\n        this._leftOffset = value;\n        this._justifyContent = 'flex-start';\n        return this;\n    }\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    bottom(value = '') {\n        this._topOffset = '';\n        this._bottomOffset = value;\n        this._alignItems = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    right(value = '') {\n        this._leftOffset = '';\n        this._rightOffset = value;\n        this._justifyContent = 'flex-end';\n        return this;\n    }\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    width(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ width: value });\n        }\n        else {\n            this._width = value;\n        }\n        return this;\n    }\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    height(value = '') {\n        if (this._overlayRef) {\n            this._overlayRef.updateSize({ height: value });\n        }\n        else {\n            this._height = value;\n        }\n        return this;\n    }\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    centerHorizontally(offset = '') {\n        this.left(offset);\n        this._justifyContent = 'center';\n        return this;\n    }\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    centerVertically(offset = '') {\n        this.top(offset);\n        this._alignItems = 'center';\n        return this;\n    }\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    apply() {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parentStyles = this._overlayRef.hostElement.style;\n        const config = this._overlayRef.getConfig();\n        const { width, height, maxWidth, maxHeight } = config;\n        const shouldBeFlushHorizontally = (width === '100%' || width === '100vw') &&\n            (!maxWidth || maxWidth === '100%' || maxWidth === '100vw');\n        const shouldBeFlushVertically = (height === '100%' || height === '100vh') &&\n            (!maxHeight || maxHeight === '100%' || maxHeight === '100vh');\n        styles.position = this._cssPosition;\n        styles.marginLeft = shouldBeFlushHorizontally ? '0' : this._leftOffset;\n        styles.marginTop = shouldBeFlushVertically ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (shouldBeFlushHorizontally) {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = shouldBeFlushVertically ? 'flex-start' : this._alignItems;\n    }\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    dispose() {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        const styles = this._overlayRef.overlayElement.style;\n        const parent = this._overlayRef.hostElement;\n        const parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = null;\n        this._isDisposed = true;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Builder for overlay position strategy. */\nclass OverlayPositionBuilder {\n    constructor(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    global() {\n        return new GlobalPositionStrategy();\n    }\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    connectedTo(elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    flexibleConnectedTo(origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    }\n}\nOverlayPositionBuilder.ɵfac = function OverlayPositionBuilder_Factory(t) { return new (t || OverlayPositionBuilder)(ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform), ɵngcc0.ɵɵinject(OverlayContainer)); };\nOverlayPositionBuilder.ɵprov = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\nOverlayPositionBuilder.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform },\n    { type: OverlayContainer }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayPositionBuilder, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }, { type: OverlayContainer }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Next overlay unique ID. */\nlet nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because of the ComponentFactoryResolver\n// which needs to be different depending on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(\n    /** Scrolling strategies that can be used when creating an overlay. */\n    scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, \n    // @breaking-change 8.0.0 `_location` parameter to be made required.\n    _location, \n    // @breaking-change 9.0.0 `_outsideClickDispatcher` parameter to be made required.\n    _outsideClickDispatcher) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n        this._outsideClickDispatcher = _outsideClickDispatcher;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    create(config) {\n        const host = this._createHostElement();\n        const pane = this._createPaneElement(host);\n        const portalOutlet = this._createPortalOutlet(pane);\n        const overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher);\n    }\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    position() {\n        return this._positionBuilder;\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(host) {\n        const pane = this._document.createElement('div');\n        pane.id = `cdk-overlay-${nextUniqueId++}`;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    }\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    _createHostElement() {\n        const host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    }\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    _createPortalOutlet(pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);\n    }\n}\nOverlay.ɵfac = function Overlay_Factory(t) { return new (t || Overlay)(ɵngcc0.ɵɵinject(ScrollStrategyOptions), ɵngcc0.ɵɵinject(OverlayContainer), ɵngcc0.ɵɵinject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵinject(OverlayPositionBuilder), ɵngcc0.ɵɵinject(OverlayKeyboardDispatcher), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc3.Directionality), ɵngcc0.ɵɵinject(ɵngcc4.Location), ɵngcc0.ɵɵinject(OverlayOutsideClickDispatcher)); };\nOverlay.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Overlay, factory: Overlay.ɵfac });\nOverlay.ctorParameters = () => [\n    { type: ScrollStrategyOptions },\n    { type: OverlayContainer },\n    { type: ComponentFactoryResolver },\n    { type: OverlayPositionBuilder },\n    { type: OverlayKeyboardDispatcher },\n    { type: Injector },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Directionality },\n    { type: Location },\n    { type: OverlayOutsideClickDispatcher }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Overlay, [{\n        type: Injectable\n    }], function () { return [{ type: ScrollStrategyOptions }, { type: OverlayContainer }, { type: ɵngcc0.ComponentFactoryResolver }, { type: OverlayPositionBuilder }, { type: OverlayKeyboardDispatcher }, { type: ɵngcc0.Injector }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc3.Directionality }, { type: ɵngcc4.Location }, { type: OverlayOutsideClickDispatcher }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default set of positions for the overlay. Follows the behavior of a dropdown. */\nconst defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/** Injection token that determines the scroll handling while the connected overlay is open. */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/** @docs-private @deprecated @breaking-change 8.0.0 */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (config) => overlay.scrollStrategies.reposition(config);\n}\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nclass CdkOverlayOrigin {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\nCdkOverlayOrigin.ɵfac = function CdkOverlayOrigin_Factory(t) { return new (t || CdkOverlayOrigin)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nCdkOverlayOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkOverlayOrigin, selectors: [[\"\", \"cdk-overlay-origin\", \"\"], [\"\", \"overlay-origin\", \"\"], [\"\", \"cdkOverlayOrigin\", \"\"]], exportAs: [\"cdkOverlayOrigin\"] });\nCdkOverlayOrigin.ctorParameters = () => [\n    { type: ElementRef }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkOverlayOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                exportAs: 'cdkOverlayOrigin'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nclass CdkConnectedOverlay {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        this._attachSubscription = Subscription.EMPTY;\n        this._detachSubscription = Subscription.EMPTY;\n        this._positionSubscription = Subscription.EMPTY;\n        /** Margin between the overlay and the viewport edges. */\n        this.viewportMargin = 0;\n        /** Whether the overlay is open. */\n        this.open = false;\n        /** Event emitted when the backdrop is clicked. */\n        this.backdropClick = new EventEmitter();\n        /** Event emitted when the position has changed. */\n        this.positionChange = new EventEmitter();\n        /** Event emitted when the overlay has been attached. */\n        this.attach = new EventEmitter();\n        /** Event emitted when the overlay has been detached. */\n        this.detach = new EventEmitter();\n        /** Emits when there are keyboard events that are targeted at the overlay. */\n        this.overlayKeydown = new EventEmitter();\n        /** Emits when there are mouse outside click events that are targeted at the overlay. */\n        this.overlayOutsideClick = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    /** The offset in pixels for the overlay connection point on the x-axis */\n    get offsetX() { return this._offsetX; }\n    set offsetX(offsetX) {\n        this._offsetX = offsetX;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** The offset in pixels for the overlay connection point on the y-axis */\n    get offsetY() { return this._offsetY; }\n    set offsetY(offsetY) {\n        this._offsetY = offsetY;\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n        }\n    }\n    /** Whether or not the overlay should attach a backdrop. */\n    get hasBackdrop() { return this._hasBackdrop; }\n    set hasBackdrop(value) { this._hasBackdrop = coerceBooleanProperty(value); }\n    /** Whether or not the overlay should be locked when scrolling. */\n    get lockPosition() { return this._lockPosition; }\n    set lockPosition(value) { this._lockPosition = coerceBooleanProperty(value); }\n    /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n    get flexibleDimensions() { return this._flexibleDimensions; }\n    set flexibleDimensions(value) {\n        this._flexibleDimensions = coerceBooleanProperty(value);\n    }\n    /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n    get growAfterOpen() { return this._growAfterOpen; }\n    set growAfterOpen(value) { this._growAfterOpen = coerceBooleanProperty(value); }\n    /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    get push() { return this._push; }\n    set push(value) { this._push = coerceBooleanProperty(value); }\n    /** The associated overlay reference. */\n    get overlayRef() {\n        return this._overlayRef;\n    }\n    /** The element's layout direction. */\n    get dir() {\n        return this._dir ? this._dir.value : 'ltr';\n    }\n    ngOnDestroy() {\n        this._attachSubscription.unsubscribe();\n        this._detachSubscription.unsubscribe();\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n    }\n    ngOnChanges(changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    }\n    /** Creates an overlay */\n    _createOverlay() {\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());\n        this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());\n        this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());\n        overlayRef.keydownEvents().subscribe((event) => {\n            this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                this._detachOverlay();\n            }\n        });\n        this._overlayRef.outsidePointerEvents().subscribe((event) => {\n            this.overlayOutsideClick.next(event);\n        });\n    }\n    /** Builds the overlay config based on the directive's inputs */\n    _buildConfig() {\n        const positionStrategy = this._position =\n            this.positionStrategy || this._createPositionStrategy();\n        const overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    }\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    _updatePositionStrategy(positionStrategy) {\n        const positions = this.positions.map(currentPosition => ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || this.offsetX,\n            offsetY: currentPosition.offsetY || this.offsetY,\n            panelClass: currentPosition.panelClass || undefined,\n        }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition)\n            .withTransformOriginOn(this.transformOriginSelector);\n    }\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    _createPositionStrategy() {\n        const strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        return strategy;\n    }\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    _attachOverlay() {\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe(event => {\n                this.backdropClick.emit(event);\n            });\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n        this._positionSubscription.unsubscribe();\n        // Only subscribe to `positionChanges` if requested, because putting\n        // together all the information for it can be expensive.\n        if (this.positionChange.observers.length > 0) {\n            this._positionSubscription = this._position.positionChanges\n                .pipe(takeWhile(() => this.positionChange.observers.length > 0))\n                .subscribe(position => {\n                this.positionChange.emit(position);\n                if (this.positionChange.observers.length === 0) {\n                    this._positionSubscription.unsubscribe();\n                }\n            });\n        }\n    }\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    _detachOverlay() {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n        }\n        this._backdropSubscription.unsubscribe();\n        this._positionSubscription.unsubscribe();\n    }\n}\nCdkConnectedOverlay.ɵfac = function CdkConnectedOverlay_Factory(t) { return new (t || CdkConnectedOverlay)(ɵngcc0.ɵɵdirectiveInject(Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8)); };\nCdkConnectedOverlay.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkConnectedOverlay, selectors: [[\"\", \"cdk-connected-overlay\", \"\"], [\"\", \"connected-overlay\", \"\"], [\"\", \"cdkConnectedOverlay\", \"\"]], inputs: { viewportMargin: [\"cdkConnectedOverlayViewportMargin\", \"viewportMargin\"], open: [\"cdkConnectedOverlayOpen\", \"open\"], scrollStrategy: [\"cdkConnectedOverlayScrollStrategy\", \"scrollStrategy\"], offsetX: [\"cdkConnectedOverlayOffsetX\", \"offsetX\"], offsetY: [\"cdkConnectedOverlayOffsetY\", \"offsetY\"], hasBackdrop: [\"cdkConnectedOverlayHasBackdrop\", \"hasBackdrop\"], lockPosition: [\"cdkConnectedOverlayLockPosition\", \"lockPosition\"], flexibleDimensions: [\"cdkConnectedOverlayFlexibleDimensions\", \"flexibleDimensions\"], growAfterOpen: [\"cdkConnectedOverlayGrowAfterOpen\", \"growAfterOpen\"], push: [\"cdkConnectedOverlayPush\", \"push\"], positions: [\"cdkConnectedOverlayPositions\", \"positions\"], origin: [\"cdkConnectedOverlayOrigin\", \"origin\"], positionStrategy: [\"cdkConnectedOverlayPositionStrategy\", \"positionStrategy\"], width: [\"cdkConnectedOverlayWidth\", \"width\"], height: [\"cdkConnectedOverlayHeight\", \"height\"], minWidth: [\"cdkConnectedOverlayMinWidth\", \"minWidth\"], minHeight: [\"cdkConnectedOverlayMinHeight\", \"minHeight\"], backdropClass: [\"cdkConnectedOverlayBackdropClass\", \"backdropClass\"], panelClass: [\"cdkConnectedOverlayPanelClass\", \"panelClass\"], transformOriginSelector: [\"cdkConnectedOverlayTransformOriginOn\", \"transformOriginSelector\"] }, outputs: { backdropClick: \"backdropClick\", positionChange: \"positionChange\", attach: \"attach\", detach: \"detach\", overlayKeydown: \"overlayKeydown\", overlayOutsideClick: \"overlayOutsideClick\" }, exportAs: [\"cdkConnectedOverlay\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkConnectedOverlay.ctorParameters = () => [\n    { type: Overlay },\n    { type: TemplateRef },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nCdkConnectedOverlay.propDecorators = {\n    origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n    positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n    positionStrategy: [{ type: Input, args: ['cdkConnectedOverlayPositionStrategy',] }],\n    offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n    offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n    width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n    height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n    minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n    minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n    backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n    panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n    viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n    scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n    open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n    transformOriginSelector: [{ type: Input, args: ['cdkConnectedOverlayTransformOriginOn',] }],\n    hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n    lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n    flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n    growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n    push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n    backdropClick: [{ type: Output }],\n    positionChange: [{ type: Output }],\n    attach: [{ type: Output }],\n    detach: [{ type: Output }],\n    overlayKeydown: [{ type: Output }],\n    overlayOutsideClick: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkConnectedOverlay, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                exportAs: 'cdkConnectedOverlay'\n            }]\n    }], function () { return [{ type: Overlay }, { type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { viewportMargin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayViewportMargin']\n        }], open: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOpen']\n        }], backdropClick: [{\n            type: Output\n        }], positionChange: [{\n            type: Output\n        }], attach: [{\n            type: Output\n        }], detach: [{\n            type: Output\n        }], overlayKeydown: [{\n            type: Output\n        }], overlayOutsideClick: [{\n            type: Output\n        }], scrollStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayScrollStrategy']\n        }], offsetX: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetX']\n        }], offsetY: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOffsetY']\n        }], hasBackdrop: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHasBackdrop']\n        }], lockPosition: [{\n            type: Input,\n            args: ['cdkConnectedOverlayLockPosition']\n        }], flexibleDimensions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayFlexibleDimensions']\n        }], growAfterOpen: [{\n            type: Input,\n            args: ['cdkConnectedOverlayGrowAfterOpen']\n        }], push: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPush']\n        }], positions: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositions']\n        }], origin: [{\n            type: Input,\n            args: ['cdkConnectedOverlayOrigin']\n        }], positionStrategy: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPositionStrategy']\n        }], width: [{\n            type: Input,\n            args: ['cdkConnectedOverlayWidth']\n        }], height: [{\n            type: Input,\n            args: ['cdkConnectedOverlayHeight']\n        }], minWidth: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinWidth']\n        }], minHeight: [{\n            type: Input,\n            args: ['cdkConnectedOverlayMinHeight']\n        }], backdropClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayBackdropClass']\n        }], panelClass: [{\n            type: Input,\n            args: ['cdkConnectedOverlayPanelClass']\n        }], transformOriginSelector: [{\n            type: Input,\n            args: ['cdkConnectedOverlayTransformOriginOn']\n        }] }); })();\n/** @docs-private */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass OverlayModule {\n}\nOverlayModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: OverlayModule });\nOverlayModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function OverlayModule_Factory(t) { return new (t || OverlayModule)(); }, providers: [\n        Overlay,\n        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[BidiModule, PortalModule, ScrollingModule], ScrollingModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OverlayModule, { declarations: function () { return [CdkConnectedOverlay, CdkOverlayOrigin]; }, imports: function () { return [BidiModule, PortalModule, ScrollingModule]; }, exports: function () { return [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OverlayModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, PortalModule, ScrollingModule],\n                exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                providers: [\n                    Overlay,\n                    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                ]\n            }]\n    }], null, null); })();\n/**\n * @deprecated Use `OverlayModule` instead.\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nclass FullscreenOverlayContainer extends OverlayContainer {\n    constructor(_document, \n    /**\n     * @deprecated `platform` parameter to become required.\n     * @breaking-change 10.0.0\n     */\n    platform) {\n        super(_document, platform);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    }\n    _createContainer() {\n        super._createContainer();\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());\n    }\n    _adjustParentForFullscreenChange() {\n        if (!this._containerElement) {\n            return;\n        }\n        const fullscreenElement = this.getFullscreenElement();\n        const parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    }\n    _addFullscreenChangeListener(fn) {\n        const eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    }\n    _getEventName() {\n        if (!this._fullScreenEventName) {\n            const _document = this._document;\n            if (_document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (_document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (_document.mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (_document.msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    }\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    getFullscreenElement() {\n        const _document = this._document;\n        return _document.fullscreenElement ||\n            _document.webkitFullscreenElement ||\n            _document.mozFullScreenElement ||\n            _document.msFullscreenElement ||\n            null;\n    }\n}\nFullscreenOverlayContainer.ɵfac = function FullscreenOverlayContainer_Factory(t) { return new (t || FullscreenOverlayContainer)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc2.Platform)); };\nFullscreenOverlayContainer.ɵprov = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT), ɵɵinject(Platform)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\nFullscreenOverlayContainer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FullscreenOverlayContainer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc2.Platform }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BlockScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, CloseScrollStrategy, ConnectedOverlayPositionChange, ConnectedPositionStrategy, ConnectionPositionPair, FlexibleConnectedPositionStrategy, FullscreenOverlayContainer, GlobalPositionStrategy, NoopScrollStrategy, OVERLAY_PROVIDERS, Overlay, OverlayConfig, OverlayContainer, OverlayKeyboardDispatcher, OverlayModule, OverlayOutsideClickDispatcher, OverlayPositionBuilder, OverlayRef, RepositionScrollStrategy, ScrollStrategyOptions, ScrollingVisibility, validateHorizontalPosition, validateVerticalPosition, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_a, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_b, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_c, OVERLAY_CONTAINER_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_d, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵangular_material_src_cdk_overlay_overlay_e, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵangular_material_src_cdk_overlay_overlay_f, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵangular_material_src_cdk_overlay_overlay_g, BaseOverlayDispatcher as ɵangular_material_src_cdk_overlay_overlay_h };\n\n//# sourceMappingURL=overlay.js.map","import { NgModule, ɵɵdefineInjectable, ɵɵinject, Injectable, NgZone } from '@angular/core';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { Subject, combineLatest, concat, Observable } from 'rxjs';\nimport { take, skip, debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nclass LayoutModule {\n}\nLayoutModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: LayoutModule });\nLayoutModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function LayoutModule_Factory(t) { return new (t || LayoutModule)(); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LayoutModule, [{\n        type: NgModule,\n        args: [{}]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Global registry for all dynamically-created, injected media queries. */\nconst mediaQueriesForWebkitCompatibility = new Set();\n/** Style tag that holds all of the dynamically-created media queries. */\nlet mediaQueryStyleNode;\n/** A utility for calling matchMedia queries. */\nclass MediaMatcher {\n    constructor(_platform) {\n        this._platform = _platform;\n        this._matchMedia = this._platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    matchMedia(query) {\n        if (this._platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    }\n}\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) { return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\nMediaMatcher.ɵprov = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\nMediaMatcher.ctorParameters = () => [\n    { type: Platform }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MediaMatcher, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            document.head.appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            mediaQueryStyleNode.sheet\n                .insertRule(`@media ${query} {.fx-query-test{ }}`, 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/** No-op matchMedia replacement for non-browser platforms. */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => { },\n        removeListener: () => { }\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Utility for checking the matching state of @media queries. */\nclass BreakpointObserver {\n    constructor(_mediaMatcher, _zone) {\n        this._mediaMatcher = _mediaMatcher;\n        this._zone = _zone;\n        /**  A map of all media queries currently being listened for. */\n        this._queries = new Map();\n        /** A subject for all other observables to takeUntil based on. */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    ngOnDestroy() {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    isMatched(value) {\n        const queries = splitQueries(coerceArray(value));\n        return queries.some(mediaQuery => this._registerQuery(mediaQuery).mql.matches);\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    observe(value) {\n        const queries = splitQueries(coerceArray(value));\n        const observables = queries.map(query => this._registerQuery(query).observable);\n        let stateObservable = combineLatest(observables);\n        // Emit the first state immediately, and then debounce the subsequent emissions.\n        stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));\n        return stateObservable.pipe(map(breakpointStates => {\n            const response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach(({ matches, query }) => {\n                response.matches = response.matches || matches;\n                response.breakpoints[query] = matches;\n            });\n            return response;\n        }));\n    }\n    /** Registers a specific query to be listened for. */\n    _registerQuery(query) {\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return this._queries.get(query);\n        }\n        const mql = this._mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        const queryObservable = new Observable((observer) => {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            const handler = (e) => this._zone.run(() => observer.next(e));\n            mql.addListener(handler);\n            return () => {\n                mql.removeListener(handler);\n            };\n        }).pipe(startWith(mql), map(({ matches }) => ({ query, matches })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        const output = { observable: queryObservable, mql };\n        this._queries.set(query, output);\n        return output;\n    }\n}\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) { return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nBreakpointObserver.ɵprov = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\nBreakpointObserver.ctorParameters = () => [\n    { type: MediaMatcher },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BreakpointObserver, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: MediaMatcher }, { type: ɵngcc0.NgZone }]; }, null); })();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map(query => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\nconst Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BreakpointObserver, Breakpoints, LayoutModule, MediaMatcher };\n\n//# sourceMappingURL=layout.js.map","import { Subscriber } from '../Subscriber';\nexport function skip(count) {\n    return (source) => source.lift(new SkipOperator(count));\n}\nclass SkipOperator {\n    constructor(total) {\n        this.total = total;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    }\n}\nclass SkipSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    }\n}\n//# sourceMappingURL=skip.js.map","import { OverlayModule, OverlayConfig, Overlay } from '@angular/cdk/overlay';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, TemplatePortal } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Inject, NgZone, ElementRef, ChangeDetectorRef, ViewChild, NgModule, Injector, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR, Injectable, Optional, SkipSelf } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { Subject } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/material/button';\nimport * as ɵngcc3 from '@angular/cdk/portal';\nimport * as ɵngcc4 from '@angular/cdk/overlay';\nimport * as ɵngcc5 from '@angular/cdk/a11y';\nimport * as ɵngcc6 from '@angular/cdk/layout';\n\nfunction SimpleSnackBar_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 2);\n    ɵngcc0.ɵɵlistener(\"click\", function SimpleSnackBar_div_2_Template_button_click_1_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.action(); });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.data.action);\n} }\nfunction MatSnackBarContainer_ng_template_0_Template(rf, ctx) { }\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n */\nclass MatSnackBarConfig {\n    constructor() {\n        /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n        this.duration = 0;\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** The horizontal position to place the snack bar. */\n        this.horizontalPosition = 'center';\n        /** The vertical position to place the snack bar. */\n        this.verticalPosition = 'bottom';\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Maximum amount of milliseconds that can be passed into setTimeout. */\nconst MAX_TIMEOUT = Math.pow(2, 31) - 1;\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nclass MatSnackBarRef {\n    constructor(containerInstance, _overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Subject for notifying the user that the snack bar has been dismissed. */\n        this._afterDismissed = new Subject();\n        /** Subject for notifying the user that the snack bar has opened and appeared. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the snack bar action was called. */\n        this._onAction = new Subject();\n        /** Whether the snack bar was dismissed using the action button. */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe(() => this.dismiss());\n        containerInstance._onExit.subscribe(() => this._finishDismiss());\n    }\n    /** Dismisses the snack bar. */\n    dismiss() {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    }\n    /** Marks the snackbar action clicked. */\n    dismissWithAction() {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    }\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    closeWithAction() {\n        this.dismissWithAction();\n    }\n    /** Dismisses the snack bar after some duration */\n    _dismissAfter(duration) {\n        // Note that we need to cap the duration to the maximum value for setTimeout, because\n        // it'll revert to 1 if somebody passes in something greater (e.g. `Infinity`). See #17234.\n        this._durationTimeoutId = setTimeout(() => this.dismiss(), Math.min(duration, MAX_TIMEOUT));\n    }\n    /** Marks the snackbar as opened */\n    _open() {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    }\n    /** Cleans up the DOM after closing. */\n    _finishDismiss() {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    }\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    afterDismissed() {\n        return this._afterDismissed;\n    }\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    afterOpened() {\n        return this.containerInstance._onEnter;\n    }\n    /** Gets an observable that is notified when the snack bar action is called. */\n    onAction() {\n        return this._onAction;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nclass SimpleSnackBar {\n    constructor(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    action() {\n        this.snackBarRef.dismissWithAction();\n    }\n    /** If the action button should be shown. */\n    get hasAction() {\n        return !!this.data.action;\n    }\n}\nSimpleSnackBar.ɵfac = function SimpleSnackBar_Factory(t) { return new (t || SimpleSnackBar)(ɵngcc0.ɵɵdirectiveInject(MatSnackBarRef), ɵngcc0.ɵɵdirectiveInject(MAT_SNACK_BAR_DATA)); };\nSimpleSnackBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SimpleSnackBar, selectors: [[\"simple-snack-bar\"]], hostAttrs: [1, \"mat-simple-snackbar\"], decls: 3, vars: 2, consts: [[\"class\", \"mat-simple-snackbar-action\", 4, \"ngIf\"], [1, \"mat-simple-snackbar-action\"], [\"mat-button\", \"\", 3, \"click\"]], template: function SimpleSnackBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"span\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, SimpleSnackBar_div_2_Template, 3, 1, \"div\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.data.message);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasAction);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc2.MatButton], styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"], encapsulation: 2, changeDetection: 0 });\nSimpleSnackBar.ctorParameters = () => [\n    { type: MatSnackBarRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SimpleSnackBar, [{\n        type: Component,\n        args: [{\n                selector: 'simple-snack-bar',\n                template: \"<span>{{data.message}}</span>\\n<div class=\\\"mat-simple-snackbar-action\\\"  *ngIf=\\\"hasAction\\\">\\n  <button mat-button (click)=\\\"action()\\\">{{data.action}}</button>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    'class': 'mat-simple-snackbar'\n                },\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: MatSnackBarRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DATA]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nconst matSnackBarAnimations = {\n    /** Animation that shows and hides a snack bar. */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\nclass MatSnackBarContainer extends BasePortalOutlet {\n    constructor(_ngZone, _elementRef, _changeDetectorRef, \n    /** The snack bar configuration. */\n    snackBarConfig) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.snackBarConfig = snackBarConfig;\n        /** Whether the component has been destroyed. */\n        this._destroyed = false;\n        /** Subject for notifying that the snack bar has exited from view. */\n        this._onExit = new Subject();\n        /** Subject for notifying that the snack bar has finished entering the view. */\n        this._onEnter = new Subject();\n        /** The state of the snack bar animations. */\n        this._animationState = 'void';\n        /**\n         * Attaches a DOM portal to the snack bar container.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            this._assertNotAttached();\n            this._applySnackBarClasses();\n            return this._portalOutlet.attachDomPortal(portal);\n        };\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            this._role = null;\n        }\n        else {\n            this._role = 'status';\n        }\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    attachComponentPortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    }\n    /** Attach a template portal as content to this snack bar container. */\n    attachTemplatePortal(portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    }\n    /** Handle end of animations, updating the state of the snackbar. */\n    onAnimationEnd(event) {\n        const { fromState, toState } = event;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            const onEnter = this._onEnter;\n            this._ngZone.run(() => {\n                onEnter.next();\n                onEnter.complete();\n            });\n        }\n    }\n    /** Begin animation of snack bar entrance into view. */\n    enter() {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /** Begin animation of the snack bar exiting from view. */\n    exit() {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        // Mark this element with an 'exit' attribute to indicate that the snackbar has\n        // been dismissed and will soon be removed from the DOM. This is used by the snackbar\n        // test harness.\n        this._elementRef.nativeElement.setAttribute('mat-exit', '');\n        return this._onExit;\n    }\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    ngOnDestroy() {\n        this._destroyed = true;\n        this._completeExit();\n    }\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    _completeExit() {\n        this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {\n            this._onExit.next();\n            this._onExit.complete();\n        });\n    }\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    _applySnackBarClasses() {\n        const element = this._elementRef.nativeElement;\n        const panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach(cssClass => element.classList.add(cssClass));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    }\n    /** Asserts that no content is already attached to the container. */\n    _assertNotAttached() {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    }\n}\nMatSnackBarContainer.ɵfac = function MatSnackBarContainer_Factory(t) { return new (t || MatSnackBarContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSnackBarConfig)); };\nMatSnackBarContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSnackBarContainer, selectors: [[\"snack-bar-container\"]], viewQuery: function MatSnackBarContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [1, \"mat-snack-bar-container\"], hostVars: 2, hostBindings: function MatSnackBarContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@state.done\", function MatSnackBarContainer_animation_state_done_HostBindingHandler($event) { return ctx.onAnimationEnd($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx._role);\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@state\", ctx._animationState);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatSnackBarContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatSnackBarContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc3.CdkPortalOutlet], styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"], encapsulation: 2, data: { animation: [matSnackBarAnimations.snackBarState] } });\nMatSnackBarContainer.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: MatSnackBarConfig }\n];\nMatSnackBarContainer.propDecorators = {\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarContainer, [{\n        type: Component,\n        args: [{\n                selector: 'snack-bar-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                // In Ivy embedded views will be change detected from their declaration place, rather than\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                // because it might cause snack bars that were opened from a template not to be out of date.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                encapsulation: ViewEncapsulation.None,\n                animations: [matSnackBarAnimations.snackBarState],\n                host: {\n                    '[attr.role]': '_role',\n                    'class': 'mat-snack-bar-container',\n                    '[@state]': '_animationState',\n                    '(@state.done)': 'onAnimationEnd($event)'\n                },\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MatSnackBarConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSnackBarModule {\n}\nMatSnackBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSnackBarModule });\nMatSnackBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSnackBarModule_Factory(t) { return new (t || MatSnackBarModule)(); }, imports: [[\n            OverlayModule,\n            PortalModule,\n            CommonModule,\n            MatButtonModule,\n            MatCommonModule,\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSnackBarModule, { declarations: function () { return [MatSnackBarContainer, SimpleSnackBar]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        CommonModule,\n        MatButtonModule,\n        MatCommonModule]; }, exports: function () { return [MatSnackBarContainer, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    CommonModule,\n                    MatButtonModule,\n                    MatCommonModule,\n                ],\n                exports: [MatSnackBarContainer, MatCommonModule],\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to specify default snack bar. */\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nclass MatSnackBar {\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n        /** The component that should be rendered as the snack bar's simple component. */\n        this.simpleSnackBarComponent = SimpleSnackBar;\n        /** The container component that attaches the provided template or component. */\n        this.snackBarContainerComponent = MatSnackBarContainer;\n        /** The CSS class to applie for handset mode. */\n        this.handsetCssClass = 'mat-snack-bar-handset';\n    }\n    /** Reference to the currently opened snackbar at *any* level. */\n    get _openedSnackBarRef() {\n        const parent = this._parentSnackBar;\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n    }\n    set _openedSnackBarRef(value) {\n        if (this._parentSnackBar) {\n            this._parentSnackBar._openedSnackBarRef = value;\n        }\n        else {\n            this._snackBarRefAtThisLevel = value;\n        }\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromComponent(component, config) {\n        return this._attach(component, config);\n    }\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    openFromTemplate(template, config) {\n        return this._attach(template, config);\n    }\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    open(message, action = '', config) {\n        const _config = Object.assign(Object.assign({}, this._defaultConfig), config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message, action };\n        // Since the snack bar has `role=\"alert\"`, we don't\n        // want to announce the same message twice.\n        if (_config.announcementMessage === message) {\n            _config.announcementMessage = undefined;\n        }\n        return this.openFromComponent(this.simpleSnackBarComponent, _config);\n    }\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    dismiss() {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    }\n    ngOnDestroy() {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    }\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    _attachSnackBarContainer(overlayRef, config) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        const injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatSnackBarConfig, useValue: config }]\n        });\n        const containerPortal = new ComponentPortal(this.snackBarContainerComponent, config.viewContainerRef, injector);\n        const containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    }\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    _attach(content, userConfig) {\n        const config = Object.assign(Object.assign(Object.assign({}, new MatSnackBarConfig()), this._defaultConfig), userConfig);\n        const overlayRef = this._createOverlay(config);\n        const container = this._attachSnackBarContainer(overlayRef, config);\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            const portal = new TemplatePortal(content, null, {\n                $implicit: config.data,\n                snackBarRef\n            });\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            const injector = this._createInjector(config, snackBarRef);\n            const portal = new ComponentPortal(content, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe(state => {\n            const classList = overlayRef.overlayElement.classList;\n            state.matches ? classList.add(this.handsetCssClass) : classList.remove(this.handsetCssClass);\n        });\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    }\n    /** Animates the old snack bar out and the new one in. */\n    _animateSnackBar(snackBarRef, config) {\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe(() => {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (this._openedSnackBarRef == snackBarRef) {\n                this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                this._live.clear();\n            }\n        });\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe(() => {\n                snackBarRef.containerInstance.enter();\n            });\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    }\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    _createOverlay(config) {\n        const overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        let positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        const isRtl = config.direction === 'rtl';\n        const isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    }\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    _createInjector(config, snackBarRef) {\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return Injector.create({\n            parent: userInjector || this._injector,\n            providers: [\n                { provide: MatSnackBarRef, useValue: snackBarRef },\n                { provide: MAT_SNACK_BAR_DATA, useValue: config.data }\n            ]\n        });\n    }\n}\nMatSnackBar.ɵfac = function MatSnackBar_Factory(t) { return new (t || MatSnackBar)(ɵngcc0.ɵɵinject(ɵngcc4.Overlay), ɵngcc0.ɵɵinject(ɵngcc5.LiveAnnouncer), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc6.BreakpointObserver), ɵngcc0.ɵɵinject(MatSnackBar, 12), ɵngcc0.ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); };\nMatSnackBar.ɵprov = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\nMatSnackBar.ctorParameters = () => [\n    { type: Overlay },\n    { type: LiveAnnouncer },\n    { type: Injector },\n    { type: BreakpointObserver },\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSnackBar, [{\n        type: Injectable,\n        args: [{ providedIn: MatSnackBarModule }]\n    }], function () { return [{ type: ɵngcc4.Overlay }, { type: ɵngcc5.LiveAnnouncer }, { type: ɵngcc0.Injector }, { type: ɵngcc6.BreakpointObserver }, { type: MatSnackBar, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: MatSnackBarConfig, decorators: [{\n                type: Inject,\n                args: [MAT_SNACK_BAR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SNACK_BAR_DATA, MAT_SNACK_BAR_DEFAULT_OPTIONS, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MatSnackBar, MatSnackBarConfig, MatSnackBarContainer, MatSnackBarModule, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n\n//# sourceMappingURL=snack-bar.js.map","import { Injectable } from '@angular/core';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any).prettyPrintOne;\n    return ppo ? Promise.resolve(ppo) :\n      // `prettyPrintOne` is not on `window`, which means `prettify.js` has not been loaded yet.\n      // Import it; ad a side-effect it will add `prettyPrintOne` on `window`.\n      import('assets/js/prettify.js' as any)\n        .then(\n          () => (window as any).prettyPrintOne,\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param code - the code snippet to format; should already be HTML encoded\n   * @param [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n"]}