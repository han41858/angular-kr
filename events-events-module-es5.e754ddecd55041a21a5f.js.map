{"version":3,"sources":["webpack:///src/app/custom-elements/events/events.service.ts","webpack:///src/app/custom-elements/events/events.component.html","webpack:///src/app/custom-elements/events/events.component.ts","webpack:///src/app/custom-elements/events/events.module.ts"],"names":["EventsService","eventsPath","http","logger","this","events","getEvents","get","pipe","catchError","error","Error","message","of","publishLast","connect","EventsComponent","eventsService","subscribe","pastEvents","filter","event","Date","date","end","getTime","now","sort","l","r","isBefore","upcomingEvents","dateString","workshopsDate","mainEventDateString","processDate","workshopsDateString","getFullYear","dates","startDate","start","endDate","processedDate","getMonth","getDate","duration1","duration2","EventsModule","customElementComponent"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { ConnectableObservable, Observable, of } from 'rxjs';\nimport { catchError, publishLast } from 'rxjs/operators';\n\nimport { Event } from './events.component';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { Logger } from 'app/shared/logger.service';\n\nconst eventsPath = CONTENT_URL_PREFIX + 'events.json';\n\n@Injectable()\nexport class EventsService {\n  events: Observable<Event[]>;\n\n  constructor(private http: HttpClient, private logger: Logger) {\n    this.events = this.getEvents();\n  }\n\n  private getEvents() {\n    const events = this.http.get<any>(eventsPath).pipe(\n      catchError(error => {\n        this.logger.error(new Error(`${eventsPath} request failed: ${error.message}`));\n        return of([]);\n      }),\n      publishLast()\n    );\n    (events as ConnectableObservable<Event[]>).connect();\n    return events;\n  }\n}\n","<!-- <p>Where we'll be presenting:</p> -->\r\n<p>이런 행사를 준비하고 있습니다:</p>\r\n<table class=\"is-full-width\">\r\n  <thead>\r\n    <tr>\r\n      <!--\r\n      <th>Event</th>\r\n      <th>Location</th>\r\n      <th>Date</th>\r\n      -->\r\n      <th>행사</th>\r\n      <th>장소</th>\r\n      <th>일자</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody >\r\n    <tr *ngFor=\"let event of upcomingEvents\">\r\n      <th><a href=\"{{event.linkUrl}}\" title=\"{{event.tooltip}}\">{{event.name}}</a></th>\r\n      <td>{{event.location}}</td>\r\n      <td>\r\n        <div>\r\n          {{getEventDates(event)}}\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n\r\n<!-- <p>Where we already presented:</p> -->\r\n<p>이런 행사를 진행했습니다:</p>\r\n<table class=\"is-full-width\">\r\n  <thead>\r\n    <tr>\r\n      <!--\r\n      <th>Event</th>\r\n      <th>Location</th>\r\n      <th>Date</th>\r\n      -->\r\n      <th>행사</th>\r\n      <th>장소</th>\r\n      <th>일자</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let event of pastEvents\">\r\n      <th><a href=\"{{event.linkUrl}}\" title=\"{{event.tooltip}}\">{{event.name}}</a></th>\r\n      <td>{{event.location}}</td>\r\n      <td>\r\n        <div>\r\n          {{getEventDates(event)}}\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { Component, OnInit } from '@angular/core';\n\nimport { EventsService } from './events.service';\n\nconst DAY = 24 * 60 * 60 * 1000;\n// const MONTHS = [\n//   'January',\n//   'February',\n//   'March',\n//   'April',\n//   'May',\n//   'June',\n//   'July',\n//   'August',\n//   'September',\n//   'October',\n//   'November',\n//   'December',\n// ];\n\nexport type date = string; // of the format `YYYY-MM-DD`.\nexport interface Duration {\n  start: date;\n  end: date;\n}\n\nexport interface Event {\n  name: string;\n  location: string;\n  linkUrl: string;\n  tooltip?: string;\n  date: Duration;\n  workshopsDate?: Duration;\n}\n\n@Component({\n  selector: 'aio-events',\n  templateUrl: 'events.component.html'\n})\nexport class EventsComponent implements OnInit {\n\n  pastEvents: Event[];\n  upcomingEvents: Event[];\n\n  constructor(private eventsService: EventsService) { }\n\n  ngOnInit() {\n    this.eventsService.events.subscribe(events => {\n      this.pastEvents = events\n          .filter(event => new Date(event.date.end).getTime() < Date.now() - DAY)\n          .sort((l: Event, r: Event) => isBefore(l.date, r.date) ? 1 : -1);\n\n      this.upcomingEvents = events\n          .filter(event => new Date(event.date.end).getTime() >= Date.now() - DAY)\n          .sort((l: Event, r: Event) => isBefore(l.date, r.date) ? -1 : 1);\n    });\n  }\n\n  getEventDates(event: Event) {\n    let dateString;\n\n    // // Check if there is a workshop\n    // if (event.workshopsDate) {\n    //   const mainEventDateString = `${processDate(event.date)} (conference)`;\n    //   const workshopsDateString = `${processDate(event.workshopsDate)} (workshops)`;\n    //   const areWorkshopsBeforeEvent = isBefore(event.workshopsDate, event.date);\n\n    //   dateString = areWorkshopsBeforeEvent ?\n    //       `${workshopsDateString}, ${mainEventDateString}` :\n    //       `${mainEventDateString}, ${workshopsDateString}`;\n    // } else {\n    //   // If no work shop date create conference date string\n    //   dateString = processDate(event.date);\n    // }\n    // dateString = `${dateString}, ${new Date(event.date.end).getFullYear()}`;\n\n    // Check if there is a workshop\n    if (event.workshopsDate) {\n      const mainEventDateString = `${processDate(event.date)} (컨퍼런스)`;\n      const workshopsDateString = `${processDate(event.workshopsDate)} (워크샵)`;\n      const areWorkshopsBeforeEvent = isBefore(event.workshopsDate, event.date);\n\n      dateString = areWorkshopsBeforeEvent ?\n          `${workshopsDateString}, ${mainEventDateString}` :\n          `${mainEventDateString}, ${workshopsDateString}`;\n    } else {\n      // If no work shop date create conference date string\n      dateString = processDate(event.date);\n    }\n    dateString = `${new Date(event.date.end).getFullYear()}. ${dateString}`;\n    return dateString;\n  }\n}\n\nfunction processDate(dates: Duration) {\n  // // Covert Date sting to date object for comparisons\n  // const startDate = new Date(dates.start);\n  // const endDate = new Date(dates.end);\n\n  // // Create a date string in the start like January 31\n  // let processedDate = `${MONTHS[startDate.getMonth()]} ${startDate.getDate()}`;\n\n  // // If they are in different months add the string '- February 2' Making the final string January 31 - February 2\n  // if (startDate.getMonth() !== endDate.getMonth()) {\n  //   processedDate = `${processedDate} - ${MONTHS[endDate.getMonth()]} ${endDate.getDate()}`;\n  // } else if (startDate.getDate() !== endDate.getDate()) {\n  //   // If not add - date eg it will make // January 30-31\n  //   processedDate = `${processedDate}-${endDate.getDate()}`;\n  // }\n  // Covert Date sting to date object for comparisons\n  const startDate = new Date(dates.start);\n  const endDate = new Date(dates.end);\n\n  // Create a date string in the start like January 31\n  let processedDate = `${startDate.getMonth()+1}. ${startDate.getDate()}`;\n\n  // If they are in different months add the string '- February 2' Making the final string January 31 - February 2\n  if (startDate.getMonth() !== endDate.getMonth()) {\n    processedDate = `${processedDate} ~ ${endDate.getMonth()+1}. ${endDate.getDate()}.`;\n  } else if (startDate.getDate() !== endDate.getDate()) {\n    // If not add - date eg it will make // January 30-31\n    processedDate = `${processedDate}. ~ ${endDate.getDate()}.`;\n  } else {\n    processedDate = `${processedDate}.`\n  }\n\n  return processedDate;\n}\n\nfunction isBefore(duration1: Duration, duration2: Duration): boolean {\n  return (duration1.start < duration2.start) ||\n      (duration1.start === duration2.start && duration1.end < duration2.end);\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EventsComponent } from './events.component';\nimport { EventsService } from './events.service';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ EventsComponent ],\n  entryComponents: [ EventsComponent ],\n  providers: [ EventsService]\n})\nexport class EventsModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = EventsComponent;\n}\n"]}