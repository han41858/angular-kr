{"version":3,"sources":["webpack:///node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js","webpack:///node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js","webpack:///src/app/custom-elements/toc/toc.component.html","webpack:///src/app/custom-elements/toc/toc.component.ts","webpack:///src/app/custom-elements/toc/toc.module.ts"],"names":["source","delayTime","scheduler","asap","a","super","this","isNumeric","schedule","subscriber","dispatch","delay","arg","add","subscribe","Observable","subscribeOn","lift","title","TocComponent","scrollService","elementRef","tocService","activeIndex","type","isCollapsed","isEmbedded","onDestroy","Subject","primaryMax","nativeElement","className","indexOf","tocList","pipe","takeUntil","fn","itemCount","item","level","reduce","result","combineLatest","activeItemIndex","items","changes","startWith","index","length","e","toArray","p","offsetParent","eRect","getBoundingClientRect","pRect","top","bottom","scrollTop","clientHeight","next","canScroll","toTop","scrollToTop","TocModule","customElementComponent"],"mappings":"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","file":"x","sourcesContent":["import { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\nexport class SubscribeOnObservable extends Observable {\n    constructor(source, delayTime = 0, scheduler = asap) {\n        super();\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap;\n        }\n    }\n    static create(source, delay = 0, scheduler = asap) {\n        return new SubscribeOnObservable(source, delay, scheduler);\n    }\n    static dispatch(arg) {\n        const { source, subscriber } = arg;\n        return this.add(source.subscribe(subscriber));\n    }\n    _subscribe(subscriber) {\n        const delay = this.delayTime;\n        const source = this.source;\n        const scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source, subscriber\n        });\n    }\n}\n//# sourceMappingURL=SubscribeOnObservable.js.map","import { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nexport function subscribeOn(scheduler, delay = 0) {\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nclass SubscribeOnOperator {\n    constructor(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    }\n}\n//# sourceMappingURL=subscribeOn.js.map","<div *ngIf=\"type !== 'None'\" class=\"toc-inner no-print\" [class.collapsed]=\"isCollapsed\">\r\n\r\n  <div *ngIf=\"type === 'EmbeddedSimple'\" class=\"toc-heading embedded\">\r\n    Contents\r\n  </div>\r\n\r\n  <button *ngIf=\"type === 'EmbeddedExpandable'\" type=\"button\" (click)=\"toggle(false)\"\r\n    class=\"toc-heading embedded secondary\"\r\n    title=\"Expand/collapse contents\"\r\n    aria-label=\"Expand/collapse contents\"\r\n    [attr.aria-pressed]=\"!isCollapsed\">\r\n    Contents\r\n    <mat-icon class=\"rotating-icon\" svgIcon=\"keyboard_arrow_right\" [class.collapsed]=\"isCollapsed\"></mat-icon>\r\n  </button>\r\n\r\n  <ul class=\"toc-list\" [class.embedded]=\"type !== 'Floating'\">\r\n    <ng-container *ngFor=\"let toc of tocList; let i = index\">\r\n      <li #tocItem title=\"{{toc.title}}\" *ngIf=\"type === 'Floating' || toc.level !== 'h1'\"\r\n        class=\"{{toc.level}}\" [class.secondary]=\"type === 'EmbeddedExpandable' && i >= primaryMax\" [class.active]=\"i === activeIndex\">\r\n        <a [href]=\"toc.href\" [innerHTML]=\"toc.content\"></a>\r\n      </li>\r\n    </ng-container>\r\n  </ul>\r\n\r\n  <button *ngIf=\"type === 'EmbeddedExpandable'\" type=\"button\" (click)=\"toggle()\"\r\n    class=\"toc-more-items embedded material-icons\" [class.collapsed]=\"isCollapsed\"\r\n    title=\"Expand/collapse contents\"\r\n    aria-label=\"Expand/collapse contents\"\r\n    [attr.aria-pressed]=\"!isCollapsed\">\r\n  </button>\r\n</div>\r\n","import { AfterViewInit, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChildren } from '@angular/core';\nimport { asapScheduler, combineLatest, Subject } from 'rxjs';\nimport { startWith, subscribeOn, takeUntil } from 'rxjs/operators';\n\nimport { ScrollService } from 'app/shared/scroll.service';\nimport { TocItem, TocService } from 'app/shared/toc.service';\n\ntype TocType = 'None' | 'Floating' | 'EmbeddedSimple' | 'EmbeddedExpandable';\n\n@Component({\n  selector: 'aio-toc',\n  templateUrl: 'toc.component.html',\n  styles: []\n})\nexport class TocComponent implements OnInit, AfterViewInit, OnDestroy {\n\n  activeIndex: number | null = null;\n  type: TocType = 'None';\n  isCollapsed = true;\n  isEmbedded = false;\n  @ViewChildren('tocItem') private items: QueryList<ElementRef>;\n  private onDestroy = new Subject();\n  primaryMax = 4;\n  tocList: TocItem[];\n\n  constructor(\n    private scrollService: ScrollService,\n    elementRef: ElementRef,\n    private tocService: TocService) {\n    this.isEmbedded = elementRef.nativeElement.className.indexOf('embedded') !== -1;\n  }\n\n  ngOnInit() {\n    this.tocService.tocList\n        .pipe(takeUntil(this.onDestroy))\n        .subscribe(tocList => {\n          this.tocList = tocList;\n          const itemCount = count(this.tocList, item => item.level !== 'h1');\n\n          this.type = (itemCount > 0) ?\n                        this.isEmbedded ?\n                          (itemCount > this.primaryMax) ?\n                            'EmbeddedExpandable' :\n                          'EmbeddedSimple' :\n                        'Floating' :\n                      'None';\n        });\n  }\n\n  ngAfterViewInit() {\n    if (!this.isEmbedded) {\n      // We use the `asap` scheduler because updates to `activeItemIndex` are triggered by DOM changes,\n      // which, in turn, are caused by the rendering that happened due to a ChangeDetection.\n      // Without asap, we would be updating the model while still in a ChangeDetection handler, which is disallowed by Angular.\n      combineLatest([\n        this.tocService.activeItemIndex.pipe(subscribeOn(asapScheduler)),\n        this.items.changes.pipe(startWith(this.items)),\n      ])\n          .pipe(takeUntil(this.onDestroy))\n          .subscribe(([index, items]) => {\n            this.activeIndex = index;\n            if (index === null || index >= items.length) {\n              return;\n            }\n\n            const e = items.toArray()[index].nativeElement;\n            const p = e.offsetParent;\n\n            const eRect = e.getBoundingClientRect();\n            const pRect = p.getBoundingClientRect();\n\n            const isInViewport = (eRect.top >= pRect.top) && (eRect.bottom <= pRect.bottom);\n\n            if (!isInViewport) {\n              p.scrollTop += (eRect.top - pRect.top) - (p.clientHeight / 2);\n            }\n          });\n    }\n  }\n\n  ngOnDestroy() {\n    this.onDestroy.next();\n  }\n\n  toggle(canScroll = true) {\n    this.isCollapsed = !this.isCollapsed;\n    if (canScroll && this.isCollapsed) { this.toTop(); }\n  }\n\n  toTop() {\n    this.scrollService.scrollToTop();\n  }\n}\n\nfunction count<T>(array: T[], fn: (item: T) => boolean) {\n  return array.reduce((result, item) => fn(item) ? result + 1 : result, 0);\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { TocComponent } from './toc.component';\n\n@NgModule({\n  imports: [ CommonModule, MatIconModule ],\n  declarations: [ TocComponent ],\n  entryComponents: [ TocComponent ],\n})\nexport class TocModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = TocComponent;\n}\n"]}