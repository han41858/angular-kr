{
  "id": "start",
  "title": "Angular 시작하기: 첫번째 앱 만들기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/start/index.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Getting Started with Angular: Your First App\n-->\n<h1 id=\"angular-시작하기-첫번째-앱-만들기\">Angular 시작하기: 첫번째 앱 만들기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#angular-시작하기-첫번째-앱-만들기\"><i class=\"material-icons\">link</i></a></h1>\n<p>Welcome to Angular!</p>\n<p>This tutorial introduces you to the essentials of Angular by walking you through a simple e-commerce site with a catalog, shopping cart, and check-out form.\nTo help you get started right away, this guide uses a simple ready-made application that you can examine and play with interactively.</p>\n<div class=\"callout is-helpful\">\n<!--\n<header>New to web development?</header>\n-->\n<header>웹 개발이 처음인가요?</header>\n<p> There are many resources to complement the Angular docs. Mozilla's MDN docs include both <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML\" title=\"Learning HTML: Guides and tutorials\">HTML</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" title=\"JavaScript\">JavaScript</a> introductions. <a href=\"https://www.typescriptlang.org/docs/home.html\" title=\"TypeScript documentation\">TypeScript's docs</a> include a 5-minute tutorial. Various online course platforms, such as <a href=\"http://www.udemy.com\" title=\"Udemy online courses\">Udemy</a> and <a href=\"https://www.codecademy.com/\" title=\"Codecademy online courses\">Codecademy</a>, also cover web development basics.</p>\n</div>\n<a id=\"new-project\"></a>\n<!--\n## Create a new project\n-->\n<h2 id=\"프로젝트-생성하기\">프로젝트 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#프로젝트-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<h4 id=\"click-here-to-create-the-ready-made-sample-project-in-stackblitz\">\n<live-example name=\"getting-started-v0\" nodownload=\"\">Click here to create the ready-made sample project in StackBlitz.</live-example>\n<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#click-here-to-create-the-ready-made-sample-project-in-stackblitz\"><i class=\"material-icons\">link</i></a></h4>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/new-app-all.gif\" alt=\"Starter online store app\" width=\"600\" height=\"219\">\n</div>\n<ul>\n<li>\n<p>The preview pane on the right shows the starting state of the sample Angular app.\nIt defines a frame with a top bar (containing the store name and checkout icon) and the title for a product list (which will be populated and dynamically updated with data from the application).</p>\n</li>\n<li>\n<p>The project pane on the left shows the source files that make up the application, including all of the infrastructure and configuration files. The currently selected file shows up in the editor pane in the middle.</p>\n</li>\n</ul>\n<p>Before going into the source structure, the next section shows how to fill out the HTML <em>template</em> for the product list, using the provided sample data.\nThis should give you an idea how easy it is to modify and update the page dynamically.</p>\n<div class=\"callout is-helpful\">\n<!--\n<header>StackBlitz tips</header>\n-->\n<header>StackBlitz 팁</header>\n<ul>\n<li>Log into StackBlitz so you can save and resume your work.\nIf you have a GitHub account, you can log into StackBlitz\nwith that account. In order to save your progress, first\nfork the project using the Fork button at the top left,\nthen you'll be able to save your work to your own StackBlitz\naccount by clicking the Save button.</li>\n<li>To copy a code example from this tutorial, click the icon\nat the top right of the code example box, and then paste the\ncode snippet from the clipboard into StackBlitz.</li>\n<li>If the StackBlitz preview pane isn't showing what you\nexpect, save and then click the refresh button.</li>\n<li>StackBlitz is continually improving, so there may be\nslight differences in generated code, but the app's\nbehavior will be the same.</li>\n<li>When you generate the StackBlitz example apps that\naccompany the tutorials, StackBlitz creates the starter\nfiles and mock data for you. The files you'll use throughout\nthe tutorials are in the <code>src</code> folder of the StackBlitz\nexample apps.</li>\n</ul>\n</div>\n<div class=\"alert is-helpful\">\n<p>If you go directly to the <a href=\"https://stackblitz.com/\">StackBlitz online development environment</a> and choose to <a href=\"https://stackblitz.com/fork/angular\">start a new Angular workspace</a>, you get a generic stub application, rather than this <a href=\"start#new-project\">illustrative sample</a>. Once you have been introduced to the basic concepts here, this can be helpful for working interactively while you are learning Angular.</p>\n<p>In actual development you will typically use the <a href=\"guide/glossary#command-line-interface-cli\">Angular CLI</a>, a powerful command-line tool that lets you generate and modify applications. For more information, see the <a href=\"cli\">CLI Overview</a>.</p>\n</div>\n<a id=\"template-syntax\"></a>\n<!--\n## Template syntax\n-->\n<h2 id=\"템플릿-문법\">템플릿 문법<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#템플릿-문법\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular's template syntax extends HTML and JavaScript.\nThis section introduces template syntax by enhancing the \"Products\" area.</p>\n<div class=\"alert is-helpful\">\n<p>To help you get going, the following steps use predefined product data from the <code>products.ts</code> file (already created in StackBlitz example) and methods from the <code>product-list.component.ts</code> file.</p>\n</div>\n<ol>\n<li>\n<p>In the <code>product-list</code> folder, open the template file <code>product-list.component.html</code>.</p>\n</li>\n<li>\n<p>Modify the product list template to display a list of product names.</p>\n<ol>\n<li>\n<p>Each product in the list displays the same way, one after another on the page. To iterate over the predefined list of products, put the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive on a <code>&#x3C;div></code>, as follows:</p>\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.2.html\" region=\"ngfor\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n&#x3C;/div>\n\n</code-example>\n<p>With <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, the <code>&#x3C;div></code> repeats for each product in the list.</p>\n<div class=\"alert is-helpful\">\n<p><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is a \"structural directive\". Structural directives shape or reshape the DOM's structure, typically by adding, removing, and manipulating the elements to which they are attached. Directives with an asterisk, <code>*</code>, are structural directives.</p>\n</div>\n</li>\n<li>\n<p>To display the names of the products, use the interpolation syntax <code>{{ }}</code>. Interpolation renders a property's value as text. Inside the <code>&#x3C;div></code>, add an <code>&#x3C;h3></code> to display the interpolation of the product's name property:</p>\n<code-example path=\"getting-started/src/app/product-list/product-list.component.2.html\" header=\"src/app/product-list/product-list.component.html\" region=\"interpolation\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n      {{ product.name }}\n  &#x3C;/h3>\n\n&#x3C;/div>\n\n</code-example>\n<!--\nThe preview pane immediately updates to display the name of each product in the list.\n-->\n<p>그러면 다음과 같이 미리보기 화면에 제품 이름이 표시됩니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/template-syntax-product-names.png\" alt=\"Product names added to list\" width=\"259\" height=\"271\">\n</div>\n</li>\n</ol>\n</li>\n<li>\n<p>To make each product name a link to product details, add the <code>&#x3C;a></code> element and set its title to be the product's name by using the property binding <code>[ ]</code> syntax, as follows:</p>\n<code-example path=\"getting-started/src/app/product-list/product-list.component.2.html\" header=\"src/app/product-list/product-list.component.html\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n\n&#x3C;/div>\n\n\n</code-example>\n<p>In the preview pane, hold the pointer over a product\nname to see the bound name property value, which is\nthe product name plus the word \"details\".\nInterpolation <code>{{ }}</code> lets you render the\nproperty value as text; property binding <code>[ ]</code> lets you\nuse the property value in a template expression.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/template-syntax-product-anchor.png\" alt=\"Product name anchor text is product name property\" width=\"259\" height=\"271\">\n</div>\n</li>\n</ol>\n<!--\n4. Add the product descriptions. On the `<p>` element, use an `*ngIf` directive so that Angular only creates the `<p>` element if the current product has a description.\n-->\n<ol start=\"4\">\n<li>\n<p>제품 설명을 추가합니다. 이 때 <code>&#x3C;p></code> 태그에 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 디렉티브를 사용했기 때문에, 실제로 제품 설명이 존재할 때만 <code>&#x3C;p></code> 태그가 생성됩니다.</p>\n<code-example path=\"getting-started/src/app/product-list/product-list.component.3.html\" header=\"src/app/product-list/product-list.component.html\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n\n  &#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\">\n    Description: {{ product.description }}\n  &#x3C;/p>\n\n&#x3C;/div>\n\n\n</code-example>\n<p>The app now displays the name and description of each product in the list. Notice that the final product does not have a description paragraph. Because the product's description property is empty, Angular doesn't create the <code>&#x3C;p></code> element—including the word \"Description\".</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/template-syntax-product-description.png\" alt=\"Product descriptions added to list\" width=\"259\" height=\"289\">\n</div>\n</li>\n<li>\n<p>Add a button so users can share a product with friends. Bind the button's <code>click</code> event to the <code>share()</code> method (in <code>product-list.component.ts</code>). Event binding uses a set of parentheses, <code>( )</code>, around the event, as in the following <code>&#x3C;button></code> element:</p>\n<code-example path=\"getting-started/src/app/product-list/product-list.component.4.html\" header=\"src/app/product-list/product-list.component.html\">\n&#x3C;h2>Products&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let product of products\">\n\n  &#x3C;h3>\n    &#x3C;a [title]=\"product.name + ' details'\">\n      {{ product.name }}\n    &#x3C;/a>\n  &#x3C;/h3>\n\n  &#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.description\">\n    Description: {{ product.description }}\n  &#x3C;/p>\n\n  &#x3C;button (click)=\"share()\">\n    Share\n  &#x3C;/button>\n\n&#x3C;/div>\n\n\n</code-example>\n<!--\nEach product now has a \"Share\" button:\n-->\n<p>이제는 각 제품마다 \"Share\" 버튼이 추가되었습니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/template-syntax-product-share-button.png\" alt=\"Share button added for each product\" width=\"259\" height=\"376\">\n</div>\n<!--\nTest the \"Share\" button:\n-->\n<p>\"Share\" 버튼이 동작하는 것을 확인해 봅시다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/template-syntax-product-share-alert.png\" alt=\"Alert box indicating product has been shared\" width=\"330\" height=\"104\">\n</div>\n</li>\n</ol>\n<!--\nThe app now has a product list and sharing feature.\nIn the process, you've learned to use five common features of Angular's template syntax:\n* `*ngFor`\n* `*ngIf`\n* Interpolation `{{ }}`\n* Property binding `[ ]`\n* Event binding `( )`\n-->\n<p>이제 앱에는 제품 목록이 표시되며 공유할 수 있는 기능도 추가되었습니다.\n그리고 이렇게 진행하는 동안 Angular 템플릿 문법 중 자주 사용하는 5가지 기본 기능에 대해 살펴봤습니다:</p>\n<ul>\n<li><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code></li>\n<li><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code></li>\n<li>문자열 바인딩(Interpolation) <code>{{ }}</code></li>\n<li>프로퍼티 바인딩 <code>[ ]</code></li>\n<li>이벤트 바인딩 <code>( )</code></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>For more information about the full capabilities of Angular's\ntemplate syntax, see <a href=\"guide/template-syntax\" title=\"Template Syntax\">Template Syntax</a>.</p>\n</div>\n<a id=\"components\"></a>\n<!--\n## Components\n-->\n<h2 id=\"컴포넌트components\">컴포넌트(Components)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#컴포넌트components\"><i class=\"material-icons\">link</i></a></h2>\n<p><em>Components</em> define areas of responsibility in the user interface, or UI,\nthat let you reuse sets of UI functionality.\nYou've already built one with the product list component.</p>\n<p>A component consists of three things:</p>\n<ul>\n<li><strong>A component class</strong> that handles data and functionality. In the previous section, the product data and the <code>share()</code> method in the component class handle data and functionality, respectively.</li>\n<li><strong>An HTML template</strong> that determines the UI. In the previous section, the product list's HTML template displays the name, description, and a \"Share\" button for each product.</li>\n<li><strong>Component-specific styles</strong> that define the look and feel.\nThough product list does not define any styles, this is where component CSS\nresides.</li>\n</ul>\n<!--\n### Class definition\n\nLet's take a quick look a the product list component's class definition:\n\n1. In the `product-list` directory, open `product-list.component.ts`.\n\n1. Notice the `@Component` decorator. This provides metadata about the component, including its templates, styles, and a selector.\n\n    * The `selector` is used to identify the component. The selector is the name you give the Angular component when it is rendered as an HTML element on the page. By convention, Angular component selectors begin with the prefix such as `app-`, followed by the component name.\n\n    * The template and style filename also are provided here. By convention each of the component's parts is in a separate file, all in the same directory and with the same prefix.\n\n1. The component definition also includes an exported class, which handles functionality for the component. This is where the product list data and `Share()` method are defined.\n\n### Composition\n-->\n<p>An Angular application comprises a tree of components, in which each Angular component has a specific purpose and responsibility.</p>\n<p>Currently, the example app has three components:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/app-components.png\" alt=\"Online store with three components\" width=\"324\" height=\"527\">\n</div>\n<ul>\n<li><code>app-root</code> (orange box) is the application shell. This is the first component to load and the parent of all other components. You can think of it as the base page.</li>\n<li><code>app-top-bar</code> (blue background) is the store name and checkout button.</li>\n<li><code>app-product-list</code> (purple box) is the product list that you modified in the previous section.</li>\n</ul>\n<p>The next section expands the app's capabilities by adding a new component—a product alert—as a child of the product list component.</p>\n<div class=\"alert is-helpful\">\n<p>For more information about components and how they interact with templates, see <a href=\"guide/architecture-components\" title=\"Architecture > Introduction to Components\">Introduction to Components</a>.</p>\n</div>\n<a id=\"input\"></a>\n<!--\n## Input\n-->\n<h2 id=\"입력-프로퍼티\">입력 프로퍼티<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#입력-프로퍼티\"><i class=\"material-icons\">link</i></a></h2>\n<p>Currently, the product list displays the name and description of each product.\nThe product list component also defines a <code>products</code> property that contains imported data for each product from the <code>products</code> array in <code>products.ts</code>.</p>\n<p>The next step is to create a new alert feature that takes a product as an input. The alert checks the product's price, and, if the price is greater than $700, displays a \"Notify Me\" button that lets users sign up for notifications when the product goes on sale.</p>\n<ol>\n<li>\n<p>Create a new product alerts component.</p>\n<ol>\n<li>\n<p>Right click on the <code>app</code> folder and use the <code>Angular Generator</code> to generate a new component named <code>product-alerts</code>.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/generate-component.png\" alt=\"StackBlitz command to generate component\" width=\"407\" height=\"368\">\n</div>\n<p>The generator creates starter files for all three parts of the component:</p>\n<ul>\n<li><code>product-alerts.component.ts</code></li>\n<li><code>product-alerts.component.html</code></li>\n<li><code>product-alerts.component.css</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>Open <code>product-alerts.component.ts</code>.</p>\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"as-generated\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-product-alerts',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './product-alerts.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./product-alerts.component.css']\n})\nexport class ProductAlertsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n<ol>\n<li>\n<p>Notice the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator. This indicates that the following class is a component. It provides metadata about the component, including its selector, templates, and styles.</p>\n<ul>\n<li>\n<p>The <code>selector</code> identifies the component. The selector is the name you give the Angular component when it is rendered as an HTML element on the page. By convention, Angular component selectors begin with the prefix <code>app-</code>, followed by the component name.</p>\n</li>\n<li>\n<p>The template and style filenames reference the HTML and CSS files that StackBlitz generates.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>The component definition also exports the class, <code>ProductAlertsComponent</code>, which handles functionality for the component.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>Set up the new product alerts component to receive a product as input:</p>\n<ol>\n<li>\n<p>Import <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> from <code>@angular/core</code>.</p>\n<code-example path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"imports\" header=\"src/app/product-alerts/product-alerts.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p>In the <code>ProductAlertsComponent</code> class definition, define a property named <code>product</code> with an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator. The <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator indicates that the property value passes in from the component's parent, the product list component.</p>\n<code-example path=\"getting-started/src/app/product-alerts/product-alerts.component.1.ts\" region=\"input-decorator\" header=\"src/app/product-alerts/product-alerts.component.ts\">\nexport class ProductAlertsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>Define the view for the new product alert component.</p>\n<ol>\n<li>Open the <code>product-alerts.component.html</code> template and replace the placeholder paragraph with a \"Notify Me\" button that appears if the product price is over $700.</li>\n</ol>\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.1.html\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.price > 700\">\n  &#x3C;button>Notify Me&#x3C;/button>\n&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>Display the new product alert component as a child of the product list.</p>\n<ol>\n<li>\n<p>Open <code>product-list.component.html</code>.</p>\n</li>\n<li>\n<p>To include the new component, use its selector, <code>app-product-alerts</code>, as you would an HTML element.</p>\n</li>\n<li>\n<p>Pass the current product as input to the component using property binding.</p>\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.5.html\" region=\"app-product-alerts\">\n&#x3C;button (click)=\"share()\">\n  Share\n&#x3C;/button>\n\n&#x3C;app-product-alerts\n  [product]=\"product\">\n&#x3C;/app-product-alerts>\n\n</code-example>\n</li>\n</ol>\n</li>\n</ol>\n<p>The new product alert component takes a product as input from the product list. With that input, it shows or hides the \"Notify Me\" button, based on the price of the product. The Phone XL price is over $700, so the \"Notify Me\" button appears on that product.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-alert-button.png\" alt=\"Product alert button added to products over $700\" width=\"259\" height=\"406\">\n</div>\n<div class=\"alert is-helpful\">\n<p>See <a href=\"guide/component-interaction\" title=\"Components &#x26; Templates > Component Interaction\">Component Interaction</a> for more information about passing data from a parent to child component, intercepting and acting upon a value from the parent, and detecting and acting on changes to input property values.</p>\n</div>\n<a id=\"output\"></a>\n<h2 id=\"output\">Output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#output\"><i class=\"material-icons\">link</i></a></h2>\n<p>To make the \"Notify Me\" button work, you need to configure two things:</p>\n<ul>\n<li>the product alert component to emit an event when the user clicks \"Notify Me\"</li>\n<li>the product list component to act on that event</li>\n</ul>\n<ol>\n<li>\n<p>Open <code>product-alerts.component.ts</code>.</p>\n</li>\n<li>\n<p>Import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> from <code>@angular/core</code>:</p>\n<code-example header=\"src/app/product-alerts/product-alerts.component.ts\" path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p>In the component class, define a property named <code>notify</code> with an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator and an instance of <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>()</code>. This allows the product alert component to emit an event when the value of the notify property changes.</p>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>  When the Angular CLI generates a new component, it includes an empty constructor, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface, and the <code>ngOnInit()</code> method.\nSince the following example isn't using them, they are omitted here for brevity.</p>\n</div>\n<p>    <code-example path=\"getting-started/src/app/product-alerts/product-alerts.component.ts\" header=\"src/app/product-alerts/product-alerts.component.ts\" region=\"input-output\">\nexport class ProductAlertsComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() product;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() notify = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>();\n}\n\n\n</code-example></p>\n<ol>\n<li>\n<p>In the product alert template, <code>product-alerts.component.html</code>, update the \"Notify Me\" button with an event binding to call the <code>notify.emit()</code> method.</p>\n<code-example header=\"src/app/product-alerts/product-alerts.component.html\" path=\"getting-started/src/app/product-alerts/product-alerts.component.html\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product.price > 700\">\n  &#x3C;button (click)=\"notify.emit()\">Notify Me&#x3C;/button>\n&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>Next, define the behavior that should happen when the user clicks the button. Recall that it's the parent, product list component—not the product alerts component—that acts when the child raises the event. In  <code>product-list.component.ts</code>, define an <code>onNotify()</code> method, similar to the <code>share()</code> method:</p>\n<code-example header=\"src/app/product-list/product-list.component.ts\" path=\"getting-started/src/app/product-list/product-list.component.ts\" region=\"on-notify\">\nexport class ProductListComponent {\n  products = products;\n\n  share() {\n    window.alert('The product has been shared!');\n  }\n\n  onNotify() {\n    window.alert('You will be notified when the product goes on sale');\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Finally, update the product list component to receive output from the product alerts component.</p>\n<p>In <code>product-list.component.html</code>, bind the <code>app-product-alerts</code> component (which is what displays the \"Notify Me\" button) to the <code>onNotify()</code> method of the product list component.</p>\n<code-example header=\"src/app/product-list/product-list.component.html\" path=\"getting-started/src/app/product-list/product-list.component.6.html\" region=\"on-notify\">\n&#x3C;button (click)=\"share()\">\n  Share\n&#x3C;/button>\n\n&#x3C;app-product-alerts\n  [product]=\"product\" \n  (notify)=\"onNotify()\">\n&#x3C;/app-product-alerts>\n\n</code-example>\n</li>\n<li>\n<p>Try the \"Notify Me\" button:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-alert-notification.png\" alt=\"Product alert notification confirmation dialog\" width=\"329\" height=\"104\">\n</div>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>See <a href=\"guide/component-interaction\" title=\"Components &#x26; Templates > Component Interaction\">Component Interaction</a> for more information about listening for events from child components, reading child properties or invoking child methods, and using a service for bi-directional communication between components.</p>\n</div>\n<a id=\"next-steps\"></a>\n<!--\n## Next steps\n-->\n<h2 id=\"다음-단계\">다음 단계<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start#다음-단계\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nCongratulations! You've completed your first Angular app!\n\nYou have a basic online store catalog with a product list, \"Share\" button, and \"Notify Me\" button.\nYou've learned about the foundation of Angular: components and template syntax.\nYou've also learned how the component class and template interact, and how components communicate with each other.\n\nTo continue exploring Angular, choose either of the following options:\n* [Continue to the \"Routing\" section](start/routing \"Getting Started: Routing\") to create a product details page that can be accessed by clicking a product name and that has its own URL pattern.\n* [Skip ahead to the \"Deployment\" section](start/deployment \"Getting Started: Deployment\") to move to local development, or deploy your app to Firebase or your own server.\n-->\n<p>축하합니다! 첫번째 Angular 앱을 완성했습니다!</p>\n<p>지금까지 작성한 온라인 쇼핑몰 앱에는 제품 목록 화면, \"Share\" 버튼, \"Notify Me\" 버튼이 존재합니다.\n그리고 이렇게 작성하는 동안 Angular 앱을 개발하는 기본 지식인 컴포넌트와 템플릿 문법에 대해 알아봤습니다.\n컴포넌트 클래스와 템플릿이 상호작용하는 방법, 컴포넌트가 다른 컴포넌트와 상호작용하는 방법도 알아봤습니다.</p>\n<p>이제 Angular에 대해 더 알아보기 위해 다음 코스 중 하나를 선택해 보세요:</p>\n<ul>\n<li>제품 목록 화면에서 제품 이름을 클릭했을 때 표시되는 제품 상세정보 화면을 만들려면 <a href=\"start/routing\" title=\"시작하기: 라우팅\">\"라우팅\"</a> 문서를 참고하세요.</li>\n<li>로컬 개발환경에 대해서 알아보거나 Angular 앱을 Firebase나 리모트 서버에 배포하는 방법에 대해 알아보려면 쭉 건너뛰고 <a href=\"start/deployment\" title=\"시작하기: 배포\">\"개발\"</a> 문서를 참고하세요.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - docs\n - features\n - guide/attribute-directives\n - guide/setup-local\n - index\n - start/deployment\n - start/routing\n - tutorial\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnInit\n - api/core/Output\n - cli\n - guide/architecture-components\n - guide/component-interaction\n - guide/glossary#command-line-interface-cli\n - guide/template-syntax\n - start#angular-시작하기-첫번째-앱-만들기\n - start#click-here-to-create-the-ready-made-sample-project-in-stackblitz\n - start#new-project\n - start#output\n - start#다음-단계\n - start#입력-프로퍼티\n - start#컴포넌트components\n - start#템플릿-문법\n - start#프로젝트-생성하기\n - start/deployment\n - start/routing\n - http://www.udemy.com\n - https://developer.mozilla.org/en-US/docs/Learn/HTML\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript\n - https://github.com/angular/angular/edit/master/aio/content/start/index.md?message=docs%3A%20describe%20your%20change...\n - https://stackblitz.com/\n - https://stackblitz.com/fork/angular\n - https://www.codecademy.com/\n - https://www.typescriptlang.org/docs/home.html\n-->"
}