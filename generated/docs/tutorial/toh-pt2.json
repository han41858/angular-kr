{
  "id": "tutorial/toh-pt2",
  "title": "목록 표시하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt2.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Display a selection list\n-->\n<h1 id=\"목록-표시하기\">목록 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#목록-표시하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nIn this page, you'll expand the Tour of Heroes app to display a list of heroes, and\nallow users to select a hero and display the hero's details.\n-->\n<p>이번 튜토리얼에서는 히어로의 목록을 화면에 표시하고, 이 중에서 히어로 하나를 선택해서 상세 정보를  표시하도록 히어로들의 여행 앱을 수정해 봅시다.</p>\n<!--\n## Create mock heroes\n-->\n<h2 id=\"히어로-목mock-생성하기\">히어로 목(mock) 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#히어로-목mock-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou'll need some heroes to display.\n-->\n<p>먼저, 히어로의 목록을 화면에 표시할 때 사용할 히어로 데이터가 필요합니다.</p>\n<!--\nEventually you'll get them from a remote data server.\nFor now, you'll create some _mock heroes_ and pretend they came from the server.\n-->\n<p>최종적으로는 리모트 데이터 서버에서 데이터를 받아올 것입니다.\n하지만 지금은 <em>히어로 목</em> 을 생성하고 이 데이터들을 서버에서 받아온 것으로 간주합시다.</p>\n<!--\nCreate a file called `mock-heroes.ts` in the `src/app/` folder.\nDefine a `HEROES` constant as an array of ten heroes and export it.\nThe file should look like this.\n-->\n<p><code>src/app/</code>에 <code>mock-heroes.ts</code>파일을 생성합니다.\n이 파일에 <code>HEROES</code> 배열을 상수로 선언하고 다른 파일에서 참조할 수 있도록 파일 외부로 공개할 것입니다.\n파일의 내용은 다음과 같이 작성합니다.</p>\n<code-example path=\"toh-pt2/src/app/mock-heroes.ts\" header=\"src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Dr Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<!--\n## Displaying heroes\n-->\n<h2 id=\"히어로-표시하기\">히어로 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#히어로-표시하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nOpen the `HeroesComponent` class file and import the mock `HEROES`.\n-->\n<p><code>HeroesComponent</code> 클래스 파일을 열고 <code>HEROES</code> 목 데이터를 로드합니다.</p>\n<!--\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\" header=\"src/app/heroes/heroes.component.ts (import HEROES)\">\n-->\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"import-heroes\" header=\"src/app/heroes/heroes.component.ts (HEROES 로드)\">\nimport { HEROES } from '../mock-heroes';\n\n</code-example>\n<!--\nIn the same file (`HeroesComponent` class), define a component property called `heroes` to expose the `HEROES` array for binding.\n-->\n<p>그리고 클래스에 <code>heroes</code> 프로퍼티를 선언하고 위에서 로드한 <code>HEROES</code> 배열을 바인딩합니다.</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" header=\"src/app/heroes/heroes.component.ts\" region=\"component\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n}\n\n</code-example>\n<!--\n### List heroes with `*ngFor`\n-->\n<h3 id=\"ngfor-로-히어로-목록-표시하기\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 로 히어로 목록 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#ngfor-로-히어로-목록-표시하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nOpen the `HeroesComponent` template file and make the following changes:\n-->\n<p><code>HeroesComponent</code> 템플릿 파일을 열고 다음과 같이 수정합니다:</p>\n<!--\n* Add an `<h2>` at the top,\n* Below it add an HTML unordered list (`<ul>`)\n* Insert an `<li>` within the `<ul>` that displays properties of a `hero`.\n* Sprinkle some CSS classes for styling (you'll add the CSS styles shortly).\n-->\n<ul>\n<li>제일 위에 <code>&#x3C;h2></code>를 추가합니다.</li>\n<li>그 밑에 순서 없는 목록 HTML 태그(<code>&#x3C;ul></code>)를 추가합니다.</li>\n<li><code>&#x3C;ul></code>태그 사이에 <code>&#x3C;li></code>를 추가해서 <code>hero</code>의 프로퍼티를 표시합니다.</li>\n<li>스타일을 지정하기 위해 CSS 클래스를 추가합니다.(CSS 스타일은 조금 뒤에 추가합니다.)</li>\n</ul>\n<!--\nMake it look like this:\n-->\n<p>그러면 다음과 같은 템플릿이 구성됩니다:</p>\n<!--\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\" header=\"heroes.component.html (heroes template)\">\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=&quot;heroes&quot;&gt;\n  &lt;li&gt;\n    &lt;span class=&quot;badge&quot;&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n-->\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"list\" header=\"heroes.component.html (히어로 목록 템플릿)\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li>\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<!--\nThat shows one hero. To list them all, add an `*ngFor` to the `<li>` to iterate through the list of heroes:\n-->\n<p>이 구문은 히어로 한 명을 표시하는 구문입니다. 목록에 있는 히어로를 모두 표시하려면 <code>&#x3C;li></code> 엘리먼트에 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 적용해서 배열을 순회하면 됩니다:</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n\n</code-example>\n<!--\nThe [`*ngFor`](guide/template-syntax#ngFor) is Angular's _repeater_ directive.\nIt repeats the host element for each element in a list.\n-->\n<p><a href=\"guide/template-syntax#ngFor\"><code>*ngFor</code></a>는 <em>항목을 반복하는</em> Angular 디렉티브입니다.\n이 디렉티브는 목록에 있는 항목마다 호스트 엘리먼트를 반복합니다.</p>\n<!--\nThe syntax in this example is as follows:\n\n* `<li>` is the host element.\n* `heroes` holds the mock heroes list from the `HeroesComponent` class, the mock heroes list.\n* `hero` holds the current hero object for each iteration through the list.\n-->\n<p>이 예제에서</p>\n<ul>\n<li>호스트 엘리먼트는 <code>&#x3C;li></code>입니다.</li>\n<li><code>heroes</code>는 <code>HeroesComponent</code> 클래스에 선언된 목록입니다.</li>\n<li><code>hero</code>는 목록을 순회할 때마다 할당되는 히어로 객체입니다.</li>\n</ul>\n<div class=\"alert is-important\">\n<!--\nDon't forget the asterisk (*) in front of `ngFor`. It's a critical part of the syntax.\n-->\n`ngFor`앞에 별표(*)가 붙는 것에 주의하세요. 이 문법은 아주 중요합니다.\n</div>\n<!--\nAfter the browser refreshes, the list of heroes appears.\n-->\n<p>이제 브라우저가 갱신되면 히어로의 목록이 화면에 표시됩니다.</p>\n<a id=\"styles\"></a>\n<!--\n### Style the heroes\n-->\n<h3 id=\"히어로-꾸미기\">히어로 꾸미기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#히어로-꾸미기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe heroes list should be attractive and should respond visually when users\nhover over and select a hero from the list.\n-->\n<p>히어로 목록은 보기 좋게 표시하는 것이 좋으며, 사용자가 어떤 항목에 마우스를 올리거나 선택하면 시각적인 반응을 보여주는 것도 좋습니다.</p>\n<!--\nIn the [first tutorial](tutorial/toh-pt0#app-wide-styles), you set the basic styles for the entire application in `styles.css`.\nThat stylesheet didn't include styles for this list of heroes.\n-->\n<p><a href=\"tutorial/toh-pt0#app-wide-styles\">첫번째 튜토리얼</a>에서는 <code>styles.css</code> 파일에 애플리케이션 전역 스타일을 지정했습니다.\n하지만 이 스타일시트에는 히어로의 목록을 꾸미는 스타일이 존재하지 않습니다.</p>\n<!--\nYou could add more styles to `styles.css` and keep growing that stylesheet as you add components.\n-->\n<p>이 때 <code>styles.css</code>에 더 많은 스타일을 추가할 수도 있지만, 이렇게 작성하면 컴포넌트를 추가할때마다 스타일시트의 내용이 점점 많아집니다.</p>\n<!--\nYou may prefer instead to define private styles for a specific component and keep everything a component needs&mdash; the code, the HTML,\nand the CSS &mdash;together in one place.\n-->\n<p>이 방식보다는 컴포넌트와 관련된 파일— 클래스 코드, HTML, CSS —을 한 곳에서 관리하면서 특정 컴포넌트에 해당하는 스타일만 따로 정의하는 것이 더 좋습니다.</p>\n<!--\nThis approach makes it easier to re-use the component somewhere else\nand deliver the component's intended appearance even if the global styles are different.\n-->\n<p>이렇게 구현하면 컴포넌트를 재사용하기 편해지며 전역 스타일이 변경되더라도 컴포넌트 스타일에 영향을 주지 않습니다.</p>\n<!--\nYou define private styles either inline in the `@Component.styles` array or\nas stylesheet file(s) identified in the `@Component.styleUrls` array.\n-->\n<p>컴포넌트에 적용되는 스타일은 <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 배열에서 인라인으로 정의할 수 있고, 여러 파일에 작성하고 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 배열로 지정할 수도 있습니다.</p>\n<!--\nWhen the CLI generated the `HeroesComponent`, it created an empty `heroes.component.css` stylesheet for the `HeroesComponent`\nand pointed to it in `@Component.styleUrls` like this.\n-->\n<p>Angular CLI로 <code>HeroesComponent</code>를 생성하면 이 컴포넌트에 스타일을 지정하는 <code>heroes.component.css</code> 파일을 자동으로 생성하고 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 목록에 추가합니다.</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"metadata\" header=\"src/app/heroes/heroes.component.ts (@Component)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './heroes.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./heroes.component.css']\n})\n\n</code-example>\n<!--\nOpen the `heroes.component.css` file and paste in the private CSS styles for the `HeroesComponent`.\nYou'll find them in the [final code review](#final-code-review) at the bottom of this guide.\n-->\n<p>그러면 <code>heroes.component.css</code> 파일을 열어서 <code>HeroesComponent</code>에 적용되는 CSS 스타일을 작성할 수 있습니다.\n지금은 이 코드를 생략합니다. 이 파일의 내용은 이 문서의 아래쪽 <a href=\"tutorial/toh-pt2#final-code-review\">최종코드 리뷰</a>에서 확인할 수 있습니다.</p>\n<div class=\"alert is-important\">\n<!--\nStyles and stylesheets identified in `@Component` metadata are scoped to that specific component.\nThe `heroes.component.css` styles apply only to the `HeroesComponent` and don't affect the outer HTML or the HTML in any other component.\n-->\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 메타데이터에 지정된 스타일과 스타일시트 파일은 이 컴포넌트에만 적용됩니다.\n그래서 <code>heroes.component.css</code>에 정의된 스타일은 <code>HeroesComponent</code>에만 적용되며 이 컴포넌트 밖에 있는 HTML 이나 다른 컴포넌트에 영향을 주지 않습니다.</p>\n</div>\n<!--\n## Master/Detail\n-->\n<h2 id=\"목록상세정보\">목록/상세정보<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#목록상세정보\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhen the user clicks a hero in the **master** list,\nthe component should display the selected hero's **details** at the bottom of the page.\n-->\n<p>사용자가 목록에서 히어로를 클릭하면 이 히어로에 대한 상세 정보가 상세정보 화면에 표시되어야 합니다.</p>\n<!--\nIn this section, you'll listen for the hero item click event\nand update the hero detail.\n-->\n<p>이번 섹션에서는 히어로 아이템이 클릭되는 이벤트를 감지하고, 클릭 이벤트가 발생했을 때 상세화면을 업데이트하는 방법을 알아봅시다.</p>\n<!--\n### Add a click event binding\n-->\n<h3 id=\"클릭-이벤트-바인딩하기\">클릭 이벤트 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#클릭-이벤트-바인딩하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAdd a click event binding to the `<li>` like this:\n-->\n<p><code>&#x3C;li></code>태그에 다음과 같이 클릭 이벤트를 바인딩합니다.</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"selectedHero-click\" header=\"heroes.component.html (template excerpt)\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n\n</code-example>\n<!--\nThis is an example of Angular's [event binding](guide/template-syntax#event-binding) syntax.\n\nThe parentheses around `click` tell Angular to listen for the `<li>` element's  `click` event.\nWhen the user clicks in the `<li>`, Angular executes the `onSelect(hero)` expression.\n\nIn the next section, define an `onSelect()` method in `HeroesComponent` to\ndisplay the hero that was defined in the `*ngFor` expression.\n-->\n<p>위 코드는 Angular의 <a href=\"guide/template-syntax#event-binding\">이벤트 바인딩</a> 문법입니다.</p>\n<p>이렇게 이벤트를 바인딩하면 Angular가 <code>&#x3C;li></code> 엘리먼트에서 발생하는 <code>click</code> 이벤트를 감지할 수 있습니다.\n그래서 사용자가 <code>&#x3C;li></code> 엘리먼트를 클릭하면 Angular는 <code>onSelect(hero)</code> 표현식을 실행합니다.</p>\n<p>다음 섹션에서는 <code>HeroesComponent</code>에 <code>onSelect()</code> 메소드를 정의해서 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>로 반복한 히어로 엘리먼트 중에서 사용자가 클릭한 엘리먼트를 하이라이트 처리해봅시다.</p>\n<!--\n### Add the click event handler\n-->\n<h3 id=\"클릭-이벤트-핸들러-추가하기\">클릭 이벤트 핸들러 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#클릭-이벤트-핸들러-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nRename the component's `hero` property to `selectedHero` but don't assign it.\nThere is no _selected hero_ when the application starts.\n-->\n<p>컴포넌트의 <code>hero</code> 프로퍼티를 <code>selectedHero</code>로 변경하지만 이 프로퍼티에 값을 직접 할당하지는 않습니다.\n왜냐하면 애플리케이션이 실행되는 시점에 <em>선택된 히어로</em> 는 없기 때문입니다.</p>\n<!--\nAdd the following `onSelect()` method, which assigns the clicked hero from the template\nto the component's `selectedHero`.\n-->\n<p>그 다음에는 <code>onSelect()</code>메소드를 추가합니다. 이 메소드는 템플릿에서 선택된 히어로를 컴포넌트의 <code>selectedHero</code> 변수에 할당합니다.</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.ts\" region=\"on-select\" header=\"src/app/heroes/heroes.component.ts (onSelect)\">\nselectedHero: Hero;\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<!--\n### Add a details section\n-->\n<h3 id=\"상세화면-영역-추가하기\">상세화면 영역 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#상세화면-영역-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nCurrently, you have a list in the component template. To click on a hero on the list\nand reveal details about that hero, you need a section for the details to render in the\ntemplate. Add the following to `heroes.component.html` beneath the list section:\n-->\n<p>지금까지 만든 앱에서 컴포넌트 템플릿에는 히어로 목록이 표시됩니다.\n이제는 이 목록에서 히어로 한 명을 클릭했을 때 해당 히어로의 상세정보를 표시하기 위해 상세정보에 해당하는 템플릿을 추가해야 합니다.\n다음 내용을 <code>heroes.component.html</code> 파일의 목록 아래에 추가합니다:</p>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"selectedHero-details\" header=\"heroes.component.html (selected hero details)\">\n&#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{selectedHero.id}}&#x3C;/div>\n&#x3C;div>\n  &#x3C;label>name:\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n  &#x3C;/label>\n&#x3C;/div>\n\n</code-example>\n<!--\nAfter the browser refreshes, the application is broken.\n-->\n<p>이제 브라우저가 갱신되면 애플리케이션이 더이상 동작하지 않습니다.</p>\n<!--\nOpen the browser developer tools and look in the console for an error message like this:\n-->\n<p>이 때 브라우저의 개발자 도구를 열어서 콘솔창을 보면 다음과 같은 에러 메시지를 확인할 수 있습니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  HeroesComponent.html:3 ERROR TypeError: Cannot read property 'name' of undefined\n</code-example>\n<!--\n#### What happened?\n-->\n<h4 id=\"무슨-일이-일어난-걸까요\">무슨 일이 일어난 걸까요?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#무슨-일이-일어난-걸까요\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nWhen the app starts, the `selectedHero` is `undefined` _by design_.\n-->\n<p>앱이 시작되고 나면 <code>selectedHero</code>를 선언하면서 <em>의도한 대로</em> <code>selectedHero</code> 값이 <code>undefined</code>입니다.</p>\n<!--\nBinding expressions in the template that refer to properties of `selectedHero`&mdash;expressions like `{{selectedHero.name}}`&mdash;_must fail_ because there is no selected hero.\n-->\n<p>그래서 템플릿에서 — <code>{{selectedHero.name}}</code> 와 같이 — <code>selectedHero</code>의 프로퍼티를 참조하는 바인딩 표현식은 선택된 히어로가 존재하지 않기 때문에 <em>동작하지 않습니다.</em></p>\n<!--\n#### The fix - hide empty details with _*ngIf_\n-->\n<h4 id=\"수정하기---빈-화면은-ngif-로-감추기\">수정하기 - 빈 화면은 <em>*ngIf</em> 로 감추기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#수정하기---빈-화면은-ngif-로-감추기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe component should only display the selected hero details if the `selectedHero` exists.\n-->\n<p>컴포넌트는 <code>selectedHero</code> 프로퍼티의 값이 존재할 때만 선택된 히어로의 상세화면을 보여줘야 합니다.</p>\n<!--\nWrap the hero detail HTML in a `<div>`.\nAdd Angular's `*ngIf` directive to the `<div>` and set it to `selectedHero`.\n-->\n<p>히어로의 상세정보를 표현하는 HTML을 <code>&#x3C;div></code>로 감쌉니다.\n그리고 Angular가 제공하는 <code>*ngif</code> 디렉티브를 <code>&#x3C;div></code>에 추가하고 이 디렉티브의 표현식으로 <code>selectedHero</code>를 지정합니다. </p>\n<div class=\"alert is-important\">\n<!--\nDon't forget the asterisk (*) in front of `ngIf`. It's a critical part of the syntax.\n-->\n`ngIf`앞에 별표(*)가 있다는 것을 잊지마세요. Angular에서 아주 중요한 문법입니다.\n</div>\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"ng-if\" header=\"src/app/heroes/heroes.component.html (*ngIf)\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n\n  &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n</code-example>\n<!--\nAfter the browser refreshes, the list of names reappears.\nThe details area is blank.\nClick a hero in the list of heroes and its details appear.\nThe app seems to be working again.\nThe heroes appear in a list and details about the clicked hero appear at the bottom of the page.\n-->\n<p>이제 브라우저가 갱신되고 나면 히어로의 목록이 다시 화면에 표시됩니다.\n이 때 상세화면 영역은 비어있습니다.\n목록에 있는 히어로 중 하나를 클릭해 보세요.\n앱이 다시 정상적으로 동작하는 것을 확인할 수 있습니다.\n그리고 선택한 히어로의 상세정보가 히어로들의 목록을 표시하는 부분 아래에 표시되는 것도 확인할 수 있습니다.</p>\n<!--\n#### Why it works\n-->\n<h4 id=\"어떻게-동작하는-것일까요\">어떻게 동작하는 것일까요?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#어떻게-동작하는-것일까요\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nWhen `selectedHero` is undefined, the `ngIf` removes the hero detail from the DOM. There are no `selectedHero` bindings to consider.\n-->\n<p><code>selectedHero</code>의 값이 <code>undefined</code>이면 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>는 히어로의 상세정보를 표현하는 부분을 DOM에서 제거합니다.\n그래서 <code>selectedHero</code>를 바인딩하지 못하는 에러는 발생하지 않습니다.</p>\n<!--\nWhen the user picks a hero, `selectedHero` has a value and\n`ngIf` puts the hero detail into the DOM.\n-->\n<p>그리고 사용자가 히어로를 선택하면 <code>selectedHero</code>의 값이 비어있지 않기 때문에 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>가 히어로의 상세정보를 표현하는 부분을 DOM에 추가합니다.</p>\n<!--\n### Style the selected hero\n-->\n<h3 id=\"선택된-항목-스타일-지정하기\">선택된 항목 스타일 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#선택된-항목-스타일-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIt's difficult to identify the _selected hero_ in the list when all `<li>` elements look alike.\n-->\n<p>히어로 목록에 있는 <code>&#x3C;li></code> 엘리먼트는 모두 똑같이 표시되기 때문에 이 중에서 <em>선택된</em> 히어로를 구분하기 어렵습니다.</p>\n<!--\nIf the user clicks \"Magneta\", that hero should render with a distinctive but subtle background color like this:\n-->\n<p>이것보다는 사용자가 \"Magneta\"와 같은 히어로를 클릭했을 때 이 항목의 배경색이 다음과 같이 변경되어 다른 항목과 구별되는 것이 더 좋습니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/toh/heroes-list-selected.png\" alt=\"Selected hero\" width=\"165\" height=\"129\">\n</div>\n<!--\nThat _selected hero_ coloring is the work of the `.selected` CSS class in the [styles you added earlier](#styles).\nYou just have to apply the `.selected` class to the `<li>` when the user clicks it.\n-->\n<p>이 스타일은 <a href=\"tutorial/toh-pt2#styles\">이전에 추가한 스타일</a>에 있는 <code>.selected</code> CSS 클래스가 적용된 것입니다.\n사용자가 선택한 항목에 이 클래스를 적용하려면 사용자가 클릭한 <code>&#x3C;li></code> 엘리먼트에 <code>.selected</code> 클래스를 적용하기만 하면 됩니다.</p>\n<!--\nThe Angular [class binding](guide/template-syntax#class-binding) makes it easy to add and remove a CSS class conditionally.\nJust add `[class.some-css-class]=\"some-condition\"` to the element you want to style.\n-->\n<p>Angular가 제공하는 <a href=\"guide/template-syntax#class-binding\">클래스 바인딩</a> 문법을 사용하면 특정 조건에 따라 CSS 클래스를 추가하거나 제거할 수 있습니다.\n스타일을 지정하려는 엘리먼트에 <code>[class.some-css-class]=\"some-condition\"</code>와 같은 문법을 추가하면 됩니다.</p>\n<!--\nAdd the following `[class.selected]` binding to the `<li>` in the `HeroesComponent` template:\n-->\n<p>이 예제에서는 <code>HeroesComponent</code> 템플릿의 <code>&#x3C;li></code> 엘리먼트에 <code>[class.selected]</code>와 같은 문법으로 클래스를 바인딩합니다:</p>\n<!--\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\" header=\"heroes.component.html (toggle the 'selected' CSS class)\">\n[class.selected]=&quot;hero === selectedHero&quot;\n\n</code-example>\n-->\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.1.html\" region=\"class-selected\" header=\"heroes.component.html (&#x27;selected&#x27; CSS 클래스 토글하기)\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<!--\nWhen the current row hero is the same as the `selectedHero`, Angular adds the `selected` CSS class. When the two heroes are different, Angular removes the class.\n-->\n<p>그러면 <code>selectedHero</code>와 같은 히어로가 있는 줄에 <code>selected</code> CSS 클래스가 추가됩니다.\n그리고 컴포넌트 프로퍼티에 있는 값과 다르다면 이 클래스가 제거됩니다.</p>\n<!--\nThe finished `<li>` looks like this:\n-->\n<p>이렇게 수정된 <code>&#x3C;li></code> 코드는 다음과 같습니다.</p>\n<!--\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\" header=\"heroes.component.html (list item hero)\">\n&lt;li *ngFor=&quot;let hero of heroes&quot;\n  [class.selected]=&quot;hero === selectedHero&quot;\n  (click)=&quot;onSelect(hero)&quot;&gt;\n  &lt;span class=&quot;badge&quot;&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n&lt;/li&gt;\n\n</code-example>\n-->\n<code-example path=\"toh-pt2/src/app/heroes/heroes.component.html\" region=\"li\" header=\"heroes.component.html (히어로 목록)\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n  [class.selected]=\"hero === selectedHero\"\n  (click)=\"onSelect(hero)\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n&#x3C;/li>\n\n</code-example>\n<a id=\"final-code-review\"></a>\n<!--\n## Final code review\n-->\n<h2 id=\"최종코드-리뷰\">최종코드 리뷰<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#최종코드-리뷰\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYour app should look like this <live-example></live-example>.\n-->\n<p>여기까지 수정한 앱은 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n<!--\nHere are the code files discussed on this page, including the `HeroesComponent` styles.\n-->\n<p>그리고 이번 문서에서 다룬 파일의 내용은 다음과 같습니다.</p>\n<code-tabs>\n\n  <code-pane header=\"src/app/mock-heroes.ts\" path=\"toh-pt2/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Dr Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt2/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HEROES } from '../mock-heroes';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './heroes.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./heroes.component.css']\n})\n\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt2/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n\n  &#x3C;h2>{{selectedHero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt2/src/app/heroes/heroes.component.css\">\n/* HeroesComponent's private CSS styles */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n.heroes li.selected {\n  background-color: #CFD8DC;\n  color: white;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC;\n  color: white;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color:#405061;\n  line-height: 1em;\n  <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<!--\n## Summary\n-->\n<h2 id=\"정리\">정리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#정리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* The Tour of Heroes app displays a list of heroes in a Master/Detail view.\n* The user can select a hero and see that hero's details.\n* You used `*ngFor` to display a list.\n* You used `*ngIf` to conditionally include or exclude a block of HTML.\n* You can toggle a CSS style class with a `class` binding.\n-->\n<ul>\n<li>히어로들의 여행 앱은 화면에 히어로의 목록을 표시합니다.</li>\n<li>사용자는 히어로를 한 명 선택할 수 있으며, 히어로를 선택하면 이 히어로의 상세정보를 확인할 수 있습니다.</li>\n<li>목록을 표시할 때는 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 사용합니다.</li>\n<li>특정 조건에 따라 DOM에 HTML 템플릿을 추가하거나 제거하려면 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>를 사용합니다.</li>\n<li><code>class</code> 바인딩을 사용하면 CSS 스타일 클래스를 적용하거나 적용하지 않을 수 있습니다.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/Component#templateUrl\n - api/core/OnInit\n - api/forms/NgModel\n - api/router/Scroll#position\n - guide/template-syntax#class-binding\n - guide/template-syntax#event-binding\n - guide/template-syntax#ngFor\n - tutorial/toh-pt0#app-wide-styles\n - tutorial/toh-pt2#final-code-review\n - tutorial/toh-pt2#ngfor-로-히어로-목록-표시하기\n - tutorial/toh-pt2#styles\n - tutorial/toh-pt2#목록-표시하기\n - tutorial/toh-pt2#목록상세정보\n - tutorial/toh-pt2#무슨-일이-일어난-걸까요\n - tutorial/toh-pt2#상세화면-영역-추가하기\n - tutorial/toh-pt2#선택된-항목-스타일-지정하기\n - tutorial/toh-pt2#수정하기---빈-화면은-ngif-로-감추기\n - tutorial/toh-pt2#어떻게-동작하는-것일까요\n - tutorial/toh-pt2#정리\n - tutorial/toh-pt2#최종코드-리뷰\n - tutorial/toh-pt2#클릭-이벤트-바인딩하기\n - tutorial/toh-pt2#클릭-이벤트-핸들러-추가하기\n - tutorial/toh-pt2#히어로-꾸미기\n - tutorial/toh-pt2#히어로-목mock-생성하기\n - tutorial/toh-pt2#히어로-표시하기\n - https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt2.md?message=docs%3A%20describe%20your%20change...\n-->"
}