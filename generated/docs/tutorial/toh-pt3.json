{
  "id": "tutorial/toh-pt3",
  "title": "컴포넌트 구조",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt3.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Master/Detail Components\n-->\n<h1 id=\"컴포넌트-구조\">컴포넌트 구조<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#컴포넌트-구조\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAt the moment, the `HeroesComponent` displays both the list of heroes and the selected hero's details.\n-->\n<p>지금까지 작성한 앱은 <code>HeroesComponent</code>가 히어로의 목록과 선택된 히어로의 상세정보를 동시에 표시합니다.</p>\n<!--\nKeeping all features in one component as the application grows will not be maintainable.\nYou'll want to split up large components into smaller sub-components, each focused on a specific task or workflow.\n-->\n<p>하지만 모든 기능을 컴포넌트 하나가 담당하면 애플리케이션이 커질수록 이 컴포넌트를 관리하기 점점 힘들어 집니다.\n그래서 컴포넌트가 복잡해지면 이 컴포넌트의 역할을 나눠서 일부 역할만 담당하도록 작은 컴포넌트로 나누는 것이 좋습니다.</p>\n<!--\nIn this page, you'll take the first step in that direction by moving the hero details into a separate, reusable `HeroDetailComponent`.\n\nThe `HeroesComponent` will only present the list of heroes.\nThe `HeroDetailComponent` will present details of a selected hero.\n-->\n<p>이 문서에서는 히어로의 상세정보를 표시하는 부분을 분리해서 <code>HeroDetailComponent</code>로 만들어 봅시다.</p>\n<p>그러면 <code>HeroesComponent</code>는 히어로의 목록만 표시하고 이 목록에서 선택된 히어로는 <code>HeroDetailComponent</code>가 표시할 것입니다.</p>\n<!--\n## Make the `HeroDetailComponent`\n-->\n<h2 id=\"herodetailcomponent-생성하기\"><code>HeroDetailComponent</code> 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#herodetailcomponent-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUse the Angular CLI to generate a new component named `hero-detail`.\n-->\n<p>Angular CLI로 <code>hero-detail</code> 컴포넌트를 생성합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component hero-detail\n</code-example>\n<!--\nThe command scaffolds the following:\n\n* Creates a directory `src/app/hero-detail`.\n\nInside that directory four files are generated:\n\n* A CSS file for the component styles.\n* An HTML file for the component template.\n* A TypeScript file with a component class named `HeroDetailComponent`.\n* A test file for the `HeroDetailComponent` class.\n\nThe command also adds the `HeroDetailComponent` as a declaration in the `@NgModule` decorator of the `src/app/app.module.ts` file.\n-->\n<p>이 명령은 다음 순서로 실행됩니다:</p>\n<ul>\n<li><code>src/app/hero-detail</code> 폴더를 생성합니다.</li>\n</ul>\n<p>그리고 이 폴더에 4개의 파일을 생성합니다:</p>\n<ul>\n<li>컴포넌트 스타일을 지정하는 CSS 파일</li>\n<li>컴포넌트 템플릿을 정의하는 HTML 파일</li>\n<li>컴포넌트 클래스 <code>HeroDetailComponent</code>가 정의된 TypeScript 파일</li>\n<li><code>HeroDetailComponent</code> 클래스 파일을 테스트하는 파일</li>\n</ul>\n<p>이 명령을 실행하면 <code>HeroDetailComponent</code>가 자동으로 <code>src/app/app.module.ts</code> 파일에 있는 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>에 등록됩니다.</p>\n<!--\n### Write the template\n-->\n<h3 id=\"템플릿-작성하기\">템플릿 작성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#템플릿-작성하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nCut the HTML for the hero detail from the bottom of the `HeroesComponent` template and paste it over the generated boilerplate in the `HeroDetailComponent` template.\n\nThe pasted HTML refers to a `selectedHero`.\nThe new `HeroDetailComponent` can present _any_ hero, not just a selected hero.\nSo replace \"selectedHero\" with \"hero\" everywhere in the template.\n\nWhen you're done, the `HeroDetailComponent` template should look like this:\n-->\n<p><code>HeroesComponent</code> 아래쪽에 히어로의 상세정보를 표시하는 HTML 템플릿을 잘라내서 <code>HeroDetailComponent</code> 템플릿에 붙여넣습니다.</p>\n<p>이 때 붙여넣은 HTML 에는 <code>selectedHero</code>를 참조하는 부분이 있습니다.\n그런데 새로 만든 <code>HeroDetailComponent</code>는 선택된 히어로가 아니라 히어로 <em>한 명의</em> 상세정보를 표시합니다.\n템플릿에 있는 <code>selectedHero</code>는 모두 <code>hero</code>로 변경합니다.</p>\n<p>그러면 <code>HeroDetailComponent</code>의 템플릿이 다음과 같이 작성될 것입니다:</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\" header=\"src/app/hero-detail/hero-detail.component.html\" linenums=\"false\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-example>\n<!--\n### Add the `@Input()` hero property\n-->\n<h3 id=\"input-히어로-프로퍼티-추가하기\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 히어로 프로퍼티 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#input-히어로-프로퍼티-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `HeroDetailComponent` template binds to the component's `hero` property\nwhich is of type `Hero`.\n\nOpen the `HeroDetailComponent` class file and import the `Hero` symbol.\n-->\n<p><code>HeroDetailComponent</code> 템플릿에 바인딩된 <code>hero</code>는 컴포넌트의 <code>hero</code> 프로퍼티를 참조해야 합니다.</p>\n<p><code>HeroDetailComponent</code> 클래스 파일을 열어서 <code>Hero</code> 심볼을 로드합니다.</p>\n<!--\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\"\nregion=\"import-hero\" header=\"src/app/hero-detail/hero-detail.component.ts (import Hero)\">\n-->\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-hero\" header=\"src/app/hero-detail/hero-detail.component.ts (Hero 로드하기)\">\nimport { Hero } from '../hero';\n\n</code-example>\n<!--\nThe `hero` property\n[must be an _Input_ property](guide/template-syntax#inputs-outputs \"Input and Output properties\"),\nannotated with the `@Input()` decorator,\nbecause the _external_ `HeroesComponent` [will bind to it](#heroes-component-template) like this.\n-->\n<p>이 때 <code>hero</code> 프로퍼티의 값은 <em>외부</em> 컴포넌트인 <code>HeroesComponent</code>에서 <a href=\"tutorial/toh-pt3#heroes-component-template\">바인딩되어</a> 전달됩니다. 따라서 <code>hero</code> 프로퍼티는 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 데코레이터를 사용해서 <a href=\"guide/template-syntax#inputs-outputs\" title=\"Input and Output properties\"><em>입력</em> 프로퍼티</a>로 선언해야 합니다.</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\">\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n</code-example>\n<!--\nAmend the `@angular/core` import statement to include the `Input` symbol.\n-->\n<p><code>@angular/core</code> 패키지에서 <code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> 심볼을 로드합니다.</p>\n<!--\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\" header=\"src/app/hero-detail/hero-detail.component.ts (import Input)\" linenums=\"false\">\n-->\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"import-input\" header=\"src/app/hero-detail/hero-detail.component.ts (Input 로드하기)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\n</code-example>\n<!--\nAdd a `hero` property, preceded by the `@Input()` decorator.\n-->\n<p>그리고 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 데코레이터와 함께 <code>hero</code> 프로퍼티를 선언합니다.</p>\n<code-example path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\" region=\"input-hero\" linenums=\"false\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n</code-example>\n<!--\nThat's the only change you should make to the `HeroDetailComponent` class.\nThere are no more properties. There's no presentation logic.\nThis component simply receives a hero object through its `hero` property and displays it.\n-->\n<p><code>HeroDetailComponent</code> 클래스는 여기까지 수정하면 됩니다.\n더 추가할 프로퍼티는 없으며 클래스에 추가할 로직도 없습니다.\n이 컴포넌트는 단순하게 히어로 객체를 받아서 <code>hero</code> 프로퍼티에 할당하고, 템플릿에 이 히어로의 상세정보를 표시할 뿐입니다.</p>\n<!--\n## Show the `HeroDetailComponent`\n-->\n<h2 id=\"herodetailcomponent-표시하기\"><code>HeroDetailComponent</code> 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#herodetailcomponent-표시하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `HeroesComponent` is still a master/detail view.\n\nIt used to display the hero details on its own, before you cut that portion of the template. Now it will delegate to the `HeroDetailComponent`.\n-->\n<p><code>HeroesComponent</code>는 이전과 동일하게 목록/상세정보를 표시해야 합니다.</p>\n<p>그런데 히어로의 상세정보를 표시하는 부분은 이제 템플릿에 존재하지 않습니다. 이 부분은 <code>HeroDetailComponent</code>로 옮겨졌습니다.</p>\n<!--\nThe two components will have a parent/child relationship.\nThe parent `HeroesComponent` will control the child `HeroDetailComponent`\nby sending it a new hero to display whenever\nthe user selects a hero from the list.\n\nYou won't change the `HeroesComponent` _class_ but you will change its _template_.\n-->\n<p>이제 <code>HeroesComponent</code>와 <code>HeroDetailComponent</code>는 부모/자식 관계가 되었습니다.\n부모 컴포넌트인 <code>HeroesComponent</code>는 자식 컴포넌트인 <code>HeroDetailComponent</code>를 관리합니다. 부모 컴포넌트의 히어로 목록에서 히어로를 선택하면 이 히어로의 정보를 <code>HeroDetailComponent</code>로 보내서 히어로의 정보를 표시하게 할 것입니다.</p>\n<a id=\"heroes-component-template\"></a>\n<!--\n### Update the `HeroesComponent` template\n-->\n<h3 id=\"heroescomponent-템플릿-수정하기\"><code>HeroesComponent</code> 템플릿 수정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#heroescomponent-템플릿-수정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `HeroDetailComponent` selector is `'app-hero-detail'`.\nAdd an `<app-hero-detail>` element near the bottom of the `HeroesComponent` template, where the hero detail view used to be.\n\nBind the `HeroesComponent.selectedHero` to the element's `hero` property like this.\n-->\n<p><code>HeroDetailComponent</code>의 셀렉터는 <code>'app-hero-detail'</code> 입니다.\n원래 히어로의 상세정보를 표시하던 <code>HeroesComponent</code> 템플릿 아래쪽에 <code>&#x3C;app-hero-detail></code> 엘리먼트를 추가합니다.</p>\n<p>그리고 <code>HeroesComponent.selectedHero</code> 프로퍼티를 이 엘리먼트의 <code>hero</code> 프로퍼티에 다음과 같이 바인딩합니다.</p>\n<!--\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\" header=\"heroes.component.html (HeroDetail binding)\">\n-->\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" region=\"hero-detail-binding\" header=\"heroes.component.html (HeroDetail 바인딩)\">\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n</code-example>\n<!--\n`[hero]=\"selectedHero\"` is an Angular [property binding](guide/template-syntax#property-binding).\n-->\n<p><code>[hero]=\"selectedHero\"</code>는 Angular가 제공하는 <a href=\"guide/template-syntax#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\">프로퍼티 바인딩</a> 문법입니다.</p>\n<!--\nIt's a _one way_ data binding from\nthe `selectedHero` property of the `HeroesComponent` to the `hero` property of the target element, which maps to the `hero` property of the `HeroDetailComponent`.\n-->\n<p>이렇게 작성하면 <code>HeroesComponent</code>의 <code>selectedHero</code> 프로퍼티가 <code>HeroDetailComponent</code>의 <code>hero</code> 프로퍼티로 <em>단방향</em> 데이터 바인딩됩니다.</p>\n<!--\nNow when the user clicks a hero in the list, the `selectedHero` changes.\nWhen the `selectedHero` changes, the _property binding_ updates `hero`\nand the `HeroDetailComponent` displays the new hero.\n\nThe revised `HeroesComponent` template should look like this:\n-->\n<p>이제 사용자가 목록에서 선택하면 <code>selectedHero</code>의 값이 변경됩니다.\n그리고 <code>selectedHero</code> 값이 변경되면 <em>프로퍼티 바인딩 된</em> <code>HeroDetailComponent</code>의 <code>hero</code> 프로퍼티도 변경되면서 선택된 히어로의 상세정보가 화면에 표시됩니다.</p>\n<p>이렇게 수정하고 나면 <code>HeroesComponent</code> 템플릿 코드는 다음과 같이 변경됩니다:</p>\n<code-example path=\"toh-pt3/src/app/heroes/heroes.component.html\" header=\"heroes.component.html\" linenums=\"false\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n\n</code-example>\n<!--\nThe browser refreshes and the app starts working again as it did before.\n-->\n<p>브라우저가 갱신되고 나면 애플리케이션이 실행되면서 이전과 동일하게 동작합니다.</p>\n<!--\n## What changed?\n-->\n<h2 id=\"어떤-것이-변경되었을까요\">어떤 것이 변경되었을까요?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#어떤-것이-변경되었을까요\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAs [before](tutorial/toh-pt2), whenever a user clicks on a hero name,\nthe hero detail appears below the hero list.\nNow the `HeroDetailComponent` is presenting those details instead of the `HeroesComponent`.\n-->\n<p>이 앱은 <a href=\"tutorial/toh-pt2\">이전</a>과 동일하게 사용자가 히어로의 이름을 클릭하면 히어로 목록 아래에 히어로의 상세정보를 표시합니다.\n하지만 이제는 히어로의 상세정보를 <code>HeroesComponent</code> 대신 <code>HeroDetailComponent</code>가 표시합니다.</p>\n<!--\nRefactoring the original `HeroesComponent` into two components yields benefits, both now and in the future:\n\n1. You simplified the `HeroesComponent` by reducing its responsibilities.\n\n1. You can evolve the `HeroDetailComponent` into a rich hero editor\nwithout touching the parent `HeroesComponent`.\n\n1. You can evolve the `HeroesComponent` without touching the hero detail view.\n\n1. You can re-use the `HeroDetailComponent` in the template of some future component.\n-->\n<p>이번 가이드에서는 <code>HeroesComponent</code>를 좀 더 효율적으로 관리하기 위해 컴포넌트 두 개로 분리했습니다:</p>\n<ol>\n<li>\n<p><code>HeroesComponent</code>의 코드가 좀 더 간단해졌습니다.</p>\n</li>\n<li>\n<p><code>HeroDetailComponent</code>는 좀 더 다양한 기능으로 확장할 수 있지만, 이 때 부모 컴포넌트인 <code>HeroesComponent</code>는 신경쓰지 않아도 됩니다.</p>\n</li>\n<li>\n<p><code>HeroesComponent</code>를 수정할 때도 상세정보 화면은 신경쓰지 않아도 됩니다.</p>\n</li>\n<li>\n<p><code>HeroDetailComponent</code>는 다른 컴포넌트에서도 재사용할 수 있습니다.</p>\n</li>\n</ol>\n<!--\n## Final code review\n-->\n<h2 id=\"최종코드-리뷰\">최종코드 리뷰<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#최종코드-리뷰\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nHere are the code files discussed on this page and your app should look like this <live-example></live-example>.\n-->\n<p>이 문서에서 다룬 코드는 다음과 같습니다. 이 코드는 <live-example></live-example> 에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n<code-tabs>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./hero-detail.component.css']\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt3/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt3/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;app-hero-detail [hero]=\"selectedHero\">&#x3C;/app-hero-detail>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt3/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\nimport { HeroDetailComponent } from './hero-detail/hero-detail.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    HeroDetailComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<!--\n## Summary\n-->\n<h2 id=\"정리\">정리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#정리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* You created a separate, reusable `HeroDetailComponent`.\n\n* You used a [property binding](guide/template-syntax#property-binding) to give the parent `HeroesComponent` control over the child `HeroDetailComponent`.\n\n* You used the [`@Input` decorator](guide/template-syntax#inputs-outputs)\nto make the `hero` property available for binding\nby the external `HeroesComponent`.\n-->\n<ul>\n<li>\n<p>기존 컴포넌트의 일부를 분리해서 <code>HeroDetailComponent</code>를 만들었습니다. 이 컴포넌트는 다른 곳에 재사용할 수 있습니다.</p>\n</li>\n<li>\n<p>부모 컴포넌트 <code>HeroesComponent</code>에서 자식 컴포넌트 <code>HeroDetailComponent</code>로 데이터를 전달하기 위해 <a href=\"guide/template-syntax#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\">프로퍼티 바인딩</a>을 사용했습니다.</p>\n</li>\n<li>\n<p><code>HeroDetailComponent</code>의 <code>hero</code> 프로퍼티 값을 컴포넌트 외부인 <code>HeroesComponent</code>에서 가져오기 위해 <a href=\"guide/template-syntax#inputs-outputs\"><code>@Input</code> 데코레이터</a>를 사용했습니다.</p>\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Input\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/template-syntax#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#inputs-outputs\n - tutorial/toh-pt2\n - tutorial/toh-pt3#herodetailcomponent-생성하기\n - tutorial/toh-pt3#herodetailcomponent-표시하기\n - tutorial/toh-pt3#heroes-component-template\n - tutorial/toh-pt3#heroescomponent-템플릿-수정하기\n - tutorial/toh-pt3#input-히어로-프로퍼티-추가하기\n - tutorial/toh-pt3#어떤-것이-변경되었을까요\n - tutorial/toh-pt3#정리\n - tutorial/toh-pt3#최종코드-리뷰\n - tutorial/toh-pt3#컴포넌트-구조\n - tutorial/toh-pt3#템플릿-작성하기\n - https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt3.md?message=docs%3A%20describe%20your%20change...\n-->"
}