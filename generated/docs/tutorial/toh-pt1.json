{
  "id": "tutorial/toh-pt1",
  "title": "히어로 에디터",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt1.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# The hero editor\n-->\n<h1 id=\"히어로-에디터\">히어로 에디터<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#히어로-에디터\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nThe application now has a basic title.\nNext you will create a new component to display hero information\nand place that component in the application shell.\n\n<div class=\"alert is-helpful\">\n\n  For the sample app that this page describes, see the <live-example></live-example>.\n\n</div>\n-->\n<p>이전 튜토리얼에서는 애플리케이션의 제목을 수정해 봤습니다.\n이번 튜토리얼에서는 히어로의 정보를 표시하는 컴포넌트를 생성하고 이 컴포넌트를 애플리케이션 셸에 추가해 봅시다.</p>\n<div class=\"alert is-helpful\">\n<p>  이 문서에서 설명하는 앱은 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<!--\n## Create the heroes component\n-->\n<h2 id=\"히어로-컴포넌트-생성하기\">히어로 컴포넌트 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#히어로-컴포넌트-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUsing the Angular CLI, generate a new component named `heroes`.\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component heroes\n</code-example>\n\nThe CLI creates a new folder, `src/app/heroes/`, and generates\nthe three files of the  `HeroesComponent` along with a test file.\n\nThe `HeroesComponent` class file is as follows:\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"v1\" header=\"app/heroes/heroes.component.ts (initial version)\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-heroes&#39;,\n  templateUrl: &#39;./heroes.component.html&#39;,\n  styleUrls: [&#39;./heroes.component.css&#39;]\n})\nexport class HeroesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n\nYou always import the `Component` symbol from the Angular core library\nand annotate the component class with `@Component`.\n\n`@Component` is a decorator function that specifies the Angular metadata for the component.\n\nThe CLI generated three metadata properties:\n\n1. `selector`&mdash; the component's CSS element selector\n1. `templateUrl`&mdash; the location of the component's template file.\n1. `styleUrls`&mdash; the location of the component's private CSS styles.\n-->\n<p>다음 명령을 실행해서 Angular CLI로 <code>heroes</code> 컴포넌트를 생성합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component heroes\n</code-example>\n<p>그러면 CLI가 <code>src/app/heroes/</code>폴더를 생성하고 <code>HeroesComponent</code>를 구성하는 파일 3개와 테스트 파일을 생성합니다.</p>\n<p>자동으로 생성된 <code>HeroesComponent</code> 클래스 파일의 내용은 다음과 같습니다.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"v1\" header=\"app/heroes/heroes.component.ts (초기 버전)\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n<p>Angular 컴포넌트를 선언하려면 반드시 Angular 코어 라이브러리에서 <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 심볼을 로드하고 컴포넌트 클래스에 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 와 같이 지정해야 합니다.</p>\n<p>이 때 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>는 클래스에 메타데이터를 지정해서 Angular 컴포넌트로 선언하는 데코레이터 함수입니다.</p>\n<p>Angular CLI는 기본적으로 3개의 메타데이터 프로퍼티를 생성합니다.</p>\n<ol>\n<li><code>selector</code>— 컴포넌트의 CSS 엘리먼트 셀럭터</li>\n<li><code>templateUrl</code>— 컴포넌트 템플릿 파일의 위치</li>\n<li><code>styleUrls</code>— 컴포넌트 CSS 스타일 파일의 위치</li>\n</ol>\n<a id=\"selector\"></a>\n<!--\nThe [CSS element selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors),\n`'app-heroes'`, matches the name of the HTML element that identifies this component within a parent component's template.\n\nThe `ngOnInit()` is a [lifecycle hook](guide/lifecycle-hooks#oninit).\nAngular calls `ngOnInit()` shortly after creating a component.\nIt's a good place to put initialization logic.\n\nAlways `export` the component class so you can `import` it elsewhere ... like in the `AppModule`.\n-->\n<p><code>'app-heroes'</code>는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">CSS 엘리먼트 셀렉터</a>입니다.\n엘리먼트 셀렉터는 DOM 트리에서 이 컴포넌트를 표현하는 이름이며, 부모 컴포넌트의 템플릿에 사용합니다.</p>\n<p><code>ngOnInit</code>은 <a href=\"guide/lifecycle-hooks#oninit\">라이프싸이클 후킹 함수</a> 입니다.\nAngular는 컴포넌트를 생성한 직후에 <code>ngOnInit</code>를 호출합니다.\n그래서 컴포넌트를 초기화하는 로직은 이 메소드에 작성하는 것이 좋습니다.</p>\n<p>컴포넌트는 반드시 <code>export</code> 해야 <code>AppModule</code>와 같은 다른 모듈에서 <code>import</code> 할 수 있습니다.</p>\n<!--\n### Add a `hero` property\n-->\n<h3 id=\"hero-프로퍼티-추가하기\"><code>hero</code> 프로퍼티 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#hero-프로퍼티-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAdd a `hero` property to the `HeroesComponent` for a hero named \"Windstorm.\"\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"add-hero\" header=\"heroes.component.ts (hero property)\">\nhero = &#39;Windstorm&#39;;\n\n</code-example>\n-->\n<p><code>HeroesComponent</code>에 <code>hero</code> 프로퍼티를 추가하고 이 값을 히어로의 이름 \"Windstorm\"로 할당하세요.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" region=\"add-hero\" header=\"heroes.component.ts (hero 프로퍼티)\">\nhero = 'Windstorm';\n\n</code-example>\n<!--\n### Show the hero\n-->\n<h3 id=\"히어로-표시하기\">히어로 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#히어로-표시하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nOpen the `heroes.component.html` template file.\nDelete the default text generated by the Angular CLI and\nreplace it with a data binding to the new `hero` property.\n-->\n<p><code>heroes.component.html</code> 템플릿 파일을 엽니다.\n이 파일에서 Angular CLI가 만든 코드를 삭제하고 <code>hero</code> 프로퍼티를 데이터 바인딩하는 코드로 수정합니다.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" header=\"heroes.component.html\" region=\"show-hero-1\">\n{{hero}}\n\n</code-example>\n<!--\n## Show the `HeroesComponent` view\n-->\n<h2 id=\"heroescomponent-뷰-표시하기\"><code>HeroesComponent</code> 뷰 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#heroescomponent-뷰-표시하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo display the `HeroesComponent`, you must add it to the template of the shell `AppComponent`.\n\nRemember that `app-heroes` is the [element selector](#selector) for the `HeroesComponent`.\nSo add an `<app-heroes>` element to the `AppComponent` template file, just below the title.\n\n<code-example path=\"toh-pt1/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;app-heroes&gt;&lt;/app-heroes&gt;\n\n\n</code-example>\n\nAssuming that the CLI `ng serve` command is still running,\nthe browser should refresh and display both the application title and the hero name.\n-->\n<p><code>HeroesComponent</code>를 표시하려면 이 컴포넌트를 <code>AppComponent</code> 셸의 템플릿에 추가해야 합니다.</p>\n<p>이전 단계에서 <code>HeroesComponent</code>의 <a href=\"tutorial/toh-pt1#selector\">엘리먼트 셀렉터</a>는 <code>app-heroes</code>로 선언했습니다.\n<code>&#x3C;app-heroes></code> 엘리먼트를 <code>AppComponent</code> 템플릿 파일에서 타이틀 바로 밑에 추가하세요.</p>\n<code-example path=\"toh-pt1/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n\n\n</code-example>\n<p>Angular CLI 명령 <code>ng serve</code>가 실행되고 있는 상태라면 브라우저는 자동으로 화면을 갱신합니다.\n변경된 화면에서 애플리케이션 이름과 히어로 이름이 표시되는 것을 확인해 보세요.</p>\n<!--\n## Create a Hero interface\n-->\n<h2 id=\"히어로-인터페이스-생성하기\">히어로 인터페이스 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#히어로-인터페이스-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA real hero is more than a name.\n\nCreate a `Hero` interface in its own file in the `src/app` folder.\nGive it `id` and `name` properties.\n\n<code-example path=\"toh-pt1/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-example>\n\nReturn to the `HeroesComponent` class and import the `Hero` interface.\n\nRefactor the component's `hero` property to be of type `Hero`.\nInitialize it with an `id` of `1` and the name `Windstorm`.\n\nThe revised `HeroesComponent` class file should look like this:\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" header=\"src/app/heroes/heroes.component.ts\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { Hero } from &#39;../hero&#39;;\n\n@Component({\n  selector: &#39;app-heroes&#39;,\n  templateUrl: &#39;./heroes.component.html&#39;,\n  styleUrls: [&#39;./heroes.component.css&#39;]\n})\nexport class HeroesComponent implements OnInit {\n  hero: Hero = {\n    id: 1,\n    name: &#39;Windstorm&#39;\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n\nThe page no longer displays properly because you changed the hero from a string to an object.\n-->\n<p>실제 데이터를 생각해보면 히어로를 표현하는 객체는 이름 외에 다른 정보도 있을 수 있습니다.</p>\n<p><code>src/app</code>폴더에 <code>Hero</code> 인터페이스를 생성하고 이 클래스에 <code>id</code>와 <code>name</code> 프로퍼티를 추가합니다.</p>\n<code-example path=\"toh-pt1/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-example>\n<p>그리고 <code>HeroesComponent</code> 클래스로 돌아가서 <code>Hero</code> 인터페이스를 로드합니다.</p>\n<p>컴포넌트의 <code>hero</code>프로퍼티를 <code>Hero</code> 타입으로 리팩토링합니다.\n이 때 <code>id</code>를 <code>1</code>로, 이름을 <code>Windstorm</code>으로 초기화합니다.</p>\n<p>수정된 <code>HeroesComponent</code> 클래스 파일은 아래와 같습니다.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.ts\" header=\"src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-example>\n<p>이제 화면을 확인해보면 히어로가 제대로 표시되지 않는 것을 확인할 수 있습니다. 왜냐하면 히어로 프로퍼티 값을 문자열 타입에서 객체 타입으로 변경했기 때문입니다.</p>\n<!--\n## Show the hero object\n-->\n<h2 id=\"히어로-객체-표시하기\">히어로 객체 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#히어로-객체-표시하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUpdate the binding in the template to announce the hero's name\nand show both `id` and `name` in a details layout like this:\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-2\" header=\"heroes.component.html (HeroesComponent's template)\">\n&lt;h2&gt;{{hero.name}} Details&lt;/h2&gt;\n&lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;name: &lt;/span&gt;{{hero.name}}&lt;/div&gt;\n\n</code-example>\n\nThe browser refreshes and displays the hero's information.\n-->\n<p>히어로의 이름이 제대로 표시되도록 템플릿을 수정합시다. 상세정보를 표시하는 레이아웃에 다음과 같이 <code>id</code>와 <code>name</code>을 바인딩합니다.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"show-hero-2\" header=\"heroes.component.html (HeroesComponent 템플릿)\">\n&#x3C;h2>{{hero.name}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n&#x3C;div>&#x3C;span>name: &#x3C;/span>{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p>이제 브라우저가 갱신되면 히어로의 정보가 제대로 표시됩니다.</p>\n<!--\n## Format with the _UppercasePipe_\n-->\n<h2 id=\"uppercasepipe-로-표시형식-지정하기\"><em>UppercasePipe</em> 로 표시형식 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#uppercasepipe-로-표시형식-지정하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nModify the `hero.name` binding like this.\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.html\" header=\"src/app/heroes/heroes.component.html\" region=\"pipe\">\n&lt;h2&gt;{{hero.name | uppercase}} Details&lt;/h2&gt;\n\n</code-example>\n\nThe browser refreshes and now the hero's name is displayed in capital letters.\n\nThe word `uppercase` in the interpolation binding,\nright after the pipe operator ( | ),\nactivates the built-in `UppercasePipe`.\n\n[Pipes](guide/pipes) are a good way to format strings, currency amounts, dates and other display data.\nAngular ships with several built-in pipes and you can create your own.\n-->\n<p>다음과 같이 <code>hero.name</code> 바인딩 문법을 수정합니다.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.html\" header=\"src/app/heroes/heroes.component.html\" region=\"pipe\">\n&#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n\n</code-example>\n<p>이제 브라우저가 갱신되면 히어로의 이름이 대문자로 표시됩니다.</p>\n<p>문자열 바인딩(interpolation binding)에서 파이프 연산자(|) 바로 뒤에 있는 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 는 Angluar의 기본 파이프인 <code>UppercasePipe</code>를 가리킵니다.</p>\n<p><a href=\"guide/pipes\">파이프</a>는 문자열의 형식을 지정하거나, 통화 단위를 변경하고, 날짜나 데이터가 표시되는 형식을 변경할 때 사용합니다.</p>\n<!--\n## Edit the hero\n-->\n<h2 id=\"히어로-정보-수정하기\">히어로 정보 수정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#히어로-정보-수정하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUsers should be able to edit the hero name in an `<input>` textbox.\n\nThe textbox should both _display_ the hero's `name` property\nand _update_ that property as the user types.\nThat means data flows from the component class _out to the screen_ and\nfrom the screen _back to the class_.\n\nTo automate that data flow, setup a two-way data binding between the `<input>` form element and the `hero.name` property.\n-->\n<p><code>&#x3C;input></code> 텍스트박스를 사용해서 사용자가 히어로의 이름을 수정하게 하려고 합니다.</p>\n<p>텍스트박스는 히어로의 <code>name</code> 프로퍼티를 화면에 <em>표시하면서</em>, 동시에 유저가 입력한 값으로 프로퍼티를 <em>업데이트</em> 해야합니다.\n이 말은 데이터가 컴포넌트 클래스에서 <em>화면으로</em>, 그리고 반대 방향인 <em>화면에서</em> 클래스로 전달되어야 한다는 것을 의미합니다.</p>\n<p>이 데이터 흐름을 자동화하려면 <code>&#x3C;input></code> 엘리먼트와 <code>hero.name</code> 프로퍼티를 양방향 바인딩으로 연결하면 됩니다.</p>\n<!--\n### Two-way binding\n-->\n<h3 id=\"양방향-바인딩\">양방향 바인딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#양방향-바인딩\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nRefactor the details area in the `HeroesComponent` template so it looks like this:\n\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"name-input\" header=\"src/app/heroes/heroes.component.html (HeroesComponent's template)\">\n&lt;div&gt;\n  &lt;label&gt;name:\n    &lt;input [(ngModel)]=&quot;hero.name&quot; placeholder=&quot;name&quot;/&gt;\n  &lt;/label&gt;\n&lt;/div&gt;\n\n</code-example>\n\n**[(ngModel)]** is Angular's two-way data binding syntax.\n\nHere it binds the `hero.name` property to the HTML textbox so that data can flow _in both directions:_ from the `hero.name` property to the textbox, and from the textbox back to the `hero.name`.\n-->\n<p><code>HeroesComponent</code> 템플릿에서 상세 화면 영역을 아래 코드와 같이 리팩토링합니다.</p>\n<code-example path=\"toh-pt1/src/app/heroes/heroes.component.1.html\" region=\"name-input\" header=\"src/app/heroes/heroes.component.html (HeroesComponent 템플릿)\">\n&#x3C;div>\n  &#x3C;label>name:\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n  &#x3C;/label>\n&#x3C;/div>\n\n</code-example>\n<p><strong>[(ngModel)]</strong> 는 Angular의 양방향 바인딩 문법입니다.</p>\n<p>이렇게 작성하면 <code>hero.name</code> 프로퍼티가 HTML 텍스트박스와 양방향 바인딩 되기 때문에, <code>hero.name</code> 프로퍼티 값이 텍스트 박스로, 텍스트박스의 값이 다시 <code>hero.name</code> 프로퍼티로 전달될 수 있습니다.</p>\n<!--\n### The missing _FormsModule_\n-->\n<h3 id=\"formsmodule-을-빠뜨렸습니다\"><em>FormsModule</em> 을 빠뜨렸습니다.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#formsmodule-을-빠뜨렸습니다\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nNotice that the app stopped working when you added `[(ngModel)]`.\n\nTo see the error, open the browser development tools and look in the console\nfor a message like\n\n<code-example language=\"sh\" class=\"code-shell\">\nTemplate parse errors:\nCan't bind to 'ngModel' since it isn't a known property of 'input'.\n</code-example>\n\nAlthough `ngModel` is a valid Angular directive, it isn't available by default.\n\nIt belongs to the optional `FormsModule` and you must _opt-in_ to using it.\n-->\n<p>하지만 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>를 추가했기 때문에 이 앱은 이제 동작하지 않습니다.</p>\n<p>이 때 브라우저에서 개발자도구를 열어 콘솔을 확인하면 다음과 같은 에러가 표시되는 것을 확인할 수 있습니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\nTemplate parse errors:\nCan't bind to 'ngModel' since it isn't a known property of 'input'.\n</code-example>\n<p><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>은 Angular에서 제공하는 디렉티브지만, 아무것도 설정하지 않은 상태에서 이 디렉티브를 바로 사용할 수는 없습니다.</p>\n<p>이 디렉티브는 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>에서 제공하는 디렉티브이기 때문에 이 디렉티브를 사용하려면 명시적으로 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>을 로드해야 합니다.</p>\n<h2 id=\"appmodule\"><em>AppModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#appmodule\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAngular needs to know how the pieces of your application fit together\nand what other files and libraries the app requires.\nThis information is called _metadata_.\n\nSome of the metadata is in the `@Component` decorators that you added to your component classes.\nOther critical metadata is in [`@NgModule`](guide/ngmodules) decorators.\n\nThe most important `@NgModule` decorator annotates the top-level **AppModule** class.\n\nThe Angular CLI generated an `AppModule` class in `src/app/app.module.ts` when it created the project.\nThis is where you _opt-in_ to the `FormsModule`.\n-->\n<p>개발자가 만든 Angular 구성요소나 서드파티 파일, 라이브러리를 Angular가 조합할 때는 이 구성요소들에 대한 정보가 필요합니다.\n이런 정보를 <em>메타데이터 (metadata)</em> 라고 합니다.</p>\n<p>컴포넌트 클래스에 지정해야 하는 메타데이터는 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에 지정합니다.\n그리고 애플리케이션 동작에 필요한 메타데이터는 보통 <a href=\"guide/ngmodules\"><code>@NgModule</code></a> 데코레이터에 지정합니다.</p>\n<p>이 중에서 가장 중요한 데코레이터는 애플리케이션 최상위 모듈인 <strong>AppModule</strong> 클래스에 지정하는 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 데코레이터입니다.</p>\n<p>Angular CLI로 프로젝트를 생성하면 <code>src/app/app.module.ts</code> 파일에 <code>AppModule</code> 클래스가 생성됩니다.\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>은 이 모듈에 등록합니다.</p>\n<!--\n### Import _FormsModule_\n-->\n<h3 id=\"formsmodule-로드하기\"><em>FormsModule</em> 로드하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#formsmodule-로드하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nOpen `AppModule` (`app.module.ts`) and import the `FormsModule` symbol from the `@angular/forms` library.\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (FormsModule symbol import)\" region=\"formsmodule-js-import\">\nimport { FormsModule } from &#39;@angular/forms&#39;; // &lt;-- NgModel은 이 패키지가 제공합니다.\n\n</code-example>\n\nThen add `FormsModule` to the `@NgModule` metadata's `imports` array, which contains a list of external modules that the app needs.\n\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (@NgModule imports)\" region=\"ng-imports\">\nimports: [\n  BrowserModule,\n  FormsModule\n],\n\n</code-example>\n\nWhen the browser refreshes, the app should work again. You can edit the hero's name and see the changes reflected immediately in the `<h2>` above the textbox.\n-->\n<p><code>AppModule</code> (<code>app.module.ts</code>)를 열고 <code>@angular/forms</code> 라이브러리에서 제공하는 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 심볼을 로드합니다.</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (FormsModule 심볼 로드하기)\" region=\"formsmodule-js-import\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>은 이 패키지가 제공합니다.\n\n</code-example>\n<p>그리고나서 이 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>을 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 메타데이터의 <code>imports</code> 배열에 추가합니다. 이 배열에는 애플리케이션이 동작할 때 필요한 외부 모듈을 등록합니다.</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"app.module.ts (@NgModule 로드하기)\" region=\"ng-imports\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n],\n\n</code-example>\n<p>이제 브라우저를 새로고침하면 앱이 제대로 동작합니다.\n화면에서 히어로의 이름을 변경할 수 있으며 이렇게 변경된 이름이 텍스트박스 위에 있는 <code>&#x3C;h2></code>태그에 바로 반영되는 것도 확인할 수 있습니다.</p>\n<!--\n### Declare `HeroesComponent`\n-->\n<h3 id=\"heroescomponent-선언하기\"><code>HeroesComponent</code> 선언하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#heroescomponent-선언하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nEvery component must be declared in _exactly one_ [NgModule](guide/ngmodules).\n\n_You_ didn't declare the `HeroesComponent`.\nSo why did the application work?\n\nIt worked because the Angular CLI declared `HeroesComponent` in the `AppModule` when it generated that component.\n\nOpen `src/app/app.module.ts` and find `HeroesComponent` imported near the top.\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"heroes-import\">\nimport { HeroesComponent } from &#39;./heroes/heroes.component&#39;;\n\n</code-example>\n\nThe `HeroesComponent` is declared in the `@NgModule.declarations` array.\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  HeroesComponent\n],\n\n</code-example>\n\nNote that `AppModule`  declares both application components, `AppComponent` and `HeroesComponent`.\n-->\n<p>컴포넌트는 반드시 <a href=\"guide/ngmodules\">NgModule</a>중 하나에 등록되어야 합니다.</p>\n<p>하지만 <code>HeroesComponent</code> 는 어디에도 등록하지 않았습니다.\n그런데 왜 애플리케이션이 동작할까요?</p>\n<p>이 애플리케이션이 동작하는 이유는 Angular CLI로 <code>HeroesComponent</code>를 생성할 때 Angular CLI가 이 컴포넌트를 <code>AppModule</code>에 자동으로 등록했기 때문입니다.</p>\n<p><code>src/app/app.module.ts</code> 파일을 열어서 <code>HeroesComponent</code>가 로드되는 것을 확인해 보세요.</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"heroes-import\">\nimport { HeroesComponent } from './heroes/heroes.component';\n\n</code-example>\n<p>이렇게 로드한 컴포넌트는 <code>HeroesComponent</code>는 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 배열에 등록되어 있습니다.</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"declarations\">\ndeclarations: [\n  AppComponent,\n  HeroesComponent\n],\n\n</code-example>\n<p>이 코드에서 <code>AppModule</code>에는 <code>AppComponent</code>와 <code>HeroesComponent</code>가 등록되어 있습니다.</p>\n<!--\n## Final code review\n-->\n<h2 id=\"최종-코드-리뷰\">최종 코드 리뷰<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#최종-코드-리뷰\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nHere are the code files discussed on this page.\n-->\n<p>이번 튜토리얼에서 다룬 코드의 내용을 확인해 보세요.</p>\n<code-tabs>\n\n  <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt1/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt1/src/app/heroes/heroes.component.html\">\n&#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n&#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n&#x3C;div>\n  &#x3C;label>name:\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n  &#x3C;/label>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt1/src/app/app.module.ts\">\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;-- <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>은 이 패키지가 제공합니다.\n\nimport { AppComponent } from './app.component';\nimport { HeroesComponent } from './heroes/heroes.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"toh-pt1/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.component.html\" path=\"toh-pt1/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;app-heroes>&#x3C;/app-heroes>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero.ts\" path=\"toh-pt1/src/app/hero.ts\">\nexport interface Hero {\n  id: number;\n  name: string;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<!--\n## Summary\n-->\n<h2 id=\"정리\">정리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#정리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* You used the CLI to create a second `HeroesComponent`.\n* You displayed the `HeroesComponent` by adding it to the `AppComponent` shell.\n* You applied the `UppercasePipe` to format the name.\n* You used two-way data binding with the `ngModel` directive.\n* You learned about the `AppModule`.\n* You imported the `FormsModule` in the `AppModule` so that Angular would recognize and apply the `ngModel` directive.\n* You learned the importance of declaring components in the `AppModule`\nand appreciated that the CLI declared it for you.\n-->\n<ul>\n<li>Angular CLI를 사용해서 두번째 컴포넌트인 <code>HerosComponent</code>를 생성했습니다.</li>\n<li><code>HeroesComponent</code>를 <code>AppComponent</code> 셸에 추가해서 화면에 표시했습니다.</li>\n<li>화면에 표시되는 이름의 형식을 지정하기 위해 <code>UppercasePipe</code>를 사용했습니다.</li>\n<li><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 디렉티브를 사용해서 양방향 데이터 바인딩을 연결했습니다.</li>\n<li><code>AppModule</code>에 대해 알아봤습니다.</li>\n<li>Angular가 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 디렉티브를 제대로 인식하고 동작할 수 있도록 <code>AppModule</code>에 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>을 로드했습니다.</li>\n<li>컴포넌트는 반드시 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>중 하나에 등록되어야 합니다. 이 때 Angular CLI를 사용하면 더 편합니다.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/lifecycle-hooks#oninit\n - guide/ngmodules\n - guide/pipes\n - tutorial/toh-pt1#appmodule\n - tutorial/toh-pt1#formsmodule-로드하기\n - tutorial/toh-pt1#formsmodule-을-빠뜨렸습니다\n - tutorial/toh-pt1#hero-프로퍼티-추가하기\n - tutorial/toh-pt1#heroescomponent-뷰-표시하기\n - tutorial/toh-pt1#heroescomponent-선언하기\n - tutorial/toh-pt1#selector\n - tutorial/toh-pt1#uppercasepipe-로-표시형식-지정하기\n - tutorial/toh-pt1#양방향-바인딩\n - tutorial/toh-pt1#정리\n - tutorial/toh-pt1#최종-코드-리뷰\n - tutorial/toh-pt1#히어로-객체-표시하기\n - tutorial/toh-pt1#히어로-에디터\n - tutorial/toh-pt1#히어로-인터페이스-생성하기\n - tutorial/toh-pt1#히어로-정보-수정하기\n - tutorial/toh-pt1#히어로-컴포넌트-생성하기\n - tutorial/toh-pt1#히어로-표시하기\n - https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\n - https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt1.md?message=docs%3A%20describe%20your%20change...\n-->"
}