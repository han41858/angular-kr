{
  "id": "tutorial/toh-pt5",
  "title": "네비게이션 추가하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt5.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Add in-app navigation with routing\n-->\n<h1 id=\"네비게이션-추가하기\">네비게이션 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#네비게이션-추가하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nThere are new requirements for the Tour of Heroes app:\n\n* Add a *Dashboard* view.\n* Add the ability to navigate between the *Heroes* and *Dashboard* views.\n* When users click a hero name in either view, navigate to a detail view of the selected hero.\n* When users click a *deep link* in an email, open the detail view for a particular hero.\n\n<div class=\"alert is-helpful\">\n\n  For the sample app that this page describes, see the <live-example></live-example>.\n\n</div>\n\nWhen you’re done, users will be able to navigate the app like this:\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/toh/nav-diagram.png' alt=\"View navigations\">\n</div>\n-->\n<p>히어로들의 여행 앱에 새로운 요구사항이 생겼습니다:</p>\n<ul>\n<li><em>대시보드</em> 화면을 추가해야 합니다.</li>\n<li><em>히어로 목록</em> 화면과 <em>대시보드</em> 화면을 전환하는 기능이 필요합니다.</li>\n<li>사용자가 화면에서 히어로 이름을 클릭하면 선택된 히어로의 상세정보 화면으로 이동해야 합니다.</li>\n<li>사용자가 이메일로 받은 <em>딥 링크(deep link)</em>를 클릭하면 해당 히어로의 상세정보 화면을 바로 표시해야 합니다.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>  이 문서에서 설명하는 앱은 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<p>그래서 최종 결과물은 다음과 같이 3개의 화면을 이동하면서 동작해야 합니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/toh/nav-diagram.png\" alt=\"View navigations\" width=\"506\" height=\"433\">\n</div>\n<!--\n## Add the `AppRoutingModule`\n-->\n<h2 id=\"approutingmodule-생성하기\"><code>AppRoutingModule</code> 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#approutingmodule-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIn Angular, the best practice is to load and configure the router in a separate, top-level module\nthat is dedicated to routing and imported by the root `AppModule`.\n\nBy convention, the module class name is `AppRoutingModule` and it belongs in the `app-routing.module.ts` in the `src/app` folder.\n\nUse the CLI to generate it.\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate module app-routing --flat --module=app\n</code-example>\n\n<div class=\"alert is-helpful\">\n\n`--flat` puts the file in `src/app` instead of its own folder.<br>\n`--module=app` tells the CLI to register it in the `imports` array of the `AppModule`.\n</div>\n\nThe generated file looks like this:\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.0.ts\" header=\"src/app/app-routing.module.ts (generated)\">\nimport { NgModule } from &#39;@angular/core&#39;;\nimport { CommonModule } from &#39;@angular/common&#39;;\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n\nReplace it with the following:\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.1.ts\" header=\"src/app/app-routing.module.ts (updated)\">\nimport { NgModule } from &#39;@angular/core&#39;;\nimport { RouterModule, Routes } from &#39;@angular/router&#39;;\nimport { HeroesComponent } from &#39;./heroes/heroes.component&#39;;\n\nconst routes: Routes = [\n  { path: &#39;heroes&#39;, component: HeroesComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n\nFirst, `AppRoutingModule` imports `RouterModule` and `Routes` so the app can have routing functionality. The next import, `HeroesComponent`, will give the Router somewhere to go once you configure the routes.\n\nNotice that the `CommonModule` references and `declarations` array are unnecessary, so are no\nlonger part of `AppRoutingModule`. The following sections explain the rest of the `AppRoutingModule` in more detail.\n-->\n<p>Angular에서는 최상위 모듈과 같은 계층에 별개의 모듈을 두고 이 모듈에 애플리케이션 최상위 라우팅 모듈을 정의하는 방법을 권장합니다.\n<code>AppModule</code>은 이렇게 정의한 라우팅 설정을 로드해서 사용하기만 하면 됩니다.</p>\n<p>일반적으로 애플리케이션 최상위 라우팅을 담당하는 모듈의 클래스 이름은 <code>AppRoutingModule</code>이라고 정의하며 <code>src/app</code> 폴더에 <code>app-routing.module.ts</code> 파일로 생성합니다.</p>\n<p>Angular CLI로 다음 명령을 실행해서 라우팅 모듈을 만들어 봅시다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate module app-routing --flat --module=app\n</code-example>\n<div class=\"alert is-helpful\">\n<p><code>--flat</code> 옵션을 사용하면 새로운 폴더를 만들지 않고 <code>src/app</code> 폴더에 파일을 생성합니다.<br>\n<code>--module=app</code> 옵션을 사용하면 Angular CLI가 이 라우팅 모듈을 <code>AppModule</code>의 <code>imports</code> 배열에 자동으로 추가합니다.</p>\n</div>\n<p>이 명령을 실행해서 만든 파일의 내용은 다음과 같습니다:</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.0.ts\" header=\"src/app/app-routing.module.ts (기본 생성 코드)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p>이 내용을 다음과 같이 수정합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.1.ts\" header=\"src/app/app-routing.module.ts (수정된 코드)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\nimport { HeroesComponent } from './heroes/heroes.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [<a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>]\n})\nexport class AppRoutingModule { }\n\n\n</code-example>\n<p>먼저, <code>AppRoutingModule</code>이 라우팅 동작을 실행할 수 있도록 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>과 <code><a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a></code> 심볼을 로드합니다.\n그리고 라우팅 규칙에 따라 이동할 <code>HeroesComponent</code>를 로드합니다.</p>\n<p><code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 로드했던 부분이나 <code>declarations</code> 배열은 필요없기 때문에 <code>AppRoutingModule</code>에서 제거했습니다.\n변경된 나머지 부분에 대해서는 다음 섹션부터 자세하게 알아봅시다.</p>\n<!--\n### Routes\n-->\n<h3 id=\"라우팅-규칙route\">라우팅 규칙(Route)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#라우팅-규칙route\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe next part of the file is where you configure your routes.\n*Routes* tell the Router which view to display when a user clicks a link or\npastes a URL into the browser address bar.\n\nSince `AppRoutingModule` already imports `HeroesComponent`, you can use it in the `routes` array:\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"heroes-route\">\n\nconst routes: Routes = [\n  { path: &#39;heroes&#39;, component: HeroesComponent }\n];\n\n</code-example>\n\nA typical Angular `Route` has two properties:\n\n* `path`: a string that matches the URL in the browser address bar.\n* `component`: the component that the router should create when navigating to this route.\n\nThis tells the router to match that URL to `path: 'heroes'`\nand display the `HeroesComponent` when the URL is something like `localhost:4200/heroes`.\n-->\n<p>이 파일은 라우팅 규칙을 정의하는 부분도 변경되었습니다.\n<em>라우팅 규칙</em>은  사용자가 링크를 클릭하거나 브라우저 주소표시줄에 URL을 직접 입력했을 때 라우터가 어떤 화면을 표시할지 정의한 것입니다.</p>\n<p>Since <code>AppRoutingModule</code> already imports <code>HeroesComponent</code>, you can use it in the <code>routes</code> array:</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"heroes-route\">\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<p><code><a href=\"api/router/Route\" class=\"code-anchor\">Route</a></code>는 보통 두 개의 프로퍼티를 사용합니다:</p>\n<ul>\n<li><code>path</code>: 브라우저 주소표시줄에 있는 URL과 매칭될 문자열을 지정합니다.</li>\n<li><code>component</code>: 라우터가 생성하고 화면에 표시할 컴포넌트를 지정합니다.</li>\n</ul>\n<p>이제 라우터가 <code>path: 'heroes'</code>에 해당하는 URL을 만나면 <code>localhost:4200/heroes</code>와 같은 URL로 이동하면서 <code>HeroesComponent</code>를 표시할 수 있습니다.</p>\n<h3 id=\"routermoduleforroot\"><code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routermoduleforroot\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `@NgModule` metadata initializes the router and starts it listening for browser location changes.\n\nThe following line adds the `RouterModule` to the `AppRoutingModule` `imports` array and\nconfigures it with the `routes` in one step by calling\n`RouterModule.forRoot()`:\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"ngmodule-imports\">\nimports: [ RouterModule.forRoot(routes) ],\n\n</code-example>\n\n<div class=\"alert is-helpful\">\n\n  The method is called `forRoot()` because you configure the router at the application's root level.\n  The `forRoot()` method supplies the service providers and directives needed for routing,\n  and performs the initial navigation based on the current browser URL.\n\n</div>\n\nNext, `AppRoutingModule` exports `RouterModule` so it will be available throughout the app.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts (exports array)\" region=\"export-routermodule\">\nexports: [ RouterModule ]\n\n</code-example>\n-->\n<p><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>에 메타데이터를 지정하면 모듈이 생성될 때 라우터를 초기화하면서 브라우저의 주소가 변화되는 것을 감지합니다.</p>\n<p>그래서 <code>AppRoutingModule</code>에도 라우터를 초기화하기 위해 <code>imports</code> 배열에 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>을 등록해야 하는데, 이 때 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 메소드에 <code>routes</code> 인자를 넣어서 실행한 결과를 지정합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"ngmodule-imports\">\nimports: [ RouterModule.forRoot(routes) ],\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>  애플리케이션 최상위 계층에 존재하는 라우터를 설정할 때는 <code>forRoot()</code> 메소드를 사용합니다.\n<code>forRoot()</code> 메소드를 사용하면 라우팅과 관련된 서비스 프로바이더와 디렉티브를 애플리케이션에 제공할 수 있으며, 브라우저에서 변경되는 URL을 감지할 수 있습니다.</p>\n</div>\n<p>그리고 앱에서도 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>을 사용할 수 있도록 <code>AppRoutingModule</code>의 <code>exports</code> 배열을 다음과 같이 지정합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts (exports 배열)\" region=\"export-routermodule\">\nexports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n\n</code-example>\n<!--\n## Add `RouterOutlet`\n-->\n<h2 id=\"라우팅-영역-routeroutlet-추가하기\">라우팅 영역 (<code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>) 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#라우팅-영역-routeroutlet-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nOpen the `AppComponent` template and replace the `<app-heroes>` element with a `<router-outlet>` element.\n\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"outlet\" header=\"src/app/app.component.html (router-outlet)\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n\nThe `AppComponent` template no longer needs `<app-heroes>` because the app will only display the `HeroesComponent` when the user navigates to it.\n\nThe `<router-outlet>` tells the router where to display routed views.\n\n<div class=\"alert is-helpful\">\n\nThe `RouterOutlet` is one of the router directives that became available to the `AppComponent`\nbecause `AppModule` imports `AppRoutingModule` which exported `RouterModule`. The `ng generate` command you ran at the start of this tutorial added this import because of the `--module=app` flag. If you manually created `app-routing.module.ts` or used a tool other than the CLI to do so, you'll need to import `AppRoutingModule` into `app.module.ts` and add it to the `imports` array of the `NgModule`.\n\n</div>\n-->\n<p><code>AppComponent</code> 템플릿을 열어서 <code>&#x3C;app-heroes></code> 엘리먼트를 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 엘리먼트로 변경합니다.</p>\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"outlet\" header=\"src/app/app.component.html (router-outlet)\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-example>\n<p><code>AppComponent</code> 템플릿에는 더이상 <code>&#x3C;app-heroes></code> 컴포넌트가 존재하지 않습니다. 이 컴포넌트는 이제 사용자의 네비게이션의 의해 화면에 표시됩니다.</p>\n<p><code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>은 라우팅 된 화면이 표시될 위치를 지정하는 엘리먼트입니다.</p>\n<div class=\"alert is-helpful\">\n<p><code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> 디렉티브는 <code>AppComponent</code>에서도 사용할 수 있습니다.\n왜냐하면 <code>AppModule</code>이 로드하고 있는 <code>AppRoutingModule</code>이 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>을 외부로 공개하고 있기 때문입니다.\n이 동작은 프로젝트를 생성하는 <code>ng generate</code> 명령을 실행하면서 <code>--module=app</code> 플래그를 지정했기 때문에 자동으로 추가된 것입니다.\n<code>app-routing.module.ts</code> 파일을 직접 생성했거나 Angular CLI 외의 툴을 사용했다면 <code>app.module.ts</code> 파일에서 <code>AppRoutingModule</code>을 로드하고 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>의 <code>imports</code> 배열에 이 라우팅 모듈을 추가하면 됩니다.</p>\n</div>\n<!--\n#### Try it\n-->\n<h4 id=\"동작-확인하기\">동작 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#동작-확인하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou should still be running with this CLI command.\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng serve\n</code-example>\n\nThe browser should refresh and display the app title but not the list of heroes.\n\nLook at the browser's address bar.\nThe URL ends in `/`.\nThe route path to `HeroesComponent` is `/heroes`.\n\nAppend `/heroes` to the URL in the browser address bar.\nYou should see the familiar heroes master/detail view.\n-->\n<p>Angular CLI로 다음 명령을 실행해서 애플리케이션을 실행합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng serve\n</code-example>\n<p>브라우저가 갱신되면 애플리케이션 제목은 표시되지만 히어로의 목록은 표시되지 않습니다.</p>\n<p>이 때 브라우저의 주소표시줄을 확인해 보세요.\nURL은 <code>/</code>로 끝납니다.\n<code>HeroesComponent</code>는 라우팅 경로 <code>/heroes</code>에 연결되어 있기 때문에 이 주소에서 히어로 목록이 표시되지 않는 것입니다.</p>\n<p>브라우저 주소표시줄의 URL을 <code>/heroes</code>로 변경해 보세요.\n그러면 이전과 같이 히어로의 목록이 표시될 것입니다.</p>\n<a id=\"routerlink\"></a>\n<!--\n## Add a navigation link (`routerLink`)\n-->\n<h2 id=\"네비게이션-링크-routerlink-추가하기\">네비게이션 링크 (<code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>) 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#네비게이션-링크-routerlink-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIdeally, users should be able to click a link to navigate rather\nthan pasting a route URL into the address bar.\n\nAdd a `<nav>` element and, within that, an anchor element that, when clicked,\ntriggers navigation to the `HeroesComponent`.\nThe revised `AppComponent` template looks like this:\n\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"heroes\" header=\"src/app/app.component.html (heroes RouterLink)\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a routerLink=&quot;/heroes&quot;&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n\nA [`routerLink` attribute](#routerlink) is set to `\"/heroes\"`,\nthe string that the router matches to the route to `HeroesComponent`.\nThe `routerLink` is the selector for the [`RouterLink` directive](/api/router/RouterLink)\nthat turns user clicks into router navigations.\nIt's another of the public directives in the `RouterModule`.\n\nThe browser refreshes and displays the app title and heroes link,\nbut not the heroes list.\n\nClick the link.\nThe address bar updates to `/heroes` and the list of heroes appears.\n\n<div class=\"alert is-helpful\">\n\nMake this and future navigation links look better by adding private CSS styles to `app.component.css`\nas listed in the [final code review](#appcomponent) below.\n\n</div>\n-->\n<p>사용자가 브라우저 주소표시줄에 원하는 URL을 입력해야만 하는 것은 좋은 방법이 아닙니다.\n이 방법보다는 네비게이션을 실행하는 링크를 클릭하는 방법이 더 편할 것입니다.</p>\n<p>이번에는 앵커(<code>&#x3C;a></code>) 엘리먼트를 추가하고, 사용자가 이 엘리먼트를 클릭했을 때 <code>HeroesComponent</code>로 이동하도록 해봅시다.\n<code>AppComponent</code>의 템플릿을 다음과 같이 수정합니다.</p>\n<code-example path=\"toh-pt5/src/app/app.component.html\" region=\"heroes\" header=\"src/app/app.component.html (히어로 목록으로 이동하는 RouterLink)\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-example>\n<p><code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>는 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>이 제공하는 <a href=\"tutorial/toh-pt5#routerlink\"><code>RouterLink</code> 디렉티브</a>이며, 사용자가 이 디렉티브가 적용된 엘리먼트를 클릭하면 네비게이션을 실행합니다.\n그리고 <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code> 어트리뷰트</a>의 값은 <code>\"/heroes\"</code>로 할당되었는데, 이 문자열은 <code>HeroesComponent</code>에 해당하는 라우팅 경로를 의미합니다.</p>\n<p>이제 브라우저가 갱신되면 애플리케이션 제목과 히어로 목록으로 가는 링크가 표시되지만 히어로의 목록은 여전히 표시되지 않습니다.</p>\n<p>링크를 클릭해 보세요.\n주소표시줄의 URL이 <code>/heroes</code>로 바뀌면서 히어로 목록이 표시될 것입니다.</p>\n<div class=\"alert is-helpful\">\n<p><code>app.component.css</code> 파일에 CSS 스타일을 작성하면 네비게이션 링크를 더 보기 좋게 표시할 수 있습니다.\n이 내용은 <a href=\"tutorial/toh-pt5#appcomponent\">최종코드 리뷰</a>에서 확인할 수 있습니다.</p>\n</div>\n<!--\n## Add a dashboard view\n-->\n<h2 id=\"대시보드-화면-추가하기\">대시보드 화면 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#대시보드-화면-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nRouting makes more sense when there are multiple views.\nSo far there's only the heroes view.\n\nAdd a `DashboardComponent` using the CLI:\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component dashboard\n</code-example>\n\nThe CLI generates the files for the `DashboardComponent` and declares it in `AppModule`.\n\nReplace the default file content in these three files as follows:\n\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.1.html\">\n&lt;h3&gt;Top Heroes&lt;/h3&gt;\n&lt;div class=&quot;grid grid-pad&quot;&gt;\n  &lt;a *ngFor=&quot;let hero of heroes&quot; class=&quot;col-1-4&quot;&gt;\n    &lt;div class=&quot;module hero&quot;&gt;\n      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/a&gt;\n&lt;/div&gt;\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { Hero } from &#39;../hero&#39;;\nimport { HeroService } from &#39;../hero.service&#39;;\n\n@Component({\n  selector: &#39;app-dashboard&#39;,\n  templateUrl: &#39;./dashboard.component.html&#39;,\n  styleUrls: [ &#39;./dashboard.component.css&#39; ]\n})\nexport class DashboardComponent implements OnInit {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent에 적용되는 CSS styles */\n[class*=&#39;col-&#39;] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*=&#39;col-&#39;]:last-of-type {\n  padding-right: 0;\n}\na {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center;\n  margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #3f525c;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #eee;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad &gt; [class*=&#39;col-&#39;]:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n\nThe  _template_ presents a grid of hero name links.\n\n* The `*ngFor` repeater creates as many links as are in the component's `heroes` array.\n* The links are styled as colored blocks by the `dashboard.component.css`.\n* The links don't go anywhere yet but [they will shortly](#hero-details).\n\nThe _class_ is similar to the `HeroesComponent` class.\n* It defines a `heroes` array property.\n* The constructor expects Angular to inject the `HeroService` into a private `heroService` property.\n* The `ngOnInit()` lifecycle hook calls `getHeroes()`.\n\nThis `getHeroes()` returns the sliced list of heroes at positions 1 and 5, returning only four of the Top Heroes (2nd, 3rd, 4th, and 5th).\n\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\" header=\"src/app/dashboard/dashboard.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes.slice(1, 5));\n}\n\n</code-example>\n-->\n<p>라우터를 사용하면 여러 화면을 전환하기도 쉽습니다.\n아직까지는 히어로 목록을 표시하는 화면만 있지만 이제 다른 화면을 추가해 봅시다.</p>\n<p>Angular CLI로 다음 명령을 실행해서 <code>DashboardComponent</code>를 생성합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate component dashboard\n</code-example>\n<p>그러면 <code>DashboardComponent</code>를 구성하는 파일이 생성되면서 이 컴포넌트가 <code>AppModule</code>에 자동으로 등록됩니다.</p>\n<p>이 컴포넌트의 내용을 다음과 같이 수정합니다:</p>\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.1.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent에 적용되는 CSS styles */\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\na {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center;\n  margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #3f525c;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #eee;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad > [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>이 <em>템플릿</em> 에는 네비게이션 링크로 구성된 히어로의 이름이 그리드 형태로 배열되어 있습니다.</p>\n<ul>\n<li>컴포넌트의 <code>heroes</code> 배열에 있는 항목을 모두 링크로 만들기 위해 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 사용했습니다.</li>\n<li>링크 항목의 스타일은 <code>dashboard.component.css</code>에 작성합니다.</li>\n<li>아직 링크 항목들은 화면을 전환하지 않습니다. 이 내용은 <a href=\"tutorial/toh-pt5#hero-details\">곧</a> 작성할 예정입니다.</li>\n</ul>\n<p>대시보드 화면의 <em>클래스</em> 는 <code>HeroesComponent</code> 클래스와 비슷합니다.</p>\n<ul>\n<li><code>heroes</code> 프로퍼티를 배열로 선언합니다.</li>\n<li>생성자를 통해 <code>HeroService</code>를 의존성으로 주입받고 이 객체를 <code>private heroService</code> 프로퍼티에 할당합니다.</li>\n<li><code>HeroService</code>의 <code>getHeroes</code> 함수는 <code>ngOnInit()</code> 라이프싸이클 후킹 함수에서 호출합니다.</li>\n</ul>\n<p>이 때 대시보드 화면의 컴포넌트 클래스에서는 <code>HeroService</code>의 <code>getHeroes()</code>로 받은 배열 데이터 중에 4개만 추출해서 <code>heroes</code> 프로퍼티에 할당합니다.</p>\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\" header=\"src/app/dashboard/dashboard.component.ts\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n}\n\n</code-example>\n<!--\n### Add the dashboard route\n-->\n<h3 id=\"대시보드-라우팅-규칙-추가하기\">대시보드 라우팅 규칙 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#대시보드-라우팅-규칙-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo navigate to the dashboard, the router needs an appropriate route.\n\nImport the `DashboardComponent` in the `AppRoutingModule`.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-dashboard\" header=\"src/app/app-routing.module.ts (import DashboardComponent)\">\nimport { DashboardComponent }   from &#39;./dashboard/dashboard.component&#39;;\n\n</code-example>\n\nAdd a route to the `AppRoutingModule.routes` array that matches a path to the `DashboardComponent`.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"dashboard-route\">\n{ path: &#39;dashboard&#39;, component: DashboardComponent },\n\n</code-example>\n-->\n<p>대시보드로 화면을 전환하려면 이 컴포넌트를 연결하는 라우팅 규칙이 필요합니다.</p>\n<p>먼저, <code>AppRoutingModule</code>에 <code>DashboardComponent</code>를 로드합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-dashboard\" header=\"src/app/app-routing.module.ts (import DashboardComponent)\">\nimport { DashboardComponent }   from './dashboard/dashboard.component';\n\n</code-example>\n<p>그리고 <code>AppRoutingModule.routes</code> 배열에 <code>DashboardComponent</code>에 해당하는 라우팅 규칙을 추가합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"dashboard-route\">\n{ path: 'dashboard', component: DashboardComponent },\n\n</code-example>\n<!--\n### Add a default route\n-->\n<h3 id=\"기본-라우팅-규칙-추가하기\">기본 라우팅 규칙 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#기본-라우팅-규칙-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen the app starts, the browser's address bar points to the web site's root.\nThat doesn't match any existing route so the router doesn't navigate anywhere.\nThe space below the `<router-outlet>` is blank.\n\nTo make the app navigate to the dashboard automatically, add the following\nroute to the `AppRoutingModule.Routes` array.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"redirect-route\">\n{ path: &#39;&#39;, redirectTo: &#39;/dashboard&#39;, pathMatch: &#39;full&#39; },\n\n</code-example>\n\nThis route redirects a URL that fully matches the empty path to the route whose path is `'/dashboard'`.\n\nAfter the browser refreshes, the router loads the `DashboardComponent`\nand the browser address bar shows the `/dashboard` URL.\n-->\n<p>애플리케이션이 시작되면 브라우저의 주소표시줄은 웹 사이트의 최상위 주소를 가리킵니다.\n하지만 이 주소에 매칭되는 라우팅 규칙이 없기 때문에 라우터는 페이지를 이동하지 않습니다.\n그래서 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 아래쪽은 빈 공간으로 남게 됩니다.</p>\n<p>애플리케이션이 실행되면서 대시보드 화면을 자동으로 표시하려면 <code>AppRoutingModule.Routes</code> 배열에 다음과 같이 기본 라우팅 규칙을 추가하면 됩니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"redirect-route\">\n{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n\n</code-example>\n<p>이 라우팅 규칙은 브라우저의 URL이 빈 문자열일 때 <code>'/dashboard'</code> 주소로 이동하도록 설정한 것입니다.</p>\n<p>이제 브라우저가 갱신되고 나면 라우터는 브라우저 주소를 <code>/dashboard</code>로 변경하면서 <code>DashboardComponent</code>를 바로 표시합니다.</p>\n<!--\n### Add dashboard link to the shell\n-->\n<h3 id=\"애플리케이션-셸에-대시보드-링크-추가하기\">애플리케이션 셸에 대시보드 링크 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#애플리케이션-셸에-대시보드-링크-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe user should be able to navigate back and forth between the\n`DashboardComponent` and the `HeroesComponent` by clicking links in the\nnavigation area near the top of the page.\n\nAdd a dashboard navigation link to the `AppComponent` shell template, just above the *Heroes* link.\n\n<code-example path=\"toh-pt5/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&lt;h1&gt;{{title}}&lt;/h1&gt;\n&lt;nav&gt;\n  &lt;a routerLink=&quot;/dashboard&quot;&gt;Dashboard&lt;/a&gt;\n  &lt;a routerLink=&quot;/heroes&quot;&gt;Heroes&lt;/a&gt;\n&lt;/nav&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;app-messages&gt;&lt;/app-messages&gt;\n\n</code-example>\n\nAfter the browser refreshes you can navigate freely between the two views by clicking the links.\n-->\n<p>사용자는 페이지 위쪽 네비게이션 영역에 있는 링크를 클릭해서 <code>DashboardComponent</code>나 <code>HeroesComponent</code>로 이동할 수 있어야 합니다.</p>\n<p>이 기능을 위해 <code>AppComponent</code> 셸의 템플릿에 대시보드로 이동할 수 있는 링크를 추가합시다.</p>\n<code-example path=\"toh-pt5/src/app/app.component.html\" header=\"src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-example>\n<p>브라우저가 갱신되고 나면 링크를 클릭해서 대시보드 화면과 히어로 목록 화면으로 자유롭게 이동할 수 있습니다.</p>\n<a id=\"hero-details\"></a>\n<!--\n## Navigating to hero details\n-->\n<h2 id=\"히어로-상세정보-화면으로-전환하기\">히어로 상세정보 화면으로 전환하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#히어로-상세정보-화면으로-전환하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `HeroDetailsComponent` displays details of a selected hero.\nAt the moment the `HeroDetailsComponent` is only visible at the bottom of the `HeroesComponent`\n\nThe user should be able to get to these details in three ways.\n\n1. By clicking a hero in the dashboard.\n1. By clicking a hero in the heroes list.\n1. By pasting a \"deep link\" URL into the browser address bar that identifies the hero to display.\n\nIn this section, you'll enable navigation to the `HeroDetailsComponent`\nand liberate it from the `HeroesComponent`.\n-->\n<p><code>HeroDetailsComponent</code>는 사용자가 선택한 히어로의 상세정보를 표시하는 컴포넌트입니다.\n그리고 지금까지 작성한 코드에서 <code>HeroDetailsComponent</code>는 <code>HeroesComponent</code> 아래쪽에 표시됩니다.</p>\n<p>사용자는 이 컴포넌트를 세가지 방법으로 사용할 수 있어야 합니다.</p>\n<ol>\n<li>대시보드에서 히어로를 클릭했을 때</li>\n<li>히어로 목록에서 히어로를 클릭했을 때</li>\n<li>특정 히어로에 해당하는 \"딥 링크 (deep link)\" URL을 브라우저 주소표시줄에 입력했을 때</li>\n</ol>\n<p>이번 섹션에서는 <code>HeroesComponent</code>와 별개로 <code>HeroDetailsComponent</code>로 직접 네비게이션할 수 있는 방법에 대해 알아봅시다.</p>\n<!--\n### Delete _hero details_ from `HeroesComponent`\n-->\n<h3 id=\"heroescomponent에-포함된-히어로-상세정보-제거하기\"><code>HeroesComponent</code>에 포함된 <em>히어로 상세정보</em> 제거하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent에-포함된-히어로-상세정보-제거하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen the user clicks a hero item in the `HeroesComponent`,\nthe app should navigate to the `HeroDetailComponent`,\nreplacing the heroes list view with the hero detail view.\nThe heroes list view should no longer show hero details as it does now.\n\nOpen the `HeroesComponent` template (`heroes/heroes.component.html`) and\ndelete the `<app-hero-detail>` element from the bottom.\n\nClicking a hero item now does nothing.\nYou'll [fix that shortly](#heroes-component-links) after you enable routing to the `HeroDetailComponent`.\n-->\n<p>사용자가 <code>HeroesComponent</code>에 있는 히어로 아이템을 클릭하면 <code>HeroDetailComponent</code>에 해당하는 주소로 이동하면서 화면에 표시된 컴포넌트를 변경해야 합니다.\n그리고 이 경우에 히어로 목록은 더이상 화면에 표시되지 않아야 합니다.</p>\n<p><code>HeroesComponent</code> 템플릿 파일(<code>heroes/heroes.component.html</code>)을 열고 템플릿 아래쪽에 사용된 <code>&#x3C;app-hero-detail></code> 엘리먼트를 제거합니다.</p>\n<p>그리고나서 히어로 항목을 선택하면 아무일도 일어나지 않습니다.\n이 에러는 <code>HeroDetailComponent</code>로 라우팅하는 시나리오를 처리한 <a href=\"tutorial/toh-pt5#heroes-component-links\">후에</a> 수정할 것입니다.</p>\n<!--\n### Add a _hero detail_ route\n-->\n<h3 id=\"히어로-상세정보-화면-에-대한-라우팅-규칙-추가하기\"><em>히어로 상세정보 화면</em> 에 대한 라우팅 규칙 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#히어로-상세정보-화면-에-대한-라우팅-규칙-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nA URL like `~/detail/11` would be a good URL for navigating to the *Hero Detail* view of the hero whose `id` is `11`.\n\nOpen `AppRoutingModule` and import `HeroDetailComponent`.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-herodetail\" header=\"src/app/app-routing.module.ts (import HeroDetailComponent)\">\nimport { HeroDetailComponent }  from &#39;./hero-detail/hero-detail.component&#39;;\n\n</code-example>\n\nThen add a _parameterized_ route to the `AppRoutingModule.routes` array that matches the path pattern to the _hero detail_ view.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"detail-route\">\n{ path: &#39;detail/:id&#39;, component: HeroDetailComponent },\n\n</code-example>\n\nThe colon (:) in the `path` indicates that `:id` is a placeholder for a specific hero `id`.\n\nAt this point, all application routes are in place.\n\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"routes\" header=\"src/app/app-routing.module.ts (all routes)\">\nconst routes: Routes = [\n  { path: &#39;&#39;, redirectTo: &#39;/dashboard&#39;, pathMatch: &#39;full&#39; },\n  { path: &#39;dashboard&#39;, component: DashboardComponent },\n  { path: &#39;detail/:id&#39;, component: HeroDetailComponent },\n  { path: &#39;heroes&#39;, component: HeroesComponent }\n];\n\n</code-example>\n-->\n<p>URL이 <code>~/detail/11</code>라면 이 URL은 <em>히어로 상세정보</em> 화면에서 <code>id</code>가 <code>11</code>에 해당하는 히어로의 상세정보를 표시한다는 것으로 이해할 수 있습니다.</p>\n<p>이렇게 구현하기 위해 <code>AppRoutingModule</code>을 열어서 <code>HeroDetailComponent</code>를 로드합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"import-herodetail\" header=\"src/app/app-routing.module.ts (HeroDetailComponent 로드하기)\">\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\n</code-example>\n<p>그리고 <code>AppRoutingModule.routes</code> 배열에 <em>히어로 상세정보</em> 화면과 매칭되는 패턴을 <em>라우팅 변수를 사용해서</em> 정의합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" header=\"src/app/app-routing.module.ts\" region=\"detail-route\">\n{ path: 'detail/:id', component: HeroDetailComponent },\n\n</code-example>\n<p>이렇게 정의하면 히어로의 <code>id</code>에 해당하는 라우팅 변수를 <code>:id</code>로 받겠다는 것을 의미합니다.</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" region=\"routes\" header=\"src/app/app-routing.module.ts (전체 라우팅 규칙)\">\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n</code-example>\n<!--\n### `DashboardComponent` hero links\n-->\n<h3 id=\"dashboardcomponent에서-상세정보로-가는-링크\"><code>DashboardComponent</code>에서 상세정보로 가는 링크<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent에서-상세정보로-가는-링크\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `DashboardComponent` hero links do nothing at the moment.\n\nNow that the router has a route to `HeroDetailComponent`,\nfix the dashboard hero links to navigate via the _parameterized_ dashboard route.\n\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.html\" region=\"click\" header=\"src/app/dashboard/dashboard.component.html (hero links)\">\n&lt;a *ngFor=&quot;let hero of heroes&quot; class=&quot;col-1-4&quot;\n    routerLink=&quot;/detail/{{hero.id}}&quot;&gt;\n  &lt;div class=&quot;module hero&quot;&gt;\n    &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n  &lt;/div&gt;\n&lt;/a&gt;\n\n</code-example>\n\nYou're using Angular [interpolation binding](guide/interpolation) within the `*ngFor` repeater\nto insert the current iteration's `hero.id` into each\n[`routerLink`](#routerlink).\n-->\n<p><code>DashboardComponent</code>에 추가한 링크는 아직 동작하지 않습니다.</p>\n<p><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>로 배열을 순회할 때 할당되는 <code>hero</code> 객체의 <code>id</code>를 활용해서 <code>HeroDetailComponent</code>로 이동하는 라우팅 규칙을 연결해 봅시다.</p>\n<code-example path=\"toh-pt5/src/app/dashboard/dashboard.component.html\" region=\"click\" header=\"src/app/dashboard/dashboard.component.html (hero links)\">\n&#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n    <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n  &#x3C;div class=\"module hero\">\n    &#x3C;h4>{{hero.name}}&#x3C;/h4>\n  &#x3C;/div>\n&#x3C;/a>\n\n</code-example>\n<p>이 때 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>로 순회하는 각 링크의 <a href=\"tutorial/toh-pt5#routerlink\"><code>routerLink</code></a>의 값으로 <code>hero.id</code>를 지정하기 위해 Angular가 제공하는 <a href=\"guide/interpolation\">문자열 바인딩(interpolation binding)</a> 문법을 사용했습니다.</p>\n<a id=\"heroes-component-links\"></a>\n<!--\n### `HeroesComponent` hero links\n-->\n<h3 id=\"heroescomponent에서-상세정보로-가는-링크\"><code>HeroesComponent</code>에서 상세정보로 가는 링크<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent에서-상세정보로-가는-링크\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe hero items in the `HeroesComponent` are `<li>` elements whose click events\nare bound to the component's `onSelect()` method.\n\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (list with onSelect)\">\n&lt;ul class=&quot;heroes&quot;&gt;\n  &lt;li *ngFor=&quot;let hero of heroes&quot;\n    [class.selected]=&quot;hero === selectedHero&quot;\n    (click)=&quot;onSelect(hero)&quot;&gt;\n    &lt;span class=&quot;badge&quot;&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n\nStrip the `<li>` back to just its `*ngFor`,\nwrap the badge and name in an anchor element (`<a>`),\nand add a `routerLink` attribute to the anchor that\nis the same as in the dashboard template\n\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (list with links)\">\n&lt;ul class=&quot;heroes&quot;&gt;\n  &lt;li *ngFor=&quot;let hero of heroes&quot;&gt;\n    &lt;a routerLink=&quot;/detail/{{hero.id}}&quot;&gt;\n      &lt;span class=&quot;badge&quot;&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n\nYou'll have to fix the private stylesheet (`heroes.component.css`) to make\nthe list look as it did before.\nRevised styles are in the [final code review](#heroescomponent) at the bottom of this guide.\n-->\n<p><code>HeroesComponent</code>에 있는 히어로 아이템은 <code>&#x3C;li></code> 엘리먼트로 구성되었기 때문에, 이 엘리먼트에 클릭 이벤트를 바인딩하면 컴포넌트의 <code>onSelect()</code> 메소드를 실행할 수 있었습니다.</p>\n<code-example path=\"toh-pt4/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (onSelect가 적용된 리스트)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>이 코드에서 <code>&#x3C;li></code>에 적용된 어트리뷰트를 모두 제거하고 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>만 남겨둡니다.\n그리고 히어로의 id 뱃지와 이름을 표시하는 앵커 엘리먼트에 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 어트리뷰트를 추가합니다.</p>\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.html\" region=\"list\" header=\"src/app/heroes/heroes.component.html (링크가 적용된 리스트)\">\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>화면에 표시되는 모습을 변경하려면 컴포넌트의 스타일시트 파일(<code>heroes.component.css</code>)을 수정하면 됩니다.\n이 문서 마지막에 있는 <a href=\"tutorial/toh-pt5#heroescomponent\">최종코드 리뷰</a>를 확인해 보세요.</p>\n<!--\n#### Remove dead code (optional)\n-->\n<h4 id=\"필요없는-코드-제거하기-생략-가능\">필요없는 코드 제거하기 (생략 가능)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#필요없는-코드-제거하기-생략-가능\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nWhile the `HeroesComponent` class still works,\nthe `onSelect()` method and `selectedHero` property are no longer used.\n\nIt's nice to tidy up and you'll be grateful to yourself later.\nHere's the class after pruning away the dead code.\n\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.ts\" region=\"class\" header=\"src/app/heroes/heroes.component.ts (cleaned up)\">\nexport class HeroesComponent implements OnInit {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes =&gt; this.heroes = heroes);\n  }\n}\n\n</code-example>\n-->\n<p><code>HeroesComponent</code>는 지금도 제대로 동작하지만 이 컴포넌트 클래스에 있는 <code>onSelect()</code> 메소드와 <code>selectedHero</code> 프로퍼티는 더이상 사용되지 않습니다.</p>\n<p>그래서 클래스 코드를 깔끔하게 유지하려면 사용하지 않는 코드를 제거하는 것이 좋습니다.</p>\n<code-example path=\"toh-pt5/src/app/heroes/heroes.component.ts\" region=\"class\" header=\"src/app/heroes/heroes.component.ts (코드 정리 후)\">\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n</code-example>\n<!--\n## Routable *HeroDetailComponent*\n-->\n<h2 id=\"herodetailcomponent-라우팅\"><code>HeroDetailComponent</code> 라우팅<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#herodetailcomponent-라우팅\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nPreviously, the parent `HeroesComponent` set the `HeroDetailComponent.hero`\nproperty and the `HeroDetailComponent` displayed the hero.\n\n`HeroesComponent` doesn't do that anymore.\nNow the router creates the `HeroDetailComponent` in response to a URL such as `~/detail/11`.\n\nThe `HeroDetailComponent` needs a new way to obtain the hero-to-display.\nThis section explains the following:\n\n* Get the route that created it\n* Extract the `id` from the route\n* Acquire the hero with that `id` from the server via the `HeroService`\n\nAdd the following imports:\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"added-imports\" header=\"src/app/hero-detail/hero-detail.component.ts\">\nimport { ActivatedRoute } from &#39;@angular/router&#39;;\nimport { Location } from &#39;@angular/common&#39;;\n\nimport { HeroService }  from &#39;../hero.service&#39;;\n\n</code-example>\n\n<a id=\"hero-detail-ctor\"></a>\n\nInject the `ActivatedRoute`, `HeroService`, and `Location` services\ninto the constructor, saving their values in private fields:\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\">\nconstructor(\n  private route: ActivatedRoute,\n  private heroService: HeroService,\n  private location: Location\n) {}\n\n</code-example>\n\nThe [`ActivatedRoute`](api/router/ActivatedRoute) holds information about the route to this instance of the `HeroDetailComponent`.\nThis component is interested in the route's parameters extracted from the URL.\nThe \"id\" parameter is the `id` of the hero to display.\n\nThe [`HeroService`](tutorial/toh-pt4) gets hero data from the remote server\nand this component will use it to get the hero-to-display.\n\nThe [`location`](api/common/Location) is an Angular service for interacting with the browser.\nYou'll use it [later](#goback) to navigate back to the view that navigated here.\n-->\n<p>이전 예제에서는 부모 컴포넌트 <code>HeroesComponent</code>가 자식 컴포넌트 <code>HeroDetailComponent</code>의 <code>hero</code> 프로퍼티를 바인딩하면 자식 컴포넌트가 이 히어로에 대한 상세정보를 표시했습니다.</p>\n<p>하지만 이제 <code>HeroesComponent</code>는 이런 동작을 하지 않습니다.\n이제부터는 라우터가 <code>HeroDetailComponent</code>를 생성하는데 이 때 URL에 있는 <code>~/detail/11</code>과 같은 URL을 활용하도록 수정해 봅시다.</p>\n<p>이제 <code>HeroDetailComponent</code>가 화면에 표시할 히어로의 id는 다음과 같이 가져옵니다.</p>\n<ul>\n<li>컴포넌트를 생성할 때 사용한 라우팅 규칙을 참조합니다.</li>\n<li>라우팅 규칙에서 <code>id</code>에 해당하는 라우팅 변수를 추출합니다.</li>\n<li><code>id</code>에 해당되는 히어로 정보는 <code>HeroService</code>를 활용해서 서버에서 가져옵니다.</li>\n</ul>\n<p>다음 코드를 추가합니다:</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"added-imports\" header=\"src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { HeroService }  from '../hero.service';\n\n</code-example>\n<a id=\"hero-detail-ctor\"></a>\n<p>먼저, 컴포넌트 생성자로 <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>, <code>HeroService</code>, <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 서비스를 의존성으로 주입하고 <code>private</code> 프로퍼티로 선언합니다:</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"ctor\">\nconstructor(\n  private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private heroService: HeroService,\n  private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n) {}\n\n</code-example>\n<p><a href=\"api/router/ActivatedRoute\"><code>ActivatedRoute</code></a>는 <code>HeroDetailComponent</code>의 인스턴스를 생성하면서 적용한 라우팅 규칙에 대한 정보를 담고 있습니다.\n그래서 이 라우팅 규칙을 참조하면 URL을 통해 컴포넌트로 전달되는 변수를 추출할 수 있습니다.\n화면에 표시할 히어로를 구분할 때도 URL에 포함된 라우팅 변수 <code>id</code>를 사용합니다.</p>\n<p>컴포넌트에 사용할 히어로 데이터는 <a href=\"tutorial/toh-pt4\"><code>HeroService</code></a>를 사용해서 리모트 서버에서 가져옵니다.</p>\n<p><a href=\"api/common/Location\"><code>location</code></a>은 브라우저를 제어하기 위해 Angular가 제공하는 서비스입니다.\n이 서비스는 <a href=\"tutorial/toh-pt5#goback\">이전 페이지로 전환하는 예제를 다룰 때</a> 다시 살펴봅니다.</p>\n<!--\n### Extract the `id` route parameter\n-->\n<h3 id=\"라우팅-변수-id-추출하기\">라우팅 변수 <code>id</code> 추출하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#라우팅-변수-id-추출하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn the `ngOnInit()` [lifecycle hook](guide/lifecycle-hooks#oninit)\ncall `getHero()` and define it as follows.\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"ngOnInit\">\nngOnInit(): void {\n  this.getHero();\n}\n\ngetHero(): void {\n  const id = +this.route.snapshot.paramMap.get(&#39;id&#39;);\n  this.heroService.getHero(id)\n    .subscribe(hero =&gt; this.hero = hero);\n}\n\n</code-example>\n\nThe `route.snapshot` is a static image of the route information shortly after the component was created.\n\nThe `paramMap` is a dictionary of route parameter values extracted from the URL.\nThe `\"id\"` key returns the `id` of the hero to fetch.\n\nRoute parameters are always strings.\nThe JavaScript (+) operator converts the string to a number,\nwhich is what a hero `id` should be.\n\nThe browser refreshes and the app crashes with a compiler error.\n`HeroService` doesn't have a `getHero()` method.\nAdd it now.\n-->\n<p>지금까지 작성한 예제에서는 <code>ngOnInit()</code> <a href=\"guide/lifecycle-hooks#oninit\">라이프싸이클 후킹 함수</a>에서 <code>HeroService</code>의 <code>getHero()</code> 메소드를 호출합니다.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" header=\"src/app/hero-detail/hero-detail.component.ts\" region=\"ngOnInit\">\nngOnInit(): void {\n  this.getHero();\n}\n\ngetHero(): void {\n  const id = +this.route.snapshot.paramMap.get('id');\n  this.heroService.getHero(id)\n    .subscribe(hero => this.hero = hero);\n}\n\n</code-example>\n<p><code>route.snapshot</code>은 컴포넌트가 생성된 직후에 존재하는 라우팅 규칙에 대한 정보를 담고 있는 객체입니다.</p>\n<p>그래서 이 객체가 제공하는 <code>paramMap</code>을 사용하면 URL에 존재하는 라우팅 변수를 참조할 수 있습니다.\n지금 작성하고 있는 예제에서는 서버로부터 받아올 히어로의 <code>id</code>에 해당하는 값을 URL에 있는 <code>\"id\"</code> 키로 참조합니다.</p>\n<p>라우팅 변수는 언제나 문자열 타입입니다.\n그래서 라우팅 변수로 전달된 값이 원래 숫자였다면 문자열로 받아온 라우팅 변수에 JavaScript (+) 연산자를 사용해서 숫자로 변환할 수 있습니다.</p>\n<p>하지만 브라우저가 갱신되고 난 후에 이 코드는 동작하지 않습니다.\n왜냐하면 <code>HeroService</code>에 아직 <code>getHero()</code> 메소드가 없기 때문입니다.\n이 메소드를 추가해 봅시다.</p>\n<!--\n### Add `HeroService.getHero()`\n-->\n<h3 id=\"heroservicegethero-추가하기\"><code>HeroService.getHero()</code> 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroservicegethero-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nOpen `HeroService` and add the following `getHero()` method with the `id` after the `getHeroes()` method:\n\n<code-example path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\" header=\"src/app/hero.service.ts (getHero)\">\ngetHero(id: number): Observable&lt;Hero&gt; {\n  // TODO: 이 메시지는 서버에서 히어로 정보를 가져온 _후에_ 보내야 합니다.\n  this.messageService.add(`HeroService: fetched hero id=${id}`);\n  return of(HEROES.find(hero =&gt; hero.id === id));\n}\n\n</code-example>\n\n<div class=\"alert is-important\">\n\nNote the backticks ( &#96; ) that define a JavaScript\n[_template literal_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) for embedding the `id`.\n</div>\n\nLike [`getHeroes()`](tutorial/toh-pt4#observable-heroservice),\n`getHero()` has an asynchronous signature.\nIt returns a _mock hero_ as an `Observable`, using the RxJS `of()` function.\n\nYou'll be able to re-implement `getHero()` as a real `Http` request\nwithout having to change the `HeroDetailComponent` that calls it.\n-->\n<p><code>HeroService</code>를 열고 <code>getHeroes()</code> 메소드 뒤에 다음과 같이 <code>getHero()</code> 메소드를 추가합니다.</p>\n<code-example path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\" header=\"src/app/hero.service.ts (getHero)\">\ngetHero(id: number): Observable&#x3C;Hero> {\n  // TODO: 이 메시지는 서버에서 히어로 정보를 가져온 _후에_ 보내야 합니다.\n  this.messageService.add(`HeroService: fetched hero id=${id}`);\n  return of(HEROES.find(hero => hero.id === id));\n}\n\n</code-example>\n<div class=\"alert is-important\">\n<p><code>id</code>에 사용된 역따옴표( ` )는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\"><em>템플릿 리터럴 (template literal)</em></a>을 표현하는 JavaScript 문법입니다.</p>\n</div>\n<p><code>getHero()</code> 함수도 <a href=\"tutorial/toh-pt4#%EC%98%B5%EC%A0%80%EB%B2%84%EB%B8%94-heroservice\"><code>getHeroes()</code></a> 함수와 비슷하게 비동기로 동작합니다.\n그리고 <em>히어로의 목 데이터</em> 하나를 <code>Observable</code>로 반환하기 위해 RxJs가 제공하는 <code>of()</code> 함수를 사용했습니다.</p>\n<p>이렇게 구현하면 나중에 <code>getHero()</code>가 실제 <code>Http</code> 요청을 보내도록 수정하더라도 이 함수를 호출하는 <code>HeroDetailComponent</code>는 영향을 받지 않습니다.</p>\n<!--\n#### Try it\n-->\n<h3 id=\"동작-확인하기-1\">동작 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#동작-확인하기-1\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe browser refreshes and the app is working again.\nYou can click a hero in the dashboard or in the heroes list and navigate to that hero's detail view.\n\nIf you paste `localhost:4200/detail/11` in the browser address bar,\nthe router navigates to the detail view for the hero with `id: 11`,  \"Dr Nice\".\n-->\n<p>브라우저가 갱신되고 나면 앱이 다시 동작합니다.\n그리고 대시보드나 히어로 목록 화면에서 히어로를 한 명 선택하면 이 히어로의 상세정보를 표시하는 화면으로 이동합니다.</p>\n<p>브라우저 주소표시줄에 <code>localhost:4200/detail/11</code>라는 값을 붙여넣으면 이 때도 마찬가지로 <code>id: 11</code>에 해당하는 \"Dr Nice\" 히어로의 정보를 표시하는 화면으로 이동할 것입니다.</p>\n<a id=\"goback\"></a>\n<!--\n### Find the way back\n-->\n<h3 id=\"이전-화면으로-돌아가기\">이전 화면으로 돌아가기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#이전-화면으로-돌아가기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nBy clicking the browser's back button,\nyou can go back to the hero list or dashboard view,\ndepending upon which sent you to the detail view.\n\nIt would be nice to have a button on the `HeroDetail` view that can do that.\n\nAdd a *go back* button to the bottom of the component template and bind it\nto the component's `goBack()` method.\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\" region=\"back-button\" header=\"src/app/hero-detail/hero-detail.component.html (back button)\">\n&lt;button (click)=&quot;goBack()&quot;&gt;go back&lt;/button&gt;\n\n</code-example>\n\nAdd a `goBack()` _method_ to the component class that navigates backward one step\nin the browser's history stack\nusing the `Location` service that you [injected previously](#hero-detail-ctor).\n\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"goBack\" header=\"src/app/hero-detail/hero-detail.component.ts (goBack)\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n\n\nRefresh the browser and start clicking.\nUsers can navigate around the app, from the dashboard to hero details and back,\nfrom heroes list to the mini detail to the hero details and back to the heroes again.\n-->\n<p>히어로 목록이나 대시보드 화면에서 히어로를 선택해서 히어로 상세정보 화면으로 이동했다면, 브라우저의 뒤로 가기 버튼을 눌렀을 때 이전 화면으로 돌아갈 수 있습니다.</p>\n<p>이 기능을 실행하는 버튼이 <code>HeroDetail</code> 화면에 있다면 사용자가 애플리케이션을 사용하기 더 편할 것입니다.</p>\n<p>컴포넌트 템플릿 맨 아래에 <em>뒤로 가기</em> 버튼을 추가하고 이 버튼을 컴포넌트의 <code>goBack()</code> 메소드와 바인딩 합니다.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\" region=\"back-button\" header=\"src/app/hero-detail/hero-detail.component.html (뒤로 가기 버튼)\">\n&#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n\n</code-example>\n<p>그리고 컴포넌트 클래스에 <code>gBack()</code> <em>메소드</em> 를 추가하는데, 브라우저의 히스토리 스택을 활용할 수 있도록 <a href=\"tutorial/toh-pt5#hero-detail-ctor\">이전에 주입받은</a> <code><a href=\"api/common/Location\" class=\"code-anchor\">Location</a></code> 서비스를 사용합니다.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\" region=\"goBack\" header=\"src/app/hero-detail/hero-detail.component.ts (goBack)\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n<p>브라우저가 다시 시작되면 이것 저것 클릭해 보세요.\n사용자는 화면에 있는 버튼으로 히어로 목록이나 대시보드 화면을 이동할 수 있으며, 이전 화면으로 돌아갈 수도 있습니다.</p>\n<!--\n## Final code review\n-->\n<h2 id=\"최종코드-리뷰\">최종코드 리뷰<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#최종코드-리뷰\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nHere are the code files discussed on this page.\n-->\n<p>이 문서에서 다룬 코드를 확인해 보세요.</p>\n<a id=\"approutingmodule\"></a>\n<a id=\"appmodule\"></a>\n<!--\n#### `AppRoutingModule`, `AppModule`, and `HeroService`\n-->\n<h4 id=\"approutingmodule-appmodule-heroservice\"><em>AppRoutingModule</em>, <em>AppModule</em>, <em>HeroService</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#approutingmodule-appmodule-heroservice\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/app-routing.module.ts\" path=\"toh-pt5/src/app/app-routing.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }             from '@angular/core';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a>, <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> } from '@angular/router';\n\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\n\nconst routes: <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a> = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard', component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes', component: HeroesComponent }\n];\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> ]\n})\nexport class AppRoutingModule {}\n\n</code-pane>\n  <code-pane header=\"src/app/app.module.ts\" path=\"toh-pt5/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }       from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }    from '@angular/forms';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard/dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail/hero-detail.component';\nimport { HeroesComponent }      from './heroes/heroes.component';\nimport { MessagesComponent }    from './messages/messages.component';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroesComponent,\n    HeroDetailComponent,\n    MessagesComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane header=\"src/app/hero.service.ts\" path=\"toh-pt5/src/app/hero.service.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { Observable, of } from 'rxjs';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\nimport { MessageService } from './message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({ providedIn: 'root' })\nexport class HeroService {\n\n  constructor(private messageService: MessageService) { }\n\n  getHeroes(): Observable&#x3C;Hero[]> {\n    // TODO: 이 메시지는 서버에서 히어로 정보를 가져온 _후에_ 보내야 합니다.\n    this.messageService.add('HeroService: fetched heroes');\n    return of(HEROES);\n  }\n\n  getHero(id: number): Observable&#x3C;Hero> {\n    // TODO: 이 메시지는 서버에서 히어로 정보를 가져온 _후에_ 보내야 합니다.\n    this.messageService.add(`HeroService: fetched hero id=${id}`);\n    return of(HEROES.find(hero => hero.id === id));\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"appcomponent\"></a>\n<h4 id=\"appcomponent\"><code>AppComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#appcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" path=\"toh-pt5/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;nav>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/a>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/a>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;app-messages>&#x3C;/app-messages>\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.component.css\" path=\"toh-pt5/src/app/app.component.css\">\n/* AppComponent에 적용되는 CSS 스타일 */\nh1 {\n  font-size: 1.2em;\n  margin-bottom: 0;\n}\nh2 {\n  font-size: 2em;\n  margin-top: 0;\n  padding-top: 0;\n}\nnav a {\n  padding: 5px 10px;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #eee;\n  border-radius: 4px;\n}\nnav a:visited, a:link {\n  color: #334953;\n}\nnav a:hover {\n  color: #039be5;\n  background-color: #cfd8dc;\n}\nnav a.active {\n  color: #039be5;\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"dashboardcomponent\"></a>\n<h4 id=\"dashboardcomponent\"><code>DashboardComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#dashboardcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/dashboard/dashboard.component.html\" path=\"toh-pt5/src/app/dashboard/dashboard.component.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" class=\"col-1-4\"\n      <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.ts\" path=\"toh-pt5/src/app/dashboard/dashboard.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/dashboard/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard/dashboard.component.css\">\n/* DashboardComponent에 적용되는 CSS styles */\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\na {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center;\n  margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #3f525c;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #eee;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad > [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"heroescomponent\"></a>\n<h4 id=\"heroescomponent\"><code>HeroesComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/heroes/heroes.component.html\" path=\"toh-pt5/src/app/heroes/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/detail/{{hero.id}}\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/a>\n  &#x3C;/li>\n&#x3C;/ul>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.ts\" path=\"toh-pt5/src/app/heroes/heroes.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { Hero } from '../hero';\nimport { HeroService } from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: ['./heroes.component.css']\n})\nexport class HeroesComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  heroes: Hero[];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  getHeroes(): void {\n    this.heroService.getHeroes()\n    .subscribe(heroes => this.heroes = heroes);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/heroes/heroes.component.css\" path=\"toh-pt5/src/app/heroes/heroes.component.css\">\n/* HeroesComponent에 적용되는 CSS 스타일 */\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  position: relative;\n  cursor: pointer;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n\n.heroes a {\n  color: #333;\n  text-decoration: none;\n  position: relative;\n  display: block;\n  width: 250px;\n}\n\n.heroes a:hover {\n  color:#607D8B;\n}\n\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color:#405061;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  min-width: 16px;\n  text-align: right;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\n\n\n</code-pane>\n</code-tabs>\n<a id=\"herodetailcomponent\"></a>\n<h4 id=\"herodetailcomponent\"><code>HeroDetailComponent</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#herodetailcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<code-tabs>\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.html\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>{{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}} Details&#x3C;/h2>\n  &#x3C;div>&#x3C;span>id: &#x3C;/span>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name:\n      &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\"/>\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">go back&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.ts\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\nimport { <a href=\"api/common/Location\" class=\"code-anchor\">Location</a> } from '@angular/common';\n\nimport { Hero }         from '../hero';\nimport { HeroService }  from '../hero.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  hero: Hero;\n\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private heroService: HeroService,\n    private location: <a href=\"api/common/Location\" class=\"code-anchor\">Location</a>\n  ) {}\n\n  ngOnInit(): void {\n    this.getHero();\n  }\n\n  getHero(): void {\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.heroService.getHero(id)\n      .subscribe(hero => this.hero = hero);\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero-detail/hero-detail.component.css\" path=\"toh-pt5/src/app/hero-detail/hero-detail.component.css\">\n/* HeroDetailComponent에 적용되는 CSS 스타일 */\nlabel {\n  display: inline-block;\n  width: 3em;\n  margin: .5em 0;\n  color: #607D8B;\n  font-weight: bold;\n}\ninput {\n  height: 2em;\n  font-size: 1em;\n  padding-left: .4em;\n}\nbutton {\n  margin-top: 20px;\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc;\n  cursor: auto;\n}\n\n\n</code-pane>\n</code-tabs>\n<!--\n## Summary\n-->\n<h2 id=\"정리\">정리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#정리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* You added the Angular router to navigate among different components.\n* You turned the `AppComponent` into a navigation shell with `<a>` links and a `<router-outlet>`.\n* You configured the router in an `AppRoutingModule`\n* You defined simple routes, a redirect route, and a parameterized route.\n* You used the `routerLink` directive in anchor elements.\n* You refactored a tightly-coupled master/detail view into a routed detail view.\n* You used router link parameters to navigate to the detail view of a user-selected hero.\n* You shared the `HeroService` among multiple components.\n-->\n<ul>\n<li>화면에 표시하는 컴포넌트를 전환하기 위해 Angular 라우터를 추가했습니다.</li>\n<li><code>AppComponent</code>에 <code>&#x3C;a></code> 링크와 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>을 추가하면 네비게이션 동작을 실행할 수 있습니다.</li>\n<li>라우터 설정은 <code>AppRoutingModule</code>에 정의합니다.</li>\n<li>간단한 라우팅 규칙부터 리다이렉트 라우팅 규칙, 라우팅 변수가 있는 라우팅 규칙을 정의해 봤습니다.</li>\n<li>앵커 엘리먼트에 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> 디렉티브를 적용했습니다.</li>\n<li>히어로 목록/상세정보 화면은 원래 결합도가 높았지만 라우터를 활용해서 결합도를 낮추도록 리팩토링했습니다.</li>\n<li>히어로 목록 화면에서 사용자가 선택한 히어로의 정보를 히어로 상세정보 화면으로 전달하기 위해 라우터 링크 배열을 활용했습니다.</li>\n<li>여러 컴포넌트에 사용하는 로직을 중복해서 구현하지 않고 <code>HeroService</code>로 옮겨서 재사용할 수 있도록 변경했습니다.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/Location\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/Route\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Routes\n - guide/interpolation\n - guide/lifecycle-hooks#oninit\n - tutorial/toh-pt4\n - tutorial/toh-pt4#%EC%98%B5%EC%A0%80%EB%B2%84%EB%B8%94-heroservice\n - tutorial/toh-pt5#appcomponent\n - tutorial/toh-pt5#approutingmodule-appmodule-heroservice\n - tutorial/toh-pt5#approutingmodule-생성하기\n - tutorial/toh-pt5#dashboardcomponent\n - tutorial/toh-pt5#dashboardcomponent에서-상세정보로-가는-링크\n - tutorial/toh-pt5#goback\n - tutorial/toh-pt5#hero-detail-ctor\n - tutorial/toh-pt5#hero-details\n - tutorial/toh-pt5#herodetailcomponent\n - tutorial/toh-pt5#herodetailcomponent-라우팅\n - tutorial/toh-pt5#heroes-component-links\n - tutorial/toh-pt5#heroescomponent\n - tutorial/toh-pt5#heroescomponent에-포함된-히어로-상세정보-제거하기\n - tutorial/toh-pt5#heroescomponent에서-상세정보로-가는-링크\n - tutorial/toh-pt5#heroservicegethero-추가하기\n - tutorial/toh-pt5#routerlink\n - tutorial/toh-pt5#routermoduleforroot\n - tutorial/toh-pt5#기본-라우팅-규칙-추가하기\n - tutorial/toh-pt5#네비게이션-링크-routerlink-추가하기\n - tutorial/toh-pt5#네비게이션-추가하기\n - tutorial/toh-pt5#대시보드-라우팅-규칙-추가하기\n - tutorial/toh-pt5#대시보드-화면-추가하기\n - tutorial/toh-pt5#동작-확인하기\n - tutorial/toh-pt5#동작-확인하기-1\n - tutorial/toh-pt5#라우팅-규칙route\n - tutorial/toh-pt5#라우팅-변수-id-추출하기\n - tutorial/toh-pt5#라우팅-영역-routeroutlet-추가하기\n - tutorial/toh-pt5#애플리케이션-셸에-대시보드-링크-추가하기\n - tutorial/toh-pt5#이전-화면으로-돌아가기\n - tutorial/toh-pt5#정리\n - tutorial/toh-pt5#최종코드-리뷰\n - tutorial/toh-pt5#필요없는-코드-제거하기-생략-가능\n - tutorial/toh-pt5#히어로-상세정보-화면-에-대한-라우팅-규칙-추가하기\n - tutorial/toh-pt5#히어로-상세정보-화면으로-전환하기\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\n - https://github.com/angular/angular/edit/master/aio/content/tutorial/toh-pt5.md?message=docs%3A%20describe%20your%20change...\n-->"
}