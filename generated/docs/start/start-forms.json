{
  "id": "start/start-forms",
  "title": "Angular 시작하기: 폼(Form)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/start/start-forms.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Getting Started with Angular: Forms\n-->\n<h1 id=\"angular-시작하기-폼form\">Angular 시작하기: 폼(Form)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-forms#angular-시작하기-폼form\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAt the end of [Managing Data](start/start-data \"Getting Started: Managing Data\"), the online store application has a product catalog and a shopping cart.\n\nThis section walks you through adding a form-based checkout feature to collect user information as part of checkout.\n-->\n<p><a href=\"start/start-data\" title=\"Getting Started: Managing Data\">데이터 다루기</a> 과정까지 끝내고 나면 온라인 쇼핑몰 앱에는 상품 목록을 볼 수 있는 기능과 장바구니 기능이 존재합니다.</p>\n<p>이번에는 사용자가 입력한 내용을 폼 형식으로 입력받는 주문 기능을 추가해 봅시다.</p>\n<!--\n## Forms in Angular\n-->\n<h2 id=\"angular의-폼\">Angular의 폼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-forms#angular의-폼\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nForms in Angular build upon the standard HTML forms to help you create custom form controls and easy validation experiences. There are two parts to an Angular Reactive form: the objects that live in the component to store and manage the form, and the visualization of the form that lives in the template.\n-->\n<p>Angular의 폼은 표준 HTML 폼을 기반으로 커스텀 폼 컨트롤을 만들거나 유효성 검사를 더 편하게 할 수 있도록 확장한 것입니다. Angular가 제공하는 반응형 폼(Reactive Form)은 두 요소로 구성되는데, 컴포넌트 클래스에서는 폼을 관리하고 데이터를 보관하며, 템플릿에서는 폼 데이터를 화면에 표시합니다.</p>\n<!--\n## Define the checkout form model\n-->\n<h2 id=\"주문-폼-모델-정의하기\">주문 폼 모델 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-forms#주문-폼-모델-정의하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nFirst, set up the checkout form model. Defined in the component class, the form model is the source of truth for the status of the form.\n\n1. Open `cart.component.ts`.\n\n1. Angular's `FormBuilder` service provides convenient methods for generating controls. As with the other services you've used, you need to import and inject the service before you can use it:\n\n    1. Import the `FormBuilder` service from the `@angular/forms` package.\n\n      <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"imports\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { FormBuilder } from &#39;@angular/forms&#39;;\n\nimport { CartService } from &#39;../cart.service&#39;;\n\n</code-example>\n\n      The `ReactiveFormsModule` provides the `FormBuilder` service, which `AppModule` (in `app.module.ts`) already imports.\n\n    1. Inject the `FormBuilder` service.\n\n      <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"inject-form-builder\">\nexport class CartComponent implements OnInit {\n  items;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: FormBuilder,\n  ) {\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n\n1. Still in the `CartComponent` class, define the `checkoutForm` property to store the form model.\n\n    <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"checkout-form\">\nexport class CartComponent implements OnInit {\n  items;\n  checkoutForm;\n}\n\n\n</code-example>\n\n1. To gather the user's name and address, set the `checkoutForm` property with a form model containing `name` and `address` fields, using the `FormBuilder` `group()` method. Add this between the curly braces, `{}`,\nof the constructor.\n\n    <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"checkout-form-group\">\nexport class CartComponent implements OnInit {\n  items;\n  checkoutForm;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: FormBuilder,\n  ) {\n    this.checkoutForm = this.formBuilder.group({\n      name: &#39;&#39;,\n      address: &#39;&#39;\n    });\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n\n1. For the checkout process, users need to submit their name and address. When they submit their order, the form should reset and the cart should clear.\n\n    1. In `cart.component.ts`, define an `onSubmit()` method to process the form. Use the `CartService` `clearCart()` method to empty the cart items and reset the form after its submission. In a real-world app, this method would also submit the data to an external server. The entire cart component class is as follows:\n\n    <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { FormBuilder } from &#39;@angular/forms&#39;;\n\nimport { CartService } from &#39;../cart.service&#39;;\n\n@Component({\n  selector: &#39;app-cart&#39;,\n  templateUrl: &#39;./cart.component.html&#39;,\n  styleUrls: [&#39;./cart.component.css&#39;]\n})\nexport class CartComponent implements OnInit {\n  items;\n  checkoutForm;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: FormBuilder,\n  ) {\n    this.checkoutForm = this.formBuilder.group({\n      name: &#39;&#39;,\n      address: &#39;&#39;\n    });\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n\n  onSubmit(customerData) {\n    // 주문 로직은 여기에 구현합니다.\n    this.items = this.cartService.clearCart();\n    this.checkoutForm.reset();\n\n    console.warn(&#39;Your order has been submitted&#39;, customerData);\n  }\n}\n\n\n</code-example>\n\nNow that you've defined the form model in the component class, you need a checkout form to reflect the model in the view.\n-->\n<p>먼저, 주문 폼 모델을 정의해 봅시다. 폼 모델은 폼의 상태를 담고 있는 원천 소스이며 컴포넌트 클래스에 정의합니다.</p>\n<ol>\n<li>\n<p><code>cart.component.ts</code> 파일을 엽니다.</p>\n</li>\n<li>\n<p>Angular가 제공하는 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>를 활용하면 폼 컨트롤을 편하게 생성할 수 있습니다. 다른 서비스와 마찬가지로 이 서비스도 사용하려면 의존성으로 주입해야 합니다:</p>\n<ol>\n<li>\n<p><code>@angular/forms</code> 패키지에서 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 서비스를 로드합니다.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\nimport { CartService } from '../cart.service';\n\n</code-example>\n<p><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 서비스를 사용하려면 <code>AppModule</code>(<code>app.module.ts</code>)에 <code><a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a></code>를 등록해야 합니다.</p>\n</li>\n<li>\n<p><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 서비스를 의존성으로 주입합니다.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"inject-form-builder\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  ) {\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>폼 모델을 저장하는 <code>checkoutForm</code> 프로퍼티를 <code>CartComponent</code> 클래스에 선언합니다.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"checkout-form\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n  checkoutForm;\n}\n\n\n</code-example>\n</li>\n<li>\n<p>주문자의 이름과 주소를 입력받기 위해 <code>checkoutForm</code> 프로퍼티에는 <code>name</code> 필드와 <code>address</code> 필드가 필요합니다. <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>의 <code><a href=\"api/forms/FormBuilder#group\" class=\"code-anchor\">group()</a></code> 메소드를 사용해서 이 필드를 정의합니다.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\" region=\"checkout-form-group\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n  checkoutForm;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  ) {\n    this.checkoutForm = this.formBuilder.group({\n      name: '',\n      address: ''\n    });\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>주문을 진행하려면 주문자가 이름과 주소를 제출해야 합니다.그리고 폼을 제출하고 나면 폼은 초기화되고 장바구니도 비워져야 합니다.</p>\n<ol>\n<li>폼을 제출하기 위해 <code>cart.component.ts</code> 파일에 <code>onSubmit()</code> 메소드를 정의합니다. 이 메소드는 <code>CartService</code>의 <code>clartCart()</code> 메소드를 사용해서 장바구니를 비우며, 폼 제출이 완료된 후에는 폼을 초기화 합니다. 현업에서는 이런 메소드에서 외부 서버로 데이터를 제출합니다. 여기까지 작성하고 나면 장바구니 컴포넌트 클래스가 이렇게 작성됩니다:</li>\n</ol>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a> } from '@angular/forms';\n\nimport { CartService } from '../cart.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './cart.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./cart.component.css']\n})\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n  checkoutForm;\n\n  constructor(\n    private cartService: CartService,\n    private formBuilder: <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>,\n  ) {\n    this.checkoutForm = this.formBuilder.group({\n      name: '',\n      address: ''\n    });\n  }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n\n  onSubmit(customerData) {\n    // 주문 로직은 여기에 구현합니다.\n    this.items = this.cartService.clearCart();\n    this.checkoutForm.reset();\n\n    console.warn('Your order has been submitted', customerData);\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<p>지금까지 컴포넌트 클래스에 폼 모델을 정의했고, 이 모델을 화면에 반영해 봅시다.</p>\n<!--\n## Create the checkout form\n-->\n<h2 id=\"주문-화면-만들기\">주문 화면 만들기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-forms#주문-화면-만들기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUse the following steps to add a checkout form at the bottom of the \"Cart\" page.\n\n1. Open `cart.component.html`.\n\n1. At the bottom of the template, add an HTML form to capture user information.\n\n1. Use a `formGroup` property binding to bind the `checkoutForm` to the `form` tag in the template. Also include a \"Purchase\" button to submit the form.\n\n  <code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.3.html\" region=\"checkout-form\">\n&lt;form [formGroup]=&quot;checkoutForm&quot;&gt;\n\n  &lt;button class=&quot;button&quot; type=&quot;submit&quot;&gt;Purchase&lt;/button&gt;\n\n&lt;/form&gt;\n\n</code-example>\n\n1. On the `form` tag, use an `ngSubmit` event binding to listen for the form submission and call the `onSubmit()` method with the `checkoutForm` value.\n\n  <code-example path=\"getting-started/src/app/cart/cart.component.html\" header=\"src/app/cart/cart.component.html (cart component template detail)\" region=\"checkout-form-1\">\n&lt;form [formGroup]=&quot;checkoutForm&quot; (ngSubmit)=&quot;onSubmit(checkoutForm.value)&quot;&gt;\n&lt;/form&gt;\n\n\n</code-example>\n\n1. Add input fields for `name` and `address`.  Use the `formControlName` attribute binding to bind the `checkoutForm` form controls for `name` and `address` to their input fields. The final complete component is as follows:\n\n  <code-example path=\"getting-started/src/app/cart/cart.component.html\" header=\"src/app/cart/cart.component.html\" region=\"checkout-form-2\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;p&gt;\n  &lt;a routerLink=&quot;/shipping&quot;&gt;Shipping Prices&lt;/a&gt;\n&lt;/p&gt;\n\n&lt;div class=&quot;cart-item&quot; *ngFor=&quot;let item of items&quot;&gt;\n  &lt;span&gt;{{ item.name }} &lt;/span&gt;\n  &lt;span&gt;{{ item.price | currency }}&lt;/span&gt;\n&lt;/div&gt;\n\n&lt;form [formGroup]=&quot;checkoutForm&quot; (ngSubmit)=&quot;onSubmit(checkoutForm.value)&quot;&gt;\n\n  &lt;div&gt;\n    &lt;label for=&quot;name&quot;&gt;\n      Name\n    &lt;/label&gt;\n    &lt;input id=&quot;name&quot; type=&quot;text&quot; formControlName=&quot;name&quot;&gt;\n  &lt;/div&gt;\n\n  &lt;div&gt;\n    &lt;label for=&quot;address&quot;&gt;\n      Address\n    &lt;/label&gt;\n    &lt;input id=&quot;address&quot; type=&quot;text&quot; formControlName=&quot;address&quot;&gt;\n  &lt;/div&gt;\n\n  &lt;button class=&quot;button&quot; type=&quot;submit&quot;&gt;Purchase&lt;/button&gt;\n\n&lt;/form&gt;\n\n\n</code-example>\n\nAfter putting a few items in the cart, users can now review their items, enter their name and address, and submit their purchase:\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/start/cart-with-items-and-form.png' alt=\"Cart page with checkout form\">\n</div>\n\nTo confirm submission, open the console where you should see an object containing the name and address you submitted.\n-->\n<p>장바구니 화면 아래쪽에 다음과 같은 순서로 주문 화면을 구성해 봅시다.</p>\n<ol>\n<li>\n<p><code>cart.component.html</code> 파일을 엽니다.</p>\n</li>\n<li>\n<p>템플릿 제일 아래쪽에 사용자의 입력을 받을 HTML 폼을 추가합니다.</p>\n</li>\n<li>\n<p><code>&#x3C;form></code> 엘리먼트의 <code>formGroup</code> 프로퍼티를 <code>checkoutForm</code> 클래스 프로퍼티와 바인딩합니다. 그리고 폼 제출용으로 사용할 \"Purchase\" 버튼을 추가합니다.</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.3.html\" region=\"checkout-form\">\n&#x3C;form [formGroup]=\"checkoutForm\">\n\n  &#x3C;button class=\"button\" type=\"submit\">Purchase&#x3C;/button>\n\n&#x3C;/form>\n\n</code-example>\n</li>\n<li>\n<p><code>&#x3C;form></code> 엘리먼트에서 발생하는 <code>ngSubmit</code> 이벤트를 <code>onSubmit()</code> 메소드와 바인딩합니다. 이 때 <code>checkoutForm</code>의 값을 함께 전달합니다.</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.html\" header=\"src/app/cart/cart.component.html (장바구니 컴포넌트 템플릿)\" region=\"checkout-form-1\">\n&#x3C;form [formGroup]=\"checkoutForm\" (ngSubmit)=\"onSubmit(checkoutForm.value)\">\n&#x3C;/form>\n\n\n</code-example>\n</li>\n<li>\n<p><code>name</code> 필드와 <code>address</code> 필드에 연결되는 입력 필드를 추가합니다. 이 입력 필드의 <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a></code> 어트리뷰트를 바인딩하면 <code>checkoutForm</code> 폼 컨트롤의 <code>name</code> 필드와 <code>address</code> 필드를 연결할 수 있습니다. 그러면 컴포넌트 코드가 다음과 같이 작성될 것입니다:</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.html\" header=\"src/app/cart/cart.component.html\" region=\"checkout-form-2\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;p>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\">Shipping Prices&#x3C;/a>\n&#x3C;/p>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">\n  &#x3C;span>{{ item.name }} &#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n&#x3C;form [formGroup]=\"checkoutForm\" (ngSubmit)=\"onSubmit(checkoutForm.value)\">\n\n  &#x3C;div>\n    &#x3C;label for=\"name\">\n      Name\n    &#x3C;/label>\n    &#x3C;input id=\"name\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"name\">\n  &#x3C;/div>\n\n  &#x3C;div>\n    &#x3C;label for=\"address\">\n      Address\n    &#x3C;/label>\n    &#x3C;input id=\"address\" type=\"text\" <a href=\"api/forms/FormControlName\" class=\"code-anchor\">formControlName</a>=\"address\">\n  &#x3C;/div>\n\n  &#x3C;button class=\"button\" type=\"submit\">Purchase&#x3C;/button>\n\n&#x3C;/form>\n\n\n</code-example>\n</li>\n</ol>\n<p>이제 사용자가 장바구니에 상품을 넣고 나면 장바구니에 어떤 상품이 담겼는지 확인할 수 있고, 주문자의 이름과 주소를 입력하고 폼을 제출할 수 있습니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-with-items-and-form.png\" alt=\"Cart page with checkout form\" width=\"261\" height=\"395\">\n</div>\n<p>주문 폼이 제대로 제출되었는지 확인하려면 브라우저 콘솔을 열고 사용자가 입력한 이름과 주소가 제대로 출력되는지 확인하면 됩니다.</p>\n<!--\n## Next steps\n-->\n<h2 id=\"다음-단계\">다음 단계<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-forms#다음-단계\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nCongratulations! You have a complete online store application with a product catalog, a shopping cart, and a checkout function.\n\n[Continue to the \"Deployment\" section](start/start-deployment \"Getting Started: Deployment\") to move to local development, or deploy your app to Firebase or your own server.\n-->\n<p>축하합니다! 이제 온라인 쇼핑몰 애플리케이션에는 상품 목록을 볼 수 있는 기능과 장바구니 기능, 주문 기능이 추가되었습니다.</p>\n<ul>\n<li>앱을 Firebase에 배포하거나 로컬 개발환경을 설정하는 방법에 대해 알아보려면 <a href=\"start/start-deployment\" title=\"Getting Started: Deployment\">배포</a> 문서를 참고하세요.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - start/start-data\n - start/start-deployment\n-->\n<!-- links from this doc:\n - api/common/CurrencyPipe\n - api/common/NgForOf\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/IterableChangeRecord#item\n - api/core/OnInit\n - api/forms/FormBuilder\n - api/forms/FormBuilder#group\n - api/forms/FormControlName\n - api/forms/ReactiveFormsModule\n - api/router/RouterLink\n - start/start-data\n - start/start-deployment\n - start/start-forms#angular-시작하기-폼form\n - start/start-forms#angular의-폼\n - start/start-forms#다음-단계\n - start/start-forms#주문-폼-모델-정의하기\n - start/start-forms#주문-화면-만들기\n - https://github.com/angular/angular/edit/master/aio/content/start/start-forms.md?message=docs%3A%20describe%20your%20change...\n-->"
}