{
  "id": "start/start-data",
  "title": "Angular 시작하기: 데이터 다루기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/start/start-data.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Getting Started with Angular: Managing Data\n-->\n<h1 id=\"angular-시작하기-데이터-다루기\">Angular 시작하기: 데이터 다루기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#angular-시작하기-데이터-다루기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAt the end of [Routing](start/start-routing \"Getting Started: Routing\"), the online store application has a product catalog with two views: a product list and product details.\nUsers can click on a product name from the list to see details in a new view, with a distinct URL, or route.\n\nThis page guides you through creating the shopping cart in three phases:\n\n* Update the product details page to include a \"Buy\" button, which adds the current product to a list of products that a cart service manages.\n* Add a cart component, which displays the items in the cart.\n* Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's `HttpClient` to retrieve shipping data from a `.json` file.\n-->\n<p><a href=\"start/start-routing\" title=\"Getting Started: Routing\">라우팅</a> 과정까지 끝내고 나면 온라인 쇼핑몰 애플리케이션에는 상품 목록 화면과 상품 상세정보 화면이 존재합니다.\n사용자가 상품 목록 화면에서 상품 이름을 클릭하면 이 상품과 관련된 라우팅 규칙이 동작하면서 상품의 상세정보가 화면에 표시됩니다.</p>\n<p>이 문서에서는 3단계에 걸쳐 장바구니 기능을 만들어 봅시다:</p>\n<ul>\n<li>상품 상세정보 화면에 \"Buy\" 버튼을 추가합니다. 이 버튼을 클릭하면 현재 보고 있는 상품을 장바구니 서비스가 관리하는 목록에 추가합니다.</li>\n<li>장바구니 컴포넌트를 추가합니다. 이 컴포넌트는 장바구니 안에 있는 상품 목록을 보여줍니다.</li>\n<li>주문 컴포넌트를 추가합니다. 이 컴포넌트는 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 사용해서 <code>.json</code> 파일에서 상품의 배송 비용을 가져옵니다.</li>\n</ul>\n<a id=\"services\"></a>\n<!--\n## Services\n-->\n<h2 id=\"서비스service\">서비스(Service)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#서비스service\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nServices are an integral part of Angular applications. In Angular, a service is an instance of a class that you can make available to any part of your application using Angular's [dependency injection system](guide/glossary#dependency-injection-di \"dependency injection definition\").\n\nServices are the place where you share data between parts of your application. For the online store, the cart service is where you store your cart data and methods.\n-->\n<p>서비스는 Angular 애플리케이션을 통합하는 구성요소입니다. Angular에서 서비스는 어떤 클래스의 인스턴스이며, 이 인스턴스는 Angular <a href=\"guide/glossary#dependency-injection-di\" title=\"dependency injection definition\">의존성 주입 시스템</a>을 통해 애플리케이션 어느 곳에서도 사용할 수 있습니다.</p>\n<p>서비스는 애플리케이션 구성요소간 데이터를 공유하는 용도로 사용합니다. 온라인 쇼핑몰 앱에서는 장바구니를 구현하기 위해 필요한 데이터와 메소드를 장바구니 서비스에 구현할 것입니다.</p>\n<a id=\"create-cart-service\"></a>\n<!--\n## Create the shopping cart service\n-->\n<h2 id=\"장바구니-서비스-만들기\">장바구니 서비스 만들기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#장바구니-서비스-만들기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUp to this point, users can view product information, and\nsimulate sharing and being notified about product changes.\nThey cannot, however, buy products.\n\nIn this section, you add a \"Buy\" button to the product\ndetails page and set up a cart service to store information\nabout products in the cart.\n-->\n<p>지금까지 작성한 앱에서 사용자가 상품의 정보를 확인하고 공유하거나 상품 가격이 변동되었을 때 알림을 받을 수 있는 기능이 있습니다.\n하지만 아직 상품을 구입할 수는 없습니다.</p>\n<p>이 섹션에서는 상품 상세정보 화면에 \"Buy\" 버튼을 추가하고, 장바구니에 있는 상품 목록을 관리하는 장바구니 서비스를 만들어 봅시다.</p>\n<div class=\"alert is-helpful\">\n<!--\nLater, the [Forms](start/start-forms \"Getting Started: Forms\") part of\nthis tutorial guides you through accessing this cart service\nfrom the page where the user checks out.\n-->\n<p>이후에 <a href=\"start/start-forms\" title=\"Getting Started: Forms\">폼</a> 문서에서는 사용자가 주문을 입력하는 화면에서 장바구니 서비스를 연결합니다.</p>\n</div>\n<a id=\"generate-cart-service\"></a>\n<!--\n### Define a cart service\n-->\n<h3 id=\"장바구니-서비스-정의하기\">장바구니 서비스 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#장바구니-서비스-정의하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n1. Generate a cart service.\n\n    1. Right click on the `app` folder, choose `Angular Generator`, and choose `Service`. Name the new service `cart`.\n\n        <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.1.ts\">\nimport { Injectable } from &#39;@angular/core&#39;;\n\n@Injectable({\n  providedIn: &#39;root&#39;\n})\nexport class CartService {\n\n  constructor() {}\n\n}\n\n\n</code-example>\n\n    1. StackBlitz might generate the  `@Injectable()` decorator without the `{ providedIn: 'root' }` statement as above. Instead, the generator provides the cart service in `app.module.ts` by default. For the purposes\n    of this tutorial, either way works. The `@Injectable()` `{ providedIn: 'root' }` syntax allows [tree shaking](/guide/dependency-injection-providers#tree-shakable-providers), which is beyond the scope of this guide.\n\n1. In the `CartService` class, define an `items` property to store the array of the current products in the cart.\n\n    <code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"props\">\nexport class CartService {\n  items = [];\n}\n\n\n</code-example>\n\n1. Define methods to add items to the cart, return cart items, and clear the cart items:\n\n    <code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"methods\">\nexport class CartService {\n  items = [];\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n}\n\n\n</code-example>\n\n    * The `addToCart()` method appends a product to an array of `items`.\n\n    * The `getItems()` method collects the items users add to the cart and returns each item with its associated quantity.\n\n    * The `clearCart()` method returns an empty array of items.\n-->\n<ol>\n<li>\n<p>장바구니 서비스를 생성합니다.</p>\n<ol>\n<li>\n<p><code>app</code> 폴더에 마우스 오른쪽 버튼을 클릭하고 <code>Angular Generator</code> - <code>Service</code>를 선택합니다. 이 서비스의 이름은 <code>cart</code>로 합시다.</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root'\n})\nexport class CartService {\n\n  constructor() {}\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p>StackBlitz가 서비스를 생성하면 서비스 클래스 선언 위에 있는 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> 데코레이터에 <code>{ <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root' }</code> 구문을 지정하지 않을 것입니다. StackBlitz는 이 방법 대신 <code>app.module.ts</code> 파일에 이 서비스를 등록합니다. 지금 이 문서의 목적만 보면 두 방식 모두 동작하기 때문에 어떤 방식이든 관계없습니다. 대신, <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code>에 <code>{ <a href=\"api/core/Injectable#providedIn\" class=\"code-anchor\">providedIn</a>: 'root'}</code> 를 지정하면 <a href=\"/guide/dependency-injection-providers#tree-shakable-providers\">트리 셰이킹(tree shaking)</a> 측면에서 유리할 수 있습니다.</p>\n</li>\n</ol>\n</li>\n<li>\n<p><code>CartService</code> 클래스에 <code>items</code> 프로퍼티를 선언합니다. 이 프로퍼티에는 장바구니에 보관되는 상품 목록이 저장될 것입니다.</p>\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"props\">\nexport class CartService {\n  items = [];\n}\n\n\n</code-example>\n</li>\n<li>\n<p>장바구니에 상품을 추가하는 메소드, 장바구니에 있는 상품 목록을 반환하는 메소드, 장바구니를 비우는 메소드를 추가합니다:</p>\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"methods\">\nexport class CartService {\n  items = [];\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n}\n\n\n</code-example>\n<ul>\n<li>\n<p><code>addToCart()</code> 메소드는 <code>items</code> 배열에 상품을 추가합니다.</p>\n</li>\n<li>\n<p><code>getItems()</code> 메소드는 사용자가 장바구니에 추가한 상품 목록을 반환합니다.</p>\n</li>\n<li>\n<p><code>clearCart()</code> 메소드는 장바구니 목록을 비웁니다.</p>\n</li>\n</ul>\n</li>\n</ol>\n<a id=\"product-details-use-cart-service\"></a>\n<!--\n### Use the cart service\n-->\n<h3 id=\"장바구니-서비스-사용하기\">장바구니 서비스 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#장바구니-서비스-사용하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThis section walks you through using the cart service to add a product to the cart with a \"Buy\" button.\n\n1. Open `product-details.component.ts`.\n\n1. Configure the component to use the cart service.\n\n    1. Import the cart service.\n\n        <code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\nimport { ActivatedRoute } from &#39;@angular/router&#39;;\n\nimport { products } from &#39;../products&#39;;\nimport { CartService } from &#39;../cart.service&#39;;\n\n</code-example>\n\n    1. Inject the cart service by adding it to the `constructor()`.\n\n        <code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements OnInit {\n  constructor(\n    private route: ActivatedRoute,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n\n        <!- -\n        To do: Consider defining \"inject\" and describing the concept of \"dependency injection\"\n        - ->\n\n1. Define the `addToCart()` method, which adds the current product to the cart.\n\n    The `addToCart()` method does the following three things:\n    * Receives the current `product`.\n    * Uses the cart service's `addToCart()` method to add the product the cart.\n    * Displays a message that you've added a product to the cart.\n\n    <code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements OnInit {\n  addToCart(product) {\n    this.cartService.addToCart(product);\n    window.alert(&#39;Your product has been added to the cart!&#39;);\n  }\n}\n\n\n</code-example>\n\n1. Update the product details template with a \"Buy\" button that adds the current product to the cart.\n\n    1. Open `product-details.component.html`.\n\n    1. Add a button with the label \"Buy\", and bind the `click()` event to the `addToCart()` method:\n\n        <code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&lt;h2&gt;Product Details&lt;/h2&gt;\n\n&lt;div *ngIf=&quot;product&quot;&gt;\n  &lt;h3&gt;{{ product.name }}&lt;/h3&gt;\n  &lt;h4&gt;{{ product.price | currency }}&lt;/h4&gt;\n  &lt;p&gt;{{ product.description }}&lt;/p&gt;\n\n  &lt;button (click)=&quot;addToCart(product)&quot;&gt;Buy&lt;/button&gt;\n&lt;/div&gt;\n\n\n</code-example>\n\n1. To see the new \"Buy\" button, refresh the application and click on a product's name to display its details.\n\n    <div class=\"lightbox\">\n      <img src='generated/images/guide/start/product-details-buy.png' alt=\"Display details for selected product with a Buy button\">\n    </div>\n\n 1. Click the \"Buy\" button to add the product to the stored list of items in the cart and display a confirmation message.\n\n    <div class=\"lightbox\">\n      <img src='generated/images/guide/start/buy-alert.png' alt=\"Display details for selected product with a Buy button\">\n    </div>\n-->\n<p>이 섹션에서는 사용자가 \"Buy\" 버튼을 눌렀을 때 장바구니 서비스에 상품을 추가하는 기능을 만들어 봅시다.</p>\n<ol>\n<li>\n<p><code>product-details.component.ts</code> 파일을 엽니다.</p>\n</li>\n<li>\n<p>컴포넌트가 장바구니 서비스를 사용할 수 있도록 수정합니다.</p>\n<ol>\n<li>\n<p>장바구니 서비스를 로드합니다.</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p><code>constructor()</code>에 장바구니 서비스를 추가해서 의존성으로 주입합니다.</p>\n<code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p><code>addToCart()</code> 메소드를 추가합니다. 이 메소드는 현재 화면에 표시하는 상품을 장바구니에 추가합니다.</p>\n<p><code>addToCart()</code> 메소드는 3단계로 동작합니다:</p>\n<ul>\n<li><code>product</code> 인자를 받습니다.</li>\n<li>상품을 장바구니에 추가하기 위해 장바구니 서비스의 <code>addToCart()</code> 메소드를 호출합니다.</li>\n<li>상품이 장바구니에 담겼다는 메시지를 표시합니다.</li>\n</ul>\n<code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  addToCart(product) {\n    this.cartService.addToCart(product);\n    window.alert('Your product has been added to the cart!');\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>\"Buy\" 버튼을 누르면 장바구니에 상품을 추가할 수 있도록 상품 상세정보 화면의 템플릿을 수정합니다.</p>\n<ol>\n<li>\n<p><code>product-details.component.html</code> 파일을 엽니다.</p>\n</li>\n<li>\n<p>\"Buy\" 버튼을 추가하고 이 버튼의 <code>click</code> 이벤트를 <code>addToCart()</code> 메소드와 연결합니다:</p>\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&#x3C;h2>Product Details&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\">\n  &#x3C;h3>{{ product.name }}&#x3C;/h3>\n  &#x3C;h4>{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/h4>\n  &#x3C;p>{{ product.description }}&#x3C;/p>\n\n  &#x3C;button (click)=\"addToCart(product)\">Buy&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>이렇게 만든 \"Buy\" 버튼을 확인하기 위해 화면을 다시 불러온 후에 상품 이름을 클릭해서 상품 상세정보 화면으로 갑니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-details-buy.png\" alt=\"Display details for selected product with a Buy button\" width=\"259\" height=\"233\">\n</div>\n</li>\n<li>\n<p>이제 \"Buy\" 버튼을 누르면 화면에 표시된 상품이 장바구니에 추가되고 다음과 같은 메시지가 표시됩니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/buy-alert.png\" alt=\"Display details for selected product with a Buy button\" width=\"329\" height=\"106\">\n</div>\n</li>\n</ol>\n<!--\n## Create the cart page\n-->\n<h2 id=\"장바구니-화면-만들기\">장바구니 화면 만들기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#장바구니-화면-만들기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAt this point, users can put items in the cart by clicking \"Buy\", but they can't yet see their cart.\n\nCreate the cart page in two steps:\n\n1. Create a cart component and configure routing to the new component. At this point, the cart page will only have default text.\n1. Display the cart items.\n-->\n<p>이제 사용자가 \"Buy\" 버튼을 누르면 화면에서 본 상품을 장바구니에 넣을 수 있지만, 아직 장바구니에 어떤 상품이 있는지는 알 수 없습니다.</p>\n<p>장바구니 화면을 만들어 봅시다:</p>\n<ol>\n<li>장바구니 컴포넌트를 생성하고 이 컴포넌트로 이동하는 라우팅 규칙을 추가합니다. 처음에는 기본 문구만 표시될 것입니다.</li>\n<li>장바구니에 있는 상품 목록을 화면에 표시합니다.</li>\n</ol>\n<!--\n### Set up the component\n-->\n<h3 id=\"컴포넌트-설정하기\">컴포넌트 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#컴포넌트-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n To create the cart page, begin by following the same steps you did to create the product details component and configure routing for the new component.\n\n1. Generate a cart component, named `cart`.\n\n    Reminder: In the file list, right-click the `app` folder, choose `Angular Generator` and `Component`.\n\n    <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-cart&#39;,\n  templateUrl: &#39;./cart.component.html&#39;,\n  styleUrls: [&#39;./cart.component.css&#39;]\n})\nexport class CartComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n\n1. Add routing (a URL pattern) for the cart component.\n\n    Open `app.module.ts` and add a route for the component `CartComponent`, with a `path` of `cart`:\n\n    <code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot([\n      { path: &#39;&#39;, component: ProductListComponent },\n      { path: &#39;products/:productId&#39;, component: ProductDetailsComponent },\n      { path: &#39;cart&#39;, component: CartComponent },\n    ])\n  ],\n\n</code-example>\n\n1. To see the new cart component, click the \"Checkout\" button. You can see the \"cart works!\" default text, and the URL has the pattern `https://getting-started.stackblitz.io/cart`,  where `getting-started.stackblitz.io` may be different for your StackBlitz project.\n\n    <div class=\"alert is-helpful\">\n\n    The starter code for the \"Checkout\" button already includes a `routerLink` for `/cart` the top-bar component.\n\n    </div>\n\n    <div class=\"lightbox\">\n      <img src='generated/images/guide/start/cart-works.png' alt=\"Display cart page before customizing\">\n    </div>\n-->\n<p>이전과 같은 방식으로 장바구니 화면을 생성합니다.</p>\n<ol>\n<li>\n<p>장바구니 컴포넌트를 생성합니다. 이 컴포넌트의 이름은 <code>cart</code>라고 합시다.</p>\n<p>기억해 보세요: 파일 목록에서 <code>app</code> 폴더에 마우스 오른쪽 버튼을 클릭하고 <code>Angular Generator</code> - <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>를 선택하면 됩니다.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './cart.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./cart.component.css']\n})\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p>장바구니 컴포넌트로 연결되는 라우팅 규칙을 추가합니다.</p>\n<p><code>app.module.ts</code> 파일을 열고 <code>CartComponent</code>로 연결되는 라우팅 규칙을 추가합니다. 이 라우팅 규칙의 <code>path</code>는 <code>cart</code>로 지정합니다:</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n</li>\n<li>\n<p>장바구니 컴포넌트를 화면에 표시하려면 \"Checkout\" 버튼을 클릭하면 됩니다. 그러면 기본 문구인 \"cart works!\"가 화면에 표시되며 URL은 <code>https://getting-started.stackblitz.io/cart</code>와 같은 방식으로 표시될 것입니다. 이 주소는 StackBlitz 프로젝트에 따라 달라질 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p>컴포넌트 최상단에 있는 \"Checkout\" 버튼에는 이미 <code>/cart</code>로 이동하는 <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>가 지정되어 있습니다.</p>\n</div>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-works.png\" alt=\"Display cart page before customizing\" width=\"259\" height=\"193\">\n</div>\n</li>\n</ol>\n<!--\n### Display the cart items\n-->\n<h3 id=\"장바구니-목록-표시하기\">장바구니 목록 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#장바구니-목록-표시하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can use services to share data across components:\n\n* The product details component already uses the cart service to add products to the cart.\n* This section shows you how to use the cart service to display the products in the cart.\n\n\n1. Open `cart.component.ts`.\n\n1. Configure the component to use the cart service.\n\n    1. Import the `CartService` from the `cart.service.ts` file.\n\n        <code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { Component } from &#39;@angular/core&#39;;\nimport { CartService } from &#39;../cart.service&#39;;\n\n</code-example>\n\n    1. Inject the `CartService` so that the cart component can use it.\n\n        <code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n\n1. Define the `items` property to store the products in the cart.\n\n    <code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"items\">\nexport class CartComponent {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n\n1. Set the items using the cart service's `getItems()` method. Recall that you defined this method [when you generated `cart.service.ts`](#generate-cart-service).\n\n    The resulting `CartComponent` class is as follows:\n\n    <code-example path=\"getting-started/src/app/cart/cart.component.3.ts\" header=\"src/app/cart/cart.component.ts\" region=\"props-services\">\nexport class CartComponent implements OnInit {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n\n1. Update the template with a header, and use a `<div>` with an `*ngFor` to display each of the cart items with its name and price.\n\n    The resulting `CartComponent` template is as follows:\n\n    <code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;div class=&quot;cart-item&quot; *ngFor=&quot;let item of items&quot;&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | currency }}&lt;/span&gt;\n&lt;/div&gt;\n\n</code-example>\n\n1. Test your cart component.\n\n    1. Click on \"My Store\" to go to the product list page.\n    1. Click on a product name to display its details.\n    1. Click \"Buy\" to add the product to the cart.\n    1. Click \"Checkout\" to see the cart.\n    1. To add another product, click \"My Store\" to return to the product list.\n\n  Repeat to add more items to the cart.\n\n    <div class=\"lightbox\">\n      <img src='generated/images/guide/start/cart-page-full.png' alt=\"Cart page with products added\">\n    </div>\n-->\n<p>서비스는 다음과 같이 컴포넌트끼리 데이터를 공유하는 용도로 활용할 수 있습니다:</p>\n<ul>\n<li>상품 상세정보 컴포넌트는 장바구니에 상품을 추가하기 위해 서비스를 사용합니다.</li>\n<li>이 섹션에서는 장바구니 서비스에 있는 상품 목록을 가져오도록 구현합니다.</li>\n</ul>\n<ol>\n<li>\n<p><code>cart.component.ts</code> 파일을 엽니다.</p>\n</li>\n<li>\n<p>컴포넌트에서 장바구니 서비스를 사용할 수 있도록 수정합니다.</p>\n<ol>\n<li>\n<p><code>cart.service.ts</code> 파일에서 <code>CartService</code>를 로드합니다.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p>장바구니 컴포넌트 생성자로 <code>CartService</code>를 주입합니다.</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>장바구니 서비스에서 가져온 목록을 담아둘 수 있도록 <code>items</code> 프로퍼티를 선언합니다.</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"items\">\nexport class CartComponent {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>이 프로퍼티에 장바구니 서비스의 <code>getItems()</code> 메소드 실행 결과를 할당합니다. 이 메소드는 <a href=\"start/start-data#generate-cart-service\"><code>cart.service.ts</code> 파일을 생성할 때</a> 정의했습니다.</p>\n<p>그러면 <code>CartComponent</code> 클래스 코드는 다음과 같습니다:</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.3.ts\" header=\"src/app/cart/cart.component.ts\" region=\"props-services\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>템플릿을 수정합니다. <code>&#x3C;div></code> 엘리먼트에 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 적용해서 장바구니 항목마다 이름과 가격을 반복합니다.</p>\n<p>그러면 <code>CartComponent</code> 템플릿이 이렇게 됩니다:</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">\n  &#x3C;span>{{ item.name }}&#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n</code-example>\n</li>\n<li>\n<p>장바구니 컴포넌트를 테스트해봅시다.</p>\n<ol>\n<li>\"My Store\"를 클릭하면 상품 목록 화면으로 이동합니다.</li>\n<li>상품 이름을 클릭하면 그 상품의 상세정보 화면으로 이동합니다.</li>\n<li>\"Buy\" 버튼을 클릭하면 장바구니에 상품을 추가합니다.</li>\n<li>\"Checkout\" 버튼을 클릭하면 장바구니에 담긴 목록을 확인할 수 있습니다.</li>\n<li>다른 상품을 장바구니에 추가하려면 \"My Store\"를 클릭하고 이 과정을 반복하면 됩니다.</li>\n</ol>\n<p>장바구니에 여러 상품을 추가해 보세요.</p>\n  <div class=\"lightbox\">\n    <img src=\"generated/images/guide/start/cart-page-full.png\" alt=\"Cart page with products added\" width=\"259\" height=\"238\">\n  </div>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<!--\nStackBlitz tip: Any time the preview refreshes, the cart is cleared. If you make changes to the app, the page refreshes, so you'll need to buy products again to populate the cart.\n-->\n<p>StackBlitz 팁: 미리보기 화면이 새로고침되면 장바구니가 초기화됩니다. 이 환경에서는 앱 코드가 변경될 때마다 \"Buy\" 버튼을 클릭해서 장바구니에 상품을 추가해야 합니다.</p>\n</div>\n<div class=\"alert is-helpful\">\n<!--\nFor more information about services, see [Introduction to Services and Dependency Injection](guide/architecture-services \"Architecture > Intro to Services and DI\").\n-->\n<p>서비스에 대해 더 알아보려면 <a href=\"guide/architecture-services\" title=\"Architecture > Intro to Services and DI\">서비스와 의존성 주입</a> 문서를 참고하세요.</p>\n</div>\n<!--\n## Retrieve shipping prices\n-->\n<h2 id=\"배송가격-가져오기\">배송가격 가져오기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#배송가격-가져오기\"><i class=\"material-icons\">link</i></a></h2>\n<!-- Accessing data with the HTTP client -->\n<!--\nServers often return data in the form of a stream.\nStreams are useful because they make it easy to transform the returned data and  make modifications to the way you request that data.\nThe Angular HTTP client, `HttpClient`, is a built-in way to fetch data from external APIs and provide them to your app as a stream.\n\nThis section shows you how to use the HTTP client to retrieve shipping prices from an external file.\n-->\n<p>서버는 보통 데이터 스트림 형식으로 데이터를 제공하는데, 이런 형식의 데이터는 개발자가 원하는 대로 변형할 수 있기 때문에 사용하기 편합니다.\nAngular가 제공하는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 사용하면 앱 외부에서 데이터를 쉽게 가져올 수 있으며, 앱 내부에서도 데이터를 스트림 형태로 처리할 수 있습니다.</p>\n<p>이 섹션에서는 HTTP 클라이언트를 사용해서 외부 파일에서 배송가격을 가져오는 방법에 대해 알아봅니다.</p>\n<!--\n### Predefined shipping data\n-->\n<h3 id=\"배송가격-데이터\">배송가격 데이터<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#배송가격-데이터\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe application that StackBlitz generates for this guide comes with predefined shipping data in `assets/shipping.json`.\nUse this data to add shipping prices for items in the cart.\n-->\n<p>StackBlitz에서 생성한 애플리케이션을 보면 <code>assets/shipping.json</code> 파일에 배송가격 데이터가 미리 정의되어 있습니다.\n장바구니에 있는 상품을 주문할 때 이 데이터를 사용해 봅시다.</p>\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<!--\n### Use `HttpClient` in the `AppModule`\n-->\n<h3 id=\"appmodule에서-httpclient-사용하기\"><code>AppModule</code>에서 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#appmodule에서-httpclient-사용하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nBefore you can use Angular's HTTP client, you must configure your app to use `HttpClientModule`.\n\nAngular's `HttpClientModule` registers the providers your app needs to use a single instance of the `HttpClient` service throughout your app.\n\n1. Open `app.module.ts`.\n\n  This file contains imports and functionality that is available to the entire app.\n\n1. Import `HttpClientModule` from the `@angular/common/http` package at the top of the file with the other imports. As there are a number of other imports, this code snippet omits them for brevity. Be sure to leave the existing imports in place.\n\n    <code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { HttpClientModule } from &#39;@angular/common/http&#39;;\n\n</code-example>\n\n1. Add `HttpClientModule` to the `AppModule` `@NgModule()` `imports` array to register Angular's `HttpClient` providers globally.\n\n    <code-example path=\"getting-started/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"http-client-module\">\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot([\n      { path: &#39;&#39;, component: ProductListComponent },\n      { path: &#39;products/:productId&#39;, component: ProductDetailsComponent },\n      { path: &#39;cart&#39;, component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n-->\n<p>Angular가 제공하는 HTTP 클라이언트를 사용하려면 앱에 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 설정해야 합니다.</p>\n<p>앱에 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 설정하면 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스 프로바이더(provider)도 자동으로 등록되기 때문에, 원하는 곳에서 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 인스턴스를 의존성으로 주입받아 자유롭게 사용할 수 있습니다.</p>\n<ol>\n<li>\n<p><code>app.module.ts</code> 파일을 엽니다</p>\n<p>이 파일에는 앱 전체에 영향을 미치는 항목들이 등록되어 있습니다.</p>\n</li>\n<li>\n<p>파일 제일 위에서 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 패키지에 있는 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 로드합니다. 아래 예제 코드에서는 이 부분만 간단하게 표시했으며, 원래 있던 로드 구문들은 그대로 둡니다.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p><code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <code>imports</code> 배열에 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 추가합니다. 그러면 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 프로바이더도 전역으로 등록됩니다.</p>\n<code-example path=\"getting-started/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"http-client-module\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n</ol>\n<!--\n### Use `HttpClient` in the cart service\n-->\n<h3 id=\"장바구니-서비스에서-httpclient-사용하기\">장바구니 서비스에서 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#장바구니-서비스에서-httpclient-사용하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nNow that the `AppModule` imports the `HttpClientModule`, the next step is to inject the `HttpClient` service into your service so your app can fetch data and interact with external APIs and resources.\n\n\n1. Open `cart.service.ts`.\n\n1. Import `HttpClient` from the `@angular/common/http` package.\n\n    <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { Injectable } from &#39;@angular/core&#39;;\n\nimport { HttpClient } from &#39;@angular/common/http&#39;;\n\n</code-example>\n\n1. Inject `HttpClient` into the `CartService` constructor:\n\n    <code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"inject-http\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private http: HttpClient\n  ) {}\n}\n\n\n</code-example>\n-->\n<p><code>AppModule</code>에 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 추가하고 나면 다음은 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스를 서비스에 의존성으로 주입해야 외부에서 데이터를 가져오거나 서버로 요청을 보낼 수 있습니다.</p>\n<ol>\n<li>\n<p><code>cart.service.ts</code> 파일을 엽니다.</p>\n</li>\n<li>\n<p><code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 패키지에서 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 심볼을 로드합니다.</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p><code>CartService</code> 생성자에 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 의존성으로 주입합니다:</p>\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"inject-http\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n}\n\n\n</code-example>\n</li>\n</ol>\n<!--\n### Define the `get()` method\n-->\n<h3 id=\"get-메소드-정의하기\"><code>get()</code> 메소드 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#get-메소드-정의하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nMultiple components can leverage the same service.\nLater in this tutorial, the shipping component uses the cart service to retrieve shipping data via HTTP from the `shipping.json` file.\nFirst, define a `get()` method.\n\n1. Continue working in `cart.service.ts`.\n\n1. Below the `clearCart()` method, define a new `getShippingPrices()` method that uses the `HttpClient` `get()` method to retrieve the shipping data.\n\n    <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private http: HttpClient\n  ) {}\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n\n  getShippingPrices() {\n    return this.http.get(&#39;/assets/shipping.json&#39;);\n  }\n}\n\n\n</code-example>\n-->\n<p>서비스는 여러 컴포넌트에서 사용할 수 있기 때문에 중요합니다.\n이후에 구현할 배송 컴포넌트도 장바구니 서비스를 사용하는데, <code>shipping.json</code> 파일을 HTTP 클라이언트로 가져올 때 이 서비스를 사용할 것입니다.\n먼저, <code>get()</code> 메소드를 정의합니다.</p>\n<ol>\n<li>\n<p><code>cart.service.ts</code> 파일을 계속 수정합니다.</p>\n</li>\n<li>\n<p><code>clearCart()</code> 메소드 아래에 <code>getShippingPrices()</code> 메소드를 추가하고 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 제공하는 <code>get()</code> 메소드를 사용해서 배송가격 데이터를 가져옵니다.</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<!--\nFor more information about Angular's `HttpClient`, see [HttpClient](guide/http \"HttpClient guide\").\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에 대해 자세하게 알아보려면 <a href=\"guide/http\" title=\"HttpClient guide\">HttpClient</a> 문서를 참고하세요.</p>\n</div>\n<!--\n## Define the shipping page\n-->\n<h2 id=\"배송-화면-구현하기\">배송 화면 구현하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#배송-화면-구현하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nNow that your app can retrieve shipping data, create a shipping component and  template.\n\n1. Generate a new component named `shipping`.\n\n    Reminder: In the file list, right-click the `app` folder, choose `Angular Generator` and `Component`.\n\n    <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-shipping&#39;,\n  templateUrl: &#39;./shipping.component.html&#39;,\n  styleUrls: [&#39;./shipping.component.css&#39;]\n})\nexport class ShippingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n\n1. In `app.module.ts`, add a route for shipping. Specify a `path` of `shipping` and a component of `ShippingComponent`.\n\n    <code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    RouterModule.forRoot([\n      { path: &#39;&#39;, component: ProductListComponent },\n      { path: &#39;products/:productId&#39;, component: ProductDetailsComponent },\n      { path: &#39;cart&#39;, component: CartComponent },\n      { path: &#39;shipping&#39;, component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n\n    There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies. The URL has the pattern: `https://getting-started.stackblitz.io/shipping` where the `getting-started.stackblitz.io` part may be different for your StackBlitz project.\n\n1. Modify the shipping component so that it uses the cart service to retrieve shipping data via HTTP from the `shipping.json` file.\n\n    1. Import the cart service.\n\n        <code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { Component, OnInit } from &#39;@angular/core&#39;;\n\nimport { CartService } from &#39;../cart.service&#39;;\n\n</code-example>\n\n    1. Define a `shippingCosts` property.\n\n        <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent implements OnInit {\n  shippingCosts;\n}\n\n\n</code-example>\n\n    1. Inject the cart service in the `ShippingComponent` constructor:\n\n        <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(\n  private cartService: CartService\n) {\n}\n\n</code-example>\n\n    1. Set the `shippingCosts` property using the `getShippingPrices()` method from the cart service.\n\n        <code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"ctor\">\nexport class ShippingComponent implements OnInit {\n  shippingCosts;\n\n  constructor(\n    private cartService: CartService\n  ) {\n  }\n\n  ngOnInit() {\n    this.shippingCosts = this.cartService.getShippingPrices();\n  }\n\n}\n\n\n</code-example>\n\n1. Update the shipping component's template to display the shipping types and prices using the `async` pipe:\n\n    <code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&lt;h3&gt;Shipping Prices&lt;/h3&gt;\n\n&lt;div class=&quot;shipping-item&quot; *ngFor=&quot;let shipping of shippingCosts | async&quot;&gt;\n  &lt;span&gt;{{ shipping.type }}&lt;/span&gt;\n  &lt;span&gt;{{ shipping.price | currency }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n\n    The `async` pipe returns the latest value from a stream of data and continues to do so for the life of a given component. When Angular destroys that component, the `async` pipe automatically stops. For detailed information about the `async` pipe, see the [AsyncPipe API documentation](/api/common/AsyncPipe).\n\n1. Add a link from the cart page to the shipping page:\n\n    <code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&lt;h3&gt;Cart&lt;/h3&gt;\n\n&lt;p&gt;\n  &lt;a routerLink=&quot;/shipping&quot;&gt;Shipping Prices&lt;/a&gt;\n&lt;/p&gt;\n\n&lt;div class=&quot;cart-item&quot; *ngFor=&quot;let item of items&quot;&gt;\n  &lt;span&gt;{{ item.name }}&lt;/span&gt;\n  &lt;span&gt;{{ item.price | currency }}&lt;/span&gt;\n&lt;/div&gt;\n\n\n</code-example>\n\n1. Test your shipping prices feature:\n\n    Click the \"Checkout\" button to see the updated cart. Remember that changing the app causes the preview to refresh, which empties the cart.\n\n    <div class=\"lightbox\">\n      <img src='generated/images/guide/start/cart-empty-with-shipping-prices.png' alt=\"Cart with link to shipping prices\">\n    </div>\n\n    Click on the link to navigate to the shipping prices.\n\n    <div class=\"lightbox\">\n      <img src='generated/images/guide/start/shipping-prices.png' alt=\"Display shipping prices\">\n    </div>\n-->\n<p>이제 앱에서 배송 데이터를 가져올 수 있습니다. 배송 컴포넌트와 템플릿을 만들어 봅시다.</p>\n<ol>\n<li>\n<p><code>shipping</code>이라는 이름으로 새 컴포넌트를 생성합니다.</p>\n<p>기억해 보세요: 파일 목록 화면에서 <code>app</code> 폴더에 마우스 오른쪽 버튼을 클릭하고 <code>Angular Generator</code> - <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>를 선택하면 됩니다.</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './shipping.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./shipping.component.css']\n})\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p><code>app.module.ts</code> 파일에 배송 화면으로 연결되는 라우팅 규칙을 추가합니다. <code>path</code>는 <code>shipping</code>, 컴포넌트는 <code>ShippingComponent</code>를 지정합니다.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>아직 배송 컴포넌트로 이동하는 링크는 없지만, 미리보기 영역에서 URL을 직접 입력하면 템플릿을 확인할 수 있습니다. 주소는 <code>https://getting-started.stackblitz.io/shipping</code>와 같은 형식이 될 것이며, <code>getting-started.stackblitz.io</code> 부분은 프로젝트마다 다를 수 있습니다.</p>\n</li>\n<li>\n<p>배송 컴포넌트를 수정합니다. 장바구니 서비스를 통해 <code>shipping.json</code> 파일에서 배송가격 데이터를 가져오도록 구현합니다.</p>\n<ol>\n<li>\n<p>장바구니 서비스를 로드합니다.</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p><code>shippingCosts</code> 프로퍼티를 선언합니다.</p>\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  shippingCosts;\n}\n\n\n</code-example>\n</li>\n<li>\n<p><code>ShippingComponent</code>의 생성자로 장바구니 서비스를 의존성으로 주입합니다.</p>\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(\n  private cartService: CartService\n) {\n}\n\n</code-example>\n</li>\n<li>\n<p>장바구니 서비스의 <code>getShippingPrices()</code> 메소드가 반환한 결과를 <code>shippingCosts</code> 프로퍼티에 할당합니다.</p>\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"ctor\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  shippingCosts;\n\n  constructor(\n    private cartService: CartService\n  ) {\n  }\n\n  ngOnInit() {\n    this.shippingCosts = this.cartService.getShippingPrices();\n  }\n\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>배송 컴포넌트의 템플릿을 수정해서 배송 타입과 가격을 표시합니다. 이 때 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 파이프를 사용합니다:</p>\n<code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&#x3C;h3>Shipping Prices&#x3C;/h3>\n\n&#x3C;div class=\"shipping-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | async\">\n  &#x3C;span>{{ shipping.type }}&#x3C;/span>\n  &#x3C;span>{{ shipping.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n<p><code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 파이프를 사용하면 데이터 스트림이 반환하는 마지막 데이터를 자동으로 프로퍼티에 할당할 수 있으며, 이 과정은 컴포넌트가 존재하는 동안 계속 유지됩니다. 그리고 Angular가 컴포넌트를 종료하게 되면 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 파이프도 자동으로 종료됩니다. <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> 파이프에 대해 자세하게 알아보려면 <a href=\"/api/common/AsyncPipe\">AsyncPipe API 문서</a>를 참고하세요.</p>\n</li>\n<li>\n<p>배송 화면으로 이동하는 링크를 장바구니 화면에 추가합니다:</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;p>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\">Shipping Prices&#x3C;/a>\n&#x3C;/p>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">\n  &#x3C;span>{{ item.name }}&#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n</li>\n<li>\n<p>배송가격이 제대로 표시되는지 확인해 봅시다:</p>\n<p>\"Checkout\" 버튼을 누르면 장바구니 화면이 표시됩니다. 이전에 설명했듯이, 앱이 새로고침되면 장바구니가 초기화됩니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-empty-with-shipping-prices.png\" alt=\"Cart with link to shipping prices\" width=\"301\" height=\"208\">\n</div>\n<p>그리고 이 화면에서 링크를 클릭하면 배송가격 안내 페이지로 이동합니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/shipping-prices.png\" alt=\"Display shipping prices\" width=\"301\" height=\"238\">\n</div>\n</li>\n</ol>\n<!--    \n## Next steps\n-->\n<h2 id=\"다음-단계\">다음 단계<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#다음-단계\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nCongratulations! You have an online store application with a product catalog and shopping cart. You can also look up and display shipping prices.\n\nTo continue exploring Angular, choose either of the following options:\n* [Continue to the \"Forms\" section](start/start-forms \"Getting Started: Forms\") to finish the app by adding the shopping cart page and a checkout form.\n* [Skip ahead to the \"Deployment\" section](start/start-deployment \"Getting Started: Deployment\") to move to local development, or deploy your app to Firebase or your own server.\n-->\n<p>축하합니다! 이제 온라인 쇼핑몰 앱에서 상품 목록과 장바구니 기능을 사용할 수 있습니다. 상품 배송가격도 확인할 수 있습니다.</p>\n<p>이런 내용에 대해서도 알아보세요:</p>\n<ul>\n<li>계속해서 장바구니 화면과 주문 폼을 추가해 보려면 <a href=\"start/start-forms\" title=\"Getting Started: Forms\">폼</a> 문서를 확인해 보세요.</li>\n<li>앱을 Firebase에 배포하거나 로컬 개발환경을 설정하는 방법에 대해 알아보려면 <a href=\"start/start-deployment\" title=\"Getting Started: Deployment\">배포</a> 문서를 참고하세요.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n-->\n<!-- links from this doc:\n - /api/common/AsyncPipe\n - /guide/dependency-injection-providers#tree-shakable-providers\n - api/common/CurrencyPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/Injectable\n - api/core/Injectable#providedIn\n - api/core/IterableChangeRecord#item\n - api/core/NgModule\n - api/core/OnInit\n - api/core/testing/async\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/http\n - start/start-data#angular-시작하기-데이터-다루기\n - start/start-data#appmodule에서-httpclient-사용하기\n - start/start-data#generate-cart-service\n - start/start-data#get-메소드-정의하기\n - start/start-data#다음-단계\n - start/start-data#배송-화면-구현하기\n - start/start-data#배송가격-가져오기\n - start/start-data#배송가격-데이터\n - start/start-data#서비스service\n - start/start-data#장바구니-목록-표시하기\n - start/start-data#장바구니-서비스-만들기\n - start/start-data#장바구니-서비스-사용하기\n - start/start-data#장바구니-서비스-정의하기\n - start/start-data#장바구니-서비스에서-httpclient-사용하기\n - start/start-data#장바구니-화면-만들기\n - start/start-data#컴포넌트-설정하기\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n - https://github.com/angular/angular/edit/master/aio/content/start/start-data.md?message=docs%3A%20describe%20your%20change...\n-->"
}