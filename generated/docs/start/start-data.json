{
  "id": "start/start-data",
  "title": "Try it: Manage data",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/start/start-data.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"try-it-manage-data\">Try it: Manage data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#try-it-manage-data\"><i class=\"material-icons\">link</i></a></h1>\n<p>At the end of <a href=\"start/start-routing\" title=\"Try it: In-app Navigation\">In-app Navigation</a>, the online store application has a product catalog with two views: a product list and product details.\nUsers can click on a product name from the list to see details in a new view, with a distinct URL, or route.</p>\n<p>This page guides you through creating the shopping cart in three phases:</p>\n<ul>\n<li>Update the product details view to include a \"Buy\" button, which adds the current product to a list of products that a cart service manages.</li>\n<li>Add a cart component, which displays the items in the cart.</li>\n<li>Add a shipping component, which retrieves shipping prices for the items in the cart by using Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to retrieve shipping data from a <code>.json</code> file.</li>\n</ul>\n<a id=\"services\"></a>\n<h2 id=\"services\">Services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#services\"><i class=\"material-icons\">link</i></a></h2>\n<p>Services are an integral part of Angular applications. In Angular, a service is an instance of a class that you can make available to any part of your application using Angular's <a href=\"guide/glossary#dependency-injection-di\" title=\"Dependency injection definition\">dependency injection system</a>.</p>\n<p>Services are the place where you share data between parts of your application. For the online store, the cart service is where you store your cart data and methods.</p>\n<a id=\"create-cart-service\"></a>\n<h2 id=\"create-the-shopping-cart-service\">Create the shopping cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-shopping-cart-service\"><i class=\"material-icons\">link</i></a></h2>\n<p>Up to this point, users can view product information, and\nsimulate sharing and being notified about product changes.\nThey cannot, however, buy products.</p>\n<p>In this section, you add a \"Buy\" button to the product\ndetails view and set up a cart service to store information\nabout products in the cart.</p>\n<div class=\"alert is-helpful\">\n<p>A later part of this tutorial, <a href=\"start/start-forms\" title=\"Try it: Forms for user input\">Use forms for user input</a>, guides you through accessing this cart service from the view where the user checks out.</p>\n</div>\n<a id=\"generate-cart-service\"></a>\n<h3 id=\"define-a-cart-service\">Define a cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-a-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<ol>\n<li>\n<p>To generate a cart service, right click on the <code>app</code> folder, choose <code>Angular Generator</code>, and choose <code>Service</code>. Name the new service <code>cart</code>.</p>\n<p>    <code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.1.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>({\n  providedIn: 'root'\n})\nexport class CartService {\n\n  constructor() {}\n\n}\n\n\n</code-example></p>\n<div class=\"alert is-helpful> <p>The StackBlitz generator might provide the cart service in <code>app.module.ts</code> by default. That differs from the example, which uses a bundle-optimization technique, an <code>@Injectable()</code> decorator with the <code>{ providedIn: &#x27;root&#x27; }</code> statement. For more information about services, see <a href=\" guide=\"\" architecture-services&#x22;=\"\" title=\"Concepts > Intro to Services and DI\">Introduction to Services and Dependency Injection.<p></p>\n</div>\n</li>\n<li>\n<p>In the <code>CartService</code> class, define an <code>items</code> property to store the array of the current products in the cart.</p>\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"props\">\nexport class CartService {\n  items = [];\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Define methods to add items to the cart, return cart items, and clear the cart items:</p>\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"methods\">\nexport class CartService {\n  items = [];\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n}\n\n\n</code-example>\n<ul>\n<li>\n<p>The <code>addToCart()</code> method appends a product to an array of <code>items</code>.</p>\n</li>\n<li>\n<p>The <code>getItems()</code> method collects the items users add to the cart and returns each item with its associated quantity.</p>\n</li>\n<li>\n<p>The <code>clearCart()</code> method returns an empty array of items.</p>\n</li>\n</ul>\n</li>\n</ol>\n<a id=\"product-details-use-cart-service\"></a>\n<h3 id=\"use-the-cart-service\">Use the cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<p>This section walks you through using the cart service to add a product to the cart with a \"Buy\" button.</p>\n<ol>\n<li>\n<p>Open <code>product-details.component.ts</code>.</p>\n</li>\n<li>\n<p>Configure the component to use the cart service.</p>\n<ol>\n<li>\n<p>Import the cart service.</p>\n<code-example header=\"src/app/product-details/product-details.component.ts\" path=\"getting-started/src/app/product-details/product-details.component.ts\" region=\"cart-service\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a> } from '@angular/router';\n\nimport { products } from '../products';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p>Inject the cart service by adding it to the <code>constructor()</code>.</p>\n<code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"inject-cart-service\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private route: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n<!--\nTo do: Consider defining \"inject\" and describing the concept of \"dependency injection\"\n-->\n</li>\n</ol>\n</li>\n<li>\n<p>Define the <code>addToCart()</code> method, which adds the current product to the cart.</p>\n<p>The <code>addToCart()</code> method does the following three things:</p>\n<ul>\n<li>Receives the current <code>product</code>.</li>\n<li>Uses the cart service's <code>addToCart()</code> method to add the product the cart.</li>\n<li>Displays a message that you've added a product to the cart.</li>\n</ul>\n<code-example path=\"getting-started/src/app/product-details/product-details.component.ts\" header=\"src/app/product-details/product-details.component.ts\" region=\"add-to-cart\">\nexport class ProductDetailsComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  addToCart(product) {\n    this.cartService.addToCart(product);\n    window.alert('Your product has been added to the cart!');\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Update the product details template with a \"Buy\" button that adds the current product to the cart.</p>\n<ol>\n<li>\n<p>Open <code>product-details.component.html</code>.</p>\n</li>\n<li>\n<p>Add a button with the label \"Buy\", and bind the <code>click()</code> event to the <code>addToCart()</code> method:</p>\n<code-example header=\"src/app/product-details/product-details.component.html\" path=\"getting-started/src/app/product-details/product-details.component.html\">\n&#x3C;h2>Product Details&#x3C;/h2>\n\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"product\">\n  &#x3C;h3>{{ product.name }}&#x3C;/h3>\n  &#x3C;h4>{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/h4>\n  &#x3C;p>{{ product.description }}&#x3C;/p>\n\n  &#x3C;button (click)=\"addToCart(product)\">Buy&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>The line, <code>&#x3C;h4>{{ product.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/h4></code> uses the <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a></code> pipe to transform <code>product.price</code> from a number to a currency string. A pipe is a way you can transform data in your HTML template. For more information about Angular pipes, see <a href=\"guide/pipes\" title=\"Pipes\">Pipes</a>.</p>\n</div>\n</li>\n<li>\n<p>To see the new \"Buy\" button, refresh the application and click on a product's name to display its details.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/product-details-buy.png\" alt=\"Display details for selected product with a Buy button\" width=\"259\" height=\"233\">\n</div>\n</li>\n<li>\n<p>Click the \"Buy\" button to add the product to the stored list of items in the cart and display a confirmation message.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/buy-alert.png\" alt=\"Display details for selected product with a Buy button\" width=\"329\" height=\"106\">\n</div>\n</li>\n</ol>\n<h2 id=\"create-the-cart-view\">Create the cart view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#create-the-cart-view\"><i class=\"material-icons\">link</i></a></h2>\n<p>At this point, users can put items in the cart by clicking \"Buy\", but they can't yet see their cart.</p>\n<p>Create the cart view in two steps:</p>\n<ol>\n<li>Create a cart component and configure routing to the new component. At this point, the cart view has only default text.</li>\n<li>Display the cart items.</li>\n</ol>\n<h3 id=\"set-up-the-component\">Set up the component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#set-up-the-component\"><i class=\"material-icons\">link</i></a></h3>\n<p> To create the cart view, begin by following the same steps you did to create the product details component and configure routing for the new component.</p>\n<ol>\n<li>\n<p>Generate a cart component, named <code>cart</code>.</p>\n<p>Reminder: In the file list, right-click the <code>app</code> folder, choose <code>Angular Generator</code> and <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.css']\n})\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Add routing (a URL pattern) for the cart component.</p>\n<p>Open <code>app.module.ts</code> and add a route for the component <code>CartComponent</code>, with a <code>path</code> of <code>cart</code>:</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"cart-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n\n</code-example>\n</li>\n<li>\n<p>Update the \"Checkout\" button so that it routes to the <code>/cart</code> url.</p>\n<p>Open <code>top-bar.component.html</code> and add a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directive pointing to <code>/cart</code>.</p>\n<code-example header=\"src/app/top-bar/top-bar.component.html\" path=\"getting-started/src/app/top-bar/top-bar.component.html\" region=\"cart-route\">\n&#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/cart\" class=\"button fancy-button\">\n  &#x3C;i class=\"material-icons\">shopping_cart&#x3C;/i>Checkout\n&#x3C;/a>\n\n</code-example>\n</li>\n<li>\n<p>To see the new cart component, click the \"Checkout\" button. You can see the \"cart works!\" default text, and the URL has the pattern <code>https://getting-started.stackblitz.io/cart</code>,  where <code>getting-started.stackblitz.io</code> may be different for your StackBlitz project.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-works.png\" alt=\"Display cart view before customizing\" width=\"259\" height=\"193\">\n</div>\n</li>\n</ol>\n<h3 id=\"display-the-cart-items\">Display the cart items<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#display-the-cart-items\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can use services to share data across components:</p>\n<ul>\n<li>The product details component already uses the cart service to add products to the cart.</li>\n<li>This section shows you how to use the cart service to display the products in the cart.</li>\n</ul>\n<ol>\n<li>\n<p>Open <code>cart.component.ts</code>.</p>\n</li>\n<li>\n<p>Configure the component to use the cart service.</p>\n<ol>\n<li>\n<p>Import the <code>CartService</code> from the <code>cart.service.ts</code> file.</p>\n<code-example header=\"src/app/cart/cart.component.ts\" path=\"getting-started/src/app/cart/cart.component.2.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p>Inject the <code>CartService</code> so that the cart component can use it.</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"inject-cart\">\nexport class CartComponent {\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>Define the <code>items</code> property to store the products in the cart.</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.2.ts\" header=\"src/app/cart/cart.component.ts\" region=\"items\">\nexport class CartComponent {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Set the items using the cart service's <code>getItems()</code> method. Recall that you defined this method <a href=\"start/start-data#generate-cart-service\">when you generated <code>cart.service.ts</code></a>.</p>\n<p>The resulting <code>CartComponent</code> class is as follows:</p>\n<code-example path=\"getting-started/src/app/cart/cart.component.3.ts\" header=\"src/app/cart/cart.component.ts\" region=\"props-services\">\nexport class CartComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  items;\n\n  constructor(\n    private cartService: CartService\n  ) { }\n\n  ngOnInit() {\n    this.items = this.cartService.getItems();\n  }\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Update the template with a header, and use a <code>&#x3C;div></code> with an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> to display each of the cart items with its name and price.</p>\n<p>The resulting <code>CartComponent</code> template is as follows:</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\" region=\"prices\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">\n  &#x3C;span>{{ item.name }}&#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n</code-example>\n</li>\n<li>\n<p>Test your cart component.</p>\n<ol>\n<li>Click on \"My Store\" to go to the product list view.</li>\n<li>Click on a product name to display its details.</li>\n<li>Click \"Buy\" to add the product to the cart.</li>\n<li>Click \"Checkout\" to see the cart.</li>\n<li>To add another product, click \"My Store\" to return to the product list.</li>\n</ol>\n<p>Repeat to add more items to the cart.</p>\n  <div class=\"lightbox\">\n    <img src=\"generated/images/guide/start/cart-page-full.png\" alt=\"Cart view with products added\" width=\"259\" height=\"238\">\n  </div>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>StackBlitz tip: Any time the preview refreshes, the cart is cleared. If you make changes to the app, the page refreshes, so you'll need to buy products again to populate the cart.</p>\n</div>\n<div class=\"alert is-helpful\">\n<p>For more information about services, see <a href=\"guide/architecture-services\" title=\"Concepts > Intro to Services and DI\">Introduction to Services and Dependency Injection</a>.</p>\n</div>\n<h2 id=\"retrieve-shipping-prices\">Retrieve shipping prices<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#retrieve-shipping-prices\"><i class=\"material-icons\">link</i></a></h2>\n<!-- Accessing data with the HTTP client -->\n<p>Servers often return data in the form of a stream.\nStreams are useful because they make it easy to transform the returned data and  make modifications to the way you request that data.\nThe Angular HTTP client, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, is a built-in way to fetch data from external APIs and provide them to your app as a stream.</p>\n<p>This section shows you how to use the HTTP client to retrieve shipping prices from an external file.</p>\n<h3 id=\"predefined-shipping-data\">Predefined shipping data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#predefined-shipping-data\"><i class=\"material-icons\">link</i></a></h3>\n<p>The application that StackBlitz generates for this guide comes with predefined shipping data in <code>assets/shipping.json</code>.\nUse this data to add shipping prices for items in the cart.</p>\n<code-example header=\"src/assets/shipping.json\" path=\"getting-started/src/assets/shipping.json\">\n[\n  {\n    \"type\": \"Overnight\",\n    \"price\": 25.99\n  },\n  {\n    \"type\": \"2-Day\",\n    \"price\": 9.99\n  },\n  {\n    \"type\": \"Postal\",\n    \"price\": 2.99\n  }\n]\n\n</code-example>\n<h3 id=\"use-httpclient-in-the-appmodule\">Use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in the <code>AppModule</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-httpclient-in-the-appmodule\"><i class=\"material-icons\">link</i></a></h3>\n<p>Before you can use Angular's HTTP client, you must configure your app to use <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>.</p>\n<p>Angular's <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> registers the providers your app needs to use a single instance of the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service throughout your app.</p>\n<ol>\n<li>\n<p>Open <code>app.module.ts</code>.</p>\n<p>This file contains imports and functionality that is available to the entire app.</p>\n</li>\n<li>\n<p>Import <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package at the top of the file with the other imports. As there are a number of other imports, this code snippet omits them for brevity. Be sure to leave the existing imports in place.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"http-client-module-import\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p>Add <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> to the <code>AppModule</code> <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <code>imports</code> array to register Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> providers globally.</p>\n<code-example path=\"getting-started/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"http-client-module\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"use-httpclient-in-the-cart-service\">Use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> in the cart service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#use-httpclient-in-the-cart-service\"><i class=\"material-icons\">link</i></a></h3>\n<p>Now that the <code>AppModule</code> imports the <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>, the next step is to inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service into your service so your app can fetch data and interact with external APIs and resources.</p>\n<ol>\n<li>\n<p>Open <code>cart.service.ts</code>.</p>\n</li>\n<li>\n<p>Import <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> from the <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> package.</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"import-http\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\n\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n</code-example>\n</li>\n<li>\n<p>Inject <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> into the <code>CartService</code> constructor:</p>\n<code-example path=\"getting-started/src/app/cart.service.ts\" header=\"src/app/cart.service.ts\" region=\"inject-http\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n}\n\n\n</code-example>\n</li>\n</ol>\n<h3 id=\"define-the-get-method\">Define the <code>get()</code> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-the-get-method\"><i class=\"material-icons\">link</i></a></h3>\n<p>Multiple components can leverage the same service.\nLater in this tutorial, the shipping component uses the cart service to retrieve shipping data via HTTP from the <code>shipping.json</code> file.\nFirst, define a <code>get()</code> method.</p>\n<ol>\n<li>\n<p>Continue working in <code>cart.service.ts</code>.</p>\n</li>\n<li>\n<p>Below the <code>clearCart()</code> method, define a new <code>getShippingPrices()</code> method that uses the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> <code>get()</code> method to retrieve the shipping data.</p>\n<code-example header=\"src/app/cart.service.ts\" path=\"getting-started/src/app/cart.service.ts\" region=\"get-shipping\">\nexport class CartService {\n  items = [];\n\n  constructor(\n    private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>\n  ) {}\n\n  addToCart(product) {\n    this.items.push(product);\n  }\n\n  getItems() {\n    return this.items;\n  }\n\n  clearCart() {\n    this.items = [];\n    return this.items;\n  }\n\n  getShippingPrices() {\n    return this.http.get('/assets/shipping.json');\n  }\n}\n\n\n</code-example>\n</li>\n</ol>\n<div class=\"alert is-helpful\">\n<p>For more information about Angular's <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, see the <a href=\"guide/http\" title=\"Server interaction through HTTP\">Client-Server Interaction</a> guide.</p>\n</div>\n<h2 id=\"define-the-shipping-view\">Define the shipping view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#define-the-shipping-view\"><i class=\"material-icons\">link</i></a></h2>\n<p>Now that your app can retrieve shipping data, create a shipping component and  template.</p>\n<ol>\n<li>\n<p>Generate a new component named <code>shipping</code>.</p>\n<p>Reminder: In the file list, right-click the <code>app</code> folder, choose <code>Angular Generator</code> and <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>.</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.1.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  styleUrls: ['./shipping.component.css']\n})\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n</code-example>\n</li>\n<li>\n<p>In <code>app.module.ts</code>, add a route for shipping. Specify a <code>path</code> of <code>shipping</code> and a component of <code>ShippingComponent</code>.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"getting-started/src/app/app.module.ts\" region=\"shipping-route\">\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n    <a href=\"api/forms/ReactiveFormsModule\" class=\"code-anchor\">ReactiveFormsModule</a>,\n    RouterModule.forRoot([\n      { path: '', component: ProductListComponent },\n      { path: 'products/:productId', component: ProductDetailsComponent },\n      { path: 'cart', component: CartComponent },\n      { path: 'shipping', component: ShippingComponent },\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    TopBarComponent,\n    ProductListComponent,\n    ProductAlertsComponent,\n    ProductDetailsComponent,\n    CartComponent,\n    ShippingComponent\n  ],\n  bootstrap: [\n    AppComponent\n  ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>There's no link to the new shipping component yet, but you can see its template in the preview pane by entering the URL its route specifies. The URL has the pattern: <code>https://getting-started.stackblitz.io/shipping</code> where the <code>getting-started.stackblitz.io</code> part may be different for your StackBlitz project.</p>\n</li>\n<li>\n<p>Modify the shipping component so that it uses the cart service to retrieve shipping data via HTTP from the <code>shipping.json</code> file.</p>\n<ol>\n<li>\n<p>Import the cart service.</p>\n<code-example header=\"src/app/shipping/shipping.component.ts\" path=\"getting-started/src/app/shipping/shipping.component.ts\" region=\"imports\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\n\nimport { CartService } from '../cart.service';\n\n</code-example>\n</li>\n<li>\n<p>Define a <code>shippingCosts</code> property.</p>\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"props\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  shippingCosts;\n}\n\n\n</code-example>\n</li>\n<li>\n<p>Inject the cart service in the <code>ShippingComponent</code> constructor:</p>\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"inject-cart-service\">\nconstructor(\n  private cartService: CartService\n) {\n}\n\n</code-example>\n</li>\n<li>\n<p>Set the <code>shippingCosts</code> property using the <code>getShippingPrices()</code> method from the cart service.</p>\n<code-example path=\"getting-started/src/app/shipping/shipping.component.ts\" header=\"src/app/shipping/shipping.component.ts\" region=\"ctor\">\nexport class ShippingComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  shippingCosts;\n\n  constructor(\n    private cartService: CartService\n  ) {\n  }\n\n  ngOnInit() {\n    this.shippingCosts = this.cartService.getShippingPrices();\n  }\n\n}\n\n\n</code-example>\n</li>\n</ol>\n</li>\n<li>\n<p>Update the shipping component's template to display the shipping types and prices using the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe:</p>\n<code-example header=\"src/app/shipping/shipping.component.html\" path=\"getting-started/src/app/shipping/shipping.component.html\">\n&#x3C;h3>Shipping Prices&#x3C;/h3>\n\n&#x3C;div class=\"shipping-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let shipping of shippingCosts | async\">\n  &#x3C;span>{{ shipping.type }}&#x3C;/span>\n  &#x3C;span>{{ shipping.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n<p>The <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe returns the latest value from a stream of data and continues to do so for the life of a given component. When Angular destroys that component, the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe automatically stops. For detailed information about the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code> pipe, see the <a href=\"/api/common/AsyncPipe\">AsyncPipe API documentation</a>.</p>\n</li>\n<li>\n<p>Add a link from the cart view to the shipping view:</p>\n<code-example header=\"src/app/cart/cart.component.html\" path=\"getting-started/src/app/cart/cart.component.2.html\">\n&#x3C;h3>Cart&#x3C;/h3>\n\n&#x3C;p>\n  &#x3C;a <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/shipping\">Shipping Prices&#x3C;/a>\n&#x3C;/p>\n\n&#x3C;div class=\"cart-item\" *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">\n  &#x3C;span>{{ item.name }}&#x3C;/span>\n  &#x3C;span>{{ item.price | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a> }}&#x3C;/span>\n&#x3C;/div>\n\n\n</code-example>\n</li>\n<li>\n<p>Test your shipping prices feature:</p>\n<p>Click the \"Checkout\" button to see the updated cart. Remember that changing the app causes the preview to refresh, which empties the cart.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/cart-empty-with-shipping-prices.png\" alt=\"Cart with link to shipping prices\" width=\"301\" height=\"208\">\n</div>\n<p>Click on the link to navigate to the shipping prices.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/start/shipping-prices.png\" alt=\"Display shipping prices\" width=\"301\" height=\"238\">\n</div>\n</li>\n</ol>\n<h2 id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"start/start-data#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>Congratulations! You have an online store application with a product catalog and shopping cart. You can also look up and display shipping prices.</p>\n<p>To continue exploring Angular, choose either of the following options:</p>\n<ul>\n<li><a href=\"start/start-forms\" title=\"Try it: Forms for User Input\">Continue to the \"Forms\" section</a> to finish the app by adding the shopping cart view and a checkout form.</li>\n<li><a href=\"start/start-deployment\" title=\"Try it: Deployment\">Skip ahead to the \"Deployment\" section</a> to move to local development, or deploy your app to Firebase or your own server.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n-->\n<!-- links from this doc:\n - /api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClientModule\n - api/core/Component\n - api/core/Injectable\n - api/core/NgModule\n - api/core/OnInit\n - api/core/testing/async\n - api/forms/ReactiveFormsModule\n - api/platform-browser/BrowserModule\n - api/router/ActivatedRoute\n - api/router/RouterLink\n - guide/architecture-services\n - guide/glossary#dependency-injection-di\n - guide/http\n - guide/pipes\n - start/start-data#create-the-cart-view\n - start/start-data#create-the-shopping-cart-service\n - start/start-data#define-a-cart-service\n - start/start-data#define-the-get-method\n - start/start-data#define-the-shipping-view\n - start/start-data#display-the-cart-items\n - start/start-data#generate-cart-service\n - start/start-data#next-steps\n - start/start-data#predefined-shipping-data\n - start/start-data#retrieve-shipping-prices\n - start/start-data#services\n - start/start-data#set-up-the-component\n - start/start-data#try-it-manage-data\n - start/start-data#use-httpclient-in-the-appmodule\n - start/start-data#use-httpclient-in-the-cart-service\n - start/start-data#use-the-cart-service\n - start/start-deployment\n - start/start-forms\n - start/start-routing\n - https://github.com/angular/angular/edit/master/aio/content/start/start-data.md?message=docs%3A%20describe%20your%20change...\n-->"
}