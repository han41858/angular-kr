{
  "id": "guide/dynamic-component-loader",
  "title": "동적 컴포넌트 로더",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/dynamic-component-loader.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Dynamic component loader\n-->\n<h1 id=\"동적-컴포넌트-로더\">동적 컴포넌트 로더<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#동적-컴포넌트-로더\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nComponent templates are not always fixed. An application may need to load new components at runtime.\n-->\n<p>컴포넌트의 템플릿이 항상 애플리케이션 실행 전에 로드되어야만 하는 것은 아닙니다. 컴포넌트 템플릿은 애플리케이션이 실행되는 중에도 불러올 수 있습니다.</p>\n<!--\nThis cookbook shows you how to use `ComponentFactoryResolver` to add components dynamically.\n-->\n<p>이 문서는 <code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code> 예제를 사용해서 컴포넌트를 동적으로 생성하는 방법을 알아봅니다.</p>\n<!--\nSee the <live-example name=\"dynamic-component-loader\"></live-example>\nof the code in this cookbook.\n-->\n<p>이 문서에서 다루는 예제는 <live-example name=\"dynamic-component-loader\"></live-example>에서 실행하거나 다운받을 수 있습니다.</p>\n<!--\n<a id=\"dynamic-loading\"></a>\n-->\n<a id=\"동적-컴포넌트-로딩\"></a>\n<!--\n## Dynamic component loading\n-->\n<h2 id=\"동적-컴포넌트-로딩\">동적 컴포넌트 로딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#동적-컴포넌트-로딩\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe following example shows how to build a dynamic ad banner.\n-->\n<p>광고 배너를 동적으로 만드는 예제를 보면서 자세하게 알아봅시다.</p>\n<!--\nThe hero agency is planning an ad campaign with several different\nads cycling through the banner. New ad components are added\nfrequently by several different teams. This makes it impractical\nto use a template with a static component structure.\n-->\n<p>히어로 주식회사는 광고 캠페인을 몇가지 싸이클로 표시하려고 합니다. 그런데 이 광고의 내용은 여러 팀이 각자 추가하기 때문에 정적인 컴포넌트 구조로는 이 요구사항을 만족할 수 없다고 합시다.</p>\n<!--\nInstead, you need a way to load a new component without a fixed\nreference to the component in the ad banner's template.\n-->\n<p>그러면 컴포넌트의 템플릿을 고정된 HTML 문서로 작성하지 않고 어딘가에서 불러오는 방법을 사용해야 합니다.</p>\n<!--\nAngular comes with its own API for loading components dynamically.\n-->\n<p>이 로직은 컴포넌트를 동적으로 로드하는 Angular API를 활용해서 구현할 수 있습니다.</p>\n<a id=\"directive\"></a>\n<!--\n## The anchor directive\n-->\n<h2 id=\"앵커-디렉티브\">앵커 디렉티브<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#앵커-디렉티브\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nBefore you can add components you have to define an anchor point\nto tell Angular where to insert components.\n-->\n<p>컴포넌트를 정의하기 전에, 이 컴포넌트가 어디에 위치할지 지정하는 앵커를 지정해봅시다.</p>\n<!--\nThe ad banner uses a helper directive called `AdDirective` to\nmark valid insertion points in the template.\n-->\n<p>광고가 표시될 위치를 지정하도록 <code>AdDirective</code> 디렉티브를 다음과 같이 정의합니다.</p>\n<code-example path=\"dynamic-component-loader/src/app/ad.directive.ts\" header=\"src/app/ad.directive.ts\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[ad-host]',\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: <a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a>) { }\n}\n\n\n\n</code-example>\n<!--\n`AdDirective` injects `ViewContainerRef` to gain access to the view\ncontainer of the element that will host the dynamically added component.\n-->\n<p><code>AdDirective</code>는 컴포넌트가 들어갈 뷰 컨테이너를 참조할 수 있도록 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>를 의존성으로 주입받습니다.</p>\n<!--\nIn the `@Directive` decorator, notice the selector name, `ad-host`;\nthat's what you use to apply the directive to the element.\nThe next section shows you how.\n-->\n<p>그리고 <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> 데코레이터에는 셀렉터로 <code>ad-host</code>를 지정하는데, 우리가 만들 컴포넌트는 이 셀렉터에 해당하는 엘리먼트에 적용될 것입니다.</p>\n<!--\n<a id=\"loading-components\"></a>\n-->\n<a id=\"컴포넌트-불러오기\"></a>\n<!--\n## Loading components\n-->\n<h2 id=\"컴포넌트-불러오기\">컴포넌트 불러오기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#컴포넌트-불러오기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nMost of the ad banner implementation is in `ad-banner.component.ts`.\nTo keep things simple in this example, the HTML is in the `@Component`\ndecorator's `template` property as a template string.\n-->\n<p>광고 배너의 코드는 <code>ad-banner.component.ts</code>에 대부분 작성되어 있습니다.\n예제를 간단하게 하기 위해 이 컴포넌트의 템플릿은 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터의 <code>template</code> 프로퍼티로 간단하게 정의했습니다.</p>\n<!--\nThe `<ng-template>` element is where you apply the directive you just made.\nTo apply the `AdDirective`, recall the selector from `ad.directive.ts`,\n`ad-host`. Apply that to `<ng-template>` without the square brackets. Now Angular knows\nwhere to dynamically load components.\n-->\n<p>이 코드에서 컴포넌트가 로드될 위치는 <code>&#x3C;ng-template></code> 엘리먼트 안입니다.\n그리고 <code>AdDirective</code>를 적용하려면 <code>ad.directive.ts</code>에 선언된 것처럼 <code>ad-host</code> 셀렉터를 사용하면 됩니다.\n<code>&#x3C;ng-template></code>에 <code>AdDirective</code>를 적용할 때 대괄호(<code>[</code>, <code>]</code>)를 사용하지 않은 것에 주의하세요.\n이 문법은 어트리뷰트 셀렉터를 사용하는 것이 아니라 컴포넌트를 동적으로 로드하는 문법입니다.</p>\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"ad-host\" header=\"src/app/ad-banner.component.ts (template)\">\ntemplate: `\n            &#x3C;div class=\"ad-banner-example\">\n              &#x3C;h3>Advertisements&#x3C;/h3>\n              &#x3C;ng-template ad-host>&#x3C;/ng-template>\n            &#x3C;/div>\n          `\n\n</code-example>\n<!--\nThe `<ng-template>` element is a good choice for dynamic components\nbecause it doesn't render any additional output.\n-->\n<p><code>&#x3C;ng-template></code> 엘리먼트는 컴포넌트 외부에서 내용을 받아 컴포넌트를 구성하기 때문에 동적 컴포넌트를 구성하기에도 좋습니다.</p>\n<!--\n<a id=\"resolving-components\"></a>\n-->\n<a id=\"동적-컴포넌트-구성하기\"></a>\n<!--\n## Resolving components\n-->\n<h2 id=\"동적-컴포넌트-구성하기\">동적 컴포넌트 구성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#동적-컴포넌트-구성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTake a closer look at the methods in `ad-banner.component.ts`.\n-->\n<p><code>ad-banner.component.ts</code>에 정의된 메소드들을 좀 더 자세하게 봅시다.</p>\n<!--\n`AdBannerComponent` takes an array of `AdItem` objects as input,\nwhich ultimately comes from `AdService`.  `AdItem` objects specify\nthe type of component to load and any data to bind to the\ncomponent.`AdService` returns the actual ads making up the ad campaign.\n-->\n<p><code>AdBannerComponent</code>는 <code>AdItem</code> 객체의 배열을 입력 프로퍼티로 받는데, 이 배열은 <code>AdService</code>에서 받아올 것입니다.\n<code>AdItem</code> 객체는 컴포넌트를 구성하기 위해 필요한 정보를 담는 용도로 사용하며, 요구사항을 만족시키기 위해 이 객체의 구체적인 값은 컴포넌트 외부인 <code>AdService</code>에서 받아옵니다.</p>\n<!--\nPassing an array of components to `AdBannerComponent` allows for a\ndynamic list of ads without static elements in the template.\n-->\n<p>결국 <code>AdBannerComponent</code>에는 템플릿이 정적으로 지정되지 않은 컴포넌트 데이터가 배열 형태로 전달될 것입니다.</p>\n<!--\nWith its `getAds()` method, `AdBannerComponent` cycles through the array of `AdItems`\nand loads a new component every 3 seconds by calling `loadComponent()`.\n-->\n<p><code>AdBannerComponent</code>는 <code>getAds()</code> 메소드를 사용해서 <code>AdItems</code> 배열을 각각 순회하는데, 3초마다 <code>loadComponent()</code> 메소드를 실행해서 컴포넌트를 하나씩 뷰에 표시합니다.</p>\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"class\" header=\"src/app/ad-banner.component.ts (excerpt)\">\nexport class AdBannerComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a>, <a href=\"api/core/OnDestroy\" class=\"code-anchor\">OnDestroy</a> {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() ads: AdItem[];\n  currentAdIndex = -1;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>(AdDirective, {<a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>: true}) adHost: AdDirective;\n  interval: any;\n\n  constructor(private componentFactoryResolver: <a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a>) { }\n\n  ngOnInit() {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);\n  }\n\n  loadComponent() {\n    this.currentAdIndex = (this.currentAdIndex + 1) % this.ads.length;\n    const adItem = this.ads[this.currentAdIndex];\n\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);\n\n    const viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    const componentRef = viewContainerRef.createComponent(componentFactory);\n    (&#x3C;AdComponent>componentRef.instance).data = adItem.data;\n  }\n\n  getAds() {\n    this.interval = setInterval(() => {\n      this.loadComponent();\n    }, 3000);\n  }\n}\n\n</code-example>\n<!--\nThe `loadComponent()` method is doing a lot of the heavy lifting here.\nTake it step by step. First, it picks an ad.\n-->\n<p>이 코드에서 <code>loadComponent()</code> 메소드의 로직은 조금 복잡합니다.\n하나씩 확인해 봅시다. 제일 먼저 어떤 광고를 표시할지 결정합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\n**How _loadComponent()_ chooses an ad**\n-->\n<p><strong><em>loadComponent()</em> 가 뷰에 표시할 광고를 결정하는 방법</strong></p>\n<!--\nThe `loadComponent()` method chooses an ad using some math.\n-->\n<p><code>loadComponent()</code> 메소드는 뷰에 표시할 광고를 선택합니다.</p>\n<!--\nFirst, it sets the `currentAdIndex` by taking whatever it\ncurrently is plus one, dividing that by the length of the `AdItem` array, and\nusing the _remainder_ as the new `currentAdIndex` value. Then, it uses that\nvalue to select an `adItem` from the array.\n-->\n<p>이 함수는 현재 <code>currentAdIndex</code> 값에 1을 더한 값을 <code>AdItem</code> 배열의 길이로 나눈 <em>나머지</em> 를 <code>currentAdIndex</code> 값으로 할당합니다.\n그리고 이 값을 인덱스로 활용해서 <code>adItem</code> 배열을 참조합니다.</p>\n</div>\n<!--\nAfter `loadComponent()` selects an ad, it uses `ComponentFactoryResolver`\nto resolve a `ComponentFactory` for each specific component.\nThe `ComponentFactory` then creates an instance of each component.\n-->\n<p><code>loadComponent()</code>에서 뷰에 표시할 광고를 결정하고 나면, 광고로 표시할 컴포넌트를 구성하기 위해 <code><a href=\"api/core/ComponentFactoryResolver\" class=\"code-anchor\">ComponentFactoryResolver</a></code>를 사용합니다.\n컴포넌트 데이터를 인자로 사용해서 <code>ComponentFactoryResolver.resolveComponentFactory()</code> 함수를 실행하고 나면 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 타입으로 컴포넌트의 인스턴스가 생성됩니다.</p>\n<!--\nNext, you're targeting the `viewContainerRef` that\nexists on this specific instance of the component. How do you know it's\nthis specific instance? Because it's referring to `adHost` and `adHost` is the\ndirective you set up earlier to tell Angular where to insert dynamic components.\n-->\n<p>그리고 나면 <code>AdDirective</code> 컴포넌트의 인스턴스에 있는 <code>viewContainerRef</code>를 참조합니다.\n이 객체는 <code>adHost</code>를 가리키는데, <code>adHost</code>는 이전에 언급했던 것처럼 Angular가 컴포넌트를 동적으로 로드할 위치를 지정한 디렉티브입니다.</p>\n<!--\nAs you may recall, `AdDirective` injects `ViewContainerRef` into its constructor.\nThis is how the directive accesses the element that you want to use to host the dynamic component.\n-->\n<p>이전 설명에서 <code>AdDirective</code>에는 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>가 생성자를 통해 주입된다고 했습니다.\n그래서 동적 컴포넌트를 구성하는 컴포넌트에서는 <code>AdDirective</code>의 인스턴스에 직접 접근할 수 있습니다.</p>\n<!--\nTo add the component to the template, you call `createComponent()` on `ViewContainerRef`.\n-->\n<p>그리고 컴포넌트의 템플릿을 구성하기 위해 <code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>에 있는 <code>createComponent()</code> 함수를 실행합니다.</p>\n<!--\nThe `createComponent()` method returns a reference to the loaded component.\nUse that reference to interact with the component by assigning to its properties or calling its methods.\n-->\n<p><code>createComponent()</code> 메소드는 이렇게 만들어진 컴포넌트의 인스턴스를 반환합니다.\n이 인스턴스의 프로퍼티를 직접 지정하면 컴포넌트의 내용을 바꿀 수 있습니다.</p>\n<!--\n<a id=\"selector-references\"></a>\n-->\n<!--\n#### Selector references\n-->\n<h4 id=\"셀렉터-참조\">셀렉터 참조<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#셀렉터-참조\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nGenerally, the Angular compiler generates a `ComponentFactory`\nfor any component referenced in a template. However, there are\nno selector references in the templates for\ndynamically loaded components since they load at runtime.\n-->\n<p>일반적으로 Angular 컴파일러는 컴포넌트에서 지정한 템플릿을 사용해서 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 타입의 컴포넌트 인스턴스를 생성합니다.\n그런데 이렇게 만든 컴포넌트는 Angular 애플리케이션이 동작하는 중에 동적으로 생성되기 때문에 셀렉터가 없습니다.</p>\n<!--\nTo ensure that the compiler still generates a factory,\nadd dynamically loaded components to the `NgModule`'s `entryComponents` array:\n-->\n<p>컴파일러가 생성하는 것을 <code><a href=\"api/core/ComponentFactory\" class=\"code-anchor\">ComponentFactory</a></code> 타입으로 보정하기 위해 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 메타데이터의 <code>entryComponents</code> 프로퍼티를 다음과 같이 지정합니다:</p>\n<code-example path=\"dynamic-component-loader/src/app/app.module.ts\" region=\"entry-components\" header=\"src/app/app.module.ts (entry components)\">\nentryComponents: [ HeroJobAdComponent, HeroProfileComponent ],\n\n</code-example>\n<!--\n<a id=\"common-interface\"></a>\n-->\n<a id=\"공통-인터페이스\"></a>\n<!--\n## The _AdComponent_ interface\n-->\n<h2 id=\"adcomponent-인터페이스\"><em>AdComponent</em> 인터페이스<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#adcomponent-인터페이스\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIn the ad banner, all components implement a common `AdComponent` interface to\nstandardize the API for passing data to the components.\n-->\n<p>광고 배너 안에서는 <code>AdService</code>에서 받은 광고 데이터를 컴포넌트에 적용할 수 있도록 <code>AdComponent</code> 인터페이스를 사용합니다.</p>\n<!--\nHere are two sample components and the `AdComponent` interface for reference:\n-->\n<p>그래서 아래 두 컴포넌트는 컴포넌트 클래스를 정의할 때 <code>AdComponent</code> 인터페이스를 활용합니다:</p>\n<code-tabs>\n\n  <code-pane header=\"hero-job-ad.component.ts\" path=\"dynamic-component-loader/src/app/hero-job-ad.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core';\n\nimport { AdComponent }      from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &#x3C;div class=\"job-ad\">\n      &#x3C;h4>{{data.headline}}&#x3C;/h4>\n\n      {{data.body}}\n    &#x3C;/div>\n  `\n})\nexport class HeroJobAdComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n\n}\n\n\n\n</code-pane>\n\n  <code-pane header=\"hero-profile.component.ts\" path=\"dynamic-component-loader/src/app/hero-profile.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> }  from '@angular/core';\n\nimport { AdComponent }       from './ad.component';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  template: `\n    &#x3C;div class=\"hero-profile\">\n      &#x3C;h3>Featured Hero Profile&#x3C;/h3>\n      &#x3C;h4>{{data.name}}&#x3C;/h4>\n\n      &#x3C;p>{{data.bio}}&#x3C;/p>\n\n      &#x3C;strong>Hire this hero today!&#x3C;/strong>\n    &#x3C;/div>\n  `\n})\nexport class HeroProfileComponent implements AdComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() data: any;\n}\n\n\n\n\n</code-pane>\n\n  <code-pane header=\"ad.component.ts\" path=\"dynamic-component-loader/src/app/ad.component.ts\">\nexport interface AdComponent {\n  data: any;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<!--\n<a id=\"final-ad-baner\"></a>\n-->\n<a id=\"최종-결과\"></a>\n<!--\n## Final ad banner\n-->\n<h2 id=\"최종-결과\">최종 결과<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#최종-결과\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n The final ad banner looks like this:\n-->\n<p>우리가 구현한 광고 배너의 최종 결과물은 다음과 같습니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/dynamic-component-loader/ads-example.gif\" alt=\"Ads\" width=\"480\" height=\"222\">\n</div>\n<!--\nSee the <live-example name=\"dynamic-component-loader\"></live-example>.\n-->\n<p>예제를 직접 실행하거나 다운로드 받으려면 <live-example name=\"dynamic-component-loader\"></live-example>를 확인해 보세요.</p>\n\n</div>\n\n<!-- links to this doc:\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - guide/elements\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/ComponentFactory\n - api/core/ComponentFactoryResolver\n - api/core/Directive\n - api/core/Input\n - api/core/NgModule\n - api/core/OnDestroy\n - api/core/OnInit\n - api/core/ViewChild\n - api/core/ViewContainerRef\n - api/upgrade/static\n - guide/dynamic-component-loader#adcomponent-인터페이스\n - guide/dynamic-component-loader#동적-컴포넌트-구성하기\n - guide/dynamic-component-loader#동적-컴포넌트-로더\n - guide/dynamic-component-loader#동적-컴포넌트-로딩\n - guide/dynamic-component-loader#셀렉터-참조\n - guide/dynamic-component-loader#앵커-디렉티브\n - guide/dynamic-component-loader#최종-결과\n - guide/dynamic-component-loader#컴포넌트-불러오기\n - https://github.com/angular/angular/edit/master/aio/content/guide/dynamic-component-loader.md?message=docs%3A%20describe%20your%20change...\n-->"
}