{
  "id": "guide/user-input",
  "title": "사용자 입력",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/user-input.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# User input\n-->\n<h1 id=\"사용자-입력\">사용자 입력<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#사용자-입력\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nUser actions such as clicking a link, pushing a button, and entering\ntext raise DOM events.\nThis page explains how to bind those events to component event handlers using the Angular\nevent binding syntax.\n\nRun the <live-example></live-example>.\n-->\n<p>DOM 이벤트는 사용자가 링크를 클릭하거나 버튼을 클릭할 때, 그리고 텍스트를 입력할 때 발생합니다.\n이 문서는 이렇게 일어나는 이벤트를 컴포넌트와 이벤트 바인딩하고, 컴포넌트 이벤트 핸들러가 이벤트를 어떻게 처리하는지 알아봅니다.</p>\n<!--\n## Binding to user input events\n-->\n<h2 id=\"사용자-동작-이벤트-바인딩하기\">사용자 동작 이벤트 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#사용자-동작-이벤트-바인딩하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can use [Angular event bindings](guide/template-syntax#event-binding)\nto respond to any [DOM event](https://developer.mozilla.org/en-US/docs/Web/Events).\nMany DOM events are triggered by user input. Binding to these events provides a way to\nget input from the user.\n-->\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM에서 발생하는 이벤트</a>는 <a href=\"guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\">Angular 이벤트 바인딩</a> 문법을 사용해서 반응할 수 있습니다.\nDOM에서 일어나는 이벤트는 대부분 사용자의 행동에 의해 발생합니다. 그래서 이 이벤트를 확인하면 사용자가 어떤 동작을 하고 있는지 알 수 있습니다.</p>\n<!--\nTo bind to a DOM event, surround the DOM event name in parentheses and assign a quoted\n[template statement](guide/template-syntax#template-statements) to it.\n-->\n<p>DOM 이벤트를 바인딩 하려면 이벤트 이름을 괄호(<code>(</code>, <code>)</code>)로 감싸고 <a href=\"guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%8B%A4%ED%96%89%EB%AC%B8\">템플릿 실행문</a>을 연결하면 됩니다.</p>\n<!--\nThe following example shows an event binding that implements a click handler:\n-->\n<p>아래 예제는 클릭 이벤트에 <code>onClickMe()</code> 핸들러를 바인딩하는 예제 코드입니다.</p>\n<code-example path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-button\" header=\"src/app/click-me.component.ts\">\n&#x3C;button (click)=\"onClickMe()\">Click me!&#x3C;/button>\n\n</code-example>\n<a id=\"click\"></a>\n<!--\nThe `(click)` to the left of the equals sign identifies the button's click event as the **target of the binding**.\nThe text in quotes to the right of the equals sign\nis the **template statement**, which responds\nto the click event by calling the component's `onClickMe` method.\n-->\n<p><strong>바인딩 대상</strong>은 등호(<code>=</code>) 왼쪽에 사용된 <code>(click)</code>이며, 버튼이 클릭되었을 때 발생하는 이벤트를 뜻합니다.\n그리고 등호 오른쪽에 있는 문자열은 <strong>템플릿 실행문</strong>이며, 클릭 이벤트가 발생했을 때 <code>onClickMe</code> 메소드를 실행하도록 작성했습니다.</p>\n<!--\nWhen writing a binding, be aware of a template statement's **execution context**.\nThe identifiers in a template statement belong to a specific context object,\nusually the Angular component controlling the template.\nThe example above shows a single line of HTML, but that HTML belongs to a larger component:\n-->\n<p>이벤트를 바인딩 할 때는 템플릿 실행문이 <strong>실행되는 컨텍스트</strong>가 유효한지 확인해야 합니다.\n템플릿 실행문의 컨텍스트는 보통 그 템플릿을 조작하는 컴포넌트로 제한되어 있습니다.\n이 예제를 컴포넌트 클래스 코드와 함께 확인해 봅시다:</p>\n<code-example path=\"user-input/src/app/click-me.component.ts\" region=\"click-me-component\" header=\"src/app/click-me.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-click-me',\n  template: `\n    &#x3C;button (click)=\"onClickMe()\">Click me!&#x3C;/button>\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n</code-example>\n<!--\nWhen the user clicks the button, Angular calls the `onClickMe` method from `ClickMeComponent`.\n-->\n<p>사용자가 버튼을 클릭하면 Angular가 <code>ClickMeComponent</code>에 있는 <code>onClickMe</code> 메소드를 실행합니다.</p>\n<!--\n## Get user input from the $event object\n-->\n<h2 id=\"event-객체에서-입력값-확인하기\">$event 객체에서 입력값 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#event-객체에서-입력값-확인하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nDOM events carry a payload of information that may be useful to the component.\nThis section shows how to bind to the `keyup` event of an input box to get the user's input after each keystroke.\n\nThe following code listens to the `keyup` event and passes the entire event payload (`$event`) to the component event handler.\n-->\n<p>DOM 이벤트에는 컴포넌트에서 활용할 수 있는 정보가 함께 전달됩니다.\n이번에는 입력 필드에서 사용자가 키를 입력했을 때 발생하는 <code>keyup</code> 이벤트를 어떻게 활용할 수 있는지 알아봅시다.</p>\n<p><code>keyup</code> 이벤트가 발생할 때 생성되는 이벤트 객체(<code>$event</code>)를 컴포넌트의 이벤트 핸들러로 전달하려면 다음과 같이 작성합니다.</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-template\" header=\"src/app/keyup.components.ts (template v.1)\">\ntemplate: `\n  &#x3C;input (keyup)=\"onKey($event)\">\n  &#x3C;p>{{values}}&#x3C;/p>\n`\n\n</code-example>\n<!--\nWhen a user presses and releases a key, the `keyup` event occurs, and Angular provides a corresponding\nDOM event object in the `$event` variable which this code passes as a parameter to the component's `onKey()` method.\n-->\n<p>사용자가 키를 눌렀다가 떼면 <code>keyup</code> 이벤트가 발생되며, Angular는 이 이벤트를 <code>$event</code> 변수에 할당했다가 템플릿 실행문에 지정된 대로 <code>onKey()</code> 메소드의 인자로 전달합니다.</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class-no-type\" header=\"src/app/keyup.components.ts (class v.1)\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  onKey(event: any) { // 타입을 지정하지 않은 경우\n    this.values += event.target.value + ' | ';\n  }\n}\n\n</code-example>\n<!--\nThe properties of an `$event` object vary depending on the type of DOM event. For example,\na mouse event includes different information than a input box editing event.\n-->\n<p><code>$event</code> 객체의 프로퍼티는 발생하는 DOM 이벤트에 따라 달라집니다.\n그래서 마우스 이벤트와 입력 필드에서 발생하는 이벤트의 구성은 다릅니다.</p>\n<!--\nAll [standard DOM event objects](https://developer.mozilla.org/en-US/docs/Web/API/Event)\nhave a `target` property, a reference to the element that raised the event.\nIn this case, `target` refers to the [`<input>` element](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement) and\n`event.target.value` returns the current contents of that element.\n-->\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">표준 DOM 이벤트 객체</a>에는 이벤트가 발생한 엘리먼트를 가리키는 <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> 프로퍼티가 있습니다.\n이 예제에서는 <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> 프로퍼티가 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\"><code>&#x3C;input></code> 엘리먼트</a>를 가리키며, 이 입력 필드의 현재값은 <code>event.target.value</code> 프로퍼티를 참조해서 확인할 수 있습니다.</p>\n<!--\nAfter each call, the `onKey()` method appends the contents of the input box value to the list\nin the component's `values` property, followed by a separator character (|).\nThe [interpolation](guide/template-syntax#interpolation)\ndisplays the accumulating input box changes from the `values` property.\n-->\n<p><code>onKey()</code> 메소드가 실행될 때마다 변하는 값을 컴포넌트의 <code>values</code> 프로퍼티에 할당해서 화면에 표시해 봅시다.\n위 코드는 이벤트가 발생할 때마다 현재값에 구분 기호(|)를 붙여서 계속 연결하며, 템플릿에는 <a href=\"guide/template-syntax#interpolation\">문자열 바인딩</a>으로 연결했습니다.</p>\n<!--\nSuppose the user enters the letters \"abc\", and then backspaces to remove them one by one.\nHere's what the UI displays:\n-->\n<p>사용자가 \"abc\"를 차례대로 입력한 이후에 백스페이스로 모두 지웠다고 합시다.\n그러면 화면에는 다음과 같이 표시됩니다:</p>\n<code-example>\n  a | ab | abc | ab | a | |\n</code-example>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/keyup1-anim.gif\" alt=\"key up 1\" width=\"176\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<!--\nAlternatively, you could accumulate the individual keys themselves by substituting `event.key`\nfor `event.target.value` in which case the same user input would produce:\n-->\n<p><code>event.target.value</code> 대신 <code>event.key</code>를 사용하면 어떤 키가 입력되었는지 확인할 수도 있습니다:</p>\n<code-example>\n  a | b | c | backspace | backspace | backspace |\n\n</code-example>\n</div>\n<a id=\"keyup1\"></a>\n<!--\n### Type the _$event_\n-->\n<h3 id=\"event-객체의-타입\"><em>$event</em> 객체의 타입<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#event-객체의-타입\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe example above casts the `$event` as an `any` type.\nThat simplifies the code at a cost.\nThere is no type information\nthat could reveal properties of the event object and prevent silly mistakes.\n\nThe following example rewrites the method with types:\n-->\n<p>위에서 살펴본 예제에서는 <code>$event</code> 객체를 <code>any</code> 타입으로 사용했습니다.\n이렇게 사용하면 코드가 간단해지기는 하지만, 이벤트 객체의 타입을 특정할 수 없기 때문에 이벤트 객체의 정보를 활용할 수 없고 코딩 실수를 할 가능성도 있습니다.</p>\n<p>그래서 다음 예제는 인자로 받는 이벤트 객체에 다음과 같이 타입을 지정했습니다:</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-1-class\" header=\"src/app/keyup.components.ts (class v.1 - typed )\">\nexport class KeyUpComponent_v1 {\n  values = '';\n\n\n&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n  onKey(event: KeyboardEvent) { // 타입을 지정한 경우\n    this.values += (&#x3C;HTMLInputElement>event.target).value + ' | ';\n=======\n  onKey(event: KeyboardEvent) { // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n>>>>>>> ae0253f34adad0e37d2a5e6596a08aa049ba3072\n  }\n}\n\n</code-example>\n<!--\nThe `$event` is now a specific `KeyboardEvent`.\nNot all elements have a `value` property so it casts `target` to an input element.\nThe `OnKey` method more clearly expresses what it expects from the template and how it interprets the event.\n-->\n<p>이제 <code>$event</code> 객체는 <code>KeyboardEvent</code> 타입으로 지정했습니다.\n그래서 모든 엘리먼트가 <code>value</code> 프로퍼티를 갖기는 하지만, 이 이벤트의 <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> 프로퍼티는 입력 필드라는 것이 명확해졌습니다.\n결국 <code>onKey</code> 메소드는 템플릿에서 어떤 타입의 인자를 받아야 하는지 좀 더 활실해졌고, 이 인자를 어떻게 활용할 수 있는지에 대해서도 더 많은 정보를 제공할 수 있습니다.</p>\n<!--\n### Passing _$event_ is a dubious practice\n-->\n<h3 id=\"event-객체를-그대로-전달하는-것이-좋을까\"><em>$event</em> 객체를 그대로 전달하는 것이 좋을까?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#event-객체를-그대로-전달하는-것이-좋을까\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTyping the event object reveals a significant objection to passing the entire DOM event into the method:\nthe component has too much awareness of the template details.\nIt can't extract information without knowing more than it should about the HTML implementation.\nThat breaks the separation of concerns between the template (_what the user sees_)\nand the component (_how the application processes user data_).\n\nThe next section shows how to use template reference variables to address this problem.\n-->\n<p>이벤트 객체에 타입을 지정하면 이벤트 핸들러 함수에 어떤 이벤트가 전달되는지 확실하게 확인할 수 있지만, 이벤트 핸들러가 템플릿을 신경써야 한다는 문제가 있습니다.\n이벤트 객체에서 원하는 정보를 참조하려면 템플릿의 어떤 엘리먼트에서 이벤트가 발생했는지 알아야 하기 때문입니다.\n이런 상황은 <em>사용자가 보는</em> 템플릿과 <em>데이터를 처리하는</em> 컴포넌트가 분리되어야 한다는 관점에서도 좋지 않습니다.</p>\n<p>이번에는 템플릿 참조 변수를 활용해서 이 문제를 어떻게 해결할 수 있는지 알아봅시다.</p>\n<!--\n## Get user input from a template reference variable\n-->\n<h2 id=\"템플릿-참조-변수로-사용자-입력-확인하기\">템플릿 참조 변수로 사용자 입력 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#템플릿-참조-변수로-사용자-입력-확인하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThere's another way to get the user data: use Angular\n[**template reference variables**](guide/template-syntax#ref-vars).\nThese variables provide direct access to an element from within the template.\nTo declare a template reference variable, precede an identifier with a hash (or pound) character (#).\n\nThe following example uses a template reference variable\nto implement a keystroke loopback in a simple template.\n-->\n<p>Angular에서 제공하는 <a href=\"guide/template-syntax#ref-vars\"><strong>템플릿 참조 변수</strong></a>를 사용해서 사용자가 입력한 데이터를 확인해 봅시다.\n이 방법을 사용하면 템플릿 안에서 엘리먼트에 직접 접근할 수 있습니다.\n먼저, 템플릿 참조 변수를 선언하기 위해 엘리먼트에 해시 기호(<code>#</code>)를 붙여 변수를 선언합니다.</p>\n<p>다음 예제는 템플릿 참조 변수를 활용하는 방법으로 템플릿에서 키 입력을 확인하는 예제입니다.</p>\n<code-example path=\"user-input/src/app/loop-back.component.ts\" region=\"loop-back-component\" header=\"src/app/loop-back.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-loop-back',\n  template: `\n    &#x3C;input #box (keyup)=\"0\">\n    &#x3C;p>{{box.value}}&#x3C;/p>\n  `\n})\nexport class LoopbackComponent { }\n\n</code-example>\n<!--\nThe template reference variable named `box`, declared on the `<input>` element,\nrefers to the `<input>` element itself.\nThe code uses the `box` variable to get the input element's `value` and display it\nwith interpolation between `<p>` tags.\n\nThe template is completely self contained. It doesn't bind to the component,\nand the component does nothing.\n\nType something in the input box, and watch the display update with each keystroke.\n-->\n<p>이 예제에서 <code>&#x3C;input></code> 엘리먼트에 선언된 템플릿 참조 변수 <code>box</code>는 <code>&#x3C;input></code> 엘리먼트를 자체를 가리킵니다.\n그리고 템플릿 안에서 <code>box</code> 변수의 <code>value</code> 프로퍼티를 참조하면 템플릿 안에서 입력 필드의 현재값을 참조할 수 있으며, 이 코드에서는 입력 필드의 현재값을 <code>&#x3C;p></code> 태그 안에 표시합니다.</p>\n<p>이 예제에서 템플릿은 그 자체로 동작합니다. 템플릿에는 컴포넌트와 바인딩 된 프로퍼티는 아무것도 없으며, 컴포넌트가 하는 동작도 없습니다.</p>\n<p>이제 입력 필드에 글자를 입력하면 키 입력이 있을 때마다 화면에 표시되는 값이 갱신됩니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/keyup-loop-back-anim.gif\" alt=\"loop back\" width=\"204\" height=\"100\">\n</div>\n<div class=\"alert is-helpful\">\n<!--\n**This won't work at all unless you bind to an event**.\n\nAngular updates the bindings (and therefore the screen)\nonly if the app does something in response to asynchronous events, such as keystrokes.\nThis example code binds the `keyup` event\nto the number 0, the shortest template statement possible.\nWhile the statement does nothing useful,\nit satisfies Angular's requirement so that Angular will update the screen.\n-->\n<p><strong>이 예제는 이벤트 바인딩을 해야 동작합니다</strong>.</p>\n<p>Angular는 키입력과 같은 비동기 이벤트가 발생할 때만 바인딩을 갱신하고 화면도 갱신합니다.\n그래서 이 예제에서는 <code>keyup</code> 이벤트에 0을 바인딩하고 있는데, 이것은 템플릿 실행문을 바인딩하는 가장 간단한 방법입니다.\n이 템플릿 실행문은 그 자체로 아무 의미가 없지만, Angular가 화면을 갱신할 수 있도록 이벤트를 바인딩하는 입장에서는 꼭 필요한 구문입니다.</p>\n</div>\n<!--\nIt's easier to get to the input box with the template reference\nvariable than to go through the `$event` object. Here's a rewrite of the previous\n`keyup` example that uses a template reference variable to get the user's input.\n-->\n<p>템플릿 참조 변수는 <code>$event</code> 객체를 직접 활용하는 방법이 더 간단합니다. 위에서 살펴본 <code>keyup</code> 예제를 더 나은 방식으로 개선하면 다음과 같이 활용할 수 있습니다.</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-2\" header=\"src/app/keyup.components.ts (v2)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up2',\n  template: `\n    &#x3C;input #box (keyup)=\"onKey(box.value)\">\n    &#x3C;p>{{values}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n</code-example>\n<!--\nA nice aspect of this approach is that the component gets clean data values from the view.\nIt no longer requires knowledge of the `$event` and its structure.\n-->\n<p>이 방식은 컴포넌트에서도 다른 것은 신경쓰지 않고 입력 필드의 데이터만 받을 수 있기 때문에 좋습니다.\n컴포넌트는 더이상 템플릿의 구조나 <code>$event</code> 객체의 타입을 신경쓸 필요가 없습니다.</p>\n<a id=\"key-event\"></a>\n<!--\n## Key event filtering (with `key.enter`)\n-->\n<h2 id=\"키-입력-필터링-keyenter\">키 입력 필터링 (<code>key.enter</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#키-입력-필터링-keyenter\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `(keyup)` event handler hears *every keystroke*.\nSometimes only the _Enter_ key matters, because it signals that the user has finished typing.\nOne way to reduce the noise would be to examine every `$event.keyCode` and take action only when the key is _Enter_.\n\nThere's an easier way: bind to Angular's `keyup.enter` pseudo-event.\nThen Angular calls the event handler only when the user presses _Enter_.\n-->\n<p><code>(keyup)</code> 이벤트 바인딩은 <em>모든 키 입력</em>에 반응합니다.\n하지만 사용자가 입력을 끝내는 <em>엔터 키</em> 에만 반응하고 싶다면, 키 이벤트를 바인딩 할 때 <code>$event.keyCode</code>를 사용해서 <em>엔터 키</em> 만 반응하도록 필터링할 수 있습니다.</p>\n<p>이 때 Angular는 좀 더 간단한 문법을 제공합니다. 템플릿에서 <code>keyup.enter</code>라고 바인딩하면 엔터키가 입력되었을 떄만 이벤트 핸들러를 실행할 수 있습니다.</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-3\" header=\"src/app/keyup.components.ts (v3)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up3',\n  template: `\n    &#x3C;input #box (keyup.enter)=\"onEnter(box.value)\">\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}\n\n</code-example>\n<!--\nHere's how it works.\n-->\n<p>이 예제는 다음과 같이 동작합니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/keyup3-anim.gif\" alt=\"key up 3\" width=\"280\" height=\"100\">\n</div>\n<!--\n## On blur\n-->\n<h2 id=\"포커스를-잃을-때\">포커스를 잃을 때<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#포커스를-잃을-때\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIn the previous example, the current state of the input box\nis lost if the user mouses away and clicks elsewhere on the page\nwithout first pressing _Enter_.\nThe component's `value` property is updated only when the user presses _Enter_.\n\nTo fix this issue, listen to both the _Enter_ key and the _blur_ event.\n-->\n<p>위에서 살펴본 예제에서는 사용자가 입력 필드 밖을 마우스로 클릭하면 <em>엔터 키</em> 를 입력하지 않아도 포커스를 잃어버리며, <code>&#x3C;p></code> 엘리먼트의 값도 갱신되지 않습니다.\n이 예제는 <em>엔터 키</em> 가 입력되었을 때만 <code>value</code> 프로퍼티를 갱신하기 때문입니다.</p>\n<p>이 문제를 해결하기 위해 <em>엔터 키</em> 와 <em>blur</em> 이벤트 모두 반응하는 방식으로 바꿔봅시다.</p>\n<code-example path=\"user-input/src/app/keyup.components.ts\" region=\"key-up-component-4\" header=\"src/app/keyup.components.ts (v4)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up4',\n  template: `\n    &#x3C;input #box\n      (keyup.enter)=\"<a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a>(box.value)\"\n      (blur)=\"<a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a>(box.value)\">\n\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a>(value: string) { this.value = value; }\n}\n\n</code-example>\n<!--\n## Put it all together\n-->\n<h2 id=\"모든-기능-활용해보기\">모든 기능 활용해보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#모든-기능-활용해보기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe previous page showed how to [display data](guide/displaying-data).\nThis page demonstrated event binding techniques.\n\nNow, put it all together in a micro-app\nthat can display a list of heroes and add new heroes to the list.\nThe user can add a hero by typing the hero's name in the input box and\nclicking **Add**.\n-->\n<p>이전 가이드에서는 <a href=\"guide/displaying-data\">데이터를 어떻게 화면에 표시하는지</a> 알아봤고,\n이 문서에서는 이벤트 바인딩 테크닉에 대해 알아봤습다.</p>\n<p>히어로의 목록을 표시하고, 이 목록에 히어로를 추가할 수 있는 앱을 간단하게 만들어 봅시다.\n사용자는 히어로의 이름을 입력 필드에 입력하고 <strong>Add</strong> 버튼을 눌러서 이 히어로의 이름을 목록을 추가할 수 있습니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/user-input/little-tour-anim.gif\" alt=\"Little Tour of Heroes\" width=\"472\" height=\"268\">\n</div>\n<!--\nBelow is the \"Little Tour of Heroes\"  component.\n-->\n<p>그리고 다음 코드는 \"Little Tour of Heroes\"에서 사용한 컴포넌트입니다.</p>\n<code-example path=\"user-input/src/app/little-tour.component.ts\" region=\"little-tour\" header=\"src/app/little-tour.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-little-tour',\n  template: `\n    &#x3C;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \">\n\n    &#x3C;button (click)=\"addHero(newHero.value)\">Add&#x3C;/button>\n\n    &#x3C;ul>&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero}}&#x3C;/li>&#x3C;/ul>\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n</code-example>\n<!--\n### Observations\n-->\n<h3 id=\"코드-분석\">코드 분석<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#코드-분석\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n* **Use template variables to refer to elements** &mdash;\nThe `newHero` template variable refers to the `<input>` element.\nYou can reference `newHero` from any sibling or child of the `<input>` element.\n-->\n<ul>\n<li><strong>엘리먼트 대신 템플릿 변수를 활용하세요.</strong> — 템플릿 변수 <code>newHero</code>는 <code>&#x3C;input></code> 엘리먼트를 가리킵니다. 템플릿 변수를 활용하면 엘리먼트를 간단하게 참조할 수 있습니다.</li>\n</ul>\n<!--\n* **Pass values, not elements** &mdash;\nInstead of passing the `newHero` into the component's `addHero` method,\nget the input box value and pass *that* to `addHero`.\n-->\n<ul>\n<li><strong>엘리먼트를 전달하지 말고 값을 전달하세요.</strong> — 컴포넌트의 <code>addHero</code> 메소드에는 <code>newHero</code> 변수를 그대로 전달하지 말고, <code>addHero</code> 메소드에서 필요한 입력 필드의 값만 전달하는 것이 좋습니다.</li>\n</ul>\n<!--\n* **Keep template statements simple** &mdash;\nThe `(blur)` event is bound to two JavaScript statements.\nThe first statement calls `addHero`. The second statement, `newHero.value=''`,\nclears the input box after a new hero is added to the list.\n-->\n<ul>\n<li><strong>템플릿 실행문은 간단하게 작성하세요.</strong> —\n이 코드에서 <code>(blur)</code> 이벤트는 JavaScript 실행문 2개를 실행합니다.\n하나는 <code>addHero</code> 메소드를 실행하는 것이고, 다른 하나는 히어로가 배열에 추가된 이후에 입력 필드에 입력된 값을 지우기 위해 <code>newHero.value=''</code>를 실행하는 것입니다.</li>\n</ul>\n<!--\n## Source code\n-->\n<h2 id=\"소스-코드\">소스 코드<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#소스-코드\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nFollowing is all the code discussed in this page.\n-->\n<p>이 문서에서 다룬 코드를 모두 살펴봅시다.</p>\n<code-tabs>\n\n  <code-pane header=\"click-me.component.ts\" path=\"user-input/src/app/click-me.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-click-me',\n  template: `\n    &#x3C;button (click)=\"onClickMe()\">Click me!&#x3C;/button>\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"keyup.components.ts\" path=\"user-input/src/app/keyup.components.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up1',\n  template: `\n    &#x3C;input (keyup)=\"onKey($event)\">\n    &#x3C;p>{{values}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  /*\n  onKey(event: any) { // 타입을 지정하지 않은 경우\n    this.values += event.target.value + ' | ';\n  }\n  */\n\n&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; HEAD\n  onKey(event: KeyboardEvent) { // 타입을 지정한 경우\n    this.values += (&#x3C;HTMLInputElement>event.target).value + ' | ';\n=======\n  onKey(event: KeyboardEvent) { // with type info\n    this.values += (event.target as HTMLInputElement).value + ' | ';\n>>>>>>> ae0253f34adad0e37d2a5e6596a08aa049ba3072\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up2',\n  template: `\n    &#x3C;input #box (keyup)=\"onKey(box.value)\">\n    &#x3C;p>{{values}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up3',\n  template: `\n    &#x3C;input #box (keyup.enter)=\"onEnter(box.value)\">\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v3 {\n  value = '';\n  onEnter(value: string) { this.value = value; }\n}\n\n//////////////////////////////////////////\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-key-up4',\n  template: `\n    &#x3C;input #box\n      (keyup.enter)=\"<a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a>(box.value)\"\n      (blur)=\"<a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a>(box.value)\">\n\n    &#x3C;p>{{value}}&#x3C;/p>\n  `\n})\nexport class KeyUpComponent_v4 {\n  value = '';\n  <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a>(value: string) { this.value = value; }\n}\n\n\n</code-pane>\n\n  <code-pane header=\"loop-back.component.ts\" path=\"user-input/src/app/loop-back.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-loop-back',\n  template: `\n    &#x3C;input #box (keyup)=\"0\">\n    &#x3C;p>{{box.value}}&#x3C;/p>\n  `\n})\nexport class LoopbackComponent { }\n\n\n</code-pane>\n\n  <code-pane header=\"little-tour.component.ts\" path=\"user-input/src/app/little-tour.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-little-tour',\n  template: `\n    &#x3C;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \">\n\n    &#x3C;button (click)=\"addHero(newHero.value)\">Add&#x3C;/button>\n\n    &#x3C;ul>&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">{{hero}}&#x3C;/li>&#x3C;/ul>\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<!--\n## Summary\n-->\n<h2 id=\"정리\">정리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/user-input#정리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou have mastered the basic primitives for responding to user input and gestures.\n\nThese techniques are useful for small-scale demonstrations, but they\nquickly become verbose and clumsy when handling large amounts of user input.\nTwo-way data binding is a more elegant and compact way to move\nvalues between data entry fields and model properties.\nThe next page, `Forms`, explains how to write\ntwo-way bindings with `NgModel`.\n-->\n<p>이 문서에서는 사용자 입력에 반응하는 방법을 간단하게 알아봤습니다.</p>\n<p>이 테크닉은 작은 앱에서는 물론이고, 복잡한 사용자 동작에 반응할 때도 계속 사용됩니다.\n그리고 복잡한 폼이나 모델을 다룬다면 양방향 데이터 바인딩을 사용하는 것이 좀 더 간단하고 자연스럽게 사용자 반응에 동작할 수 있는 방법이 될 수 있습니다.\n다음 가이드에서는 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>을 활용하는 양방향 바인딩에 대해 알아봅니다.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/forms\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/Component\n - api/forms/NgModel\n - api/forms/NgModel#update\n - api/router/RouterLinkWithHref#target\n - guide/displaying-data\n - guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%8B%A4%ED%96%89%EB%AC%B8\n - guide/template-syntax#interpolation\n - guide/template-syntax#ref-vars\n - guide/user-input#event-객체를-그대로-전달하는-것이-좋을까\n - guide/user-input#event-객체에서-입력값-확인하기\n - guide/user-input#event-객체의-타입\n - guide/user-input#모든-기능-활용해보기\n - guide/user-input#사용자-동작-이벤트-바인딩하기\n - guide/user-input#사용자-입력\n - guide/user-input#소스-코드\n - guide/user-input#정리\n - guide/user-input#코드-분석\n - guide/user-input#키-입력-필터링-keyenter\n - guide/user-input#템플릿-참조-변수로-사용자-입력-확인하기\n - guide/user-input#포커스를-잃을-때\n - https://developer.mozilla.org/en-US/docs/Web/API/Event\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://github.com/angular/angular/edit/master/aio/content/guide/user-input.md?message=docs%3A%20describe%20your%20change...\n-->"
}