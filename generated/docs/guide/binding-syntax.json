{
  "id": "guide/binding-syntax",
  "title": "Binding syntax: an overview",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/binding-syntax.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"binding-syntax-an-overview\">Binding syntax: an overview<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#binding-syntax-an-overview\"><i class=\"material-icons\">link</i></a></h1>\n<p>Data-binding is a mechanism for coordinating what users see, specifically\nwith application data values.\nWhile you could push values to and pull values from HTML,\nthe application is easier to write, read, and maintain if you turn these tasks over to a binding framework.\nYou simply declare bindings between binding sources, target HTML elements, and let the framework do the rest.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<p>Angular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:</p>\n<ul>\n<li>From the <em>source-to-view</em></li>\n<li>From <em>view-to-source</em></li>\n<li>Two-way sequence: <em>view-to-source-to-view</em></li>\n</ul>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"30%\">\n  \n  <col width=\"50%\">\n  \n  <col width=\"20%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Category\n    </th>\n  </tr>\n  <tr>\n     <td>\n      Interpolation<br>\n      Property<br>\n      Attribute<br>\n      Class<br>\n      Style\n    </td>\n    <td>\n      <code-example>\n        {{expression}}\n        [target]=\"expression\"\n        bind-target=\"expression\"\n      </code-example>\n    </td>\n    <td>\n      One-way<br>from data source<br>to view target\n    </td>\n    </tr><tr>\n      <td>\n        Event\n      </td>\n      <td>\n        <code-example>\n          (target)=\"statement\"\n          on-target=\"statement\"\n        </code-example>\n      </td>\n      <td>\n        One-way<br>from view target<br>to data source\n      </td>\n    </tr>\n    <tr>\n      <td>\n        Two-way\n      </td>\n      <td>\n        <code-example>\n          [(target)]=\"expression\"\n          bindon-target=\"expression\"\n        </code-example>\n      </td>\n      <td>\n        Two-way\n      </td>\n    </tr>\n  \n</tbody></table>\n<p>Binding types other than interpolation have a <strong>target name</strong> to the left of the equal sign, either surrounded by punctuation, <code>[]</code> or <code>()</code>,\nor preceded by a prefix: <code>bind-</code>, <code>on-</code>, <code>bindon-</code>.</p>\n<p>The <em>target</em> of a binding is the property or event inside the binding punctuation: <code>[]</code>, <code>()</code> or <code>[()]</code>.</p>\n<p>Every public member of a <strong>source</strong> directive is automatically available for binding.\nYou don't have to do anything special to access a directive member in a template expression or statement.</p>\n<h3 id=\"data-binding-and-html\">Data-binding and HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#data-binding-and-html\"><i class=\"material-icons\">link</i></a></h3>\n<p>In the normal course of HTML development, you create a visual structure with HTML elements, and\nyou modify those elements by setting element attributes with string constants.</p>\n<code-example language=\"html\">\n&#x3C;div class=\"special\">Plain old HTML&#x3C;/div>\n&#x3C;img src=\"images/item.png\">\n&#x3C;button disabled>Save&#x3C;/button>\n</code-example>\n<p>With data-binding, you can control things like the state of a button:</p>\n<code-example path=\"binding-syntax/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- 버튼의 활성화 여부를 `isUnchanged` 프로퍼티와 바인딩합니다. -->\n&#x3C;button [disabled]=\"isUnchanged\">Save&#x3C;/button>\n\n</code-example>\n<p>Notice that the binding is to the <code>disabled</code> property of the button's DOM element,\n<strong>not</strong> the attribute. This applies to data-binding in general. Data-binding works with <em>properties</em> of DOM elements, components, and directives, not HTML <em>attributes</em>.</p>\n<a id=\"html-attribute-vs-dom-property\"></a>\n<h3 id=\"html-attribute-vs-dom-property\">HTML attribute vs. DOM property<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#html-attribute-vs-dom-property\"><i class=\"material-icons\">link</i></a></h3>\n<p>The distinction between an HTML attribute and a DOM property is key to understanding\nhow Angular binding works. <strong>Attributes are defined by HTML. Properties are accessed from DOM (Document Object Model) nodes.</strong></p>\n<ul>\n<li>\n<p>A few HTML attributes have 1:1 mapping to properties; for example, <code>id</code>.</p>\n</li>\n<li>\n<p>Some HTML attributes don't have corresponding properties; for example, <code>aria-*</code>.</p>\n</li>\n<li>\n<p>Some DOM properties don't have corresponding attributes; for example, <code>textContent</code>.</p>\n</li>\n</ul>\n<p>It is important to remember that <em>HTML attribute</em> and the <em>DOM property</em> are different things, even when they have the same name.\nIn Angular, the only role of HTML attributes is to initialize element and directive state.</p>\n<p><strong>Template binding works with <em>properties</em> and <em>events</em>, not <em>attributes</em>.</strong></p>\n<p>When you write a data-binding, you're dealing exclusively with the <em>DOM properties</em> and <em>events</em> of the target object.</p>\n<div class=\"alert is-helpful\">\n<p>This general rule can help you build a mental model of attributes and DOM properties:\n<strong>Attributes initialize DOM properties and then they are done.\nProperty values can change; attribute values can't.</strong></p>\n<p>There is one exception to this rule.\nAttributes can be changed by <code>setAttribute()</code>, which re-initializes corresponding DOM properties.</p>\n</div>\n<p>For more information, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\">MDN Interfaces documentation</a> which has API docs for all the standard DOM elements and their properties.\nComparing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"><code>&#x3C;td></code> attributes</a> attributes to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\"><code>&#x3C;td></code> properties</a> provides a helpful example for differentiation.\nIn particular, you can navigate from the attributes page to the properties via \"DOM interface\" link, and navigate the inheritance hierarchy up to <code>HTMLTableCellElement</code>.</p>\n<h4 id=\"example-1-an-input\">Example 1: an <code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#example-1-an-input\"><i class=\"material-icons\">link</i></a></h4>\n<p>When the browser renders <code>&#x3C;input type=\"text\" value=\"Sarah\"></code>, it creates a\ncorresponding DOM node with a <code>value</code> property initialized to \"Sarah\".</p>\n<code-example language=\"html\">\n&#x3C;input type=\"text\" value=\"Sarah\">\n</code-example>\n<p>When the user enters \"Sally\" into the <code>&#x3C;input></code>, the DOM element <code>value</code> <em>property</em> becomes \"Sally\".\nHowever, if you look at the HTML attribute <code>value</code> using <code>input.getAttribute('value')</code>, you can see that the <em>attribute</em> remains unchanged—it returns \"Sarah\".</p>\n<p>The HTML attribute <code>value</code> specifies the <em>initial</em> value; the DOM <code>value</code> property is the <em>current</em> value.</p>\n<p>To see attributes versus DOM properties in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax.</p>\n<h4 id=\"example-2-a-disabled-button\">Example 2: a disabled button<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#example-2-a-disabled-button\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>disabled</code> attribute is another example. A button's <code>disabled</code>\n<em>property</em> is <code>false</code> by default so the button is enabled.</p>\n<p>When you add the <code>disabled</code> <em>attribute</em>, its presence alone\ninitializes the button's <code>disabled</code> <em>property</em> to <code>true</code>\nso the button is disabled.</p>\n<code-example language=\"html\">\n&#x3C;button disabled>Test Button&#x3C;/button>\n</code-example>\n<p>Adding and removing the <code>disabled</code> <em>attribute</em> disables and enables the button.\nHowever, the value of the <em>attribute</em> is irrelevant,\nwhich is why you cannot enable a button by writing <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code>.</p>\n<p>To control the state of the button, set the <code>disabled</code> <em>property</em>,</p>\n<div class=\"alert is-helpful\">\n<p>Though you could technically set the <code>[attr.disabled]</code> attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is <code>null</code> or not. Consider the following:</p>\n<code-example language=\"html\">\n&#x3C;input [disabled]=\"condition ? true : false\">\n&#x3C;input [attr.disabled]=\"condition ? 'disabled' : null\">\n</code-example>\n<p>Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</p>\n</div>\n<p>To see the <code>disabled</code> button example in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax. This example shows you how to toggle the disabled property from the component.</p>\n<h2 id=\"binding-types-and-targets\">Binding types and targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/binding-syntax#binding-types-and-targets\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <strong>target of a data-binding</strong> is something in the DOM.\nDepending on the binding type, the target can be a property (element, component, or directive),\nan event (element, component, or directive), or sometimes an attribute name.\nThe following table summarizes the targets for the different binding types.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"10%\">\n  \n  <col width=\"15%\">\n  \n  <col width=\"75%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Type\n    </th>\n    <th>\n      Target\n    </th>\n    <th>\n      Examples\n    </th>\n  </tr>\n  <tr>\n    <td>\n      Property\n    </td>\n    <td>\n      Element property<br>\n      Component property<br>\n      Directive property\n    </td>\n    <td>\n      <code>src</code>, <code>hero</code>, and <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> in the following:\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\">\n&#x3C;img [src]=\"heroImageUrl\">\n&#x3C;app-hero-detail [hero]=\"currentHero\">&#x3C;/app-hero-detail>\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example>\n      <!-- For more information, see [Property Binding](guide/property-binding). -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Event\n    </td>\n    <td>\n      Element event<br>\n      Component event<br>\n      Directive event\n    </td>\n    <td>\n      <code>click</code>, <code>deleteRequest</code>, and <code>myClick</code> in the following:\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;app-hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/app-hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example>\n      <!-- KW--Why don't these links work in the table? -->\n      <!-- <div>For more information, see [Event Binding](guide/event-binding).</div> -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Two-way\n    </td>\n    <td>\n      Event and property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Attribute\n    </td>\n    <td>\n      Attribute\n      (the exception)\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\">\n&#x3C;button [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Class\n    </td>\n    <td>\n      <code>class</code> property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Style\n    </td>\n    <td>\n      <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\">\n&#x3C;button [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example>\n    </td>\n  </tr>\n</tbody></table>\n\n</div>\n\n<!-- links to this doc:\n - guide/accessibility\n - guide/styleguide\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgClass\n - api/forms/NgModel\n - guide/binding-syntax#binding-syntax-an-overview\n - guide/binding-syntax#binding-types-and-targets\n - guide/binding-syntax#data-binding-and-html\n - guide/binding-syntax#example-1-an-input\n - guide/binding-syntax#example-2-a-disabled-button\n - guide/binding-syntax#html-attribute-vs-dom-property\n - https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n - https://github.com/angular/angular/edit/master/aio/content/guide/binding-syntax.md?message=docs%3A%20describe%20your%20change...\n-->"
}