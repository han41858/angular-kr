{
  "id": "guide/event-binding",
  "title": "Event binding (event)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/event-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"event-binding-event\">Event binding <code>(event)</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding#event-binding-event\"><i class=\"material-icons\">link</i></a></h1>\n<p>Event binding allows you to listen for certain events such as\nkeystrokes, mouse movements, clicks, and touches.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<p>Angular event binding syntax consists of a <strong>target event</strong> name\nwithin parentheses on the left of an equal sign, and a quoted\ntemplate statement on the right.\nThe following event binding listens for the button's click events, calling\nthe component's <code>onSave()</code> method whenever a click occurs:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/template-syntax/syntax-diagram.svg\" alt=\"Syntax diagram\" width=\"600\" height=\"125\">\n</div>\n<h2 id=\"target-event\">Target event<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding#target-event\"><i class=\"material-icons\">link</i></a></h2>\n<p>As above, the target is the button's click event.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-1\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n\n</code-example>\n<p>Alternatively, use the <code>on-</code> prefix, known as the canonical form:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-2\" header=\"src/app/app.component.html\">\n&#x3C;button on-click=\"onSave($event)\">on-click Save&#x3C;/button>\n\n</code-example>\n<p>Element events may be the more common targets, but Angular looks first to see if the name matches an event property\nof a known directive, as it does in the following example:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"custom-directive\" header=\"src/app/app.component.html\">\n&#x3C;h4>myClick is an event on the custom ClickDirective:&#x3C;/h4>\n&#x3C;button (myClick)=\"clickMessage=$event\" clickable>click with myClick&#x3C;/button>\n{{clickMessage}}\n\n</code-example>\n<p>If the name fails to match an element event or an output property of a known directive,\nAngular reports an “unknown directive” error.</p>\n<h2 id=\"event-and-event-handling-statements\"><em>$event</em> and event handling statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding#event-and-event-handling-statements\"><i class=\"material-icons\">link</i></a></h2>\n<p>In an event binding, Angular sets up an event handler for the target event.</p>\n<p>When the event is raised, the handler executes the template statement.\nThe template statement typically involves a receiver, which performs an action\nin response to the event, such as storing a value from the HTML control\ninto a model.</p>\n<p>The binding conveys information about the event. This information can include data values such as an event object, string, or number named <code>$event</code>.</p>\n<p>The target event determines the shape of the <code>$event</code> object.\nIf the target event is a native DOM element event, then <code>$event</code> is a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM event object</a>,\nwith properties such as <code>target</code> and <code>target.value</code>.</p>\n<p>Consider this example:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\" header=\"src/app/app.component.html\">\n&#x3C;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=$event.target.value\" >\nwithout <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>\n\n</code-example>\n<p>This code sets the <code>&#x3C;input></code> <code>value</code> property by binding to the <code>name</code> property.\nTo listen for changes to the value, the code binds to the <code>input</code>\nevent of the <code>&#x3C;input></code> element.\nWhen the user makes changes, the <code>input</code> event is raised, and the binding executes\nthe statement within a context that includes the DOM event object, <code>$event</code>.</p>\n<p>To update the <code>name</code> property, the changed text is retrieved by following the path <code>$event.target.value</code>.</p>\n<p>If the event belongs to a directive—recall that components\nare directives—<code>$event</code> has whatever shape the directive produces.</p>\n<h2 id=\"custom-events-with-eventemitter\">Custom events with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding#custom-events-with-eventemitter\"><i class=\"material-icons\">link</i></a></h2>\n<p>Directives typically raise custom events with an Angular <a href=\"api/core/EventEmitter\">EventEmitter</a>.\nThe directive creates an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> and exposes it as a property.\nThe directive calls <code>EventEmitter.emit(payload)</code> to fire an event, passing in a message payload, which can be anything.\nParent directives listen for the event by binding to this property and accessing the payload through the <code>$event</code> object.</p>\n<p>Consider an <code>ItemDetailComponent</code> that presents item information and responds to user actions.\nAlthough the <code>ItemDetailComponent</code> has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.</p>\n<p>Here are the pertinent excerpts from that <code>ItemDetailComponent</code>:</p>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.html\" header=\"src/app/item-detail/item-detail.component.html (template)\" region=\"line-through\">\n&#x3C;img src=\"{{itemImageUrl}}\" [style.display]=\"displayNone\">\n&#x3C;span [style.text-decoration]=\"lineThrough\">{{ item.name }}\n&#x3C;/span>\n&#x3C;button (click)=\"delete()\">Delete&#x3C;/button>\n\n</code-example>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.ts\" header=\"src/app/item-detail/item-detail.component.ts (deleteRequest)\" region=\"deleteRequest\">\n// 이 컴포넌트는 직접 히어로를 삭제하지 않고 히어로 삭제 요청을 보내기만 합니다.\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Item>();\n\ndelete() {\n  this.deleteRequest.emit(this.item);\n  this.displayNone = this.displayNone ? '' : 'none';\n  this.lineThrough = this.lineThrough ? '' : 'line-through';\n}\n\n</code-example>\n<p>The component defines a <code>deleteRequest</code> property that returns an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.\nWhen the user clicks <em>delete</em>, the component invokes the <code>delete()</code> method,\ntelling the <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> to emit an <code>Item</code> object.</p>\n<p>Now imagine a hosting parent component that binds to the <code>deleteRequest</code> event\nof the <code>ItemDetailComponent</code>.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" header=\"src/app/app.component.html (event-binding-to-component)\" region=\"event-binding-to-component\">\n&#x3C;app-item-detail (deleteRequest)=\"deleteItem($event)\" [item]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>When the <code>deleteRequest</code> event fires, Angular calls the parent component's\n<code>deleteItem()</code> method, passing the <em>item-to-delete</em> (emitted by <code>ItemDetail</code>)\nin the <code>$event</code> variable.</p>\n<h2 id=\"template-statements-have-side-effects\">Template statements have side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/event-binding#template-statements-have-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p>Though <a href=\"guide/interpolation#template-expressions\">template expressions</a> shouldn't have <a href=\"guide/property-binding#avoid-side-effects\">side effects</a>, template\nstatements usually do. The <code>deleteItem()</code> method does have\na side effect: it deletes an item.</p>\n<p>Deleting an item updates the model, and depending on your code, triggers\nother changes including queries and saving to a remote server.\nThese changes propagate through the system and ultimately display in this and other views.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/glossary\n - guide/inputs-outputs\n - guide/observables-in-angular\n - guide/property-binding\n - guide/template-syntax\n - guide/user-input\n - tutorial/toh-pt2\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/core/EventEmitter\n - api/core/Output\n - api/forms/NgModel\n - guide/event-binding#custom-events-with-eventemitter\n - guide/event-binding#event-and-event-handling-statements\n - guide/event-binding#event-binding-event\n - guide/event-binding#target-event\n - guide/event-binding#template-statements-have-side-effects\n - guide/interpolation#template-expressions\n - guide/property-binding#avoid-side-effects\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://github.com/angular/angular/edit/master/aio/content/guide/event-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}