{
  "id": "guide/feature-modules",
  "title": "기능 모듈",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/feature-modules.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Feature modules\n-->\n<h1 id=\"기능-모듈\">기능 모듈<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#기능-모듈\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nFeature modules are NgModules for the purpose of organizing code.\n-->\n<p>기능 모듈은 애플리케이션의 코드를 용도에 맞게 구분한 NgModule 단위입니다.</p>\n<p>다음 내용을 먼저 이해하고 이 문서를 보는 것이 좋습니다:</p>\n<ul>\n<li><a href=\"guide/bootstrapping\">부트스트랩</a></li>\n<li><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 모듈 vs. NgModules</a></li>\n<li><a href=\"guide/frequent-ngmodules\">자주 사용하는 NgModule</a></li>\n</ul>\n<!--\nFor the final sample app with a feature module that this page describes,\nsee the <live-example></live-example>.\n-->\n<p>이 문서에서 설명하는 예제의 최종 코드는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n<hr>\n<!--\nAs your app grows, you can organize code relevant for a specific feature.\nThis helps apply clear boundaries for features. With feature modules,\nyou can keep code related to a specific functionality or feature\nseparate from other code. Delineating areas of your\napp helps with collaboration between developers and teams, separating\ndirectives, and managing the size of the root module.\n-->\n<p>애플리케이션이 점점 커지면 코드를 기능별로 묶어서 구성하는 것이 관리하기에 좋습니다.\n코드를 기능 단위로 나누면 각 모듈이 담당하는 범위를 명확하게 구분할 수 있기 때문입니다.\n모듈의 범위를 명확하게 나누면 다른 개발자나 다른 팀과 협업할 때도 좀 더 편하고, 모듈안에 속하는 디렉티브를 효율적으로 구성할 수 있으며, 최상위 모듈의 크기를 작게 유지하는 측면에서도 좋습니다.</p>\n<!--\n## Feature modules vs. root modules\n-->\n<h2 id=\"기능-모듈-vs-앱-모듈\">기능 모듈 vs. 앱 모듈<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#기능-모듈-vs-앱-모듈\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA feature module is an organizational best practice, as opposed to a concept of the core Angular API. A feature module delivers a cohesive set of functionality focused on a\nspecific application need such as a user workflow, routing, or forms.\nWhile you can do everything within the root module, feature modules\nhelp you partition the app into focused areas. A feature module\ncollaborates with the root module and with other modules through\nthe services it provides and the components, directives, and\npipes that it shares.\n-->\n<p>기능 모듈은 사용자의 작업 흐름이나 라우팅 흐름, 폼 구성과 같이 특정 애플리케이션에서 사용하는 기능을 기준으로 구성하기 때문에, 관련된 기능을 묶어 기능 모듈로 구성하면  코드를 효율적으로 관리할 수 있습니다.\n하지만 기능 모듈을 따로 나눌 필요가 없는 경우에는 앱 모듈만으로도 모든 것을 처리할 수 있으며, 컴포넌트, 디렉티브, 파이프도 앱 모듈에 등록하고 사용할 수 있습니다.</p>\n<!--\n## How to make a feature module\n-->\n<h2 id=\"기능-모듈을-만드는-방법\">기능 모듈을 만드는 방법<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#기능-모듈을-만드는-방법\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAssuming you already have an app that you created with the [Angular CLI](cli), create a feature\nmodule using the CLI by entering the following command in the\nroot project directory. Replace `CustomerDashboard` with the\nname of your module. You can omit the \"Module\" suffix from the name because the CLI appends it:\n-->\n<p><a href=\"cli\">Angular CLI</a>로 애플리케이션을 생성했다면 기능 모듈을 생성하는 것도 간단합니다.\n프로젝트 폴더에서 CLI 명령을 실행하면 되는데, 이 때 모듈 이름을 <code>CustomerDashboard</code>로 지정해야 합니다.\nAngular CLI로 모듈을 생성하면 \"Module\" 접미사가 자동으로 붙습니다:</p>\n<code-example language=\"sh\">\nng generate module CustomerDashboard\n</code-example>\n<!--\nThis causes the CLI to create a folder called `customer-dashboard` with a file inside called `customer-dashboard.module.ts` with the following contents:\n-->\n<p>명령을 실행하면 <code>customer-dashboard</code> 폴더가 생성되고 이 폴더 안에 다음 내용으로 <code>customer-dashboard.module.ts</code> 파일이 생성됩니다:</p>\n<code-example language=\"typescript\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a> } from '@angular/common';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: []\n})\nexport class CustomerDashboardModule { }\n</code-example>\n<!--\nThe structure of an NgModule is the same whether it is a root module or a feature module. In the CLI generated feature module, there are two JavaScript import statements at the top of the file: the first imports `NgModule`, which, like the root module, lets you use the `@NgModule` decorator; the second imports `CommonModule`, which contributes many common directives such as `ngIf` and `ngFor`. Feature modules import `CommonModule` instead of `BrowserModule`, which is only imported once in the root module. `CommonModule` only contains information for common directives such as `ngIf` and `ngFor` which are needed in most templates, whereas `BrowserModule` configures the Angular app for the browser which needs to be done only once.\n-->\n<p>NgModule의 구조는 앱 모듈이나 기능 모듈이나 크게 다르지 않습니다. Angular CLI로 생성된 기능 모듈을 보면, 맨 위에 JavaScript <code>import</code> 구문이 있습니다. 이 구문에서 처음 불러온 것은 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 데코레이터 심볼이며, 두 번째는 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>나 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>와 같은 기본 디렉티브를 제공하는 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code> 입니다.\n이 때 기능 모듈에서는 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> 대신 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 로드해야 합니다. <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>은 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>나 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>와 같은 기본 디렉티브를 템플릿에서 사용할 수 있도록 하지만, <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>은 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>의 기능에 Angular 애플리케이션을 브라우저에서 실행하기 위한 설정을 추가합니다. 그래서 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>은 최상위 앱 모듈에서 딱 한 번만 로드해야 합니다.</p>\n<!--\nThe `declarations` array is available for you to add declarables, which\nare components, directives, and pipes that belong exclusively to this particular module. To add a component, enter the following command at the command line where `customer-dashboard` is the directory where the CLI generated the feature module and `CustomerDashboard` is the name of the component:\n-->\n<p><code>declarations</code> 배열에는 해당 모듈에 포함되는 컴포넌트나 디렉티브, 파이프를 등록합니다. Angular CLI로 컴포넌트를 생성할 때 특정 모듈 안에 포함되게 하려면 이전에 만들었던 기능 모듈의 폴더 위치를 지정하면 됩니다. 그래서 <code>CustomDashboardModule</code>에 포함되는 <code>CustomDashboardComponent</code>를 생성하려면 다음 명령을 실행합니다:</p>\n<code-example language=\"sh\">\nng generate component customer-dashboard/CustomerDashboard\n</code-example>\n<!--\nThis generates a folder for the new component within the customer-dashboard folder and updates the feature module with the `CustomerDashboardComponent` info:\n-->\n<p>그러면 customer-dashboard 모듈 폴더 안에 새 컴포넌트 폴더가 생성되고, <code>CustomDashboardComponent</code>가 해당 모듈에 자동으로 추가됩니다:</p>\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"customer-dashboard-component\" header=\"src/app/customer-dashboard/customer-dashboard.module.ts\">\n// 새로 만든 컴포넌트를 로드합니다.\nimport { CustomerDashboardComponent } from './customer-dashboard/customer-dashboard.component';\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a>\n  ],\n  declarations: [\n    CustomerDashboardComponent\n  ],\n})\n\n\n</code-example>\n<!--\nThe `CustomerDashboardComponent` is now in the JavaScript import list at the top and added to the `declarations` array, which lets Angular know to associate this new component with this feature module.\n-->\n<p><code>CustomerDashboardComponent</code>는 모듈에서 JavaScript <code>import</code> 구문으로 로드되고 <code>declarations</code> 배열에도 추가되었습니다. 이제 이 컴포넌트는 기능 모듈에 포함됩니다.</p>\n<!--\n## Importing a feature module\n-->\n<h2 id=\"기능-모듈-로드하기\">기능 모듈 로드하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#기능-모듈-로드하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo incorporate the feature module into your app, you have to let the root module, `app.module.ts`, know about it. Notice the `CustomerDashboardModule` export at the bottom of `customer-dashboard.module.ts`. This exposes it so that other modules can get to it. To import it into the `AppModule`, add it to the imports in `app.module.ts` and to the `imports` array:\n-->\n<p>애플리케이션에서 기능 모듈을 사용하려면, 이 기능 모듈을 앱 모듈인 <code>app.module.ts</code>에 추가해야 합니다. <code>customer-dashboard.module.ts</code> 파일을 다시 보면 가장 아래에 <code>CustomerDashboardModule</code> 클래스를 <code>export</code> 로 지정한 것을 확인할 수 있습니다. 이제 이 클래스는 다른 모듈에서 참조할 수 있으며, <code>AppModule</code>의 <code>imports</code> 배열에 이 모듈을 추가하면 됩니다:</p>\n<code-example path=\"feature-modules/src/app/app.module.ts\" region=\"app-module\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n// imports 배열에 추가할 모듈은 여기에서 로드합니다.\nimport { CustomerDashboardModule } from './customer-dashboard/customer-dashboard.module';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a>,\n    HttpModule,\n    CustomerDashboardModule // 기능 모듈은 여기에 추가합니다.\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n</code-example>\n<!--\nNow the `AppModule` knows about the feature module. If you were to add any service providers to the feature module, `AppModule` would know about those too, as would any other feature modules. However, NgModules don’t expose their components.\n-->\n<p>이제 <code>AppModule</code>은 이렇게 등록된 기능 모듈을 사용할 수 있습니다. 기능 모듈에 서비스 프로바이더가 등록되었다면 <code>AppModule</code>도 이 서비스 프로바이더를 사용하며, 기능 모듈에서 모듈 밖으로 공개하지 않은 컴포넌트는 사용할 수 없습니다.</p>\n<!--\n## Rendering a feature module’s component template\n-->\n<h2 id=\"기능-모듈의-컴포넌트-템플릿-렌더링하기\">기능 모듈의 컴포넌트 템플릿 렌더링하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#기능-모듈의-컴포넌트-템플릿-렌더링하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhen the CLI generated the `CustomerDashboardComponent` for the feature module, it included a template, `customer-dashboard.component.html`, with the following markup:\n-->\n<p>Angular CLI로 만든  <code>CustomerDashboardComponent</code>의 템플릿 파일인 <code>customer-dashboard.component.html</code>에는 다음과 같이 마크업이 구성되어 있습니다:</p>\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\" region=\"feature-template\" header=\"src/app/customer-dashboard/customer-dashboard/customer-dashboard.component.html\">\n&#x3C;p>\n  customer-dashboard works!\n&#x3C;/p>\n\n</code-example>\n<!--\nTo see this HTML in the `AppComponent`, you first have to export the `CustomerDashboardComponent` in the `CustomerDashboardModule`. In `customer-dashboard.module.ts`, just beneath the `declarations` array, add an `exports` array containing `CustomerDashboardComponent`:\n-->\n<p>이 컴포넌트를 <code>AppComponent</code>의 템플릿에 추가하려면, 먼저 <code>CustomerDashboardComponent</code>를 모듈 외부로 공개해야 합니다.\n<code>customer-dashboard.module.ts</code> 파일의 <code>declarations</code> 배열 밑에 <code>exports</code> 배열을 추가하고 이 배열에 <code>CustomerDashboardComponent</code>를 추가합니다:</p>\n<code-example path=\"feature-modules/src/app/customer-dashboard/customer-dashboard.module.ts\" region=\"component-exports\" header=\"src/app/customer-dashboard/customer-dashboard.module.ts\">\nexports: [\n  CustomerDashboardComponent\n]\n\n</code-example>\n<!--\nNext, in the `AppComponent`, `app.component.html`, add the tag `<app-customer-dashboard>`:\n-->\n<p>그리고 <code>AppComponent</code>의 템플릿인 <code>app.component.html</code> 파일에 <code>&#x3C;app-customer-dashboard></code> 태그를 추가합니다:</p>\n<code-example path=\"feature-modules/src/app/app.component.html\" region=\"app-component-template\" header=\"src/app/app.component.html\">\n&#x3C;h1>\n  {{title}}\n&#x3C;/h1>\n\n&#x3C;!-- CustomerDashboardComponent 셀렉터를 추가합니다. -->\n&#x3C;app-customer-dashboard>&#x3C;/app-customer-dashboard>\n\n</code-example>\n<!--\nNow, in addition to the title that renders by default, the `CustomerDashboardComponent` template renders too:\n-->\n<p>이제 애플리케이션을 실행해보면 <code>CustomerDashboardComponent</code>가 렌더링되는 것을 확인할 수 있습니다:</p>\n<!--\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/feature-modules/feature-module.png\" alt=\"feature module component\">\n</div>\n-->\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/feature-modules/feature-module.png\" alt=\"기능 모듈 컴포넌트\" width=\"594\" height=\"408\">\n</div>\n<hr>\n<!--\n## More on NgModules\n-->\n<h2 id=\"ngmodule-더-알아보기\">NgModule 더 알아보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/feature-modules#ngmodule-더-알아보기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou may also be interested in the following:\n* [Lazy Loading Modules with the Angular Router](guide/lazy-loading-ngmodules).\n* [Providers](guide/providers).\n* [Types of Feature Modules](guide/module-types).\n-->\n<p>다음 내용에 대해 더 알아보세요:</p>\n<ul>\n<li><a href=\"guide/lazy-loading-ngmodules\">Angular 라우터로 모듈을 지연 로딩하는 방법</a></li>\n<li><a href=\"guide/providers\">프로바이더</a>.</li>\n<li><a href=\"guide/module-types\">기능 모듈의 종류</a>.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/testing-components-scenarios\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/http\n - api/common/http/HttpClientModule\n - api/core/NgModule\n - api/forms/FormsModule\n - api/platform-browser/BrowserModule\n - cli\n - guide/bootstrapping\n - guide/feature-modules#ngmodule-더-알아보기\n - guide/feature-modules#기능-모듈\n - guide/feature-modules#기능-모듈-vs-앱-모듈\n - guide/feature-modules#기능-모듈-로드하기\n - guide/feature-modules#기능-모듈을-만드는-방법\n - guide/feature-modules#기능-모듈의-컴포넌트-템플릿-렌더링하기\n - guide/frequent-ngmodules\n - guide/lazy-loading-ngmodules\n - guide/module-types\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - https://github.com/angular/angular/edit/master/aio/content/guide/feature-modules.md?message=docs%3A%20describe%20your%20change...\n-->"
}