{
  "id": "guide/interpolation",
  "title": "Interpolation and template expressions",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/interpolation.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"interpolation-and-template-expressions\">Interpolation and template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#interpolation-and-template-expressions\"><i class=\"material-icons\">link</i></a></h1>\n<p>Interpolation allows you to incorporate calculated strings into the text\nbetween HTML element tags and within attribute assignments. Template\nexpressions are what you use to calculate those strings.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for all of\nthe syntax and code snippets in this guide.</p>\n</div>\n<h2 id=\"interpolation-\">Interpolation <code>{{...}}</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#interpolation-\"><i class=\"material-icons\">link</i></a></h2>\n<p>Interpolation refers to embedding expressions into marked up text.\nBy default, interpolation uses as its delimiter the double curly braces, <code>{{</code> and <code>}}</code>.</p>\n<p>In the following snippet, <code>{{ currentCustomer }}</code> is an example of interpolation.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"interpolation-example1\" header=\"src/app/app.component.html\">\n&#x3C;h3>Current customer: {{ currentCustomer }}&#x3C;/h3>\n\n</code-example>\n<p>The text between the braces is often the name of a component\nproperty. Angular replaces that name with the\nstring value of the corresponding component property.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-property\" header=\"src/app/app.component.html\">\n&#x3C;p>{{title}}&#x3C;/p>\n&#x3C;div>&#x3C;img src=\"{{itemImageUrl}}\">&#x3C;/div>\n\n</code-example>\n<p>In the example above, Angular evaluates the <code>title</code> and <code>itemImageUrl</code> properties\nand fills in the blanks, first displaying some title text and then an image.</p>\n<p>More generally, the text between the braces is a <strong>template expression</strong>\nthat Angular first <strong>evaluates</strong> and then <strong>converts to a string</strong>.\nThe following interpolation illustrates the point by adding two numbers:</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"convert-string\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is 2\" -->\n&#x3C;p>The sum of 1 + 1 is {{1 + 1}}.&#x3C;/p>\n\n</code-example>\n<p>The expression can invoke methods of the host component such as <code>getVal()</code> in\nthe following example:</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"invoke-method\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is not 4\" -->\n&#x3C;p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}.&#x3C;/p>\n\n</code-example>\n<p>Angular evaluates all expressions in double curly braces,\nconverts the expression results to strings, and links them with neighboring literal strings. Finally,\nit assigns this composite interpolated result to an <strong>element or directive property</strong>.</p>\n<p>You appear to be inserting the result between element tags and assigning it to attributes.\nHowever, interpolation is a special syntax that Angular converts into a <em>property binding</em>.</p>\n<div class=\"alert is-helpful\">\n<p>If you'd like to use something other than <code>{{</code> and <code>}}</code>, you can\nconfigure the interpolation delimiter via the\n<a href=\"api/core/Component#interpolation\">interpolation</a>\noption in the <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> metadata.</p>\n</div>\n<h2 id=\"template-expressions\">Template expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#template-expressions\"><i class=\"material-icons\">link</i></a></h2>\n<p>A template <strong>expression</strong> produces a value and appears within the double\ncurly braces, <code>{{ }}</code>.\nAngular executes the expression and assigns it to a property of a binding target;\nthe target could be an HTML element, a component, or a directive.</p>\n<p>The interpolation braces in <code>{{1 + 1}}</code> surround the template expression <code>1 + 1</code>.\nIn the property binding,\na template expression appears in quotes to the right of theÂ <code>=</code> symbol as in <code>[property]=\"expression\"</code>.</p>\n<p>In terms of syntax, template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with a few exceptions.</p>\n<p>You can't use JavaScript expressions that have or promote side effects,\nincluding:</p>\n<ul>\n<li>Assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</li>\n<li>Operators such as <code>new</code>, <code>typeof</code>, <code>instanceof</code>, etc.</li>\n<li>Chaining expressions with <code>;</code> or <code>,</code></li>\n<li>The increment and decrement operators <code>++</code> and <code>--</code></li>\n<li>Some of the ES2015+ operators</li>\n</ul>\n<p>Other notable differences from JavaScript syntax include:</p>\n<ul>\n<li>No support for the bitwise operators such as <code>|</code> and <code>&#x26;</code></li>\n<li>New <a href=\"guide/template-expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code></li>\n</ul>\n<h2 id=\"expression-context\">Expression context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#expression-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <em>expression context</em> is typically the <em>component</em> instance.\nIn the following snippets, the <code>recommended</code> within double curly braces and the\n<code>itemImageUrl2</code> in quotes refer to properties of the <code>AppComponent</code>.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&#x3C;h4>{{recommended}}&#x3C;/h4>\n&#x3C;img [src]=\"itemImageUrl2\">\n\n</code-example>\n<p>An expression may also refer to properties of the <em>template's</em> context\nsuch as a template input variable,</p>\n<!-- link to built-in-directives#template-input-variables -->\n<p><code>let customer</code>, or a template reference variable, <code>#customerInput</code>.</p>\n<!-- link to guide/template-ref-variables -->\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{customer.name}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&#x3C;label><a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &#x3C;input #customerInput>{{customerInput.value}}\n&#x3C;/label>\n\n</code-example>\n<p>The context for terms in an expression is a blend of the <em>template variables</em>,\nthe directive's <em>context</em> object (if it has one), and the component's <em>members</em>.\nIf you reference a name that belongs to more than one of these namespaces,\nthe template variable name takes precedence, followed by a name in the directive's <em>context</em>,\nand, lastly, the component's member names.</p>\n<p>The previous example presents such a name collision. The component has a <code>customer</code>\nproperty and the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> defines a <code>customer</code> template variable.</p>\n<div class=\"alert is-helpful\">\n<p>The <code>customer</code> in <code>{{customer.name}}</code>\nrefers to the template input variable, not the component's property.</p>\n<p>Template expressions cannot refer to anything in\nthe global namespace, except <code>undefined</code>. They can't refer to\n<code>window</code> or <code>document</code>. Additionally, they\ncan't call <code>console.log()</code> or <code>Math.max()</code> and they are restricted to referencing\nmembers of the expression context.</p>\n</div>\n<h2 id=\"expression-guidelines\">Expression guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#expression-guidelines\"><i class=\"material-icons\">link</i></a></h2>\n<p>When using template expressions follow these guidelines:</p>\n<ul>\n<li><a href=\"guide/interpolation#simplicity\">Simplicity</a></li>\n<li><a href=\"guide/interpolation#quick-execution\">Quick execution</a></li>\n<li><a href=\"guide/interpolation#no-visible-side-effects\">No visible side effects</a></li>\n</ul>\n<h3 id=\"simplicity\">Simplicity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#simplicity\"><i class=\"material-icons\">link</i></a></h3>\n<p>Although it's possible to write complex template expressions, it's a better\npractice to avoid them.</p>\n<p>A property name or method call should be the norm, but an occasional Boolean negation, <code>!</code>, is OK.\nOtherwise, confine application and business logic to the component,\nwhere it is easier to develop and test.</p>\n<h3 id=\"quick-execution\">Quick execution<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#quick-execution\"><i class=\"material-icons\">link</i></a></h3>\n<p>Angular executes template expressions after every change detection cycle.\nChange detection cycles are triggered by many asynchronous activities such as\npromise resolutions, HTTP results, timer events, key presses and mouse moves.</p>\n<p>Expressions should finish quickly or the user experience may drag, especially on slower devices.\nConsider caching values when their computation is expensive.</p>\n<h3 id=\"no-visible-side-effects\">No visible side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/interpolation#no-visible-side-effects\"><i class=\"material-icons\">link</i></a></h3>\n<p>A template expression should not change any application state other than the value of the\ntarget property.</p>\n<p>This rule is essential to Angular's \"unidirectional data flow\" policy.\nYou should never worry that reading a component value might change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n<p>An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is ideal because\nit is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns\n<em>exactly the same thing</em> until one of its dependent values changes.</p>\n<p>Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object, including an <code>array</code>, it returns the same object <em>reference</em> when called twice in a row.</p>\n<div class=\"alert is-helpful\">\n<p>There is one exception to this behavior that applies to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> has <code>trackBy</code> functionality that can deal with referential inequality of objects when iterating over them. See <a href=\"guide/built-in-directives#ngfor-with-trackby\">*ngFor with <code>trackBy</code></a> for details.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/built-in-directives\n - guide/displaying-data\n - guide/event-binding\n - guide/glossary\n - guide/structural-directives\n - guide/template-syntax\n - guide/user-input\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/core/Component\n - api/core/Component#interpolation\n - api/core/Type\n - guide/built-in-directives#ngfor-with-trackby\n - guide/interpolation#expression-context\n - guide/interpolation#expression-guidelines\n - guide/interpolation#interpolation-\n - guide/interpolation#interpolation-and-template-expressions\n - guide/interpolation#no-visible-side-effects\n - guide/interpolation#quick-execution\n - guide/interpolation#simplicity\n - guide/interpolation#template-expressions\n - guide/template-expression-operators\n - https://en.wikipedia.org/wiki/Idempotence\n - https://github.com/angular/angular/edit/master/aio/content/guide/interpolation.md?message=docs%3A%20describe%20your%20change...\n-->"
}