{
  "id": "guide/app-shell",
  "title": "애플리케이션 기본 틀",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/app-shell.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# App shell\n-->\n<h1 id=\"애플리케이션-기본-틀\">애플리케이션 기본 틀<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#애플리케이션-기본-틀\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nApp shell is a way to render a portion of your application via a route at build time.\nIt can improve the user experience by quickly launching a static rendered page (a skeleton common to all pages) while the browser downloads the full client version and switches to it automatically after the code loads.\n\nThis gives users a meaningful first paint of your application that appears quickly because the browser can simply render the HTML and CSS without the need to initialize any JavaScript.\n\nLearn more in [The App Shell Model](https://developers.google.com/web/fundamentals/architecture/app-shell).\n-->\n<p>Angular 애플리케이션을 빌드할 때 애플리케이션 자체의 렌더링을 담당하는 부분을 애플리케이션의 기본 틀(App Shell)이라고 합니다.\n이 기본 틀은 페이지에서 필요한 내용을 브라우저가 다운로드받기 전에 페이지의 기본 구조를 정적으로 먼저 렌더링하는 용도로 사용하는데, 이렇게 구현하면 사용자가 느끼는 사용성이 좀 더 향상됩니다.</p>\n<p>그래서 애플리케이션의 기본 틀은 JavaScript 실행 없이 HTML과 CSS로만 구현하는 것이 좋으며, 이렇게 구현해야 \"사용자가 의미있다고 판단하는 첫 화면(meaningful first paint of application)\"을 빠르게 띄울 수 있습니다.</p>\n<p>자세한 내용은 <a href=\"https://developers.google.com/web/fundamentals/architecture/app-shell\">앱 기본 틀 모델</a> 문서를 참고하세요.</p>\n<!--\n## Step 1: Prepare the application\n-->\n<h2 id=\"1단계-애플리케이션-생성하기\">1단계: 애플리케이션 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#1단계-애플리케이션-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can do this with the following CLI command:\n-->\n<p>Angular CLI로 다음 명령을 실행하면 애플리케이션을 생성할 수 있습니다:</p>\n<code-example language=\"bash\">\nng new my-app --routing\n</code-example>\n<!--\nFor an existing application, you have to manually add the `RouterModule` and defining a `<router-outlet>` within your application.\n-->\n<p>이미 생성된 애플리케이션이라면 <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>을 추가하고 템플릿에 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>을 추가하면 됩니다.</p>\n<!--\n## Step 2: Create the app shell\n-->\n<h2 id=\"2단계-애플리케이션-기본-틀-생성하기\">2단계: 애플리케이션 기본 틀 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#2단계-애플리케이션-기본-틀-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUse the CLI to automatically create the app shell.\n-->\n<p>다음 명령을 실행하면 애플리케이션의 기본 틀이 생성됩니다.</p>\n<code-example language=\"bash\">\nng generate app-shell\n</code-example>\n<!--\n* `client-project` takes the name of your client application.\n\nAfter running this command you will notice that the `angular.json` configuration file has been updated to add two new targets, with a few other changes.\n-->\n<ul>\n<li><code>client-project</code>에는 클라이언트 애플리케이션의 이름이 들어갑니다.</li>\n</ul>\n<p>이 명령을 실행하고 나면 <code>angular.json</code> 설정 파일에 다음 두 빌드 대상이 추가됩니다.</p>\n<code-example language=\"json\">\n\"server\": {\n  \"builder\": \"@angular-devkit/build-angular:server\",\n  \"options\": {\n    \"outputPath\": \"dist/my-app-server\",\n    \"main\": \"src/main.server.ts\",\n    \"tsConfig\": \"tsconfig.server.json\"\n  }\n},\n\"app-shell\": {\n  \"builder\": \"@angular-devkit/build-angular:app-shell\",\n  \"options\": {\n    \"browserTarget\": \"my-app:build\",\n    \"serverTarget\": \"my-app:server\",\n    \"route\": \"shell\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"browserTarget\": \"my-app:build:production\",\n      \"serverTarget\": \"my-app:server:production\"\n    }\n  }\n}\n</code-example>\n<!--\n## Step 3: Verify the app is built with the shell content\n-->\n<h2 id=\"3단계-빌드-확인하기\">3단계: 빌드 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/app-shell#3단계-빌드-확인하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUse the CLI to build the `app-shell` target.\n-->\n<p>이제 다음 명령을 실행해서 <code>app-shell</code>이 제대로 빌드되는지 확인해 봅시다.</p>\n<code-example language=\"bash\">\nng run my-app:app-shell\n</code-example>\n<p>Or to use the production configuration.</p>\n<code-example language=\"bash\">\nng run my-app:app-shell:production\n</code-example>\n<!--\nTo verify the build output, open `dist/my-app/index.html`. Look for default text `app-shell works!` to show that the app shell route was rendered as part of the output.\n-->\n<p>빌드 결과물은 <code>dist/my-app/index.html</code> 파일로 확인하면 됩니다. 애플리케이션이 제대로 실행된다면 화면에 <code>app-shell works!</code>라는 문구가 표시될 것입니다.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/ivy\n - guide/service-worker-intro\n-->\n<!-- links from this doc:\n - api/router/RouterModule\n - api/router/RouterOutlet\n - guide/app-shell#1단계-애플리케이션-생성하기\n - guide/app-shell#2단계-애플리케이션-기본-틀-생성하기\n - guide/app-shell#3단계-빌드-확인하기\n - guide/app-shell#애플리케이션-기본-틀\n - https://developers.google.com/web/fundamentals/architecture/app-shell\n - https://github.com/angular/angular/edit/master/aio/content/guide/app-shell.md?message=docs%3A%20describe%20your%20change...\n-->"
}