{
  "id": "guide/architecture-next-steps",
  "title": "다음 단계: 개발 도구와 테크닉",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/architecture-next-steps.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Next steps: tools and techniques\n-->\n<h1 id=\"다음-단계-개발-도구와-테크닉\">다음 단계: 개발 도구와 테크닉<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#다음-단계-개발-도구와-테크닉\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAfter you understand the basic Angular building blocks, you can learn more\nabout the features and tools that can help you develop and deliver Angular applications.\n\n* Work through the [Tour of Heroes](tutorial) tutorial to get a feel for how to fit the basic building blocks together to create a well-designed application.\n\n* Check out the [Glossary](guide/glossary) to understand Angular-specific terms and usage.\n\n* Use the documentation to learn about key features in more depth, according to your stage of development and areas of interest.\n-->\n<p>Angular의 기본 구성요소들에 대해 이해하고 나면 Angular 애플리케이션을 개발하는 데에 도움이 되는 기능과 툴에 대해 알아보는 것도 좋습니다.</p>\n<ul>\n<li>\n<p>기본 구성요소들이 어떻게 조합되는지, 애플리케이션을 어떻게 디자인하는 것이 좋은지 알아보려면 <a href=\"tutorial\">히어로들의 여행</a> 튜토리얼을 참고하는 것이 좋습니다.</p>\n</li>\n<li>\n<p>Angular에서 사용하는 용어에 대해 알아보려면 <a href=\"guide/glossary\">찾아보기</a> 문서를 참고하세요.</p>\n</li>\n<li>\n<p>애플리케이션을 개발하면서 그때 그때 필요한 내용이 있다면 Angular의 각 기능에 대해 깊이있게 알아보는 것도 좋습니다.</p>\n</li>\n</ul>\n<!--\n## Application architecture\n-->\n<h2 id=\"애플리케이션-아키텍처\">애플리케이션 아키텍처<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#애플리케이션-아키텍처\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* The **Main Concepts** section located in the table of contents contains several topics that explain how to connect the application data in your [components](guide/glossary#component) to your page-display [templates](guide/glossary#template), to create a complete interactive application.\n\n* The [NgModules](guide/ngmodules) guide provides in-depth information on the modular structure of an Angular application.\n\n* The [Routing and navigation](guide/router) guide provides in-depth information on how to construct applications that allow a user to navigate to different [views](guide/glossary#view) within your single-page app.\n\n* The [Dependency injection](guide/dependency-injection) guide provides in-depth information on how to construct an application such that each component class can acquire the services and objects it needs to perform its function.\n-->\n<ul>\n<li>\n<p>The <strong>Main Concepts</strong> section located in the table of contents contains several topics that explain how to connect the application data in your <a href=\"guide/glossary#component\">components</a> to your page-display <a href=\"guide/glossary#template\">templates</a>, to create a complete interactive application. </p>\n</li>\n<li>\n<p>Angular 애플리케이션을 모듈 단위로 구성하는 방법에 대해 알아보려면 <a href=\"guide/ngmodules\">NgModule</a> 문서를 참고하세요.</p>\n</li>\n<li>\n<p>단일 페이지 앱에서 사용자가 여러 <a href=\"guide/glossary#view\">뷰</a>를 전환하는 방법에 대해 알아보려면 <a href=\"guide/router\">라우팅과 네비게이션</a> 문서를 참고하세요.</p>\n</li>\n<li>\n<p>컴포넌트 클래스가 서비스를 활용하는 방법에 대해 알아보려면 <a href=\"guide/dependency-injection\">의존성 주입</a> 문서를 참고하세요.</p>\n</li>\n</ul>\n<!--\n## Responsive programming\n-->\n<h2 id=\"반응형-프로그래밍\">반응형 프로그래밍<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#반응형-프로그래밍\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe [template syntax](guide/template-syntax) and related topics contain details about how to display your component data when and where you want it within a view, and how to collect input from users that you can respond to.\n\nAdditional pages and sections describe some basic programming techniques for Angular apps.\n\n* [Lifecycle hooks](guide/lifecycle-hooks): Tap into key moments in the lifetime of a component, from its creation to its destruction, by implementing the lifecycle hook interfaces.\n\n* [Observables and event processing](guide/observables): How to use observables with components and services to publish and subscribe to messages of any type, such as user-interaction events and asynchronous operation results.\n\n* [Angular elements](guide/elements): How to package components as *custom elements* using Web Components, a web standard for defining new HTML elements in a framework-agnostic way.\n\n* [Forms](guide/forms-overview): Support complex data entry scenarios with HTML-based input validation.\n\n* [Animations](guide/animations): Use Angular's animation library to animate component behavior\nwithout deep knowledge of animation techniques or CSS.\n-->\n<p>The <a href=\"guide/template-syntax\">template syntax</a> and related topics contain details about how to display your component data when and where you want it within a view, and how to collect input from users that you can respond to.</p>\n<p>이 문서 외에 Angular 앱을 개발하는 기본 테크닉에 대해서도 알아보세요.</p>\n<ul>\n<li>\n<p><a href=\"guide/lifecycle-hooks\">라이프싸이클 후킹</a>: 컴포넌트는 생성되면서 종료될 때까지 Angular가 정의하는 생명주기를 따릅니다. 그리고 라이프싸이클 후킹 함수를 사용하면 컴포넌트의 생명주기에 원하는 동작을 실행할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/observables\">옵저버블, 이벤트 처리</a>: 컴포넌트나 서비스에서 옵저버블을 사용하면 어떻게 메시지를 발행하고 구독할 수 있는지 알아봅니다. 옵저버블은 사용자의 동작 이벤트나 비동기 로직도 모두 처리할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/elements\">Angular elements</a>: <em>커스텀 엘리먼트</em> 를 프레임워크와 상관없는 표준 HTML 엘리먼트 기반의 웹 컴포넌트로 묶는 방법에 대해 알아보세요.</p>\n</li>\n<li>\n<p><a href=\"guide/forms-overview\">폼</a>: HTML 기반에서 복잡한 데이터를 다루고 입력값의 유효성을 검증해 보세요.</p>\n</li>\n<li>\n<p><a href=\"guide/animations\">애니메이션</a>: Angular가 제공하는 애니메이션 라이브러리를 활용하면 복잡한 애니메이션 테크닉이나 깊은 CSS 지식없이도 컴포넌트에 애니메이션을 적용할 수 있습니다.</p>\n</li>\n</ul>\n<!--\n## Client-server interaction\n-->\n<h2 id=\"클라이언트-서버-통신\">클라이언트-서버 통신<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#클라이언트-서버-통신\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAngular provides a framework for single-page apps, where most of the logic and data resides on the client.\nMost apps still need to access a server using the `HttpClient` to access and save data.\nFor some platforms and applications, you might also want to use the PWA (Progressive Web App) model to improve the user experience.\n\n* [HTTP](guide/http): Communicate with a server to get data, save data, and invoke server-side actions with an HTTP client.\n* [Server-side rendering](guide/universal): Angular Universal generates static application pages on the server through server-side rendering (SSR). This allows you to run your Angular app on the server in order to improve performance and show the first page quickly on mobile and low-powered devices, and also facilitate web crawlers.\n\n* [Service workers and PWA](guide/service-worker-intro): Use a service worker to reduce dependency on the network and significantly improve the user experience.\n\n* [Web workers](guide/web-worker): Learn how to run CPU-intensive computations in a background thread.\n-->\n<p>Angular는 단일 페이지 애플리케이션을 만들때 사용하는 프레임워크이기 때문에 로직과 데이터는 대부분 클라이언트쪽에 존재합니다.\n하지만 서버에서 데이터를 추가로 받아오거나 데이터를 서버에 저장하려면 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 필요할 할 때도 있습니다.\n사용자의 UX를 향상시키기 위해 PWA(Progressive Web App)을 도입해야 할 수도 있습니다.</p>\n<ul>\n<li>\n<p><a href=\"guide/http\">HTTP</a>: 서버에서 데이터를 가져오거나 서버로 데이터를 보낼 때 사용하는 HTTP 서비스입니다.</p>\n</li>\n<li>\n<p><a href=\"guide/universal\">서버사이드 렌더링</a>: Angular Universal을 사용하면 서버사이드 렌더링(Server-side rendering, SSR) 기법으로 앱을 정적으로 서버에 빌드해 둘 수 있습니다. 이 방식을 활용하면 앱 성능이 향상되며 모바일과 저사양 장비에서도 첫번째 페이지를 더 빠르게 띄울  수 있습니다. 웹 크롤러도 대응할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/service-worker-intro\">서비스 워커와 PWA</a>: 네트워크 사용량을 줄이고 사용자의 UX를 대폭 향상시키려면 서비스 워커를 활용하는 것도 좋습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/web-worker\">웹 워커</a>: CPU 부하가 많이 걸리는 작업은 백그라운드 스레드에서 실행할 수 있습니다.</p>\n</li>\n</ul>\n<!--\n## Support for the development cycle\n-->\n<h2 id=\"개발-단계에서-활용할-수-있는-팁\">개발 단계에서 활용할 수 있는 팁<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#개발-단계에서-활용할-수-있는-팁\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* [CLI Command Reference](cli): The Angular CLI is a command-line tool that you use to create projects, generate application and library code, and perform a variety of ongoing development tasks such as testing, bundling, and deployment.\n\n* [Compilation](guide/aot-compiler): Angular provides just-in-time (JIT) compilation for the development environment, and ahead-of-time (AOT) compilation for the production environment.\n\n* [Testing platform](guide/testing): Run unit tests on your application parts as they interact with the Angular framework.\n\n* [Deployment](guide/deployment): Learn techniques for deploying your Angular application to a remote server.\n\n* [Security guidelines](guide/security): Learn about Angular's built-in protections against common web-app vulnerabilities and attacks such as cross-site scripting attacks.\n\n* [Internationalization](guide/i18n): Make your app available in multiple languages with Angular's internationalization (i18n) tools.\n\n* [Accessibility](guide/accessibility): Make your app accessible to all users.\n-->\n<ul>\n<li>\n<p><a href=\"cli\">CLI 커맨드</a>: Angular CLI는 프로젝트나 애플리케이션, 라이브러리를 생성하거나 앱 개발에 필요한 테스트, 번들링, 배포를 할 때 활용할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/aot-compiler\">컴파일</a>: Angular는 AOT(ahead-of-time) 컴파일러를 사용합니다.</p>\n</li>\n<li>\n<p><a href=\"guide/testing\">테스트</a>: Angular 프레임워크와 상호작용하는 유닛 테스트를 실행해 보세요.</p>\n</li>\n<li>\n<p><a href=\"guide/deployment\">배포</a>: Angular 애플리케이션을 리모트 서버에 배포하는 방법에 대해 안내합니다.</p>\n</li>\n<li>\n<p><a href=\"guide/security\">보안 가이드라인</a>: Angular는 일반적으로 발생할 수 있는 웹앱 취약점과 크로스 사이트 스크립트 공격을 방어하는 기능을 기본으로 지원합니다.</p>\n</li>\n<li>\n<p><a href=\"guide/i18n\">다국어 번역</a>: 애플리케이션에 다국어를 지원하려면 Angular가 제공하는 i18n(internationalization) 툴을 활용할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/accessibility\">접근성 지원</a>: 모든 사용자가 앱을 사용할 수 있도록 앱 접근성을 개선해 보세요.</p>\n</li>\n</ul>\n<!--\n## File structure, configuration, and dependencies\n-->\n<h2 id=\"파일-구조-환경-설정-의존성-관리\">파일 구조, 환경 설정, 의존성 관리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#파일-구조-환경-설정-의존성-관리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* [Workspace and file structure](guide/file-structure): Understand the structure of Angular workspace and project folders.\n\n* [Building and serving](guide/build): Learn to define different build and proxy server configurations for your project, such as development, staging, and production.\n\n* [npm packages](guide/npm-packages): The Angular Framework, Angular CLI, and components used by Angular applications are packaged as [npm](https://docs.npmjs.com/) packages and distributed via the npm registry. The Angular CLI creates a default `package.json` file, which specifies a starter set of packages that work well together and jointly support many common application scenarios.\n\n* [TypeScript configuration](guide/typescript-configuration): TypeScript is the primary language for Angular application development.\n\n* [Browser support](guide/browser-support): Make your apps compatible across a wide range of browsers.\n-->\n<ul>\n<li>\n<p><a href=\"guide/file-structure\">워크스페이스와 파일 구조</a>: Angular의 워크스페이스와 프로젝트 파일 구조에 대해 알아보세요.</p>\n</li>\n<li>\n<p><a href=\"guide/build\">빌드, 실행</a>: 개발, 스테이징, 운영 환경마다 각각 다른 빌드 설정과 프록시 서버 설정을 적용할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/npm-packages\">npm 패키지</a>: Angular 프레임워크와 Angular CLI, 컴포넌트는 모두 <a href=\"https://docs.npmjs.com/\">npm</a>이 제공하는 패키지를 활용합니다. Angular CLI로 프로젝트를 생성하면 <code>package.json</code> 파일이 생성되며, 이 파일을 확장하면서 앱에 더 많은 기능을 추가할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/typescript-configuration\">TypeScript 환경설정</a>: TypeScript는 Angular 애플리케이션을 개발하는 언어입니다.</p>\n</li>\n<li>\n<p><a href=\"guide/browser-support\">브라우저 지원</a>: 애플리케이션이 실행되는 브라우저의 호환성을 확인해 보세요.</p>\n</li>\n</ul>\n<!--\n## Extending Angular\n-->\n<h2 id=\"angular-그-외에도\">Angular 그 외에도<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture-next-steps#angular-그-외에도\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* [Angular libraries](guide/libraries): Learn about using and creating re-usable libraries.\n\n* [Schematics](guide/schematics): Learn about customizing and extending the CLI's generation capabilities.\n\n* [CLI builders](guide/cli-builder): Learn about customizing and extending the CLI's ability to apply tools to perform complex tasks, such as building and testing applications.\n-->\n<ul>\n<li>\n<p><a href=\"guide/libraries\">Angular 라이브러리</a>: 재사용할 수 있는 라이브러리를 만들수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/schematics\">스키매틱(schematic)</a>: Angular CLI가 생성할 수 있는 구성요소를 추가하거나 커스터마이징 할 수 있습니다.</p>\n</li>\n<li>\n<p><a href=\"guide/cli-builder\">CLI 빌더</a>: 애플리케이션을 빌드하거나 테스트하는 복잡한 작업을 Angular CLI로 제어할 수 있습니다.</p>\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture\n-->\n<!-- links from this doc:\n - api/common/http/HttpClient\n - cli\n - guide/accessibility\n - guide/animations\n - guide/aot-compiler\n - guide/architecture-next-steps#angular-그-외에도\n - guide/architecture-next-steps#개발-단계에서-활용할-수-있는-팁\n - guide/architecture-next-steps#다음-단계-개발-도구와-테크닉\n - guide/architecture-next-steps#반응형-프로그래밍\n - guide/architecture-next-steps#애플리케이션-아키텍처\n - guide/architecture-next-steps#클라이언트-서버-통신\n - guide/architecture-next-steps#파일-구조-환경-설정-의존성-관리\n - guide/browser-support\n - guide/build\n - guide/cli-builder\n - guide/dependency-injection\n - guide/deployment\n - guide/elements\n - guide/file-structure\n - guide/forms-overview\n - guide/glossary\n - guide/glossary#component\n - guide/glossary#template\n - guide/glossary#view\n - guide/http\n - guide/i18n\n - guide/libraries\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/npm-packages\n - guide/observables\n - guide/router\n - guide/schematics\n - guide/security\n - guide/service-worker-intro\n - guide/template-syntax\n - guide/testing\n - guide/typescript-configuration\n - guide/universal\n - guide/web-worker\n - tutorial\n - https://docs.npmjs.com/\n - https://github.com/angular/angular/edit/master/aio/content/guide/architecture-next-steps.md?message=docs%3A%20describe%20your%20change...\n-->"
}