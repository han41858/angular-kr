{
  "id": "guide/component-overview",
  "title": "Angular 컴포넌트 개요",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/component-overview.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Angular Components Overview\n-->\n<h1 id=\"angular-컴포넌트-개요\">Angular 컴포넌트 개요<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#angular-컴포넌트-개요\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nComponents are the main building block for Angular applications. Each component consists of:\n\n* An HTML template that declares what renders on the page\n* A Typescript class that defines behavior\n* A CSS selector that defines how the component is used in a template\n* Optionally, CSS styles applied to the template\n\nThis topic describes how to create and configure an Angular component.\n\n<div class=\"alert is-helpful\">\n\nTo view or download the example code used in this topic, see the <live-example></live-example>.\n\n</div>\n-->\n<p>컴포넌트는 Angular 애플리케이션을 구성하는 기본 단위입니다.\n그리고 개별 컴포넌트는 이런 요소들로 구성됩니다:</p>\n<ul>\n<li>화면을 렌더링하는 HTML 템플릿</li>\n<li>동작을 정의하는 TypeScript 클래스</li>\n<li>컴포넌트를 템플릿에 추가할 때 사용하는 CSS 셀렉터</li>\n<li>추가로 컴포넌트가 표시되는 모습을 정의하는 CSS 스타일</li>\n</ul>\n<p>이 문서는 Angular 컴포넌트를 만드는 방법과 세부설정하는 방법에 대해 다룹니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<!--\n## Prerequisites\n-->\n<h2 id=\"사전준비\">사전준비<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#사전준비\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo create a component, verify that you have met the following prerequisites:\n\n1. Install the Angular CLI.\n1. Create an Angular project.\n   If you don't have a project, you can create one using `ng new <project-name>`, where `<project-name>` is the name of your Angular application.\n-->\n<p>컴포넌트를 만들려면 이런 환경이 준비되어야 합니다:</p>\n<ol>\n<li>Angular CLI가 설치되어 있어야 합니다.</li>\n<li>Angular 프로젝트가 있어야 합니다.\n아직 프로젝트가 없다면 <code>ng new &#x3C;프로젝트-이름></code> 명령을 실행해서 프로젝트를 생성할 수 있습니다.</li>\n</ol>\n<!--\n## Creating a component\n-->\n<h2 id=\"컴포넌트-생성하기\">컴포넌트 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#컴포넌트-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe easiest way to create a component is with the Angular CLI. You can also create a component manually.\n-->\n<p>컴포넌트를 생성하는 방법 중 가장 쉬운 방법은 Angular CLI를 사용하는 것입니다.\nAngular CLI를 사용하지 않고 수동으로 만드는 방법도 있습니다.</p>\n<!--\n### Creating a component using the Angular CLI\n-->\n<h3 id=\"angular-cli로-컴포넌트-생성하기\">Angular CLI로 컴포넌트 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#angular-cli로-컴포넌트-생성하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo create a component using the Angular CLI:\n\n1. From a terminal window, navigate to the directory containing your application.\n1. Run the `ng generate component <component-name>` command, where `<component-name>` is the name of your new component.\n\nBy default, this command creates the following:\n\n* A folder named after the component\n* A component file, `<component-name>.component.ts`\n* A template file, `<component-name>.component.html`\n* A CSS file, `<component-name>.component.css`\n* A testing specification file, `<component-name>.component.spec.ts`\n\nWhere `<component-name>` is the name of your component.\n\n<div class=\"alert is-helpful\">\n\nYou can change how `ng generate component` creates new components.\nFor more information, see [ng generate component](cli/generate#component-command) in the Angular CLI documentation.\n\n</div>\n-->\n<p>Angular CLI로 컴포넌트를 생성하려면:</p>\n<ol>\n<li>터미널 창을 열고 애플리케이션 폴더로 이동합니다.</li>\n<li><code>ng generate component &#x3C;컴포넌트-이름></code> 명령을 실행해서 컴포넌트를 생성합니다.</li>\n</ol>\n<p>이 명령을 실행하면 컴포넌트가 이렇게 구성됩니다:</p>\n<ul>\n<li>컴포넌트 이름으로 폴더가 생성됩니다.</li>\n<li><code>&#x3C;컴포넌트-이름>.component.ts</code> 컴포넌트 파일이 생성됩니다.</li>\n<li><code>&#x3C;컴포넌트-이름>.component.html</code> 템플릿 파일이 생성됩니다.</li>\n<li><code>&#x3C;컴포넌트-이름>.component.css</code> CSS 스타일 파일이 생성됩니다.</li>\n<li><code>&#x3C;컴포넌트-이름>.component.spec.ts</code> 테스트 파일이 생성됩니다.</li>\n</ul>\n<p>그리고 이렇게 만든 컴포넌트의 셀렉터는 <code>&#x3C;컴포넌트-이름></code> 입니다.</p>\n<div class=\"alert is-helpful\">\n<p><code>ng generate component</code> 명령이 동작하는 방식은 변경할 수 있습니다.\n자세한 내용은 Angular CLI 문서 <a href=\"cli/generate#component-command\">ng generate component</a> 섹션을 참고하세요.</p>\n</div>\n<!--\n### Creating a component manually\n-->\n<h3 id=\"수동으로-컴포넌트-생성하기\">수동으로 컴포넌트 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#수동으로-컴포넌트-생성하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAlthough the Angular CLI is the easiest way to create an Angular component, you can also create a component manually.\nThis section describes how to create the core component file within an existing Angular project.\n\nTo create a new component manually:\n\n1. Navigate to your Angular project directory.\n1. Create a new file, `<component-name>.component.ts`.\n1. At the top of the file, add the following import statement.\n\n   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"import\">\nimport { Component } from &#39;@angular/core&#39;;\n\n</code-example>\n\n1. After the `import` statement, add a `@Component` decorator.\n\n   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"decorator-skeleton\">\n@Component({\n})\n\n</code-example>\n\n1. Choose a CSS selector for the component.\n\n   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"selector\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n})\n\n</code-example>\n\n   For more information on choosing a selector, see [Specifying a component's selector](#specifying-a-components-css-selector).\n\n1. Define the HTML template that the component uses to display information.\n   In most cases, this template is a separate HTML file.\n\n   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"templateUrl\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  templateUrl: &#39;./component-overview.component.html&#39;,\n})\n\n</code-example>\n\n   For more information on defining a component's template, see [Defining a component's template](#defining-a-components-template).\n\n1. Select the styles for the component's template.\n   In most cases, you define the styles for your component's template in a separate file.\n\n   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"decorator\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  templateUrl: &#39;./component-overview.component.html&#39;,\n  styleUrls: [&#39;./component-overview.component.css&#39;]\n})\n\n</code-example>\n\n1. Add a `class` statement that includes the code for the component.\n\n   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"class\">\nexport class ComponentOverviewComponent {\n\n}\n\n</code-example>\n-->\n<p>컴포넌트는 Angular CLI로 생성하는 것이 가장 간단하지만, 수동으로 생성할 수도 있습니다.\n이번 섹션에서는 Angular 프로젝트에 컴포넌트를 수동으로 생성하는 방법에 대해 알아봅시다.</p>\n<p>컴포넌트는 이렇게 생성하면 됩니다:</p>\n<ol>\n<li>\n<p>Angular 프로젝트로 이동합니다.</p>\n</li>\n<li>\n<p><code>&#x3C;컴포넌트-이름>.component.ts</code> 라는 이름으로 새 파일을 만듭니다.</p>\n</li>\n<li>\n<p>이 파일 시작부분에 이런 코드를 추가합니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n</li>\n<li>\n<p>그리고 <code>import</code> 구문 뒤에 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터를 추가합니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"decorator-skeleton\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n})\n\n</code-example>\n</li>\n<li>\n<p>컴포넌트에 적용할 CSS 셀렉터를 지정합니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"selector\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n})\n\n</code-example>\n<p>셀렉터에 대해 자세하게 알아보려면 <a href=\"guide/component-overview#specifying-a-components-css-selector\">컴포넌트 셀렉터 지정하기</a> 섹션을 참고하세요.</p>\n</li>\n<li>\n<p>정보를 표시할 HTML 템플릿을 정의합니다.\n일반적으로 템플릿 파일은 별도 HTML 파일로 정의합니다.</p>\n<p>   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"templateUrl\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  templateUrl: './component-overview.component.html',\n})\n\n</code-example></p>\n<p>   컴포넌트 템플릿에 대해 자세하게 알아보려면 <a href=\"guide/component-overview#defining-a-components-template\">컴포넌트 템플릿 정의하기</a> 섹션을 참고하세요.</p>\n</li>\n<li>\n<p>컴포넌트 템플릿에 지정될 스타일 파일을 생성합니다.\n일마적으로 스타일 파일은 별도 파일로 정의합니다.</p>\n<p>   <code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"decorator\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  templateUrl: './component-overview.component.html',\n  styleUrls: ['./component-overview.component.css']\n})\n\n</code-example></p>\n</li>\n<li>\n<p>컴포넌트 클래스를 정의하는 <code>class</code> 구문을 추가합니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"class\">\nexport class ComponentOverviewComponent {\n\n}\n\n</code-example>\n</li>\n</ol>\n<a id=\"specifying-a-components-css-selector\"></a>\n<!--\n## Specifying a component's CSS selector\n-->\n<h2 id=\"컴포넌트-css-셀렉터-지정하기\">컴포넌트 CSS 셀렉터 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#컴포넌트-css-셀렉터-지정하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nEvery component requires a CSS _selector_. A selector instructs Angular to instantiate this component wherever it finds the corresponding tag in template HTML. For example, consider a component, `hello-world.component.ts` that defines its selector as `app-hello-world`. This selector instructs angular to instantiate this component any time the tag, `<app-hello-world>` in a template.\n\nTo specify a component's selector, add a `selector` statement to the `@Component` decorator.\n\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"selector\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n})\n\n</code-example>\n-->\n<p>Angular는 템플릿 HTML에 사용된 컴포넌트 셀렉터를 기준으로 컴포넌트의 인스턴스를 생성하기 때문에 컴포넌트에 CSS <em>셀렉터</em> 를 지정해야 합니다.\n그래서 템플릿에 <code>hello-world.component.ts</code> 컴포넌트를 추가하려면 이 컴포넌트의 셀렉터를 <code>app-hello-world</code>와 같은 문자열로 지정해야 합니다.\n이렇게 지정한 후에는 템플릿에 <code>&#x3C;app-hello-world></code>라고 사용할 수 있습니다.</p>\n<p>컴포넌트 셀렉터를 지정하려면 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터의 <code>selector</code> 프로퍼티를 사용하면 됩니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"selector\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n})\n\n</code-example>\n<a id=\"defining-a-components-template\"></a>\n<!--\n## Defining a component's template\n-->\n<h2 id=\"컴포넌트-템플릿-정의하기\">컴포넌트 템플릿 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#컴포넌트-템플릿-정의하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA template is a block of HTML that tells Angular how to render the component in your application.\nYou can define a template for your component in one of two ways: by referencing an external file, or directly within the component.\n\nTo define a template as an external file, add a `templateUrl` property to the `@Component` decorator.\n\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"templateUrl\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  templateUrl: &#39;./component-overview.component.html&#39;,\n})\n\n</code-example>\n\nTo define a template within the component, add a `template` property to the `@Component` decorator that contains the HTML you want to use.\n\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.1.ts\" region=\"template\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  template: &#39;&lt;h1&gt;Hello World!&lt;/h1&gt;&#39;,\n})\n\n</code-example>\n\nIf you want your template to span multiple lines, you can use backticks (<code> ` </code>).\nFor example:\n\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.2.ts\" region=\"templatebacktick\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  template: `&lt;h1&gt;Hello World!&lt;/h1&gt;\n             &lt;p&gt;This template definition spans\n              multiple lines.&lt;/p&gt;`\n})\n\n</code-example>\n\n<div class=\"alert is-helpful\">\n\nAn Angular component requires a template defined using `template` or `templateUrl`. You cannot have both statements in a component.\n\n</div>\n-->\n<p>템플릿은 컴포넌트가 애플리케이션에 렌더링될 모습을 지정하는 HTML 조각입니다.\n템플릿은 컴포넌트 파일에 직접 정의하거나, 별도 파일로 만들고 컴포넌트에 불러오는 방식으로 사용합니다.</p>\n<p>템플릿을 별도 파일로 정의하려면 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터의 <code>templateUrl</code> 프로퍼티를 지정하면 됩니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"templateUrl\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  templateUrl: './component-overview.component.html',\n})\n\n</code-example>\n<p>그리고 템플릿을 컴포넌트 파일에 정의하려면 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터의 <code>template</code> 프로퍼티에 HTML 문법을 직접 사용하면 됩니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.1.ts\" region=\"template\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  template: '&#x3C;h1>Hello World!&#x3C;/h1>',\n})\n\n</code-example>\n<p>템플릿을 여러 줄에 걸쳐 정의하려면 역따옴표(<code>`</code>)를 사용하면 됩니다:</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.2.ts\" region=\"templatebacktick\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  template: `&#x3C;h1>Hello World!&#x3C;/h1>\n             &#x3C;p>This template definition spans\n              <a href=\"api/forms/SelectMultipleControlValueAccessor\" class=\"code-anchor\">multiple</a> lines.&#x3C;/p>`\n})\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>컴포넌트를 정의하려면 <code>template</code>이나 <code>templateUrl</code> 중 하나는 반드시 정의해야 합니다.\n다만, 둘을 동시에 지정할 수는 없습니다.</p>\n</div>\n<!--\n## Declaring a component's styles\n-->\n<h2 id=\"컴포넌트-스타일-지정하기\">컴포넌트 스타일 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#컴포넌트-스타일-지정하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can declare component styles uses for its template in one of two ways: by referencing an external file, or directly within the component.\n\nTo declare the styles for a component in a separate file, add a `stylesUrls` property to the `@Component` decorator.\n\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"decorator\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  templateUrl: &#39;./component-overview.component.html&#39;,\n  styleUrls: [&#39;./component-overview.component.css&#39;]\n})\n\n</code-example>\n\nTo select the styles within the component, add a `styles` property to the `@Component` decorator that contains the styles you want to use.\n\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.3.ts\" region=\"styles\">\n@Component({\n  selector: &#39;app-component-overview&#39;,\n  template: &#39;&lt;h1&gt;Hello World!&lt;/h1&gt;&#39;,\n  styles: [&#39;h1 { font-weight: normal; }&#39;]\n})\n\n</code-example>\n\nThe `styles` property takes an array of strings that contain the CSS rule declarations.\n-->\n<p>템플릿에 적용될 컴포넌트 스타일은 컴포넌트 안에 직접 정의하거나, 별도 파일로 만들고 컴포넌트에 불러오는 방법을 사용합니다.</p>\n<p>컴포넌트 스타일을 별도 파일로 정의하려면 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터의 <code>stylesUrls</code> 프로퍼티를 지정하면 됩니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.ts\" region=\"decorator\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  templateUrl: './component-overview.component.html',\n  styleUrls: ['./component-overview.component.css']\n})\n\n</code-example>\n<p>그리고 컴포넌트 안에 스타일을 지정하려면 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터의 <code>styles</code> 프로퍼티에 원하는 스타일을 지정하면 됩니다.</p>\n<code-example path=\"component-overview/src/app/component-overview/component-overview.component.3.ts\" region=\"styles\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-component-overview',\n  template: '&#x3C;h1>Hello World!&#x3C;/h1>',\n  styles: ['h1 { font-weight: normal; }']\n})\n\n</code-example>\n<p><code>styles</code> 프로퍼티는 문자열 배열로 지정합니다.</p>\n<!--\n## Next steps\n-->\n<h2 id=\"다음-단계\">다음 단계<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-overview#다음-단계\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n* For an architectural overview of components, see [Introduction to components and templates](guide/architecture-components).\n* For additional options you can use when creating a component, see [Component](api/core/Component) in the API Reference.\n* For more information on styling components, see [Component styles](guide/component-styles).\n* For more information on templates, see [Template syntax](guide/template-syntax).\n-->\n<ul>\n<li>컴포넌트의 구조에 대해 자세하게 알아보려면 <a href=\"guide/architecture-components\">컴포넌트와 템플릿 소개</a> 문서를 참고하세요.</li>\n<li>컴포넌트를 정의할 때 사용할 수 있는 옵션에 대해 알아보려면 <a href=\"api/core/Component\">컴포넌트 API 문서</a>를 참고하세요.</li>\n<li>컴포넌트에 스타일을 지정하는 방법에 대해 자세하게 알아보려면 <a href=\"guide/component-styles\">컴포넌트 스타일</a> 문서를 참고하세요.</li>\n<li>템플릿에 대해 자세하게 알아보려면 <a href=\"guide/template-syntax\">템플릿 문법</a> 문서를 참고하세요.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/forms/SelectMultipleControlValueAccessor\n - cli/generate#component-command\n - guide/architecture-components\n - guide/component-overview#angular-cli로-컴포넌트-생성하기\n - guide/component-overview#angular-컴포넌트-개요\n - guide/component-overview#defining-a-components-template\n - guide/component-overview#specifying-a-components-css-selector\n - guide/component-overview#다음-단계\n - guide/component-overview#사전준비\n - guide/component-overview#수동으로-컴포넌트-생성하기\n - guide/component-overview#컴포넌트-css-셀렉터-지정하기\n - guide/component-overview#컴포넌트-생성하기\n - guide/component-overview#컴포넌트-스타일-지정하기\n - guide/component-overview#컴포넌트-템플릿-정의하기\n - guide/component-styles\n - guide/template-syntax\n - https://github.com/angular/angular/edit/master/aio/content/guide/component-overview.md?message=docs%3A%20describe%20your%20change...\n-->"
}