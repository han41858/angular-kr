{
  "id": "guide/module-types",
  "title": "Guidelines for creating NgModules",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/module-types.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"guidelines-for-creating-ngmodules\">Guidelines for creating NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#guidelines-for-creating-ngmodules\"><i class=\"material-icons\">link</i></a></h1>\n<p>This topic provides a conceptual overview of the different categories of <a href=\"guide/glossary#ngmodule\" title=\"Definition of NgModule\">NgModules</a> you can create in order to organize your code in a modular structure.\nThese categories are not cast in stone—they are suggestions.\nYou may want to create NgModules for other purposes, or combine the characteristics of some of these categories.</p>\n<p>NgModules are a great way to organize an app and keep code related to a specific functionality or feature separate from other code.\nUse NgModules to consolidate <a href=\"guide/glossary#component\" title=\"Definition of component\">components</a>, <a href=\"guide/glossary#directive\" title=\"Definition of directive\">directives</a>, and <a href=\"guide/glossary#pipe\" title=\"Definition of pipe)\">pipes</a> into cohesive blocks of functionality.\nFocus each block on a feature or business domain, a workflow or navigation flow, a common collection of utilities, or one or more <a href=\"guide/glossary#provider\" title=\"Definition of provider\">providers</a> for <a href=\"guide/glossary#service\" title=\"Definition of service\">services</a>.</p>\n<p>For more about NgModules, see <a href=\"guide/ngmodules\" title=\"Organizing your app with NgModules\">Organizing your app with NgModules</a>.</p>\n<div class=\"alert is-helpful\">\n<p>For the example app used in NgModules-related topics, see the <live-example name=\"ngmodules\"></live-example>.</p>\n</div>\n<h2 id=\"summary-of-ngmodule-categories\">Summary of NgModule categories<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#summary-of-ngmodule-categories\"><i class=\"material-icons\">link</i></a></h2>\n<p>All apps start by <a href=\"guide/bootstrapping\" title=\"Launching an app with a root NgModule\">bootstrapping a root NgModule</a>.\nYou can organize your other NgModules any way you wish.</p>\n<p>This topic provides some guidelines for the following general categories of NgModules:</p>\n<ul>\n<li><a href=\"guide/module-types#domain\">Domain</a>: A domain NgModule is organized around a feature, business domain, or user experience.</li>\n<li><a href=\"guide/module-types#routed\">Routed</a>: The top component of the NgModule acts as the destination of a <a href=\"guide/glossary#router\" title=\"Definition of router\">router</a> navigation route.</li>\n<li><a href=\"guide/module-types#routing\">Routing</a>: A routing NgModule provides the routing configuration for another NgModule.</li>\n<li><a href=\"guide/module-types#service\">Service</a>: A service NgModule provides utility services such as data access and messaging.</li>\n<li><a href=\"guide/module-types#widget\">Widget</a>: A widget NgModule makes a component, directive, or pipe available to other NgModules.</li>\n<li><a href=\"guide/module-types#shared\">Shared</a>: A shared NgModule makes a set of components, directives, and pipes available to other NgModules.</li>\n</ul>\n<p>The following table summarizes the key characteristics of each category.</p>\n<table>\n <tbody><tr>\n   <th style=\"vertical-align: top\">\n     NgModule\n   </th>\n   <th style=\"vertical-align: top\">\n     Declarations\n   </th>\n   <th style=\"vertical-align: top\">\n     Providers\n   </th>\n   <th style=\"vertical-align: top\">\n     Exports\n   </th>\n   <th style=\"vertical-align: top\">\n     Imported by\n   </th>\n </tr>\n <tr>\n   <td>Domain</td>\n   <td>Yes</td>\n   <td>Rare</td>\n   <td>Top component</td>\n   <td>Another domain, AppModule</td>\n </tr>\n <tr>\n   <td>Routed</td>\n   <td>Yes</td>\n   <td>Rare</td>\n   <td>No</td>\n   <td>None</td>\n </tr>\n <tr>\n   <td>Routing</td>\n   <td>No</td>\n   <td>Yes (Guards)</td>\n   <td>RouterModule</td>\n   <td>Another domain (for routing)</td>\n </tr>\n <tr>\n   <td>Service</td>\n   <td>No</td>\n   <td>Yes</td>\n   <td>No</td>\n   <td>AppModule</td>\n </tr>\n <tr>\n   <td>Widget</td>\n   <td>Yes</td>\n   <td>Rare</td>\n   <td>Yes</td>\n   <td>Another domain</td>\n </tr>\n <tr>\n   <td>Shared</td>\n   <td>Yes</td>\n   <td>No</td>\n   <td>Yes</td>\n   <td>Another domain</td>\n </tr>\n</tbody></table>\n<a id=\"domain\"></a>\n<h2 id=\"domain-ngmodules\">Domain NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#domain-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use a domain NgModule to deliver a user experience dedicated to a particular feature or app domain, such as editing a customer or placing an order.\nOne example is <code>ContactModule</code> in the <live-example name=\"ngmodules\"></live-example>.</p>\n<p>A domain NgModule organizes the code related to a certain function, containing all of the components, routing, and templates that make up the function.\nYour top component in the domain NgModule acts as the feature or domain's root, and is the only component you export.\nPrivate supporting subcomponents descend from it.</p>\n<p>Import a domain NgModule exactly once into another NgModule, such as a domain NgModule, or into the root NgModule (<code>AppModule</code>) of an app that contains only a few NgModules.</p>\n<p>Domain NgModules consist mostly of declarations.\nYou rarely include providers.\nIf you do, the lifetime of the provided services should be the same as the lifetime of the NgModule.</p>\n<div class=\"alert is-helpful\">\n<p>For more information about lifecycles, see <a href=\"guide/lifecycle-hooks\" title=\"Hooking into the component lifecycle\">Hooking into the component lifecycle</a>.</p>\n</div>\n<a id=\"routed\"></a>\n<h2 id=\"routed-ngmodules\">Routed NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#routed-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use a routed NgModule for all <a href=\"guide/lazy-loading-ngmodules\" title=\"Lazy-loading an NgModule\">lazy-loaded NgModules</a>.\nUse the top component of the NgModule as the destination of a router navigation route.\nRouted NgModules don’t export anything because their components never appear in the template of an external component.</p>\n<p>Don't import a lazy-loaded routed NgModule into another NgModule, as this would trigger an eager load, defeating the purpose of lazy loading.</p>\n<p>Routed NgModules rarely have providers because you load a routed NgModule only when needed (such as for routing).\nServices listed in the NgModules' <code>provider</code> array would not be available because the root injector wouldn’t know about the lazy-loaded NgModule.\nIf you include providers, the lifetime of the provided services should be the same as the lifetime of the NgModule.\nDon't provide app-wide <a href=\"guide/singleton-services\">singleton services</a> in a routed NgModule or in an NgModule that the routed NgModule imports.</p>\n<div class=\"alert is-helpful\">\n<p>For more information about providers and lazy-loaded routed NgModules, see <a href=\"guide/providers#limiting-provider-scope-by-lazy-loading-modules\" title=\"Providing dependencies: Limiting provider scope\">Limiting provider scope</a>.</p>\n</div>\n<a id=\"routing\"></a>\n<h2 id=\"routing-ngmodules\">Routing NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#routing-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use a routing NgModule to provide the routing configuration for a domain NgModule, thereby separating routing concerns from its companion domain NgModule.\nOne example is <code>ContactRoutingModule</code> in the <live-example name=\"ngmodules\"></live-example>, which provides the routing for its companion domain NgModule <code>ContactModule</code>.</p>\n<div class=\"alert is-helpful\">\n<p>For an overview and details about routing, see <a href=\"guide/router\" title=\"In-app navigation: routing to views\">In-app navigation: routing to views</a>.</p>\n</div>\n<p>Use a routing NgModule to do the following tasks:</p>\n<ul>\n<li>Define routes.</li>\n<li>Add router configuration to the NgModule's import.</li>\n<li>Add guard and resolver service providers to the NgModule's providers.</li>\n</ul>\n<p>The name of the routing NgModule should parallel the name of its companion NgModule, using the suffix <code>Routing</code>.\nFor example, <code>ContactModule</code> in <code>contact.module.ts</code> has a routing NgModule named <code>ContactRoutingModule</code> in <code>contact-routing.module.ts</code>.</p>\n<p>Import a routing NgModule only into its companion NgModule.\nIf the companion NgModule is the root <code>AppModule</code>, the <code>AppRoutingModule</code> adds router configuration to its imports with <code>RouterModule.forRoot(routes)</code>.\nAll other routing NgModules are children that import <code>RouterModule.forChild(routes)</code>.</p>\n<p>In your routing NgModule, re-export the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> as a convenience so that components of the companion NgModule have access to router directives such as <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> and <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code>.</p>\n<p>Don't use declarations in a routing NgModule.\nComponents, directives, and pipes are the responsibility of the companion domain NgModule, not the routing NgModule.</p>\n<a id=\"service\"></a>\n<h2 id=\"service-ngmodules\">Service NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#service-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use a service NgModule to provide a utility service such as data access or messaging.\nIdeal service NgModules consist entirely of providers and have no declarations.\nAngular's <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code> is a good example of a service NgModule.</p>\n<p>Use only the root <code>AppModule</code> to import service NgModules.</p>\n<a id=\"widget\"></a>\n<h2 id=\"widget-ngmodules\">Widget NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#widget-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use a widget NgModule to make a component, directive, or pipe available to external NgModules.\nImport widget NgModules into any NgModules that need the widgets in their templates.\nMany third-party UI component libraries are provided as widget NgModules.</p>\n<p>A widget NgModule should consist entirely of declarations, most of them exported.\nIt would rarely have providers.</p>\n<a id=\"shared\"></a>\n<h2 id=\"shared-ngmodules\">Shared NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#shared-ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<p>Put commonly used directives, pipes, and components into one NgModule, typically named <code>SharedModule</code>, and then import just that NgModule wherever you need it in other parts of your app.\nYou can import the shared NgModule in your domain NgModules, including <a href=\"guide/lazy-loading-ngmodules\" title=\"Lazy-loading an NgModule\">lazy-loaded NgModules</a>.\nOne example is <code>SharedModule</code> in the <live-example name=\"ngmodules\"></live-example>, which provides the <code>AwesomePipe</code> custom pipe and <code>HighlightDirective</code> directive.</p>\n<p>Shared NgModules should not include providers, nor should any of its imported or re-exported NgModules include providers.</p>\n<p>To learn how to use shared modules to organize and streamline your code, see <a href=\"guide/sharing-ngmodules\" title=\"Sharing NgModules in an app\">Sharing NgModules in an app</a>.</p>\n<h2 id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/module-types#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>You may also be interested in the following:</p>\n<ul>\n<li>For more about NgModules, see <a href=\"guide/ngmodules\" title=\"Organizing your app with NgModules\">Organizing your app with NgModules</a>.</li>\n<li>To learn more about the root NgModule, see <a href=\"guide/bootstrapping\" title=\"Launching an app with a root NgModule\">Launching an app with a root NgModule</a>.</li>\n<li>To learn about frequently used Angular NgModules and how to import them into your app, see <a href=\"guide/frequent-ngmodules\" title=\"Frequently-used modules\">Frequently-used modules</a>.</li>\n<li>For a complete description of the NgModule metadata properties, see <a href=\"guide/ngmodule-api\" title=\"Using the NgModule metadata\">Using the NgModule metadata</a>.</li>\n</ul>\n<p>If you want to manage NgModule loading and the use of dependencies and services, see the following:</p>\n<ul>\n<li>To learn about loading NgModules eagerly when the app starts, or lazy-loading NgModules asynchronously by the router, see <a href=\"guide/lazy-loading-ngmodules\">Lazy-loading feature modules</a>.</li>\n<li>To understand how to provide a service or other dependency for your app, see <a href=\"guide/providers\" title=\"Providing Dependencies for an NgModule\">Providing Dependencies for an NgModule</a>.</li>\n<li>To learn how to create a singleton service to use in NgModules, see <a href=\"guide/singleton-services\" title=\"Making a service a singleton\">Making a service a singleton</a>.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/entry-components\n - guide/feature-modules\n - guide/lazy-loading-ngmodules\n - guide/ngmodule-api\n - guide/ngmodule-faq\n - guide/ngmodules\n - guide/sharing-ngmodules\n-->\n<!-- links from this doc:\n - api/common/http/HttpClientModule\n - api/router/RouterLink\n - api/router/RouterModule\n - api/router/RouterOutlet\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/glossary#component\n - guide/glossary#directive\n - guide/glossary#ngmodule\n - guide/glossary#pipe\n - guide/glossary#provider\n - guide/glossary#router\n - guide/glossary#service\n - guide/lazy-loading-ngmodules\n - guide/lifecycle-hooks\n - guide/module-types#domain\n - guide/module-types#domain-ngmodules\n - guide/module-types#guidelines-for-creating-ngmodules\n - guide/module-types#next-steps\n - guide/module-types#routed\n - guide/module-types#routed-ngmodules\n - guide/module-types#routing\n - guide/module-types#routing-ngmodules\n - guide/module-types#service\n - guide/module-types#service-ngmodules\n - guide/module-types#shared\n - guide/module-types#shared-ngmodules\n - guide/module-types#summary-of-ngmodule-categories\n - guide/module-types#widget\n - guide/module-types#widget-ngmodules\n - guide/ngmodule-api\n - guide/ngmodules\n - guide/providers\n - guide/providers#limiting-provider-scope-by-lazy-loading-modules\n - guide/router\n - guide/sharing-ngmodules\n - guide/singleton-services\n - https://github.com/angular/angular/edit/master/aio/content/guide/module-types.md?message=docs%3A%20describe%20your%20change...\n-->"
}