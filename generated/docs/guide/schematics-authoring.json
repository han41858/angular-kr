{
  "id": "guide/schematics-authoring",
  "title": "Authoring schematics",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/schematics-authoring.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"authoring-schematics\">Authoring schematics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#authoring-schematics\"><i class=\"material-icons\">link</i></a></h1>\n<p>You can create your own schematics to operate on Angular projects.\nLibrary developers typically package schematics with their libraries in order to integrate them with the Angular CLI.\nYou can also create stand-alone schematics to manipulate the files and constructs in Angular applications as a way of customizing them for your development environment and making them conform to your standards and constraints.\nSchematics can be chained, running other schematics to perform complex operations.</p>\n<p>Manipulating the code in an application has the potential to be both very powerful and correspondingly dangerous.\nFor example, creating a file that already exists would be an error, and if it was applied immediately, it would discard all the other changes applied so far.\nThe Angular Schematics tooling guards against side effects and errors by creating a virtual file system.\nA schematic describes a pipeline of transformations that can be applied to the virtual file system.\nWhen a schematic runs, the transformations are recorded in memory, and only applied in the real file system once they're confirmed to be valid.</p>\n<h2 id=\"schematics-concepts\">Schematics concepts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#schematics-concepts\"><i class=\"material-icons\">link</i></a></h2>\n<p>The public API for schematics defines classes that represent the basic concepts.</p>\n<ul>\n<li>\n<p>The virtual file system is represented by a <code>Tree</code>.   The <code>Tree</code> data structure contains a <em>base</em> (a set of files that already exists) and a <em>staging area</em> (a list of changes to be applied to the base).\nWhen making modifications, you don't actually change the base, but add those modifications to the staging area.</p>\n</li>\n<li>\n<p>A <code>Rule</code> object defines a function that takes a <code>Tree</code>, applies transformations, and returns a new <code>Tree</code>. The main file for a schematic, <code>index.ts</code>, defines a set of rules that implement the schematic's logic.</p>\n</li>\n<li>\n<p>A transformation is represented by an <code>Action</code>. There are four action types: <code><a href=\"\" class=\"code-anchor\">Create</a></code>, <code>Rename</code>, <code>Overwrite</code>, and <code>Delete</code>.</p>\n</li>\n<li>\n<p>Each schematic runs in a context, represented by a <code>SchematicContext</code> object.</p>\n</li>\n</ul>\n<p>The context object passed into a rule provides access to utility functions and metadata that the schematic may need to work with, including a logging API to help with debugging.\nThe context also defines a <em>merge strategy</em> that determines how changes are merged from the staged tree into the base tree. A change can be accepted or ignored, or throw an exception.</p>\n<h3 id=\"defining-rules-and-actions\">Defining rules and actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#defining-rules-and-actions\"><i class=\"material-icons\">link</i></a></h3>\n<p>When you create a new blank schematic with the <a href=\"guide/schematics-authoring#cli\">Schematics CLI</a>, the generated entry function is a <em>rule factory</em>.\nA <code>RuleFactory</code> object defines a higher-order function that creates a <code>Rule</code>.</p>\n<code-example language=\"TypeScript\" header=\"index.ts\">\nimport { Rule, SchematicContext, Tree } from '@angular-devkit/schematics';\n\n// You don't have to export the function as default.\n// You can also have more than one rule factory per file.\nexport function helloWorld(_options: any): Rule {\n return (tree: Tree, _context: SchematicContext) => {\n   return tree;\n };\n}\n</code-example>\n<p>Your rules can make changes to your projects by calling external tools and implementing logic.\nYou need a rule, for example, to define how a template in the schematic is to be merged into the hosting project.</p>\n<p>Rules can make use of utilities provided with the <code>@schematics/angular</code> package. Look for helper functions for working with modules, dependencies, TypeScript, AST, JSON, Angular CLI workspaces and projects, and more.</p>\n<code-example language=\"TypeScript\" header=\"index.ts\">\n\nimport {\n  JsonAstObject,\n  JsonObject,\n  JsonValue,\n  Path,\n  normalize,\n  parseJsonAst,\n  strings,\n} from '@angular-devkit/core';\n\n</code-example>\n<h3 id=\"defining-input-options-with-a-schema-and-interfaces\">Defining input options with a schema and interfaces<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#defining-input-options-with-a-schema-and-interfaces\"><i class=\"material-icons\">link</i></a></h3>\n<p>Rules can collect option values from the caller and inject them into templates.\nThe options available to your rules, with their allowed values and defaults, are defined in the schematic's JSON schema file, <code>&#x3C;schematic>/schema.json</code>.\nYou can define variable or enumerated data types for the schema using TypeScript interfaces.</p>\n<p>The schema defines the types and default values of variables used in the schematic.\nFor example, the hypothetical \"Hello World\" schematic might have the following schema.</p>\n<code-example language=\"json\" header=\"src/hello-world/schema.json\">\n\n{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"default\": \"world\"\n        },\n        \"useColor\": {\n            \"type\": \"boolean\"\n        }\n    }\n}\n</code-example>\n<p>You can see examples of schema files for the Angular CLI command schematics in <a href=\"https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json\"><code>@schematics/angular</code></a>.</p>\n<h3 id=\"schematic-prompts\">Schematic prompts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#schematic-prompts\"><i class=\"material-icons\">link</i></a></h3>\n<p>Schematic <em>prompts</em> introduce user interaction into schematic execution.\nYou can configure schematic options to display a customizable question to the user.\nThe prompts are displayed before the execution of the schematic, which then uses the response as the value for the option.\nThis allows users to direct the operation of the schematic without requiring in-depth knowledge of the full spectrum of available options.</p>\n<p>The \"Hello World\" schematic might, for example, ask the user for their name, and display that name in place of the default name \"world\". To define such a prompt, add an <code>x-prompt</code> property to the schema for the <code>name</code> variable.</p>\n<p>Similarly, you can add a prompt to allow the user to decide whether the schematic will use color when executing its hello action. The schema with both prompts would be as follows.</p>\n<code-example language=\"json\" header=\"src/hello-world/schema.json\">\n\n{\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 1,\n            \"default\": \"world\",\n            \"x-prompt\": \"What is your name?\"\n        },\n        \"useColor\": {\n            \"type\": \"boolean\",\n            \"x-prompt\": \"Would you like the response in color?\"\n        }\n    }\n}\n</code-example>\n<h4 id=\"prompt-short-form-syntax\">Prompt short-form syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#prompt-short-form-syntax\"><i class=\"material-icons\">link</i></a></h4>\n<p>These examples use a shorthand form of the prompt syntax, supplying only the text of the question.\nIn most cases, this is all that is required.\nNotice however, that the two prompts expect different types of input.\nWhen using the shorthand form, the most appropriate type is automatically selected based on the property's schema.\nIn the example, the <code>name</code> prompt uses the <code>input</code> type because it it is a string property.\nThe <code>useColor</code> prompt uses a <code>confirmation</code> type because it is a Boolean property.\nIn this case, \"yes\" corresponds to <code>true</code> and \"no\" corresponds to <code>false</code>.</p>\n<p>There are three supported input types.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Input type</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">confirmation</td>\n<td align=\"left\">A yes or no question; ideal for Boolean options.</td>\n</tr>\n<tr>\n<td align=\"left\">input</td>\n<td align=\"left\">Textual input; ideal for string or number options.</td>\n</tr>\n<tr>\n<td align=\"left\">list</td>\n<td align=\"left\">A predefined set of allowed values.</td>\n</tr>\n</tbody>\n</table>\n<p>In the short form, the type is inferred from the property's type and constraints.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Property Schema</th>\n<th align=\"left\">Prompt Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">\"type\": \"boolean\"</td>\n<td align=\"left\">confirmation (\"yes\"=<code>true</code>, \"no\"=<code>false</code>)</td>\n</tr>\n<tr>\n<td align=\"left\">\"type\": \"string\"</td>\n<td align=\"left\">input</td>\n</tr>\n<tr>\n<td align=\"left\">\"type\": \"number\"</td>\n<td align=\"left\">input (only valid numbers accepted)</td>\n</tr>\n<tr>\n<td align=\"left\">\"type\": \"integer\"</td>\n<td align=\"left\">input (only valid numbers accepted)</td>\n</tr>\n<tr>\n<td align=\"left\">\"enum\": [...]</td>\n<td align=\"left\">list \t(enum members become list selections)</td>\n</tr>\n</tbody>\n</table>\n<p>In the following example, the property takes an enumerated value, so the schematic automatically chooses the list type, and creates a menu from the possible values.</p>\n<code-example language=\"json\" header=\"schema.json\">\n\n    \"style\": {\n      \"description\": \"The file extension or preprocessor to use for style files.\",\n      \"type\": \"string\",\n      \"default\": \"css\",\n      \"enum\": [\n        \"css\",\n        \"scss\",\n        \"sass\",\n        \"less\",\n        \"styl\"\n      ],\n      \"x-prompt\": \"Which stylesheet format would you like to use?\"\n    }\n\n</code-example>\n<p>The prompt runtime automatically validates the provided response against the constraints provided in the JSON schema.\nIf the value is not acceptable, the user is prompted for a new value.\nThis ensures that any values passed to the schematic meet the expectations of the schematic's implementation, so that you do not need to add additional checks within the schematic's code.</p>\n<h4 id=\"prompt-long-form-syntax\">Prompt long-form syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#prompt-long-form-syntax\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>x-prompt</code> field syntax supports a long form for cases where you require additional customization and control over the prompt.\nIn this form, the <code>x-prompt</code> field value is a JSON object with subfields that customize the behavior of the prompt.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Field</th>\n<th align=\"left\">Data Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">type</td>\n<td align=\"left\"><code>confirmation</code>, <code>input</code>, or <code>list</code> (selected automatically in short form)</td>\n</tr>\n<tr>\n<td align=\"left\">message</td>\n<td align=\"left\">string (required)</td>\n</tr>\n<tr>\n<td align=\"left\">items</td>\n<td align=\"left\">string and/or label/value object pair (only valid with type <code>list</code>)</td>\n</tr>\n</tbody>\n</table>\n<p>The following example of the long form is from the JSON schema for the schematic that the CLI uses to <a href=\"https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56\">generate applications</a>.\nIt defines the prompt that allows users to choose which style preprocessor they want to use for the application being created.\nBy using the long form, the schematic can provide more explicit formatting of the menu choices.</p>\n<code-example language=\"json\" header=\"package/schematics/angular/application/schema.json\">\n\n    \"style\": {\n      \"description\": \"The file extension or preprocessor to use for style files.\",\n      \"type\": \"string\",\n      \"default\": \"css\",\n      \"enum\": [\n        \"css\",\n        \"scss\",\n        \"sass\",\n        \"less\",\n        \"styl\"\n      ],\n      \"x-prompt\": {\n        \"message\": \"Which stylesheet format would you like to use?\",\n        \"type\": \"list\",\n        \"items\": [\n          { \"value\": \"css\",  \"label\": \"CSS\" },\n          { \"value\": \"scss\", \"label\": \"SCSS   [ https://sass-lang.com/documentation/syntax#scss                ]\" },\n          { \"value\": \"sass\", \"label\": \"Sass   [ https://sass-lang.com/documentation/syntax#the-indented-syntax ]\" },\n          { \"value\": \"less\", \"label\": \"Less   [ http://lesscss.org                                             ]\" },\n          { \"value\": \"styl\", \"label\": \"Stylus [ http://stylus-lang.com                                         ]\" }\n        ]\n      },\n    },\n</code-example>\n<h4 id=\"x-prompt-schema\">x-prompt schema<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#x-prompt-schema\"><i class=\"material-icons\">link</i></a></h4>\n<p>The JSON schema that defines a schematic's options supports extensions to allow the declarative definition of prompts and their respective behavior.\nNo additional logic or changes are required to the code of a schematic to support the prompts.\nThe following JSON schema is a complete description of the long-form syntax for the <code>x-prompt</code> field.</p>\n<code-example language=\"json\" header=\"x-prompt schema\">\n\n{\n    \"oneOf\": [\n        { \"type\": \"string\" },\n        {\n            \"type\": \"object\",\n            \"properties\": {\n                \"type\": { \"type\": \"string\" },\n                \"message\": { \"type\": \"string\" },\n                \"items\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"oneOf\": [\n                            { \"type\": \"string\" },\n                            {\n                                \"type\": \"object\",\n                                \"properties\": {\n                                    \"label\": { \"type\": \"string\" },\n                                    \"value\": { }\n                                },\n                                \"required\": [ \"value\" ]\n                            }\n                        ]\n                    }\n                }\n            },\n            \"required\": [ \"message\" ]\n        }\n    ]\n}\n\n</code-example>\n<a id=\"cli\"></a>\n<h2 id=\"schematics-cli\">Schematics CLI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#schematics-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p>Schematics come with their own command-line tool.\nUsing Node 6.9 or above, install the Schematics command line tool globally:</p>\n<code-example language=\"bash\">\nnpm install -g @angular-devkit/schematics-cli\n</code-example>\n<p>This installs the <code>schematics</code> executable, which you can use to create a new schematics collection in its own project folder, add a new schematic to an existing collection, or extend an existing schematic.</p>\n<p>In the following sections, we will create a new schematics collection using the CLI in order to introduce the files and file structure, and some of the basic concepts.</p>\n<p>The most common use of schematics, however, is to integrate an Angular library with the Angular CLI.\nYou can do this by creating the schematic files directly within the library project in an Angular workspace, without using the Schematics CLI.\nSee <a href=\"guide/schematics-for-libraries\">Schematics for Libraries</a>.</p>\n<h3 id=\"creating-a-schematics-collection\">Creating a schematics collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#creating-a-schematics-collection\"><i class=\"material-icons\">link</i></a></h3>\n<p>The following command creates a new schematic named <code>hello-world</code> in a new project folder of the same name.</p>\n<code-example language=\"bash\">\nschematics blank --name=hello-world\n</code-example>\n<p>The <code>blank</code> schematic is provided by the Schematics CLI. The command creates a new project folder (the root folder for the collection) and an initial named schematic in the collection.</p>\n<p>Go to the collection folder, install your npm dependencies, and open your new collection in your favorite editor to see the generated files. For example, if you are using VSCode:</p>\n<code-example language=\"bash\">\ncd hello-world\nnpm install\nnpm run build\ncode .\n</code-example>\n<p>The initial schematic gets the same name as the project folder, and is generated in <code>src/hello-world</code>.\nYou can add related schematics to this collection, and modify the generated skeleton code to define your schematic's functionality.\nEach schematic name must be unique within the collection.</p>\n<h3 id=\"running-a-schematic\">Running a schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#running-a-schematic\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use the <code>schematics</code> command to run a named schematic.\nProvide the path to the project folder, the schematic name, and any mandatory options, in the following format.</p>\n<code-example language=\"bash\">\nschematics &#x3C;path-to-schematics-project>:&#x3C;schematics-name> --&#x3C;required-option>=&#x3C;value>\n</code-example>\n<p>The path can be absolute or relative to the current working directory where the command is executed.\nFor example, to run the schematic we just generated (which has no required options), use the following command.</p>\n<code-example language=\"bash\">\nschematics .:hello-world\n</code-example>\n<h3 id=\"adding-a-schematic-to-a-collection\">Adding a schematic to a collection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#adding-a-schematic-to-a-collection\"><i class=\"material-icons\">link</i></a></h3>\n<p>To add a schematic to an existing collection, use the same command you use to start a new schematics project, but run the command inside the project folder.</p>\n<code-example language=\"bash\">\ncd hello-world\nschematics blank --name=goodbye-world\n</code-example>\n<p>The command generates the new named schematic inside your collection, with a main <code>index.ts</code> file and its associated test spec.\nIt also adds the name, description, and factory function for the new schematic to the collection's schema in the <code>collection.json</code> file.</p>\n<h2 id=\"collection-contents\">Collection contents<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#collection-contents\"><i class=\"material-icons\">link</i></a></h2>\n<p>The top level of the root project folder for a collection contains configuration files, a <code>node_modules</code> folder, and a <code>src/</code> folder.\nThe <code>src/</code> folder contains subfolders for named schematics in the collection, and a schema, <code>collection.json</code>, which describes the collected schematics.\nEach schematic is created with a name, description, and factory function.</p>\n<code-example language=\"none\">\n{\n  \"$schema\":\n     \"../node_modules/@angular-devkit/schematics/collection-schema.json\",\n  \"schematics\": {\n    \"hello-world\": {\n      \"description\": \"A blank schematic.\",\n      \"factory\": \"./hello-world/index#helloWorld\"\n    }\n  }\n}\n</code-example>\n<ul>\n<li>The <code>$schema</code> property specifies the schema that the CLI uses for validation.</li>\n<li>The <code>schematics</code> property lists named schematics that belong to this collection.\nEach schematic has a plain-text description, and points to the generated entry function in the main file.</li>\n<li>The <code>factory</code> property points to the generated entry function. In this example, you invoke the <code>hello-world</code> schematic by calling the <code>helloWorld()</code> factory function.</li>\n<li>The optional  <code>schema</code> property points to a JSON schema file that defines the command-line options available to the schematic.</li>\n<li>The optional <code>aliases</code> array specifies one or more strings that can be used to invoke the schematic.\nFor example, the schematic for the Angular CLI “generate” command has an alias “g”, allowing you to use the command <code>ng g</code>.</li>\n</ul>\n<h3 id=\"named-schematics\">Named schematics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/schematics-authoring#named-schematics\"><i class=\"material-icons\">link</i></a></h3>\n<p>When you use the Schematics CLI to create a blank schematics project, the new blank schematic is the first member of the collection, and has the same name as the collection.\nWhen you add a new named schematic to this collection, it is automatically added to the  <code>collection.json</code>  schema.</p>\n<p>In addition to the name and description, each schematic has a <code>factory</code> property that identifies the schematic’s entry point.\nIn the example, you invoke the schematic's defined functionality by calling the <code>helloWorld()</code> function in the main file,  <code>hello-world/index.ts</code>.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/schematics/collection-files.gif\" alt=\"overview\" width=\"1149\" height=\"490\">\n</div>\n<p>Each named schematic in the collection has the following main parts.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>index.ts</code></td>\n<td align=\"left\">Code that defines the transformation logic for a named schematic.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>schema.json</code></td>\n<td align=\"left\">Schematic variable definition.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>schema.d.ts</code></td>\n<td align=\"left\">Schematic variables.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>files/</code></td>\n<td align=\"left\">Optional component/template files to replicate.</td>\n</tr>\n</tbody>\n</table>\n<p>It is possible for a schematic to provide all of its logic in the <code>index.ts</code> file, without additional templates.\nYou can create dynamic schematics for Angular, however, by providing components and templates in the <code>files/</code> folder, like those in standalone Angular projects.\nThe logic in the index file configures these templates by defining rules that inject data and modify variables.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/schematics\n-->\n<!-- links from this doc:\n - guide/schematics-authoring#adding-a-schematic-to-a-collection\n - guide/schematics-authoring#authoring-schematics\n - guide/schematics-authoring#cli\n - guide/schematics-authoring#collection-contents\n - guide/schematics-authoring#creating-a-schematics-collection\n - guide/schematics-authoring#defining-input-options-with-a-schema-and-interfaces\n - guide/schematics-authoring#defining-rules-and-actions\n - guide/schematics-authoring#named-schematics\n - guide/schematics-authoring#prompt-long-form-syntax\n - guide/schematics-authoring#prompt-short-form-syntax\n - guide/schematics-authoring#running-a-schematic\n - guide/schematics-authoring#schematic-prompts\n - guide/schematics-authoring#schematics-cli\n - guide/schematics-authoring#schematics-concepts\n - guide/schematics-authoring#x-prompt-schema\n - guide/schematics-for-libraries\n - https://github.com/angular/angular-cli/blob/7.0.x/packages/schematics/angular/application/schema.json\n - https://github.com/angular/angular-cli/blob/ba8a6ea59983bb52a6f1e66d105c5a77517f062e/packages/schematics/angular/application/schema.json#L56\n - https://github.com/angular/angular/edit/master/aio/content/guide/schematics-authoring.md?message=docs%3A%20describe%20your%20change...\n-->"
}