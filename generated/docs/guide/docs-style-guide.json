{
  "id": "guide/docs-style-guide",
  "title": "Angular Documentation Style Guide",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/docs-style-guide.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"angular-documentation-style-guide\">Angular Documentation Style Guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#angular-documentation-style-guide\"><i class=\"material-icons\">link</i></a></h1>\n<!-- formerly Authors Style Guide -->\n<p>This Style Guide is for anyone who contributes to the Angular documentation (this site).\nThese guidelines should be followed by all authors.\nDeviations must be approved by a documentation editor.</p>\n<p>The guidelines described here serve two purposes: </p>\n<ul>\n<li>\n<p>To ensure a high-quality, consistent experience for Angular documentation users. </p>\n</li>\n<li>\n<p>To simplify the writing process for contributing authors.\nThis guide helps you make decisions about tone, voice, and style.\nIt also helps you find the right markup quickly. </p>\n</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>This guide is a <em>living document</em>; it changes over time.\nWe strive for consistency to the extent feasible, but you may find parts of our documentation that don't match this style guide.\nWhen in doubt, <strong>follow this guide rather than imitating existing documents.</strong></p>\n</div>\n<h2 id=\"scope-of-these-guidelines\">Scope of these guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#scope-of-these-guidelines\"><i class=\"material-icons\">link</i></a></h2>\n<p>We ask all contributing authors to adhere to three aspects of style: </p>\n<ul>\n<li><strong>Writing style:</strong> Word usage, grammar, capitalization, and punctuation.\nAdherence to Angular's writing guidelines ensures a consistent \"voice\", helps ensure accuracy of the information, and facilitates use world-wide, by audiences with different backgrounds. </li>\n</ul>\n<ul>\n<li><strong>Markup style:</strong> How to include images, tables, alert boxes, and code snippets.\nAngular docs are written in Markdown, with custom extensions for this site. Correct markup ensures a consistent look-and-feel, and is essential for the doc to build and function correctly. </li>\n</ul>\n<ul>\n<li><strong>Angular coding style:</strong> Coding style for example apps and code snippets.\nCode examples are encouraged for demonstrating how to apply the concepts and features discussed.\nAngular has a custom framework that enables authors to include code snippets directly from example apps  that are automatically tested as part of doc builds.\nTo contribute example code, you must understand Angular itself and the custom framework for Angular doc examples. </li>\n</ul>\n<p>For each aspect of style, the following table explains where to find the primary guidelines and what this Angular Documentation Style Guide offers. </p>\n<table>\n<thead>\n<tr>\n<th>Style</th>\n<th>Guidelines</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Writing style</strong></td>\n<td>Primary: <a href=\"https://developers.google.com/style/\">Google Developer Documentation Style Guide</a><br>This guide: Specifies any special considerations for Angular docs.</td>\n</tr>\n<tr>\n<td><strong>Markup style</strong></td>\n<td>Primary: This guide<br>This guide: Specifies guidelines for markup of guides and tutorials, which are written primarily in Markdown.</td>\n</tr>\n<tr>\n<td><strong>Angular coding style</strong></td>\n<td>Primary: <a href=\"guide/styleguide\" title=\"Angular Application Code Style Guide\">Angular Style Guide</a>.<br>This guide: How to create, store, and include code examples in guides and tutorials.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"alert is-helpful\">\n<p>Note: Angular API and CLI reference docs are generated from source code and/or related source files, which may have other markup styles and other ways of including code examples.</p>\n</div>\n<h2 id=\"doc-generation-and-tooling\">Doc generation and tooling<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#doc-generation-and-tooling\"><i class=\"material-icons\">link</i></a></h2>\n<p>To make changes to the documentation pages and sample code, clone the <a href=\"https://github.com/angular/angular\" title=\"Angular repo\">Angular github repository</a> and go to the <code>aio/</code> folder.</p>\n<p>The <a href=\"https://github.com/angular/angular/blob/master/aio/README.md\" title=\"AIO ReadMe\">aio/README.md</a> explains how to install and use the tools to edit and test your changes.</p>\n<p>Here are a few essential commands for guide page authors.</p>\n<ol>\n<li>\n<p><code>yarn setup</code> — installs packages; builds docs, stackblitz, and zips.</p>\n</li>\n<li>\n<p><code>yarn docs-watch --watch-only</code> — watches for saved content changes and refreshes the browser. The (optional) <code>--watch-only</code> flag skips the initial docs rebuild.</p>\n</li>\n<li>\n<p><code>yarn start</code>  —  starts the doc viewer application so you can see your local changes in the browser.</p>\n</li>\n<li>\n<p><a href=\"http://localhost:4200/\">http://localhost:4200/</a>  —  browse to the app running locally.</p>\n</li>\n</ol>\n<p>You can combine <code>yarn docs-watch</code> and <code>yarn start</code> into one command with <code>yarn serve-and-sync</code>.</p>\n<h2 id=\"guide-pages\">Guide pages<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#guide-pages\"><i class=\"material-icons\">link</i></a></h2>\n<p> All but a few guide pages are <a href=\"https://daringfireball.net/projects/markdown/syntax\" title=\"markdown\">markdown</a> files with an <code>.md</code> extension.</p>\n<p>Every guide page file is stored in the <code>content/guide</code> directory. Although the <a href=\"guide/docs-style-guide#navigation\">side navigation</a> panel displays as a hierarchy, the directory is flat with no sub-folders.\nThe flat folder approach allows us to shuffle the apparent navigation structure without moving page files or redirecting old page URLs.</p>\n<p>The doc generation process consumes the markdown files in the <code>content/guide</code> directory and produces JSON files in the <code>src/generated/docs/guide</code> directory, which is also flat. Those JSON files contain a combination of document metadata and HTML content.</p>\n<p>The reader requests a page by its Page URL. The doc viewer fetches the corresponding JSON file, interprets it, and renders it as fully-formed HTML page.</p>\n<p>Page URLs mirror the <code>content</code> file structure. The URL for the page of a guide is in the form <code>guide/{page-name}</code>. The page for <em>this</em> \"Authors Style Guide\" is located at <code>content/guide/docs-style-guide.md</code> and its URL is <code>guide/docs-style-guide</code>.</p>\n<div class=\"alert is-helpful\">\n<p><em>Tutorial</em> pages are exactly like guide pages. The only difference is that they reside in <code>content/tutorial</code> instead of <code>content/guide</code> and have URLs like <code>tutorial/{page-name}</code>.</p>\n<p><em>API</em> pages are generated from Angular source code into the <code>src/generated/docs/api</code> directory.\nThe doc viewer translates URLs that begin <code>api/</code> into requests for document JSON files in that directory. This style guide does not discuss creation or maintenance of API pages.</p>\n<p><em>Marketing</em> pages are similar to guide pages. They're located in the <code>content/marketing</code> directory. While they can be markdown files, they may be static HTML pages or dynamic HTML pages that render with JSON data.</p>\n<p>Only a few people are authorized to write marketing pages. This style guide does not discuss creation or maintenance of marketing pages.</p>\n</div>\n<h2 id=\"markdown-and-html\">Markdown and HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#markdown-and-html\"><i class=\"material-icons\">link</i></a></h2>\n<p>While documentation guide pages ultimately render as HTML, almost all of them are written in <a href=\"https://daringfireball.net/projects/markdown/syntax\" title=\"markdown\">markdown</a>.</p>\n<p>Markdown is easier to read and to edit than HTML. Many editors (including Visual Studio Code) can render markdown as you type it.</p>\n<p>From time to time you'll have to step away from markdown and write a portion of the document in HTML. Markdown allows you to mix HTML and markdown in the same document.</p>\n<p>Standard markdown processors don't allow you to put markdown <em>within</em> HTML tags. But the Angular documentation markdown processor <strong>supports markdown within HTML</strong>, as long as you follow one rule:</p>\n<div class=\"alert is-critical\">\n<p><strong>Always</strong> follow every opening and closing HTML tag with <em>a blank line</em>.</p>\n</div>\n<code-example language=\"html\">\n&#x3C;div class=\"alert is-critical\">\n\n  **Always** follow every opening and closing <a href=\"api/core/SecurityContext#HTML\" class=\"code-anchor\">HTML</a> tag with _a blank line_.\n\n&#x3C;/div>\n</code-example>\n<div class=\"alert is-helpful\">\n<p>  It is customary but not required to <em>precede</em> the <em>closing HTML</em> tag with a blank line as well.</p>\n</div>\n<h2 id=\"title\">Title<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#title\"><i class=\"material-icons\">link</i></a></h2>\n<p>Every guide document must have a title.</p>\n<p>The title should appear at the top of the physical page.\nBegin the title with the markdown <code>#</code> character. Alternatively, you can write the equivalent <code>&#x3C;h1></code>.</p>\n<code-example language=\"html\">\n  # Authors <a href=\"api/animations/AnimationMetadataType#Style\" class=\"code-anchor\">Style</a> Guide\n</code-example>\n<p><strong>Only one title (<code>&#x3C;h1></code>) per document!</strong></p>\n<p>Title text should be in \"Title Case\", which means that you use capital letters to start the first words and all <em>principal</em> words. Use lower case letters for <em>secondary</em> words such as \"in\", \"of\", and \"the\".</p>\n<code-example language=\"html\">\n  # The Meat of the Matter\n</code-example>\n<p><strong>Always follow the title with at least one blank line.</strong></p>\n<h2 id=\"sections\">Sections<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#sections\"><i class=\"material-icons\">link</i></a></h2>\n<p>A typical document is divided into sections.</p>\n<p>All section heading text should be in \"Sentence case\", which means the first word is capitalized and all other words are lower case.</p>\n<p><strong>Always follow the section heading with at least one blank line.</strong></p>\n<h2 class=\"no-toc\" id=\"main-section-heading\">\nMain section heading\n<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#main-section-heading\"><i class=\"material-icons\">link</i></a></h2>\nThere are usually one or more main sections that may be further divided into secondary sections.\n<p>Begin a main section heading with the markdown <code>##</code> characters. Alternatively, you can write the equivalent <code>&#x3C;h2></code> HTML tag.</p>\n<p>The main section heading should be followed by a blank line and then the content for that heading.</p>\n<code-example language=\"html\">\n  ## Sections\n\n  A typical <a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a> is divided into sections.\n</code-example>\n<h3 class=\"no-toc\" id=\"secondary-section-heading\">\nSecondary section heading\n<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#secondary-section-heading\"><i class=\"material-icons\">link</i></a></h3>\n<p>A secondary section heading is related to a main heading and <em>falls textually within</em> the bounds of that main heading.</p>\n<p>Begin a secondary heading with the markdown <code>###</code> characters. Alternatively, you can write the equivalent <code>&#x3C;h3></code> HTML tag.</p>\n<p>The secondary heading should be followed by a blank line and then the content for that heading.</p>\n<code-example language=\"html\">\n  ### Secondary section heading\n\n  A secondary section ...\n</code-example>\n<h4 id=\"additional-section-headings\">Additional section headings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#additional-section-headings\"><i class=\"material-icons\">link</i></a></h4>\n<p>Try to minimize the heading depth, preferably only two. But more headings, such as this one, are permitted if they make sense.</p>\n<p><strong>N.B.</strong>:  The <a href=\"guide/docs-style-guide#table-of-contents\">Table-of-contents</a> generator only considers main (<code>&#x3C;h2></code>) and secondary (<code>&#x3C;h3></code>) headings.</p>\n<code-example language=\"html\">\n  #### Additional section headings\n\n  Try to minimize ...\n</code-example>\n<h2 id=\"table-of-contents\">Table of contents<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#table-of-contents\"><i class=\"material-icons\">link</i></a></h2>\n<p>Most pages display a table of contents (TOC). The TOC appears in the right panel when the viewport is wide. When narrow, the TOC appears in an expandable/collapsible region near the top of the page.</p>\n<p>You should not create your own TOC by hand. The TOC is generated automatically from the page's main and secondary section headers.</p>\n<p>To exclude a heading from the TOC, create the heading as an <code>&#x3C;h2></code> or <code>&#x3C;h3></code> element with a class called 'no-toc'. You can't do this with markdown.</p>\n<code-example language=\"html\">\n&#x3C;h3 class=\"no-toc\">\nThis heading is not displayed in the TOC\n&#x3C;/h3>\n</code-example>\n<p>You can turn off TOC generation for the <em>entire</em> page by writing the title with an <code>&#x3C;h1></code> tag and the <code>no-toc</code> class.</p>\n<code-example language=\"html\">\n&#x3C;h1 class=\"no-toc\">\nA guide without <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> TOC\n&#x3C;/h1>\n</code-example>\n<h2 id=\"navigation\">Navigation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#navigation\"><i class=\"material-icons\">link</i></a></h2>\n<p>The navigation links at the top, left, and bottom of the screen are generated from the JSON configuration file, <code>content/navigation.json</code>.</p>\n<p>The authority to change the <code>navigation.json</code> file is limited to a few core team members.\nBut for a new guide page, you should suggest a navigation title and position in the left-side navigation panel called the \"side nav\".</p>\n<p>Look for the <code>SideNav</code> node in <code>navigation.json</code>. The <code>SideNav</code> node is an array of navigation nodes. Each node is either an <em>item</em> node for a single document or a <em>header</em> node with child nodes.</p>\n<p>Find the header for your page. For example, a guide page that describes an Angular feature is probably a child of the <code>Fundamentals</code> header.</p>\n<code-example language=\"html\">\n{\n  \"title\": \"Fundamentals\",\n  \"tooltip\": \"The fundamentals of Angular\",\n  \"children\": [ ... ]\n}\n</code-example>\n<p>A <em>header</em> node child can be an <em>item</em> node or another <em>header</em> node. If your guide page belongs under a sub-header, find that sub-header in the JSON.</p>\n<p>Add an <em>item</em> node for your guide page as a child of the appropriate <em>header</em> node. It probably looks something like this one.</p>\n<code-example language=\"html\">\n{\n  \"url\": \"guide/architecture\",\n  \"title\": \"Architecture\",\n  \"tooltip\": \"The basic building blocks of Angular applications.\"\n}\n</code-example>\n<p>A navigation node has the following properties:</p>\n<ul>\n<li>\n<p><code>url</code>- the URL of the guide page (<em>item node only</em>).</p>\n</li>\n<li>\n<p><code>title</code>- the text displayed in the side nav.</p>\n</li>\n<li>\n<p><code>tooltip</code> - text that appears when the reader hovers over the navigation link.</p>\n</li>\n<li>\n<p><code>children</code> - an array of child nodes (<em>header node only</em>).</p>\n</li>\n<li>\n<p><code>hidden</code> - defined and set true if this is a guide page that should <em>not</em> be displayed in the navigation panel. Rarely needed, it is a way to hide the page from navigation while making it available to readers who should know about it. <em>This</em> \"Authors Style Guide\" is a hidden page.</p>\n</li>\n</ul>\n<div class=\"alert is-critical\">\n<p>Do not create a node that is both a <em>header</em> and an <em>item</em> node. That is, do not specify the <code>url</code> property of a <em>header</em> node.</p>\n</div>\n<div class=\"alert is-critical\">\n<p>The current guidelines allow for a three-level navigation structure with two header levels. Don't add a third header level.</p>\n</div>\n<h2 id=\"code-snippets\">Code snippets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-snippets\"><i class=\"material-icons\">link</i></a></h2>\n<p>Guides are rich in examples of working Angular code. Example code can be commands entered in a terminal window, a fragment of TypeScript or HTML, or an entire code file.</p>\n<p>Whatever the source, the doc viewer renders them as \"code snippets\", either individually with the <a href=\"guide/docs-style-guide#code-example\" title=\"code-example\"><em>code-example</em></a> component or as a tabbed collection with the <a href=\"guide/docs-style-guide#code-tabs\" title=\"code-tabs\"><em>code-tabs</em></a> component.</p>\n<a id=\"code-example\"></a>\n<h3 id=\"code-example\">Code example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-example\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can display a simple, inline code snippet with the markdown backtick syntax.\nWe generally prefer to display a code snippet with the Angular documentation <em>code-example</em> component\nrepresented by the <code>&#x3C;code-example></code> tag.</p>\n<h3 class=\"no-toc\" id=\"inline-code-snippets\">Inline code-snippets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#inline-code-snippets\"><i class=\"material-icons\">link</i></a></h3>\n<p>You should source code snippets <a href=\"guide/docs-style-guide#from-code-samples\">from working sample code</a> when possible.\nBut there are times when an inline snippet is the better choice.</p>\n<p>For terminal input and output, put the content between <code>&#x3C;code-example></code> tags, set the CSS class to <code>code-shell</code>, and set the language attribute to <code>sh</code> as in this example.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n</code-example>\n<code-example language=\"html\">\n&#x3C;code-example language=\"sh\" class=\"code-shell\">\n  npm start\n&#x3C;/code-example>\n</code-example>\n<p>Inline, hand-coded snippets like this one are <em>not</em> testable and, therefore, are intrinsically unreliable.\nThis example belongs to the small set of pre-approved, inline snippets that includes\nuser input in a command shell or the <em>output</em> of some process.</p>\n<p><strong>Do not write inline code snippets</strong> unless you have a good reason and the editor's permission to do so.\nIn all other cases, code snippets should be generated automatically from tested code samples.</p>\n<a id=\"from-code-samples\"></a>\n<h3 class=\"no-toc\" id=\"code-snippets-and-code-samples\">Code snippets and code samples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-snippets-and-code-samples\"><i class=\"material-icons\">link</i></a></h3>\n<p>One of the documentation design goals is that guide page code snippets should be examples of real, working code.</p>\n<p>We meet this goal by displaying code snippets that are derived directly from standalone code samples, written specifically for these guide pages.</p>\n<p>The author of a guide page is responsible for the code sample that supports that page.\nThe author must also write end-to-end tests for the sample.</p>\n<p>Code samples are located in sub-folders of the <code>content/examples</code> directory of the <code>angular/angular</code> repository. An example folder name should be the same as the guide page it supports.</p>\n<div class=\"alert is-helpful\">\n<p>A guide page might not have its own sample code. It might refer instead to a sample belonging to another page.</p>\n</div>\n<p>The Angular CI process runs all end-to-end tests for every Angular PR. Angular re-tests the samples after every new version of a sample and every new version of Angular itself.</p>\n<p>When possible, every snippet of code on a guide page should be derived from a code sample file. You tell the Angular documentation engine which code file - or fragment of a code file - to display by configuring <code>&#x3C;code-example></code> attributes.</p>\n<h4 id=\"code-snippet-from-a-file\">Code snippet from a file<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-snippet-from-a-file\"><i class=\"material-icons\">link</i></a></h4>\n<p><em>This</em> \"Authors Doc Style Guide\" has its own sample application, located in the <code>content/examples/docs-style-guide</code> folder.</p>\n<p>The following <em>code-example</em> displays the sample's <code>app.module.ts</code>.</p>\n<code-example path=\"docs-style-guide/src/app/app.module.ts\" header=\"src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>Here's the brief markup that produced that lengthy snippet:</p>\n<code-example language=\"html\">\n&#x3C;code-example\n  path=\"docs-style-guide/src/app/app.module.ts\"\n  header=\"src/app/app.module.ts\">\n&#x3C;/code-example>\n</code-example>\n<p>You identified the snippet's source file by setting the <code>path</code> attribute to sample folder's location <em>within</em> <code>content/examples</code>.\nIn this example, that path is  <code>docs-style-guide/src/app/app.module.ts</code>.</p>\n<p>You added a header to tell the reader where to find the file by setting the <code>header</code> attribute.\nFollowing convention, you set the <code>header</code> attribute to the file's location within the sample's root folder.</p>\n<div class=\"alert is-helpful\">\n<p>Unless otherwise noted, all code snippets in this page are derived from sample source code\nlocated in the <code>content/examples/docs-style-guide</code> directory.</p>\n</div>\n<div class=\"alert is-important\">\n<p>The doc tooling reports an error if the file identified in the path does not exist <strong>or is <em>git</em>-ignored</strong>.</p>\n<p>Most <code>.js</code> files are <em>git</em>-ignored.\nIf you want to include an ignored code file in your project and display it in a guide you must <em>un-ignore</em> it.</p>\n<p>The preferred way to un-ignore a file is to update the <code>content/examples/.gitignore</code> like this:</p>\n<code-example header=\"content/examples/.gitignore\">\n  # my-guide\n  !my-guide/src/something.js\n  !my-guide/more-javascript*.js\n</code-example>\n</div>\n<h4 id=\"code-example-attributes\">Code-example attributes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-example-attributes\"><i class=\"material-icons\">link</i></a></h4>\n<p>You control the <em>code-example</em> output by setting one or more of its attributes:</p>\n<ul>\n<li>\n<p><code>path</code>- the path to the file in the <code>content/examples</code> folder.</p>\n</li>\n<li>\n<p><code>header</code>- the header of the code listing.</p>\n</li>\n<li>\n<p><code>region</code>- displays the source file fragment with that region name; regions are identified by <em>docregion</em> markup in the source file, as explained <a href=\"guide/docs-style-guide#region\" title=\"Displaying a code fragment\">below</a>.</p>\n</li>\n<li>\n<p><code>linenums</code>- value may be <code>true</code>, <code>false</code>, or a <code>number</code>. When not specified, line numbers are automatically displayed when there are greater than 10 lines of code. The rarely used <code>number</code> option starts line numbering at the given value. <code>linenums=4</code> sets the starting line number to 4.</p>\n</li>\n<li>\n<p><code>class</code>- code snippets can be styled with the CSS classes <code>no-box</code>, <code>code-shell</code>, and <code>avoid</code>.</p>\n</li>\n<li>\n<p><code>hideCopy</code>- hides the copy button</p>\n</li>\n<li>\n<p><code>language</code>- the source code language such as <code>javascript</code>, <code>html</code>, <code>css</code>, <code>typescript</code>, <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code>, or <code>sh</code>. This attribute only works for inline examples.</p>\n</li>\n</ul>\n<a id=\"region\"></a>\n<h4 id=\"displaying-a-code-fragment\">Displaying a code fragment<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#displaying-a-code-fragment\"><i class=\"material-icons\">link</i></a></h4>\n<p>Often you want to focus on a fragment of code within a sample code file. In this example, you focus on the <code>AppModule</code> class and its <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata.</p>\n<code-example path=\"docs-style-guide/src/app/app.module.ts\" region=\"class\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>, <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<p>First you surround that fragment in the source file with a named <em>docregion</em> as described <a href=\"guide/docs-style-guide#source-code-markup\">below</a>.\nThen you reference that <em>docregion</em> in the <code>region</code> attribute of the <code>&#x3C;code-example></code> like this</p>\n<code-example language=\"html\">\n&#x3C;code-example\n  path=\"docs-style-guide/src/app/app.module.ts\"\n  region=\"class\">\n&#x3C;/code-example>\n</code-example>\n<p>A couple of observations:</p>\n<ol>\n<li>\n<p>The <code>region</code> value, <code>\"class\"</code>, is the name of the <code>#docregion</code> in the source file. Confirm that by looking at <code>content/examples/docs-style-guide/src/app/app.module.ts</code></p>\n</li>\n<li>\n<p>Omitting the <code>header</code> is fine when the source of the fragment is obvious. We just said that this is a fragment of the <code>app.module.ts</code> file which was displayed immediately above, in full, with a header.\nThere's no need to repeat the header.</p>\n</li>\n<li>\n<p>The line numbers disappeared. By default, the doc viewer omits line numbers when there are fewer than 10 lines of code; it adds line numbers after that. You can turn line numbers on or off explicitly by setting the <code>linenums</code> attribute.</p>\n</li>\n</ol>\n<h4 id=\"example-of-bad-code\">Example of bad code<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#example-of-bad-code\"><i class=\"material-icons\">link</i></a></h4>\n<p>Sometimes you want to display an example of bad code or bad design.</p>\n<p>You should be careful. Readers don't always read carefully and are likely to copy and paste your example of bad code in their own applications. So don't display bad code often.</p>\n<p>When you do, set the <code>class</code> to <code>avoid</code>. The code snippet will be framed in bright red to grab the reader's attention.</p>\n<p>Here's the markup for an \"avoid\" example in the\n<a href=\"guide/styleguide#05-03\" title=\"Style 05-03: components as elements\"><em>Angular Style Guide</em></a>.</p>\n<code-example language=\"html\">\n&#x3C;code-example\n  path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\"\n  region=\"example\"\n  header=\"app/heroes/hero-button/hero-button.component.ts\">\n&#x3C;/code-example>\n</code-example>\n<code-example path=\"styleguide/src/05-03/app/heroes/shared/hero-button/hero-button.component.avoid.ts\" region=\"example\" header=\"app/heroes/hero-button/hero-button.component.ts\">\n/* avoid */\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: '[tohHeroButton]',\n  templateUrl: './hero-button.component.html'\n})\nexport class HeroButtonComponent {}\n\n</code-example>\n<a id=\"code-tabs\"></a>\n<h3 id=\"code-tabs\">Code Tabs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-tabs\"><i class=\"material-icons\">link</i></a></h3>\n<p>Code tabs display code much like <em>code examples</em> do.  The added advantage is that they can display multiple code samples within a tabbed interface.  Each tab is displayed using <em>code pane</em>.</p>\n<h4 id=\"code-tabs-attributes\">Code-tabs attributes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-tabs-attributes\"><i class=\"material-icons\">link</i></a></h4>\n<ul>\n<li><code>linenums</code>: The value can be <code>true</code>, <code>false</code> or a number indicating the starting line number. If not specified, line numbers are enabled only when code for a tab pane has greater than 10 lines of code.</li>\n</ul>\n<h4 id=\"code-pane-attributes\">Code-pane attributes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#code-pane-attributes\"><i class=\"material-icons\">link</i></a></h4>\n<ul>\n<li><code>path</code> - a file in the content/examples folder</li>\n<li><code>header</code> - seen in the header of a tab</li>\n<li><code>linenums</code> - overrides the <code>linenums</code> property at the <code>code-tabs</code> level for this particular pane. The value can be <code>true</code>, <code>false</code> or a number indicating the starting line number. If not specified, line numbers are enabled only when the number of lines of code are greater than 10.</li>\n</ul>\n<p>The next example displays multiple code tabs, each with its own header.\nIt demonstrates control over display of line numbers at both the <code>&#x3C;code-tabs></code> and <code>&#x3C;code-pane></code> levels.</p>\n<code-tabs linenums=\"false\">\n  <code-pane header=\"app.component.html\" path=\"docs-style-guide/src/app/app.component.html\">\n&#x3C;h1>{{title}}&#x3C;/h1>\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n  &#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"selectedHero.name\" placeholder=\"name\"/>\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane header=\"app.component.ts\" path=\"docs-style-guide/src/app/app.component.ts\" linenums=\"true\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { Hero, HEROES } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Authors <a href=\"api/animations/AnimationMetadataType#Style\" class=\"code-anchor\">Style</a> Guide Sample';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"app.component.css (heroes)\" path=\"docs-style-guide/src/app/app.component.css\" region=\"heroes\">\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n\n</code-pane>\n  <code-pane header=\"package.json (scripts)\" path=\"docs-style-guide/package.1.json\">\n{\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run build:watch\\\" \\\"npm run serve\\\"\",\n    \"test\": \"concurrently \\\"npm run build:watch\\\" \\\"karma start karma.conf.js\\\"\",\n    \"lint\": \"tslint ./src/**/*.ts -t verbose\"\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>Here's the markup for that example.</p>\n<p>Note how the <code>linenums</code> attribute in the  <code>&#x3C;code-tabs></code> explicitly disables numbering for all panes.\nThe <code>linenums</code> attribute in the second pane restores line numbering for <em>itself only</em>.</p>\n<code-example language=\"html\">\n&#x3C;code-tabs linenums=\"false\">\n  &#x3C;code-pane\n    header=\"app.component.html\"\n    path=\"docs-style-guide/src/app/app.component.html\">\n  &#x3C;/code-pane>\n  &#x3C;code-pane\n    header=\"app.component.ts\"\n    path=\"docs-style-guide/src/app/app.component.ts\"\n    linenums=\"true\">\n  &#x3C;/code-pane>\n  &#x3C;code-pane\n    header=\"app.component.css (heroes)\"\n    path=\"docs-style-guide/src/app/app.component.css\"\n    region=\"heroes\">\n  &#x3C;/code-pane>\n  &#x3C;code-pane\n    header=\"package.json (scripts)\"\n    path=\"docs-style-guide/package.1.json\">\n  &#x3C;/code-pane>\n&#x3C;/code-tabs>\n</code-example>\n<a id=\"source-code-markup\"></a>\n<h2 id=\"source-code-markup\">Source code markup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#source-code-markup\"><i class=\"material-icons\">link</i></a></h2>\n<p>You must add special code snippet markup to sample source code files before they can be displayed by <code>&#x3C;code-example></code> and <code>&#x3C;code-tabs></code> components.</p>\n<div class=\"alert is-helpful\">\n<p>The sample source code for this page, located in <code>context/examples/docs-style-guide</code>, contains examples of every code snippet markup described in this section.</p>\n</div>\n<p>Code snippet markup is always in the form of a comment. Here's the default <em>docregion</em> markup for a TypeScript or JavaScript file:</p>\n<code-example>\n// #docregion\n... some code ...\n// #enddocregion\n</code-example>\n<p>Different file types have different comment syntax so adjust accordingly.</p>\n<code-example language=\"html\">\n&#x3C;!-- #docregion -->\n... some <a href=\"api/core/SecurityContext#HTML\" class=\"code-anchor\">HTML</a> ...\n&#x3C;!-- #enddocregion -->\n</code-example>\n<code-example>\n/* #docregion */\n... some CSS ...\n/* #enddocregion */\n</code-example>\n<p>The doc generation process erases these comments before displaying them in the doc viewer.\nIt also strips them from stackblitz and sample code downloads.</p>\n<div class=\"alert is-important\">\n<p>Code snippet markup is not supported in JSON files because comments are forbidden in JSON files.\nSee <a href=\"guide/docs-style-guide#json-files\">below</a> for details and workarounds.</p>\n</div>\n<h4 id=\"docregion\"><em>#docregion</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#docregion\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <em>#docregion</em> is the most important kind of code snippet markup.</p>\n<p>The <code>&#x3C;code-example></code> and <code>&#x3C;code-tabs></code> components won't display a source code file unless it has a <em>#docregion</em>.</p>\n<p>The <em>#docregion</em> comment begins a code snippet region.\nEvery line of code <em>after</em> that comment belongs in the region <em>until</em> the code fragment processor encounters the end of the file or a closing <em>#enddocregion</em>.</p>\n<div class=\"alert is-helpful\">\n<p>The <code>src/main.ts</code> is a simple example of a file with a single <em>#docregion</em> at the top of the file.</p>\n<code-example path=\"docs-style-guide/src/main.ts\" header=\"src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-example>\n</div>\n<h4 id=\"named-docregions\">Named <em>#docregions</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#named-docregions\"><i class=\"material-icons\">link</i></a></h4>\n<p>You'll often display multiple snippets from different fragments within the same file.\nYou distinguish among them by giving each fragment its own <em>#docregion name</em> as follows.</p>\n<code-example>\n// #docregion region-name\n... some code ...\n// #enddocregion region-name\n</code-example>\n<p>Remember to refer to this region by name in the <code>region</code> attribute of the <code>&#x3C;code-example></code> or <code>&#x3C;code-pane></code> as you did in an example above like this:</p>\n<code-example language=\"html\">\n&#x3C;code-example\n  path=\"docs-style-guide/src/app/app.module.ts\"\n  region=\"class\">&#x3C;/code-example>\n</code-example>\n<p>The <em>#docregion</em> with no name is the <em>default region</em>. Do <em>not</em> set the <code>region</code> attribute when referring to the default <em>#docregion</em>.</p>\n<h4 id=\"nested-docregions\">Nested <em>#docregions</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#nested-docregions\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can nest <em>#docregions</em> within <em>#docregions</em></p>\n<code-example>\n// #docregion\n... some code ...\n// #docregion inner-region\n... more code ...\n// #enddocregion inner-region\n... yet more code ...\n/// #enddocregion\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <code>src/app/app.module.ts</code> file has a good example of a nested region.</p>\n</div>\n<h4 id=\"combining-fragments\">Combining fragments<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#combining-fragments\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can combine several fragments from the same file into a single code snippet by defining\nmultiple <em>#docregions</em> with the <em>same region name</em>.</p>\n<p>Examine the <code>src/app/app.component.ts</code> file which defines two nested <em>#docregions</em>.</p>\n<p>The inner, <code>class-skeleton</code> region appears twice, once to capture the code that opens the class definition and once to capture the code that closes the class definition.</p>\n<code-example linenums=\"false\">\n// #docplaster\n...\n// #docregion class, class-skeleton\nexport class AppComponent {\n// #enddocregion class-skeleton\n  title = 'Authors <a href=\"api/animations/AnimationMetadataType#Style\" class=\"code-anchor\">Style</a> Guide Sample';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n// #docregion class-skeleton\n}\n// #enddocregion class, class-skeleton\n</code-example>\n<p>Here's are the two corresponding code snippets displayed side-by-side.</p>\n<code-tabs>\n  <code-pane header=\"app.component.ts (class)\" path=\"docs-style-guide/src/app/app.component.ts\" region=\"class\">\nexport class AppComponent {\n  title = 'Authors <a href=\"api/animations/AnimationMetadataType#Style\" class=\"code-anchor\">Style</a> Guide Sample';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n</code-pane>\n  <code-pane header=\"app.component.ts (class-skeleton)\" path=\"docs-style-guide/src/app/app.component.ts\" region=\"class-skeleton\">\nexport class AppComponent {\n}\n\n</code-pane>\n</code-tabs>\n<p>Some observations:</p>\n<ul>\n<li>\n<p>The <code>#docplaster</code> at the top is another bit of code snippet markup. It tells the processor how to join the fragments into a single snippet.</p>\n<p>In this example, we tell the processor to put the fragments together without anything in between - without any \"plaster\".  Most sample files define this <em>empty plaster</em>.</p>\n<p>If we neglected to add, <code>#docplaster</code>, the processor would insert the <em>default</em> plaster - an ellipsis comment - between the fragments. Try removing the <code>#docplaster</code> comment yourself to see the effect.</p>\n</li>\n<li>\n<p>One <code>#docregion</code> comment mentions <strong><em>two</em></strong> region names as does an <code>#enddocregion</code> comment. This is a convenient way to start (or stop) multiple regions on the same code line. You could have put these comments on separate lines and many authors prefer to do so.</p>\n</li>\n</ul>\n<h4 id=\"json-files\">JSON files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#json-files\"><i class=\"material-icons\">link</i></a></h4>\n<p>Code snippet markup is not supported for JSON files because comments are forbidden in JSON files.</p>\n<p>You can display an entire JSON file by referring to it in the <code>src</code> attribute.\nBut you can't display JSON fragments because you can't add <code>#docregion</code> tags to the file.</p>\n<p>If the JSON file is too big, you could copy the nodes-of-interest into markdown backticks.</p>\n<p>Unfortunately, it's easy to mistakenly create invalid JSON that way. The preferred way is to create a JSON partial file with the fragment you want to display.</p>\n<p>You can't test this partial file and you'll never use it in the application. But at least your IDE can confirm that it is syntactically correct.</p>\n<p>Here's an example that excerpts certain scripts from <code>package.json</code> into a partial file named <code>package.1.json</code>.</p>\n<code-example path=\"docs-style-guide/package.1.json\" header=\"package.json (selected scripts)\">\n{\n  \"scripts\": {\n    \"start\": \"concurrently \\\"npm run build:watch\\\" \\\"npm run serve\\\"\",\n    \"test\": \"concurrently \\\"npm run build:watch\\\" \\\"karma start karma.conf.js\\\"\",\n    \"lint\": \"tslint ./src/**/*.ts -t verbose\"\n  }\n}\n\n\n</code-example>\n<code-example language=\"html\">\n&#x3C;code-example\n  path=\"docs-style-guide/package.1.json\"\n  header=\"package.json (selected scripts)\">&#x3C;/code-example>\n</code-example>\n<h4 id=\"partial-file-naming\">Partial file naming<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#partial-file-naming\"><i class=\"material-icons\">link</i></a></h4>\n<p>Many guides tell a story. In that story, the app evolves incrementally, often with simplistic or incomplete code along the way.</p>\n<p>To tell that story in code, you'll often need to create partial files or intermediate versions of the final source code file with fragments of code that don't appear in the final app.</p>\n<p>Such partial and intermediate files need their own names.\nFollow the doc sample naming convention. Add a number before the file extension as illustrated here:</p>\n<code-example language=\"html\">\npackage.1.json\napp.component.1.ts\napp.component.2.ts\n</code-example>\n<p>You'll find many such files among the samples in the Angular documentation.</p>\n<p>Remember to exclude these files from stackblitz by listing them in the <code>stackblitz.json</code> as illustrated here.</p>\n<code-example path=\"docs-style-guide/stackblitz.json\" header=\"stackblitz.json\">\n{\n  \"description\": \"Authors <a href=\"api/animations/style\" class=\"code-anchor\">style</a> guide\",\n  \"files\": [\n    \"!**/*.d.ts\",\n    \"!**/*.js\",\n    \"!**/*.[1,2,3].*\"\n  ],\n  \"tags\": [\"author\", \"<a href=\"api/animations/style\" class=\"code-anchor\">style</a> guide\"]\n}\n\n\n</code-example>\n<a id=\"live-examples\"></a>\n<h2 id=\"live-examples\">Live examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#live-examples\"><i class=\"material-icons\">link</i></a></h2>\n<p>By adding <code>&#x3C;live-example></code> to the page you generate links that run sample code in the Stackblitz live coding environment and download that code to the reader's file system.</p>\n<p>Live examples (AKA \"stackblitz\") are defined by one or more <code>stackblitz.json</code> files in the root of a code sample folder. Each sample folder usually has a single unnamed definition file, the default <code>stackblitz.json</code>.</p>\n<div class=\"alert is-helpful\">\n<p>You can create additional, named definition files in the form <code>name.stackblitz.json</code>. See <code>content/examples/testing</code> for examples.</p>\n<p>The schema for a <code>stackblitz.json</code> hasn't been documented yet but looking at the <code>stackblitz.json</code> files in the example folders should tell you most of what you need to know.</p>\n</div>\n<p>Adding <code>&#x3C;live-example>&#x3C;/live-example></code> to the page generates the two default links.</p>\n<p><live-example></live-example></p>\n<ol>\n<li>\n<p>a link to the Stackblitz defined by the default <code>stackblitz.json</code> file located in the code sample folder with the same name as the guide page.</p>\n</li>\n<li>\n<p>a link that downloads that sample.</p>\n</li>\n</ol>\n<p>Clicking the first link opens the code sample on StackBlitz in a new browser tab.</p>\n<p>You can change the appearance and behavior of the live example with attributes and classes.</p>\n<h3 class=\"no-toc\" id=\"custom-label-and-tooltip\">Custom label and tooltip<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#custom-label-and-tooltip\"><i class=\"material-icons\">link</i></a></h3>\n<p>Give the live example anchor a custom label and tooltip by setting the <code>title</code> attribute.</p>\n<p><live-example title=\"Live Example with title\"></live-example></p>\n<code-example language=\"html\">\n&#x3C;live-example title=\"Live Example with title\">&#x3C;/live-example>\n</code-example>\n<p>You can achieve the same effect by putting the label between the <code>&#x3C;live-example></code> tags:</p>\n<p><live-example>Live example with content label</live-example></p>\n<code-example language=\"html\">\n&#x3C;live-example>Live example with content label&#x3C;/live-example>\n</code-example>\n<h3 class=\"no-toc\" id=\"live-example-from-another-guide\">Live example from another guide<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#live-example-from-another-guide\"><i class=\"material-icons\">link</i></a></h3>\n<p>To link to a Stackblitz in a folder whose name is not the same as the current guide page, set the <code>name</code> attribute to the name of that folder.</p>\n<p><live-example name=\"router\">Live Example from the Router guide</live-example></p>\n<code-example language=\"html\">\n&#x3C;live-example name=\"router\">Live Example from the <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> guide&#x3C;/live-example>\n</code-example>\n<h3 class=\"no-toc\" id=\"live-example-for-named-stackblitz\">Live Example for named Stackblitz<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#live-example-for-named-stackblitz\"><i class=\"material-icons\">link</i></a></h3>\n<p>To link to a Stackblitz defined by a named <code>stackblitz.json</code> file, set the <code>stackblitz</code> attribute. The following example links to the Stackblitz defined by <code>second.stackblitz.json</code> in the current guide's directory.</p>\n<p><live-example stackblitz=\"second\"></live-example></p>\n<code-example language=\"html\">\n&#x3C;live-example stackblitz=\"second\">&#x3C;/live-example>\n</code-example>\n<h3 class=\"no-toc\" id=\"live-example-without-download\">Live Example without download<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#live-example-without-download\"><i class=\"material-icons\">link</i></a></h3>\n<p>To skip the download link, add the <code>noDownload</code> attribute.</p>\n<p><live-example nodownload=\"\">Just the Stackblitz</live-example></p>\n<code-example language=\"html\">\n&#x3C;live-example noDownload>Just the Stackblitz&#x3C;/live-example>\n</code-example>\n<h3 class=\"no-toc\" id=\"live-example-with-download-only\">Live Example with download-only<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#live-example-with-download-only\"><i class=\"material-icons\">link</i></a></h3>\n<p>To skip the live Stackblitz link and only link to the download, add the <code>downloadOnly</code> attribute.</p>\n<p><live-example downloadonly=\"\">Download only</live-example></p>\n<code-example language=\"html\">\n&#x3C;live-example downloadOnly>Download only&#x3C;/live-example>\n</code-example>\n<h3 class=\"no-toc\" id=\"embedded-live-example\">Embedded live example<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#embedded-live-example\"><i class=\"material-icons\">link</i></a></h3>\n<p>By default, a live example link opens a Stackblitz in a separate browser tab.\nYou can embed the Stackblitz within the guide page itself by adding the <code>embedded</code> attribute.</p>\n<p>For performance reasons, the Stackblitz does not start right away. The reader sees an image instead. Clicking the image starts the sometimes-slow process of launching the embedded Stackblitz within an iframe on the page.</p>\n<p>Here's an embedded live example for this guide.</p>\n<code-example language=\"html\">\n&#x3C;live-example embedded>&#x3C;/live-example>\n</code-example>\n<p><live-example embedded=\"\"></live-example></p>\n<a id=\"anchors\"></a>\n<h2 id=\"anchors\">Anchors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#anchors\"><i class=\"material-icons\">link</i></a></h2>\n<p>Every section header tag is also an anchor point. Another guide page could add a link to this section by writing:</p>\n<div class=\"alert is-helpful\">\n<p>See the <a href=\"guide/docs-style-guide#anchors\" title=\"Style Guide - Anchors\">\"Anchors\"</a> section for details.</p>\n</div>\n<code-example language=\"html\">\n&#x3C;div class=\"alert is-helpful\">\n\nSee the [\"Anchors\"](guide/docs-style-guide#anchors \"<a href=\"api/animations/AnimationMetadataType#Style\" class=\"code-anchor\">Style</a> Guide - Anchors\") section for details.\n\n&#x3C;/div>\n</code-example>\n<p>When navigating within the page, you can omit the page URL when specifying the link that <a href=\"guide/docs-style-guide#anchors\" title=\"Anchors\">scrolls up</a> to the beginning of this section.</p>\n<code-example language=\"html\">\n... the link that [scrolls up](#anchors \"Anchors\") to ...\n</code-example>\n<a id=\"ugly-anchors\"></a>\n<h4 id=\"ugly-long-section-header-anchors\">Ugly, long section header anchors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#ugly-long-section-header-anchors\"><i class=\"material-icons\">link</i></a></h4>\n<p>It is often a good idea to <em>lock-in</em> a good anchor name.</p>\n<p>Sometimes the section header text makes for an unattractive anchor. <a href=\"guide/docs-style-guide#ugly-long-section-header-anchors\">This one</a> is pretty bad.</p>\n<code-example language=\"html\">\n[This one](#ugly-long-section-header-anchors) is pretty bad.\n</code-example>\n<p>The greater danger is that <strong>a future rewording of the header text would break</strong> a link to this section.</p>\n<p>For these reasons, it is often wise to add a custom anchor explicitly, just above the heading or\ntext to which it applies, using the special <code><a id=\"name\"></a></code> syntax like this.</p>\n<code-example language=\"html\">\n  {@<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ugly-anchors}\n\n  #### Ugly, long section header anchors\n</code-example>\n<p>Now <a href=\"guide/docs-style-guide#ugly-anchors\">link to that custom anchor name</a> as you did before.</p>\n<code-example language=\"html\">\nNow [link to that custom <a href=\"api/router/Scroll#anchor\" class=\"code-anchor\">anchor</a> name](#ugly-anchors) as you did before.\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Alternatively, you can use the HTML <code>&#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>></code> tag.</p>\n<p>If you do, be sure to set the <code>id</code> attribute - not the <code>name</code> attribute! The docs generator will not convert the <code>name</code> to the proper link URL.</p>\n<code-example language=\"html\">\n&#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> id=\"anchors\">&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n\n## Anchors\n</code-example>\n</div>\n<h2 id=\"alerts-and-calllouts\">Alerts and Calllouts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#alerts-and-calllouts\"><i class=\"material-icons\">link</i></a></h2>\n<p>Alerts and callouts present warnings, extra detail or references to other pages. They can also be used to provide commentary that <em>enriches</em> the reader's understanding of the content being presented.</p>\n<p>An alert or callout <em>must not</em> contain anything <em>essential</em> to that understanding. Don't put a critical instruction or a tutorial step in a subsection.</p>\n<h3 id=\"alerts\">Alerts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#alerts\"><i class=\"material-icons\">link</i></a></h3>\n<p>Alerts draw attention to short important points. Alerts should not be used for multi-line content (use <a href=\"guide/docs-style-guide#callouts\" title=\"callouts\">callouts</a> instead).</p>\n<div class=\"alert is-helpful\">\n<p>  You'll learn about styles for live examples in the <a href=\"guide/docs-style-guide#live-examples\" title=\"Live examples\">section below</a>.</p>\n</div>\n<p>  Note that at least one blank line must follow both the opening and closing <code>&#x3C;div></code> tags. A blank line before the closing <code>&#x3C;/div></code> is customary but not required.</p>\n<code-example language=\"html\">\n&#x3C;div class=\"alert is-helpful\">\n\nYou'll learn about styles for live examples in the [section below](guide/docs-style-guide#live-examples \"Live examples\").\n\n&#x3C;/div>\n</code-example>\n<p>There are three different <em>urgency levels</em> used to style the alerts based on the severity or importance of the content.</p>\n<div class=\"alert is-critical\">\n<p>A critical alert.</p>\n</div>\n<div class=\"alert is-important\">\n<p>An important alert.</p>\n</div>\n<div class=\"alert is-helpful\">\n<p>A helpful, informational alert.</p>\n</div>\n<p>Here is the markup for these alerts.</p>\n<code-example language=\"html\">\n&#x3C;div class=\"alert is-critical\">\n\nA critical alert.\n\n&#x3C;/div>\n\n&#x3C;div class=\"alert is-important\">\n\nAn important alert.\n\n&#x3C;/div>\n\n&#x3C;div class=\"alert is-helpful\">\n\nA helpful, informational alert.\n\n&#x3C;/div>\n</code-example>\n<h3 id=\"callouts\">Callouts<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#callouts\"><i class=\"material-icons\">link</i></a></h3>\n<p>Callouts, like alerts, are meant to draw attention to important points. Use a callout when you want a riveting header and multi-line content.</p>\n<p>If you have more than two paragraphs, consider creating a new page or making it part of the main content.</p>\n<p>Callouts use the same <em>urgency levels</em> that alerts do.</p>\n<div class=\"callout is-critical\">\n<header>A critical point</header>\n<p><strong>Pitchfork hoodie semiotics</strong>, roof party pop-up <em>paleo</em> messenger messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</p>\n</div>\n<div class=\"callout is-important\">\n<header>An important point</header>\n<p><strong>Pitchfork hoodie semiotics</strong>, roof party pop-up <em>paleo</em> messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</p>\n</div>\n<div class=\"callout is-helpful\">\n<header>A helpful or informational point</header>\n<p><strong>Pitchfork hoodie semiotics</strong>, roof party pop-up <em>paleo</em> messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix</p>\n</div>\n<p>Here is the markup for the first of these callouts.</p>\n<code-example language=\"html\">\n&#x3C;div class=\"callout is-critical\">\n&#x3C;header>A critical point&#x3C;/header>\n\n**Pitchfork hoodie semiotics**, roof party pop-up _paleo_ messenger bag cred Carles tousled Truffaut yr. Semiotics viral freegan VHS, Shoreditch disrupt McSweeney's. Intelligentsia kale chips Vice four dollar toast, Schlitz crucifix\n\n&#x3C;/div>\n</code-example>\n<p>Notice that:</p>\n<ul>\n<li>the callout header text is forced to all upper case</li>\n<li>the callout body can be written in markdown</li>\n<li>a blank line separates the <code>&#x3C;/header></code> tag from the markdown content</li>\n</ul>\n<p>Callouts are meant to grab the user's attention. They are not for casual asides. Please use them sparingly.</p>\n<h2 id=\"trees\">Trees<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#trees\"><i class=\"material-icons\">link</i></a></h2>\n<p>Trees can represent hierarchical data.</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    sample-dir\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p>Here is the markup for this file tree.</p>\n<code-example language=\"html\">\n&#x3C;div class='filetree'>\n    &#x3C;div class='file'>\n        sample-dir\n    &#x3C;/div>\n    &#x3C;div class='children'>\n        &#x3C;div class='file'>\n          src\n        &#x3C;/div>\n        &#x3C;div class='children'>\n            &#x3C;div class='file'>\n              app\n            &#x3C;/div>\n            &#x3C;div class='children'>\n                &#x3C;div class='file'>\n                  app.component.ts\n                &#x3C;/div>\n                &#x3C;div class='file'>\n                  app.module.ts\n                &#x3C;/div>\n            &#x3C;/div>\n            &#x3C;div class='file'>\n              styles.css\n            &#x3C;/div>\n            &#x3C;div class='file'>\n              tsconfig.json\n            &#x3C;/div>\n        &#x3C;/div>\n        &#x3C;div class='file'>\n          node_modules ...\n        &#x3C;/div>\n        &#x3C;div class='file'>\n          package.json\n        &#x3C;/div>\n    &#x3C;/div>\n&#x3C;/div>\n</code-example>\n<h2 id=\"tables\">Tables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#tables\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use HTML tables to present tabular data.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table>\n  <tbody><tr>\n    <th>Framework</th>\n    <th>Task</th>\n    <th>Speed</th>\n  </tr>\n  <tr>\n    <td><code>AngularJS</code></td>\n    <td>Routing</td>\n    <td>Fast</td>\n  </tr>\n  <tr>\n    <td><code>Angular v2</code></td>\n    <td>Routing</td>\n    <!-- can use markdown too; remember blank lines -->\n    <td>\n<p>      <em>Faster</em></p>\n    </td>\n  </tr>\n  <tr>\n    <td><code>Angular v4</code></td>\n    <td>Routing</td>\n    <td>\n<p>      <strong>Fastest :)</strong></p>\n    </td>\n  </tr>\n</tbody></table>\n<p>Here is the markup for this table.</p>\n<code-example language=\"html\">\n&#x3C;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>>\n  td, th {vertical-align: top}\n&#x3C;/<a href=\"api/animations/style\" class=\"code-anchor\">style</a>>\n\n&#x3C;table>\n  &#x3C;tr>\n    &#x3C;th>Framework&#x3C;/th>\n    &#x3C;th>Task&#x3C;/th>\n    &#x3C;th>Speed&#x3C;/th>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;td>&#x3C;code>AngularJS&#x3C;/code>&#x3C;/td>\n    &#x3C;td>Routing&#x3C;/td>\n    &#x3C;td>Fast&#x3C;/td>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;td>&#x3C;code>Angular v2&#x3C;/code>&#x3C;/td>\n    &#x3C;td>Routing&#x3C;/td>\n    &#x3C;!-- can use markdown too; remember blank lines -->\n    &#x3C;td>\n\n      *Faster*\n\n    &#x3C;/td>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;td>&#x3C;code>Angular v4&#x3C;/code>&#x3C;/td>\n    &#x3C;td>Routing&#x3C;/td>\n    &#x3C;td>\n\n      **Fastest :)**\n\n    &#x3C;/td>\n  &#x3C;/tr>\n&#x3C;/table>\n</code-example>\n<h2 id=\"images\">Images<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#images\"><i class=\"material-icons\">link</i></a></h2>\n<h3 class=\"no-toc\" id=\"image-location\">Image location<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#image-location\"><i class=\"material-icons\">link</i></a></h3>\n<p>Store images in the <code>content/images</code> directory in a folder with the same URL as the guide page.\nImages for this \"Authors Style Guide\" page belong in the <code>content/images/guide/docs-style-guide</code> folder.</p>\n<p>Angular doc generation copies these image folders to the <em>runtime</em> location, <code>generated/images</code>.\nSet the image <code>src</code> attribute to begin in <em>that</em> directory.</p>\n<p>Here's the <code>src</code> attribute for the \"flying hero\" image belonging to this page.</p>\n<code-example>\nsrc=\"generated/images/guide/docs-style-guide/flying-hero.png\"\n</code-example>\n<h3 class=\"no-toc\" id=\"use-the-html-img-tag\">Use the HTML <i>&#x3C;img></i> tag<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#use-the-html-img-tag\"><i class=\"material-icons\">link</i></a></h3>\n<p><strong>Do not use the markdown image syntax, ![...](...).</strong></p>\n<p>Images should be specified in an <code>&#x3C;img></code> tag.</p>\n<p>For accessibility, always set the <code>alt</code> attribute with a meaningful description of the image.</p>\n<p>You should nest the <code>&#x3C;img></code> tag within a <code>&#x3C;figure></code> tag, which styles the image within a drop-shadow frame. You'll need the editor's permission to skip the <code>&#x3C;figure></code> tag.</p>\n<p>Here's a conforming example</p>\n<figure>\n  <img src=\"generated/images/guide/docs-style-guide/flying-hero.png\" alt=\"flying hero\" width=\"3125\" height=\"2374\">\n</figure>\n<code-example language=\"html\">\n&#x3C;figure>\n  &#x3C;img src=\"generated/images/guide/docs-style-guide/flying-hero.png\"\n       alt=\"flying hero\">\n&#x3C;/figure>\n</code-example>\n<p><em>Note that the HTML image element does not have a closing tag.</em></p>\n<h3 class=\"no-toc\" id=\"image-dimensions\">Image dimensions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#image-dimensions\"><i class=\"material-icons\">link</i></a></h3>\n<p>The doc generator reads the image dimensions from the file and adds width and height attributes to the <code>img</code> tag automatically. If you want to control the size of the image, supply your own width and height attributes.</p>\n<p>Here's the \"flying hero\" at a more reasonable scale.</p>\n<figure>\n <img src=\"generated/images/guide/docs-style-guide/flying-hero.png\" alt=\"flying Angular hero\" width=\"200\">\n</figure>\n<code-example language=\"html\">\n&#x3C;figure>\n &#x3C;img src=\"generated/images/guide/docs-style-guide/flying-hero.png\"\n   alt=\"flying Angular hero\"\n   width=\"200\">\n&#x3C;/figure>\n</code-example>\n<p>Wide images can be a problem. Most browsers try to rescale the image but wide images may overflow the document in certain viewports.</p>\n<p><strong>Do not set a width greater than 700px</strong>. If you wish to display a larger image, provide a link to the actual image that the user can click on to see the full size image separately as in this example of <code>source-map-explorer</code> output from the \"Ahead-of-time Compilation\" guide:</p>\n<a href=\"generated/images/guide/docs-style-guide/toh-pt6-bundle.png\" title=\"Click to view larger image\">\n  <figure>\n    <img src=\"generated/images/guide/docs-style-guide/toh-pt6-bundle-700w.png\" alt=\"toh-pt6-bundle\" width=\"300px\">\n  </figure>\n</a>\n<h3 class=\"no-toc\" id=\"image-compression\">Image compression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#image-compression\"><i class=\"material-icons\">link</i></a></h3>\n<p>Large image files can be slow to load, harming the user experience. Always compress the image.\nConsider using an image compression web site such as <a href=\"https://tinypng.com/\" title=\"tinypng\">tinypng</a>.</p>\n<h3 class=\"no-toc\" id=\"floating-images\">Floating images<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#floating-images\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can float the image to the left or right of text by applying the class=\"left\" or class=\"right\" attributes respectively.</p>\n<p><img src=\"generated/images/guide/docs-style-guide/flying-hero.png\" alt=\"flying Angular hero\" width=\"200\" class=\"left\"></p>\n<p>This text wraps around to the right of the floating \"flying hero\" image.</p>\n<p>Headings and code-examples automatically clear a floating image. If you need to force a piece of text to clear a floating image, add <code>&#x3C;br class=\"clear\"></code> where the text should break.</p>\n<br class=\"clear\">\n<p>The markup for the above example is:</p>\n<code-example language=\"html\">\n&#x3C;img src=\"generated/images/guide/docs-style-guide/flying-hero.png\"\n   alt=\"flying Angular hero\"\n   width=\"200\"\n   class=\"left\">\n\nThis text wraps around to the right of the floating \"flying hero\" image.\n\nHeadings and code-examples automatically clear <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> floating image. If you need to force <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> piece of text to clear <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> floating image, add `&#x3C;br class=\"clear\">` where the text should break.\n\n&#x3C;br class=\"clear\">\n</code-example>\n<p>Note that you generally don't wrap a floating image in a <code>&#x3C;figure></code> element.</p>\n<h4 id=\"floating-within-a-subsection\">Floating within a subsection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/docs-style-guide#floating-within-a-subsection\"><i class=\"material-icons\">link</i></a></h4>\n<p>If you have a floating image inside an alert, callout, or a subsection, it is a good idea to apply the <code>clear-fix</code> class to the <code>div</code> to ensure that the image doesn't overflow its container. For example:</p>\n<div class=\"alert is-helpful clear-fix\">\n<p>  <img src=\"generated/images/guide/docs-style-guide/flying-hero.png\" alt=\"flying Angular hero\" width=\"100\" class=\"right\"></p>\n<p>  A subsection with <strong>markdown</strong> formatted text.</p>\n</div>\n<code-example language=\"html\">\n&#x3C;div class=\"alert is-helpful clear-fix\">\n\n  &#x3C;img src=\"generated/images/guide/docs-style-guide/flying-hero.png\"\n    alt=\"flying Angular hero\"\n    width=\"100\"\n    class=\"right\">\n\n  A subsection with **markdown** formatted text.\n\n&#x3C;/div>\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/animations/AnimationMetadataType#Style\n - api/animations/style\n - api/common/JsonPipe\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/NgModule\n - api/core/SecurityContext#HTML\n - api/core/enableProdMode\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/platform-server/PlatformConfig#document\n - api/router/Router\n - api/router/RouterLinkWithHref\n - api/router/Scroll#anchor\n - generated/images/guide/docs-style-guide/toh-pt6-bundle.png\n - guide/docs-style-guide#additional-section-headings\n - guide/docs-style-guide#alerts\n - guide/docs-style-guide#alerts-and-calllouts\n - guide/docs-style-guide#anchors\n - guide/docs-style-guide#angular-documentation-style-guide\n - guide/docs-style-guide#callouts\n - guide/docs-style-guide#code-example\n - guide/docs-style-guide#code-example-attributes\n - guide/docs-style-guide#code-pane-attributes\n - guide/docs-style-guide#code-snippet-from-a-file\n - guide/docs-style-guide#code-snippets\n - guide/docs-style-guide#code-snippets-and-code-samples\n - guide/docs-style-guide#code-tabs\n - guide/docs-style-guide#code-tabs-attributes\n - guide/docs-style-guide#combining-fragments\n - guide/docs-style-guide#custom-label-and-tooltip\n - guide/docs-style-guide#displaying-a-code-fragment\n - guide/docs-style-guide#doc-generation-and-tooling\n - guide/docs-style-guide#docregion\n - guide/docs-style-guide#embedded-live-example\n - guide/docs-style-guide#example-of-bad-code\n - guide/docs-style-guide#floating-images\n - guide/docs-style-guide#floating-within-a-subsection\n - guide/docs-style-guide#from-code-samples\n - guide/docs-style-guide#guide-pages\n - guide/docs-style-guide#image-compression\n - guide/docs-style-guide#image-dimensions\n - guide/docs-style-guide#image-location\n - guide/docs-style-guide#images\n - guide/docs-style-guide#inline-code-snippets\n - guide/docs-style-guide#json-files\n - guide/docs-style-guide#live-example-for-named-stackblitz\n - guide/docs-style-guide#live-example-from-another-guide\n - guide/docs-style-guide#live-example-with-download-only\n - guide/docs-style-guide#live-example-without-download\n - guide/docs-style-guide#live-examples\n - guide/docs-style-guide#main-section-heading\n - guide/docs-style-guide#markdown-and-html\n - guide/docs-style-guide#named-docregions\n - guide/docs-style-guide#navigation\n - guide/docs-style-guide#nested-docregions\n - guide/docs-style-guide#partial-file-naming\n - guide/docs-style-guide#region\n - guide/docs-style-guide#scope-of-these-guidelines\n - guide/docs-style-guide#secondary-section-heading\n - guide/docs-style-guide#sections\n - guide/docs-style-guide#source-code-markup\n - guide/docs-style-guide#table-of-contents\n - guide/docs-style-guide#tables\n - guide/docs-style-guide#title\n - guide/docs-style-guide#trees\n - guide/docs-style-guide#ugly-anchors\n - guide/docs-style-guide#ugly-long-section-header-anchors\n - guide/docs-style-guide#use-the-html-img-tag\n - guide/styleguide\n - guide/styleguide#05-03\n - http://localhost:4200/\n - https://daringfireball.net/projects/markdown/syntax\n - https://developers.google.com/style/\n - https://github.com/angular/angular\n - https://github.com/angular/angular/blob/master/aio/README.md\n - https://github.com/angular/angular/edit/master/aio/content/guide/docs-style-guide.md?message=docs%3A%20describe%20your%20change...\n - https://tinypng.com/\n-->"
}