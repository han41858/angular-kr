{
  "id": "guide/route-animations",
  "title": "라우팅 애니메이션",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/route-animations.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Route transition animations\n-->\n<h1 id=\"라우팅-애니메이션\">라우팅 애니메이션<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#라우팅-애니메이션\"><i class=\"material-icons\">link</i></a></h1>\n<!--\n#### Prerequisites\n-->\n<h4 id=\"사전-지식\">사전 지식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#사전-지식\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nA basic understanding of the following concepts:\n\n* [Introduction to Angular animations](guide/animations)\n* [Transition and triggers](guide/transition-and-triggers)\n* [Reusable animations](guide/reusable-animations)\n\n<hr>\n\nRouting enables users to navigate between different routes in an application. When a user navigates from one route to another, the Angular router maps the URL path to a relevant component and displays its view. Animating this route transition can greatly enhance the user experience.\n\nThe Angular router comes with high-level animation functions that let you animate the transitions between views when a route changes. To produce an animation sequence when switching between routes, you need to define nested animation sequences. Start with the top-level component that hosts the view, and nest additional animations in the components that host the embedded views.\n\nTo enable routing transition animation, do the following:\n\n1. Import the routing module into the application and create a routing configuration that defines the possible routes.\n2. Add a router outlet to tell the Angular router where to place the activated components in the DOM.\n3. Define the animation.\n\n\nLet's illustrate a router transition animation by navigating between two routes, *Home* and *About* associated with the `HomeComponent` and `AboutComponent` views respectively. Both of these component views are children of the top-most view, hosted by `AppComponent`. We'll implement a router transition animation that slides in the new view to the right and slides out the old view when the user navigates between the two routes.\n\n</br>\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/animations/route-animation.gif\" alt=\"Animations in action\" width=\"440\">\n</div>\n-->\n<p>이 문서를 보기 전에 다음 내용은 미리 이해하고 있는 것이 좋습니다.</p>\n<ul>\n<li><a href=\"guide/animations\">Angular 애니메이션 소개</a></li>\n<li><a href=\"guide/transition-and-triggers\">트랜지션 &#x26; 트리거</a></li>\n<li><a href=\"guide/reusable-animations\">애니메이션 재사용하기</a></li>\n</ul>\n<hr>\n<p>Angular 애플리케이션에서는 라우터가 조건에 맞는 라우팅 규칙(route)을 선택하면서 화면을 전환합니다. 그리고 Angular 라우터는 라우팅 규칙에 지정된 대로 URL 경로와 컴포넌트를 화면에 표시하는데, 이 때 화면이 전환되는 애니메이션을 적용하면 사용성을 크게 높일 수 있습니다.</p>\n<p>Angular 라우터가 제공하는 애니메이션 기능은 라우팅 규칙이 변경될 때 다양하게 활용할 수 있습니다. 이 때 사용하는 애니메이션은 시퀀스로 지정하는데, 화면에서 호스트가 되는 최상위 컴포넌트부터 뷰 안에 포함된 컴포넌트에도 애니메이션을 지정할 수 있습니다.</p>\n<p>화면 전환 애니메이션을 적용하려면 다음과 같이 작업합니다:</p>\n<ol>\n<li>애플리케이션에 라우팅 모듈을 로드하고 라우팅 규칙을 등록합니다.</li>\n<li>라우팅 규칙과 연결된 컴포넌트가 DOM에 표시되도록 라우팅 영역(router outlet)을 추가합니다</li>\n<li>애니메이션을 정의합니다.</li>\n</ol>\n<p><em>Home</em> 화면에서 <em>About</em> 화면으로 이동하는 동안 <code>HomeComponent</code>와 <code>AboutComponent</code>에 애니메이션이 어떻게 적용되는지 살펴봅시다. 두 컴포넌트는 <code>AppComponent</code>의 자식 컴포넌트입니다. 라우팅이 진행되는 동안 기존에 표시되던 화면은 오른쪽으로 이동하면서 사라지고, 새로운 화면은 왼쪽에서 들어오면서 표시되도록 예제 코드를 작성해 봅시다.</p>\n<br>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/animations/route-animation.gif\" alt=\"Animations in action\" width=\"440\">\n</div>\n<!--\n## Route configuration\n-->\n<h2 id=\"라우팅-규칙-설정\">라우팅 규칙 설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#라우팅-규칙-설정\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo begin, configure a set of routes using methods available in the `RouterModule` class. This route configuration tells the router how to navigate.\n\nUse the `RouterModule.forRoot` method to define a set of routes. Also, import this `RouterModule` to the `imports` array of the main module, `AppModule`.\n\n<div class=\"alert is-helpful\">\n\n**Note:** Use the `RouterModule.forRoot` method in the root module, `AppModule`, to register top-level application routes and providers. For feature modules, call the `RouterModule.forChild` method to register additional routes.\n\n</div>\n\nThe following configuration defines the possible routes for the application.\n\n<code-example path=\"animations/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"route-animation-data\" language=\"typescript\">\nimport { NgModule } from &#39;@angular/core&#39;;\nimport { BrowserModule } from &#39;@angular/platform-browser&#39;;\nimport { BrowserAnimationsModule } from &#39;@angular/platform-browser/animations&#39;;\nimport { RouterModule } from &#39;@angular/router&#39;;\nimport { AppComponent } from &#39;./app.component&#39;;\nimport { OpenCloseComponent } from &#39;./open-close.component&#39;;\nimport { OpenClosePageComponent } from &#39;./open-close-page.component&#39;;\nimport { OpenCloseChildComponent } from &#39;./open-close.component.4&#39;;\nimport { ToggleAnimationsPageComponent } from &#39;./toggle-animations-page.component&#39;;\nimport { StatusSliderComponent } from &#39;./status-slider.component&#39;;\nimport { StatusSliderPageComponent } from &#39;./status-slider-page.component&#39;;\nimport { HeroListPageComponent } from &#39;./hero-list-page.component&#39;;\nimport { HeroListGroupPageComponent } from &#39;./hero-list-group-page.component&#39;;\nimport { HeroListGroupsComponent } from &#39;./hero-list-groups.component&#39;;\nimport { HeroListEnterLeavePageComponent } from &#39;./hero-list-enter-leave-page.component&#39;;\nimport { HeroListEnterLeaveComponent } from &#39;./hero-list-enter-leave.component&#39;;\nimport { HeroListAutoCalcPageComponent } from &#39;./hero-list-auto-page.component&#39;;\nimport { HeroListAutoComponent } from &#39;./hero-list-auto.component&#39;;\nimport { HomeComponent } from &#39;./home.component&#39;;\nimport { AboutComponent } from &#39;./about.component&#39;;\nimport { InsertRemoveComponent } from &#39;./insert-remove.component&#39;;\n\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    RouterModule.forRoot([\n      { path: &#39;&#39;, pathMatch: &#39;full&#39;, redirectTo: &#39;/enter-leave&#39; },\n      { path: &#39;open-close&#39;, component: OpenClosePageComponent },\n      { path: &#39;status&#39;, component: StatusSliderPageComponent },\n      { path: &#39;toggle&#39;, component: ToggleAnimationsPageComponent },\n      { path: &#39;heroes&#39;, component: HeroListPageComponent, data: {animation: &#39;FilterPage&#39;} },\n      { path: &#39;hero-groups&#39;, component: HeroListGroupPageComponent },\n      { path: &#39;enter-leave&#39;, component: HeroListEnterLeavePageComponent },\n      { path: &#39;auto&#39;, component: HeroListAutoCalcPageComponent },\n      { path: &#39;insert-remove&#39;, component: InsertRemoveComponent},\n      { path: &#39;home&#39;, component: HomeComponent, data: {animation: &#39;HomePage&#39;} },\n      { path: &#39;about&#39;, component: AboutComponent, data: {animation: &#39;AboutPage&#39;} },\n\n    ])\n  ],\n\n</code-example>\n\nThe `home` and `about` paths are associated with the `HomeComponent` and `AboutComponent` views. The route configuration tells the Angular router to instantiate the `HomeComponent` and `AboutComponent` views when the navigation matches the corresponding path.\n\nIn addition to `path` and `component`, the `data` property of each route defines the key animation-specific configuration associated with a route. The `data` property value is passed into `AppComponent` when the route changes. You can also pass additional data in route config that is consumed within the animation. The data property value has to match the transitions defined in the `routeAnimation` trigger, which we'll define later.\n\n<div class=\"alert is-helpful\">\n\n**Note:** The `data` property names that you use can be arbitrary. For example, the name *animation* used in the example above is an arbitrary choice.\n\n</div>\n-->\n<p>먼저, <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> 클래스가 제공하는 메소드를 사용해서 라우팅 규칙을 정의합니다. 라우터는 이 라우팅 규칙에 정의된 대로 화면을 전환합니다.</p>\n<p>이 예제에서는 <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 함수를 사용해서 최상위 라우팅 규칙을 정의합니다. 이 함수로 지정하는 라우팅 규칙은 <code>AppModule</code>의 <code>imports</code> 배열에 추가해서 등록합니다.</p>\n<div class=\"alert is-helpful\">\n<p><strong>참고:</strong> <code><a href=\"api/router/RouterModule#forRoot\" class=\"code-anchor\">RouterModule.forRoot()</a></code> 메소드 실행 결과를 <code>AppModule</code>에 등록하면 앱 전역에 라우팅 규칙과 라우팅 관련 서비스 프로바이더가 등록됩니다. 그래서 자식 모듈에서는 자연스럽게 서비스 프로바이더를 사용할 수 있으며, 라우팅 규칙을 추가로 지정하려면 <code><a href=\"api/router/RouterModule#forChild\" class=\"code-anchor\">RouterModule.forChild()</a></code> 메소드를 사용하면 됩니다.</p>\n</div>\n<p>이번 예제에서는 이렇게 정의합니다.</p>\n<code-example path=\"animations/src/app/app.module.ts\" header=\"src/app/app.module.ts\" region=\"route-animation-data\" language=\"typescript\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { OpenCloseComponent } from './open-close.component';\nimport { OpenClosePageComponent } from './open-close-page.component';\nimport { OpenCloseChildComponent } from './open-close.component.4';\nimport { ToggleAnimationsPageComponent } from './toggle-animations-page.component';\nimport { StatusSliderComponent } from './status-slider.component';\nimport { StatusSliderPageComponent } from './status-slider-page.component';\nimport { HeroListPageComponent } from './hero-list-page.component';\nimport { HeroListGroupPageComponent } from './hero-list-group-page.component';\nimport { HeroListGroupsComponent } from './hero-list-groups.component';\nimport { HeroListEnterLeavePageComponent } from './hero-list-enter-leave-page.component';\nimport { HeroListEnterLeaveComponent } from './hero-list-enter-leave.component';\nimport { HeroListAutoCalcPageComponent } from './hero-list-auto-page.component';\nimport { HeroListAutoComponent } from './hero-list-auto.component';\nimport { HomeComponent } from './home.component';\nimport { AboutComponent } from './about.component';\nimport { InsertRemoveComponent } from './insert-remove.component';\n\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/platform-browser/animations/BrowserAnimationsModule\" class=\"code-anchor\">BrowserAnimationsModule</a>,\n    RouterModule.forRoot([\n      { path: '', <a href=\"api/router/Route#pathMatch\" class=\"code-anchor\">pathMatch</a>: '<a href=\"api/core/Version#full\" class=\"code-anchor\">full</a>', <a href=\"api/router/Route#redirectTo\" class=\"code-anchor\">redirectTo</a>: '/enter-leave' },\n      { path: 'open-close', component: OpenClosePageComponent },\n      { path: 'status', component: StatusSliderPageComponent },\n      { path: 'toggle', component: ToggleAnimationsPageComponent },\n      { path: 'heroes', component: HeroListPageComponent, data: {<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'FilterPage'} },\n      { path: 'hero-groups', component: HeroListGroupPageComponent },\n      { path: 'enter-leave', component: HeroListEnterLeavePageComponent },\n      { path: 'auto', component: HeroListAutoCalcPageComponent },\n      { path: 'insert-remove', component: InsertRemoveComponent},\n      { path: 'home', component: HomeComponent, data: {<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'HomePage'} },\n      { path: 'about', component: AboutComponent, data: {<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>: 'AboutPage'} },\n\n    ])\n  ],\n\n</code-example>\n<p>코드에서 보면 <code>home</code>과 <code>about</code> 경로는 각각 <code>HomeComponent</code>, <code>AboutComponent</code>와 연결되어 있습니다. 그래서 URL이 변경되면 라우터가 <code>HomeComponent</code>, <code>AboutComponent</code> 인스턴스를 생성해서 화면에 표시합니다.</p>\n<p>그리고 라우팅 규칙에는 <code>path</code>, <code>component</code> 외에 <code>data</code> 프로퍼티를 사용할 수 있습니다. <code>AppComponent</code>가 등록된 라우팅 규칙에 <code>data</code> 프로퍼티를 추가하면 라우팅 규칙이 변경되는 시점에 이 데이터가 전달되기 때문에, 화면이 전환되는 동안 적용될 애니메이션에 이 데이터를 활용할 수 있습니다. 이 문서에서는 데이터 값을 활용해서 <code>routeAnimation</code> 트리거에 활용해 봅시다.</p>\n<div class=\"alert is-helpful\">\n<p><strong>참고:</strong> <code>data</code> 객체에 사용한 프로퍼티 이름은 임의로 지정한 것입니다. 이 예제에서는 <em>animation</em>이라고 지정했으며, 다른 이름으로 사용해도 됩니다.</p>\n</div>\n<!--\n## Router outlet\n-->\n<h2 id=\"라우팅-영역router-outlet\">라우팅 영역(router outlet)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#라우팅-영역router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAfter configuring the routes, tell the Angular router where to render the views when matched with a route. You can set a router outlet by inserting a `<router-outlet>` container inside the root `AppComponent` template.\n\nThe `<router-outlet>` container has an attribute directive that contains data about active routes and their states, based on the `data` property that we set in the route configuration.\n\n<code-example path=\"animations/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"route-animations-outlet\">\n&lt;div [@routeAnimations]=&quot;prepareRoute(outlet)&quot; &gt;\n  &lt;router-outlet #outlet=&quot;outlet&quot;&gt;&lt;/router-outlet&gt;\n&lt;/div&gt;\n\n</code-example>\n\n`AppComponent` defines a method that can detect when a view changes. The method assigns an animation state value to the animation trigger (`@routeAnimation`) based on the route configuration `data` property value. Here's an example of an `AppComponent` method that detects when a route change happens.\n\n<code-example path=\"animations/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"prepare-router-outlet\" language=\"typescript\">\nprepareRoute(outlet: RouterOutlet) {\n  return outlet &amp;&amp; outlet.activatedRouteData &amp;&amp; outlet.activatedRouteData[&#39;animation&#39;];\n}\n\n\n</code-example>\n\nHere, the `prepareRoute()` method takes the value of the outlet directive (established through `#outlet=\"outlet\"`) and returns a string value representing the state of the animation based on the custom data of the current active route. You can use this data to control which transition to execute for each route.\n-->\n<p>라우팅 규칙을 선언하고 나면 라우팅 규칙에 연결된 컴포넌트가 화면에 표시될 위치를 지정해야 합니다. 이번 예제에서는 <code>AppComponent</code> 템플릿에 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>를 추가하는 방식으로 지정합니다.</p>\n<p><code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>를 감싸는 컨테이너에는 활성화된 라우팅 규칙이나 특정 상태를 어트리뷰트 디렉티브로 지정할 수 있습니다. <code>data</code> 객체에 지정한 값은 이 때 사용합니다.</p>\n<code-example path=\"animations/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"route-animations-outlet\">\n&#x3C;div [@routeAnimations]=\"prepareRoute(outlet)\" >\n  &#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a> #outlet=\"outlet\">&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n&#x3C;/div>\n\n</code-example>\n<p><code>AppComponent</code>에는 화면이 전환되는 것을 감지할 수 있는 메소드를 정의합니다. 이 메소드는 활성화된 라우팅 규칙에 있는 <code>data</code> 프로퍼티 값을 참고해서 애니메이션 트리거(<code>@routeAnimations</code>)에 적절한 상태를 연결합니다. 아래와 같은 식으로 구현합니다.</p>\n<code-example path=\"animations/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"prepare-router-outlet\" language=\"typescript\">\nprepareRoute(outlet: <a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a>) {\n  return outlet &#x26;&#x26; outlet.activatedRouteData &#x26;&#x26; outlet.activatedRouteData['<a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>'];\n}\n\n\n</code-example>\n<p>이 코드에서 <code>prepareRoute()</code> 메소드는 라우팅 영역 디렉티브(<code>#outlet=\"outlet\"</code>)를 인자로 받아서 현재 활성화된 라우팅 규칙과 이 규칙에 있는 데이터 값을 기반으로 적절한 상태를 문자열로 반환합니다. 그래서 트랜지션은 이 데이터로 조절할 수 있습니다.</p>\n<!--\n## Animation definition\n-->\n<h2 id=\"애니메이션-정의하기\">애니메이션 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#애니메이션-정의하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAnimations can be defined directly inside your components. For this example we are defining the animations in a separate file, which allows us to re-use the animations.\n\nThe following code snippet defines a reusable animation named `slideInAnimation`.\n\n\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts\" region=\"route-animations\" language=\"typescript\">\nexport const slideInAnimation =\n  trigger(&#39;routeAnimations&#39;, [\n    transition(&#39;HomePage &lt;=&gt; AboutPage&#39;, [\n      style({ position: &#39;relative&#39; }),\n      query(&#39;:enter, :leave&#39;, [\n        style({\n          position: &#39;absolute&#39;,\n          top: 0,\n          left: 0,\n          width: &#39;100%&#39;\n        })\n      ]),\n      query(&#39;:enter&#39;, [\n        style({ left: &#39;-100%&#39;})\n      ]),\n      query(&#39;:leave&#39;, animateChild()),\n      group([\n        query(&#39;:leave&#39;, [\n          animate(&#39;300ms ease-out&#39;, style({ left: &#39;100%&#39;}))\n        ]),\n        query(&#39;:enter&#39;, [\n          animate(&#39;300ms ease-out&#39;, style({ left: &#39;0%&#39;}))\n        ])\n      ]),\n      query(&#39;:enter&#39;, animateChild()),\n    ]),\n    transition(&#39;* &lt;=&gt; FilterPage&#39;, [\n      style({ position: &#39;relative&#39; }),\n      query(&#39;:enter, :leave&#39;, [\n        style({\n          position: &#39;absolute&#39;,\n          top: 0,\n          left: 0,\n          width: &#39;100%&#39;\n        })\n      ]),\n      query(&#39;:enter&#39;, [\n        style({ left: &#39;-100%&#39;})\n      ]),\n      query(&#39;:leave&#39;, animateChild()),\n      group([\n        query(&#39;:leave&#39;, [\n          animate(&#39;200ms ease-out&#39;, style({ left: &#39;100%&#39;}))\n        ]),\n        query(&#39;:enter&#39;, [\n          animate(&#39;300ms ease-out&#39;, style({ left: &#39;0%&#39;}))\n        ])\n      ]),\n      query(&#39;:enter&#39;, animateChild()),\n    ])\n  ]);\n\n</code-example>\n\nThe animation definition does several things:\n\n* Defines two transitions. A single trigger can define multiple states and transitions.\n* Adjusts the styles of the host and child views to control their relative positions during the transition.\n* Uses `query()` to determine which child view is entering and which is leaving the host view.\n\nA route change activates the animation trigger, and a transition matching the state change is applied.\n\n<div class=\"alert is-helpful\">\n\n**Note:** The transition states must match the `data` property value defined in the route configuration.\n</div>\n\nMake the animation definition available in your application by adding the reusable animation (`slideInAnimation`) to the `animations` metadata of the `AppComponent`.\n\n<code-example path=\"animations/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"define\" language=\"typescript\">\n@Component({\n  selector: &#39;app-root&#39;,\n  templateUrl: &#39;app.component.html&#39;,\n  styleUrls: [&#39;app.component.css&#39;],\n  animations: [\n    slideInAnimation\n    // 애니메이션 트리거는 여기에 작성합니다.\n  ]\n})\n\n</code-example>\n-->\n<p>애니메이션은 컴포넌트에 직접 정의할 수 있습니다. 하지만 이번에는 이 애니메이션을 재사용할 수 있도록 별도 파일에 정의해 봅시다.</p>\n<p>다음과 같은 애니메이션 파일을 작성합니다.</p>\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts\" region=\"route-animations\" language=\"typescript\">\nexport const slideInAnimation =\n  <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &#x3C;=> AboutPage', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ]),\n    <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &#x3C;=> FilterPage', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'relative' }),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n          <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%'\n        })\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n        <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n      group([\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n        ]),\n        <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n          <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n        ])\n      ]),\n      <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n    ])\n  ]);\n\n</code-example>\n<p>이 애니메이션은 다음과 같이 동작합니다:</p>\n<ul>\n<li><code>routeAnimations</code> 트리거에 연결된 트랜지션은 두 개 입니다. 이 트랜지션은 동시에 시작됩니다.</li>\n<li>트랜지션이 진행되는 동안에는 호스트 엘리먼트와 자식 엘리먼트가 상대 위치로 조정됩니다.</li>\n<li>호스트 화면에 들어오는 자식 화면과 화면에서 나가는 자식 화면을 탐색하기 위해 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 함수를 사용했습니다.</li>\n</ul>\n<p>이제 라우팅 규칙이 변경되면 애니메이션 트리거가 발생하고 상태에 맞는 트랜지션이 시작됩니다.</p>\n<div class=\"alert is-helpful\">\n<p><strong>참고:</strong> 트랜지션 상태는 라우팅 규칙에 정의한 <code>data</code> 프로퍼티와 맞아야 합니다.</p>\n</div>\n<p>이렇게 정의한 애니메이션은 <code>AppComponent</code> 메타데이터의 <code>animations</code> 배열에 추가하면 애플리케이션에 등록할 수 있습니다.</p>\n<code-example path=\"animations/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"define\" language=\"typescript\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: 'app.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['app.component.css'],\n  animations: [\n    slideInAnimation\n    // 애니메이션 트리거는 여기에 작성합니다.\n  ]\n})\n\n</code-example>\n<!--\n### Styling the host and child components\n-->\n<h3 id=\"호스트자식-컴포넌트-스타일-지정하기\">호스트/자식 컴포넌트 스타일 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#호스트자식-컴포넌트-스타일-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nDuring a transition, a new view is inserted directly after the old one and both elements appear on screen at the same time. To prevent this, apply additional styling to the host view, and to the removed and inserted child views. The host view must use relative positioning, and the child views must use absolute positioning. Adding styling to the views animates the containers in place, without the DOM moving things around.\n\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts\" region=\"style-view\" language=\"typescript\">\ntrigger(&#39;routeAnimations&#39;, [\n  transition(&#39;HomePage &lt;=&gt; AboutPage&#39;, [\n    style({ position: &#39;relative&#39; }),\n    query(&#39;:enter, :leave&#39;, [\n      style({\n        position: &#39;absolute&#39;,\n        top: 0,\n        left: 0,\n        width: &#39;100%&#39;\n      })\n    ]),\n\n</code-example>\n-->\n<p>트랜지션이 진행되는 동안에는 새로운 화면이 이전에 있던 화면을 대체하는 애니메이션이 함께 진행되기 때문에 두 화면이 동시에 표시되는 순간이 있습니다. 그러면 호스트 화면에 스타일을 추가해서 애니메이션을 개선할 수 있습니다. 호스트 화면은 반드시 상대(relative) 위치를 사용하며 자식 화면은 절대(absolute) 주소를 사용하면 됩니다.</p>\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts\" region=\"style-view\" language=\"typescript\">\n<a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('routeAnimations', [\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('HomePage &#x3C;=> AboutPage', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'relative' }),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n      <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n        <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%'\n      })\n    ]),\n\n</code-example>\n<h3 id=\"querying-the-view-containers\">Querying the view containers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#querying-the-view-containers\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nUse the `query()` method to find and animate elements within the current host component. The `query(\":enter\")` statement returns the view that is being inserted, and `query(\":leave\")` returns the view that is being removed.\n\nLet's assume that we are routing from the *Home => About*.\n\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts (Continuation from above)\" region=\"query\" language=\"typescript\">\n  query(&#39;:enter&#39;, [\n    style({ left: &#39;-100%&#39;})\n  ]),\n  query(&#39;:leave&#39;, animateChild()),\n  group([\n    query(&#39;:leave&#39;, [\n      animate(&#39;300ms ease-out&#39;, style({ left: &#39;100%&#39;}))\n    ]),\n    query(&#39;:enter&#39;, [\n      animate(&#39;300ms ease-out&#39;, style({ left: &#39;0%&#39;}))\n    ])\n  ]),\n  query(&#39;:enter&#39;, animateChild()),\n]),\ntransition(&#39;* &lt;=&gt; FilterPage&#39;, [\n  style({ position: &#39;relative&#39; }),\n  query(&#39;:enter, :leave&#39;, [\n    style({\n      position: &#39;absolute&#39;,\n      top: 0,\n      left: 0,\n      width: &#39;100%&#39;\n    })\n  ]),\n  query(&#39;:enter&#39;, [\n    style({ left: &#39;-100%&#39;})\n  ]),\n  query(&#39;:leave&#39;, animateChild()),\n  group([\n    query(&#39;:leave&#39;, [\n      animate(&#39;200ms ease-out&#39;, style({ left: &#39;100%&#39;}))\n    ]),\n    query(&#39;:enter&#39;, [\n      animate(&#39;300ms ease-out&#39;, style({ left: &#39;0%&#39;}))\n    ])\n  ]),\n  query(&#39;:enter&#39;, animateChild()),\n])\n\n</code-example>\n\nThe animation code does the following after styling the views:\n\n* `query(':enter style({ left: '-100%'})` matches the view that is added and hides the newly added view by positioning it to the far left.\n* Calls `animateChild()` on the view that is leaving, to run its child animations.\n* Uses `group()` function to make the inner animations run in parallel.\n* Within the `group()` function:\n    * Queries the view that is removed and animates it to slide far to the right.\n    * Slides in the new view by animating the view with an easing function and duration. </br>\n    This animation results in the `about` view sliding from the left to right.\n* Calls the `animateChild()` method on the new view to run its child animations after the main animation completes.\n\nYou now have a basic routable animation that animates routing from one view to another.\n-->\n<p><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>()</code> 메소드를 사용하면 현재 호스트 컴포넌트 안에있는 엘리먼트를 탐색할 수 있습니다. 그래서 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":enter\")</code>라는 실행문으로 화면에 추가되는 엘리먼트를 찾을 수 있으며 <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(\":leave\")</code> 실행문으로 화면에서 제거되는 엘리먼트를 찾을 수 있습니다.</p>\n<p><em>Home => About</em>으로 이동하는 경우를 생각해 봅시다.</p>\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts (Continuation from above)\" region=\"query\" language=\"typescript\">\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n    ]),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n    ])\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n]),\n<a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('* &#x3C;=> FilterPage', [\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'relative' }),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter, :leave', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n      <a href=\"api/router/Scroll#position\" class=\"code-anchor\">position</a>: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%'\n    })\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n    <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n  group([\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':leave', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('200ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '100%'}))\n    ]),\n    <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', [\n      <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('300ms ease-out', <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '0%'}))\n    ])\n  ]),\n  <a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter', <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()),\n])\n\n</code-example>\n<p>이 때 애니메이션 코드는 다음과 같은 순서로 동작합니다:</p>\n<ul>\n<li><code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(':enter <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({ left: '-100%'})</code>는 화면에 추가되는 엘리먼트에 매칭되며 처음에는 보이지 않도록 화면 왼쪽에 배치됩니다.</li>\n<li>화면에서 사라지는 엘리먼트는 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code>를 실행해서 자식 애니메이션을 시작합니다.</li>\n<li>자식 애니메이션은 동시에 시작하기 위해 <code><a href=\"api/forms/FormBuilder#group\" class=\"code-anchor\">group()</a></code> 함수를 사용했습니다.</li>\n<li><code><a href=\"api/forms/FormBuilder#group\" class=\"code-anchor\">group()</a></code> 함수 안에서는:\n<em> 화면에서 사라지는 엘리먼트를 찾아서 화면 오른쪽으로 이동합니다.\n</em> 새로운 화면을 일반 가속도 함수로 움직입니다.<br>\n결국 <code>about</code> 화면은 화면 왼쪽부터 오른쪾으로 움직입니다.</li>\n<li>새로운 화면이 나타나는 애니메이션이 끝난 후에 <code><a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>()</code> 메소드가 실행되면서 자식 애니메이션이 시작됩니다.</li>\n</ul>\n<p>지금까지 화면을 전환할 때 애니메이션을 적용하는 방법에 대해 알아봤습니다.</p>\n<!--\n## More on Angular animations\n-->\n<h2 id=\"더-알아보기\">더 알아보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/route-animations#더-알아보기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou may also be interested in the following:\n\n* [Introduction to Angular animations](guide/animations)\n* [Transition and triggers](guide/transition-and-triggers)\n* [Complex animation sequences](guide/complex-animation-sequences)\n* [Reusable animations](guide/reusable-animations)\n-->\n<p>다음 내용에 대해서도 알아보세요:</p>\n<ul>\n<li><a href=\"guide/animations\">Angular 애니메이션 소개</a></li>\n<li><a href=\"guide/transition-and-triggers\">트랜지션 &#x26; 트리거</a></li>\n<li><a href=\"guide/complex-animation-sequences\">복잡한 애니메이션 시퀀스</a></li>\n<li><a href=\"guide/reusable-animations\">애니메이션 재사용하기</a></li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/query\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/NgModule\n - api/core/Version#full\n - api/forms/FormBuilder#group\n - api/platform-browser/BrowserModule\n - api/platform-browser/animations/BrowserAnimationsModule\n - api/router/Route#pathMatch\n - api/router/Route#redirectTo\n - api/router/RouterModule\n - api/router/RouterModule#forChild\n - api/router/RouterModule#forRoot\n - api/router/RouterOutlet\n - api/router/Scroll#position\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations\n - guide/route-animations#querying-the-view-containers\n - guide/route-animations#더-알아보기\n - guide/route-animations#라우팅-규칙-설정\n - guide/route-animations#라우팅-애니메이션\n - guide/route-animations#라우팅-영역router-outlet\n - guide/route-animations#사전-지식\n - guide/route-animations#애니메이션-정의하기\n - guide/route-animations#호스트자식-컴포넌트-스타일-지정하기\n - guide/transition-and-triggers\n - https://github.com/angular/angular/edit/master/aio/content/guide/route-animations.md?message=docs%3A%20describe%20your%20change...\n-->"
}