{
  "id": "guide/upgrade-setup",
  "title": "로컬 개발환경 설정하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/upgrade-setup.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Setup for upgrading from AngularJS\n-->\n<h1 id=\"로컬-개발환경-설정하기\">로컬 개발환경 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#로컬-개발환경-설정하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nQuestion: Can we remove this file and instead direct readers to https://github.com/angular/quickstart/blob/master/README.md\n-->\n<div class=\"alert is-critical\">\n<!--\n**Audience:** Use this guide **only** in the context of  [Upgrading from AngularJS](guide/upgrade \"Upgrading from AngularJS to Angular\") or [Upgrading for Performance](guide/upgrade-performance \"Upgrading for Performance\").\nThose Upgrade guides refer to this Setup guide for information about using the [deprecated QuickStart GitHub repository](https://github.com/angular/quickstart \"Deprecated Angular QuickStart GitHub repository\"), which was created prior to the current Angular [CLI](cli \"CLI Overview\").\n\n**For all other scenarios,** see the current instructions in [Setting up the Local Environment and Workspace](guide/setup-local \"Setting up for Local Development\").\n-->\n<p><strong>주의:</strong> 이 가이드에서 설명하는 내용은 <a href=\"guide/upgrade\" title=\"Upgrading from AngularJS to Angular\">AngularJS 앱을 Angular 앱으로 업그레이드하기</a> 문서와 <a href=\"guide/upgrade-performance\" title=\"Upgrading for Performance\">업그레이드 방식과 성능의 관계</a> 문서의 상황에서만 유효합니다.\n이 업그레이드 가이드 문서는 <a href=\"https://github.com/angular/quickstart\" title=\"Deprecated Angular QuickStart GitHub repository\">이제 사용하지 않는 QuickStart GitHub 저장소</a>를 기준으로 설명하는데, 이 문서는 <a href=\"cli\" title=\"CLI Overview\">Angular CLI</a>가 지금처럼 중요하게 사용되기 이전에 작성되었습니다.</p>\n<p><strong>일반적인 경우라면</strong> <a href=\"guide/setup-local\" title=\"Setting up for Local Development\">로컬 개발환경, 워크스페이스 구성하기</a> 문서를 참고하는 것이 더 좋습니다.</p>\n</div>\n<!--\nThe <live-example name=quickstart>QuickStart live-coding</live-example> example is an Angular _playground_.\nThere are also some differences from a local app, to simplify that live-coding experience.\nIn particular, the QuickStart live-coding example shows just the AppComponent file; it creates the equivalent of app.module.ts and main.ts internally for the playground only.\n-->\n<!--\nThis guide describes how to develop locally on your own machine.\nSetting up a new project on your machine is quick and easy with the [QuickStart seed on github](https://github.com/angular/quickstart \"Install the github QuickStart repo\").\n\n**Prerequisite:** Make sure you have [Node.js® and npm installed](guide/setup-local#prerequisites \"Angular prerequisites\").\n-->\n<p>이 문서는 <a href=\"https://github.com/angular/quickstart\" title=\"Install the github QuickStart repo\">GitHub 저장소에 있는 QuickStart 프로젝트</a>를 기준으로 로컬 머신에 새 프로젝트 환경을 구성하는 내용에 대해 다룹니다.</p>\n<p><strong>사전준비:</strong> <a href=\"guide/setup-local#prerequisites\" title=\"Angular prerequisites\">Node.js®와 npm</a>가 꼭 설치되어 있어야 합니다.</p>\n<a id=\"clone\"></a>\n<!--\n## Clone\n-->\n<h2 id=\"저장소-복제\">저장소 복제<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#저장소-복제\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nPerform the _clone-to-launch_ steps with these terminal commands.\n-->\n<p>터미널에서 다음 명령을 실행하면 <em>저장소를 복제하고 실행</em> 할 수 있습니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  git clone https://github.com/angular/quickstart.git quickstart\n  cd quickstart\n  npm install\n  npm start\n\n</code-example>\n<div class=\"alert is-important\">\n<!--\n`npm start` fails in _Bash for Windows_ in versions earlier than the Creator's Update (April 2017).\n-->\n<p>크리에이터 업데이트(2017년 4월) 이전 버전의 윈도우 환경에서 <em>Bash 셸</em> 을 사용하면 <code>npm start</code> 명령을 실행할 때 에러가 발생합니다.</p>\n</div>\n<a id=\"download\"></a>\n<!--\n## Download\n-->\n<h2 id=\"다운로드\">다운로드<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#다운로드\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n<a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"Download the QuickStart seed repository\">Download the QuickStart seed</a>\nand unzip it into your project folder. Then perform the remaining steps with these terminal commands.\n-->\n<p><a href=\"https://github.com/angular/quickstart/archive/master.zip\" title=\"Download the QuickStart seed repository\">QuickStart seed</a>를 다운받고 quickstart 폴더에 압축을 풉니다.\n그리고 터미널에서 다음 명령을 실행합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  cd quickstart\n  npm install\n  npm start\n\n</code-example>\n<div class=\"alert is-important\">\n<!--\n`npm start` fails in _Bash for Windows_ in versions earlier than the Creator's Update (April 2017).\n-->\n<p>크리에이터 업데이트(2017년 4월) 이전 버전의 윈도우 환경에서 <em>Bash 셸</em> 을 사용하면 <code>npm start</code> 명령을 실행할 때 에러가 발생합니다.</p>\n</div>\n<a id=\"non-essential\"></a>\n<!--\n## Delete _non-essential_ files (optional)\n-->\n<h2 id=\"불필요한-파일-삭제하기-생략-가능\"><em>불필요한</em> 파일 삭제하기 (생략 가능)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#불필요한-파일-삭제하기-생략-가능\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can quickly delete the _non-essential_ files that concern testing and QuickStart repository maintenance\n(***including all git-related artifacts*** such as the `.git` folder and `.gitignore`!).\n-->\n<p>저장소를 복제했다면 테스트와 관련되거나 QuickStart 저장소에 관련된 <em>불필요한</em> 파일들을 지우는 것이 좋습니다.\n(<code>.git</code> 폴더나 <code>.gitignore</code>와 같이 <strong><em>git과 관련된 파일들도</em></strong> 지우는 것이 좋습니다!)</p>\n<div class=\"alert is-important\">\n<!--\nDo this only in the beginning to avoid accidentally deleting your own tests and git setup!\n-->\n<p>이 과정은 테스트 스펙을 직접 작성하거나 git 저장소를 직접 설정할 때만 수행하세요.</p>\n</div>\n<!--\nOpen a terminal window in the project folder and enter the following commands for your environment:\n-->\n<p>프로젝트 폴더에서 터미널을 열고 다음 명령을 실행하세요:</p>\n<h3 id=\"osx-bash\">OS/X (bash)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#osx-bash\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\" class=\"code-shell\">\n  xargs rm -rf &#x3C; non-essential-files.osx.txt\n  rm src/app/*.spec*.ts\n  rm non-essential-files.osx.txt\n\n</code-example>\n<h3 id=\"windows\">Windows<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#windows\"><i class=\"material-icons\">link</i></a></h3>\n<code-example language=\"sh\" class=\"code-shell\">\n  for /f %i in (non-essential-files.txt) do del %i /F /S /Q\n  rd .git /s /q\n  rd e2e /s /q\n\n</code-example>\n<a id=\"seed\"></a>\n<!--\n## What's in the QuickStart seed?\n-->\n<h2 id=\"quickstart-seed에는-어떤-내용이-있을까요\">QuickStart seed에는 어떤 내용이 있을까요?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#quickstart-seed에는-어떤-내용이-있을까요\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe **QuickStart seed** provides a basic QuickStart playground application and other files necessary for local development.\nConsequently, there are many files in the project folder on your machine,\nmost of which you can [learn about later](guide/file-structure).\n-->\n<p><strong>QuickStart seed</strong>는 QuickStart 플레이그라운드와 거의 비슷한 애플리케이션이며, 로컬 개발환경에 맞게 몇 개 파일이 더 추가된 것입니다.\n<a href=\"guide/file-structure\">가이드 문서의 내용</a>을 계속 따라가다 보면 이 프로젝트에 많은 파일들이 추가될 것입니다.</p>\n<div class=\"alert is-helpful\">\n<!--\n**Reminder:** The \"QuickStart seed\" example was created prior to the Angular CLI, so there are some differences between what is described here and an Angular CLI application.\n-->\n<p><strong>명심하세요:</strong> \"QuickStart seed\" 프로젝트는 Angular CLI가 등장하기 전에 만들어진 프로젝트입니다.\n다른 문서에서 설명하는 내용과는 조금 다른 면이 있을 수 있습니다.</p>\n</div>\n<a id=\"app-files\"></a>\n<!--\nFocus on the following three TypeScript (`.ts`) files in the **`/src`** folder.\n-->\n<p><strong><code>/src</code></strong> 폴더에 있는 TypeScript (<code>.ts</code>) 파일 3개에 집중해 봅시다.</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    src\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      app\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app.component.ts\n      </div>\n      <div class=\"file\">\n        app.module.ts\n      </div>\n    </div>\n    <div class=\"file\">\n      main.ts\n    </div>\n  </div>\n</div>\n<code-tabs>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"setup/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `&#x3C;h1>Hello {{name}}&#x3C;/h1>`\n})\nexport class AppComponent { name = 'Angular'; }\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"setup/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }      from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { AppComponent }  from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports:      [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"src/main.ts\" path=\"setup/src/main.ts\">\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app/app.module';\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n<!--\nAll guides and cookbooks have _at least these core files_.\nEach file has a distinct purpose and evolves independently as the application grows.\n\nFiles outside `src/` concern building, deploying, and testing your app.\nThey include configuration files and external dependencies.\n\nFiles inside `src/` \"belong\" to your app.\nAdd new Typescript, HTML and CSS files inside the `src/` directory, most of them inside `src/app`,\nunless told to do otherwise.\n\nThe following are all in `src/`\n-->\n<p>모든 가이드 문서에는 <em>이 3개의 파일이</em> 반드시 존재합니다.\n각 파일에는 독자적인 역할이 있으며, 애플리케이션이 확장되면서 점점 복잡해질 것입니다.</p>\n<p><code>src/</code> 폴더 밖에 있는 파일들은 애플리케이션 빌드하거나 배포, 테스트할 때 필요한 파일입니다.\n이 파일들은 환경을 설정하거나 외부 의존성을 관리하는 용도로 사용합니다.</p>\n<p><code>src/</code> 폴더 안에 있는 파일들은 애플리케이션을 구성하는 파일입니다.\n그래서 애플리케이션을 확장하기 위해 새롭게 TypeScript, HTML, CSS을 만들면 <code>src/</code> 폴더에 만들게 되며, 특별한 이유가 없다면 <code>src/app</code> 폴더에 생성하게 될 것입니다.</p>\n<p>위에서 언급한 필수 파일 3개도 <code>src/</code> 폴더에 존재합니다.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"20%\">\n  \n  <col width=\"80%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      <!--\n      File\n      -->\n      파일\n    </th>\n    <th>\n      <!--\n      Purpose\n      -->\n      용도\n    </th>\n  </tr>\n  <tr>\n    <td>\n      <code>app/app.component.ts</code>\n    </td>\n    <td>\n      <!--\n      Defines the same `AppComponent` as the one in the QuickStart playground.\n      It is the **root** component of what will become a tree of nested components\n      as the application evolves.\n      -->\n<p>      QuickStart 플레이그라운드 애플리케이션의 <code>AppComponent</code>를 정의합니다.\n이 컴포넌트는 애플리케이션 <strong>최상위</strong> 컴포넌트이며 이 컴포넌트를 기준으로 컴포넌트 트리를 구성합니다.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>app/app.module.ts</code>\n    </td>\n    <td>\n      <!--\n      Defines `AppModule`, the  [root module](guide/bootstrapping \"AppModule: the root module\") that tells Angular how to assemble the application.\n      When initially created, it declares only the `AppComponent`.\n      Over time, you add more components to declare.\n      -->\n<p>      <a href=\"guide/bootstrapping\" title=\"AppModule: the root module\">최상위 모듈</a> <code>AppModule</code>을 정의합니다. Angular는 이 모듈에 정의된 대로 애플리케이션을 구성합니다.\n처음 프로젝트를 생성하고 나면 프로젝트에는 <code>AppComponent</code>만 존재합니다.\n그리고 이후에 프로젝트가 커질수록 수많은 컴포넌트가 추가될 것입니다.</p>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <code>main.ts</code>\n    </td>\n    <td>\n      <!--\n      Compiles the application with the [JIT compiler](guide/glossary#jit) and\n      [bootstraps](guide/bootstrapping)\n      the application's main module (`AppModule`) to run in the browser.\n      The JIT compiler is a reasonable choice during the development of most projects and\n      it's the only viable choice for a sample running in a _live-coding_ environment such as Stackblitz.\n      Alternative [compilation](guide/aot-compiler), [build](guide/build), and [deployment](guide/deployment) options are available.\n      -->\n<p>      애플리케이션을 <a href=\"guide/glossary#jit\">JIT 컴파일러</a>로 빌드하고 브라우저에서 애플리케이션 메인 모듈 (<code>AppModule</code>)을 <a href=\"guide/bootstrapping\">부트스트랩</a>할 때 사용하는 파일입니다.\n프로젝트가 개발단계라면 JIT 컴파일러도 충분히 좋은 선택이며 Stackblitz와 같은 <em>라이브 코딩</em> 환경에서는 JIT 컴파일러만 사용할 수 있습니다.\n<a href=\"guide/aot-compiler\">AOT 컴파일러로 대체하는 방법</a>, <a href=\"guide/build\">빌드</a>, <a href=\"guide/deployment\">배포</a>하는 방법에 대해서도 확인해 보세요.</p>\n    </td>\n  </tr>\n</tbody></table>\n<!--\n## Appendix: Develop locally with IE\n-->\n<h2 id=\"부록-로컬-개발-환경에서-ie-활용하기\">부록: 로컬 개발 환경에서 IE 활용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#부록-로컬-개발-환경에서-ie-활용하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIf you develop angular locally with `ng serve`, a `websocket` connection is set up automatically between browser and local dev server, so when your code changes, the browser can automatically refresh.\n\nIn Windows, by default, one application can only have 6 websocket connections, <a href=\"https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396#websocket_maxconn\" title=\"MSDN WebSocket settings\">MSDN WebSocket Settings</a>.\nSo when IE is refreshed (manually or automatically by `ng serve`), sometimes the websocket does not close properly. When websocket connections exceed the limitations, a `SecurityError` will be thrown. This error will not affect the angular application, you can just restart IE to clear this error, or modify the windows registry to update the limitations.\n-->\n<p>로컬 개발환경에서 Angular 애플리케이션을 개발하면 <code>ng serve</code> 명령을 실행했을 때 브라우저와 로컬 개발 서버가 <code>websocket</code>으로 연결됩니다. 그래서 코드를 변경했을 때 브라우저가 코드 변경분을 반영하기 위해 페이지를 자동으로 갱신합니다.</p>\n<p>그리고 Windows에서는 <a href=\"https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&#x26;MSPPError=-2147217396#websocket_maxconn\" title=\"MSDN WebSocket settings\">MSDN WebSocket 설정에 따라</a> 애플리케이션에 6개의 웹소켓을 연결할 수 있습니다.\n그래서 IE에서 수동으로 페이지를 새로고침하거나 <code>ng serve</code>에 의해 자동으로 갱신되면 종종 웹소켓이 정상적으로 종료되지 않아서 새로운 웹소켓을 연결하지 못할 때가 있습니다. 이 때 <code>SecurityError</code> 가 발생하는데, 이 에러가 Angular 애플리케이션에는 영향을 주지 않지만 에러를 없애려면 IE를 재시작해야 합니다.\nWindows에서 이 제한을 해제하려면 레지스트리를 수정해야 합니다.</p>\n<!--\n## Appendix: Test using `fakeAsync()/async()`\n-->\n<h2 id=\"부록-fakeasyncasync-활용하기\">부록: <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 활용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/upgrade-setup#부록-fakeasyncasync-활용하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIf you use the `fakeAsync()/async()` helper function to run unit tests (for details, read the [Testing guide](guide/testing-components-scenarios#fake-async)), you need to import `zone.js/dist/zone-testing` in your test setup file.\n-->\n<p>유닛 테스트를 실행할 때 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()/<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 헬퍼 함수를 사용한다면, 테스트 환경 설정을 위해 <code>zone.js/dist/zone-testing</code> 패키지들을 로드해야 합니다.\n자세한 내용은 <a href=\"guide/testing-components-scenarios#fake-async\">테스트</a> 문서를 참고하세요.</p>\n<div class=\"alert is-important\">\n<!--\nIf you create project with `Angular/CLI`, it is already imported in `src/test.ts`.\n-->\nAngular CLI로 프로젝트를 생성했다면 이 내용은 이미 `src/test.ts` 파일에 구성되어 있습니다.\n</div>\n<!--\nAnd in the earlier versions of `Angular`, the following files were imported or added in your html file:\n-->\n<p>이전에는 HTML 파일에서 이 파일들을 직접 로드하기도 했습니다:</p>\n<code-example>\nimport 'zone.js/dist/long-stack-trace-zone';\nimport 'zone.js/dist/proxy';\nimport 'zone.js/dist/sync-test';\nimport 'zone.js/dist/jasmine-patch';\nimport 'zone.js/dist/async-test';\nimport 'zone.js/dist/fake-async-test';\n</code-example>\n<!--\nYou can still load those files separately, but the order is important, you must import `proxy` before `sync-test`, `async-test`, `fake-async-test` and `jasmine-patch`. And you also need to import `sync-test` before `jasmine-patch`, so it is recommended to just import `zone-testing` instead of loading those separated files.\n-->\n<p>이 파일들 중에서 필요한 파일만 로드할 수도 있지만, 로드하는 순서가 중요합니다.\n<code>proxy</code> 패키지는 <code>sync-test</code>, <code>async-test</code>, <code>fake-async-test</code>, <code>jasmine-patch</code>가 로드되기 전에 먼저 로드되어야 합니다.\n그리고 <code>sync-test</code> 패키지는 <code>jasmine-patch</code>가 로드되기 전에 먼저 로드되어야 합니다.\n그래서 개별 파일을 로드하지 말고 <code>zone-testing</code> 패키지를 한 번에 로드하는 것을 권장합니다.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/upgrade\n - guide/upgrade-performance\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/NgModule\n - api/core/testing/async\n - api/core/testing/fakeAsync\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli\n - guide/aot-compiler\n - guide/bootstrapping\n - guide/build\n - guide/deployment\n - guide/file-structure\n - guide/glossary#jit\n - guide/setup-local\n - guide/setup-local#prerequisites\n - guide/testing-components-scenarios#fake-async\n - guide/upgrade\n - guide/upgrade-performance\n - guide/upgrade-setup#osx-bash\n - guide/upgrade-setup#quickstart-seed에는-어떤-내용이-있을까요\n - guide/upgrade-setup#windows\n - guide/upgrade-setup#다운로드\n - guide/upgrade-setup#로컬-개발환경-설정하기\n - guide/upgrade-setup#부록-fakeasyncasync-활용하기\n - guide/upgrade-setup#부록-로컬-개발-환경에서-ie-활용하기\n - guide/upgrade-setup#불필요한-파일-삭제하기-생략-가능\n - guide/upgrade-setup#저장소-복제\n - https://github.com/angular/angular/edit/master/aio/content/guide/upgrade-setup.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/quickstart\n - https://github.com/angular/quickstart/archive/master.zip\n - https://msdn.microsoft.com/library/ee330736%28v=vs.85%29.aspx?f=255&MSPPError=-2147217396#websocket_maxconn\n-->"
}