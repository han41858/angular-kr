{
  "id": "guide/glossary",
  "title": "Glossary",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/glossary.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"glossary\">Glossary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#glossary\"><i class=\"material-icons\">link</i></a></h1>\n<p>Angular has its own vocabulary.\nMost Angular terms are common English words or computing terms\nthat have a specific meaning within the Angular system.</p>\n<p>This glossary lists the most prominent terms\nand a few less familiar ones with unusual or\nunexpected definitions.</p>\n<p><a href=\"guide/glossary#A\">A</a> <a href=\"guide/glossary#B\">B</a> <a href=\"guide/glossary#C\">C</a> <a href=\"guide/glossary#D\">D</a> <a href=\"guide/glossary#E\">E</a> <a href=\"guide/glossary#F\">F</a> <a href=\"guide/glossary#G\">G</a> <a href=\"guide/glossary#H\">H</a> <a href=\"guide/glossary#I\">I</a>\n<a href=\"guide/glossary#J\">J</a> <a href=\"guide/glossary#K\">K</a> <a href=\"guide/glossary#L\">L</a> <a href=\"guide/glossary#M\">M</a> <a href=\"guide/glossary#N\">N</a> <a href=\"guide/glossary#O\">O</a> <a href=\"guide/glossary#P\">P</a> <a href=\"guide/glossary#Q\">Q</a> <a href=\"guide/glossary#R\">R</a>\n<a href=\"guide/glossary#S\">S</a> <a href=\"guide/glossary#T\">T</a> <a href=\"guide/glossary#U\">U</a> <a href=\"guide/glossary#V\">V</a> <a href=\"guide/glossary#W\">W</a> <a href=\"guide/glossary#X\">X</a> <a href=\"guide/glossary#Y\">Y</a> <a href=\"guide/glossary#Z\">Z</a></p>\n<a id=\"A\"></a>\n<a id=\"aot\"></a>\n<h2 id=\"ahead-of-time-aot-compilation\">ahead-of-time (AOT) compilation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular ahead-of-time (AOT) compiler converts Angular HTML and TypeScript code\ninto efficient JavaScript code during the build phase, before the browser downloads\nand runs that code.\nThis is the best compilation mode for production environments, with decreased load time and increased performance compared to <a href=\"guide/glossary#jit\">just-in-time (JIT) compilation</a>.</p>\n<p>By compiling your application using the <code>ngc</code> command-line tool, you can bootstrap directly to a module factory, so you don't need to include the Angular compiler in your JavaScript bundle.</p>\n<a id=\"angular-element\"></a>\n<h2 id=\"angular-element\">Angular element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-element\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular <a href=\"guide/glossary#component\">component</a> packaged as a <a href=\"guide/glossary#custom-element\">custom element</a>. </p>\n<p>Learn more in <a href=\"guide/elements\">Angular Elements Overview</a>.</p>\n<a id=\"annotation\"></a>\n<h2 id=\"annotation\">annotation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a></h2>\n<p>A structure that provides metadata for a class. See <a href=\"guide/glossary#decorator\">decorator</a>.</p>\n<a id=\"attribute-directive\"></a>\n<a id=\"attribute-directives\"></a>\n<h2 id=\"attribute-directives\">attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>A category of <a href=\"guide/glossary#directive\">directive</a> that can listen to and modify the behavior of\nother HTML elements, attributes, properties, and components. They are usually represented\nas HTML attributes, hence the name.</p>\n<p>Learn more in <a href=\"guide/attribute-directives\">Attribute Directives</a>.</p>\n<a id=\"B\"></a>\n<a id=\"binding\"></a>\n<h2 id=\"binding\">binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Generally, the practice of setting a variable or property to a data value.\nWithin Angular, typically refers to <a href=\"guide/glossary#data-binding\">data binding</a>,\nwhich coordinates DOM object properties with data object properties.</p>\n<p>Sometimes refers to a <a href=\"guide/glossary#dependency-injection\">dependency-injection</a> binding\nbetween a <a href=\"guide/glossary#token\">token</a> and a dependency <a href=\"guide/glossary#provider\">provider</a>.</p>\n<a id=\"bootstrap\"></a>\n<h2 id=\"bootstrap\">bootstrap<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a></h2>\n<p>A way to initialize and launch an app or system.</p>\n<p>In Angular, an app's root NgModule (<code>AppModule</code>) has a <code><a href=\"api/core/NgModule#bootstrap\" class=\"code-anchor\">bootstrap</a></code> property that identifies the app's top-level <a href=\"guide/glossary#component\">components</a>.\nDuring the bootstrap process, Angular creates and inserts these components into the <code>index.html</code> host web page.\nYou can bootstrap multiple apps in the same <code>index.html</code>. Each app contains its own components.</p>\n<p>Learn more in <a href=\"guide/bootstrapping\">Bootstrapping</a>.</p>\n<a id=\"C\"></a>\n<a id=\"case-conventions\"></a>\n<a id=\"dash-case\"></a>\n<a id=\"camelcase\"></a>\n<a id=\"kebab-case\"></a>\n<h2 id=\"case-types\">case types<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#case-types\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular uses capitalization conventions to distinguish the names of various types, as described in the <a href=\"guide/styleguide#02-01\">naming guidelines section</a> of the Style Guide. Here's a summary of the case types: </p>\n<ul>\n<li>\n<p>camelCase : Symbols, properties, methods, pipe names, non-component directive selectors, constants.\nStandard or lower camel case uses lowercase on the first letter of the item. For example, \"selectedHero\".</p>\n</li>\n<li>\n<p>UpperCamelCase (or PascalCase): Class names, including classes that define components, interfaces, NgModules, directives, and pipes,\nUpper camel case uses uppercase on the first letter of the item. For example, \"HeroListComponent\".</p>\n</li>\n<li>\n<p>dash-case (or \"kebab-case\"): Descriptive part of file names, component selectors. For example, \"app-hero-list\".</p>\n</li>\n<li>\n<p>underscore_case (or \"snake_case\"): Not typically used in Angular. Snake case uses words connected with underscores.\nFor example, \"convert_link_mode\".</p>\n</li>\n<li>\n<p>UPPER_UNDERSCORE_CASE (or UPPER_SNAKE_CASE, or SCREAMING_SNAKE_CASE): Traditional for constants (acceptable, but prefer camelCase).\nUpper snake case uses words in all capital letters connected with underscores. For example, \"FIX_ME\".</p>\n</li>\n</ul>\n<a id=\"class-decorator\"></a>\n<h2 id=\"class-decorator\">class decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#decorator\">decorator</a> that appears immediately before a class definition, which declares the class to be of the given type, and provides metadata suitable to the type.</p>\n<p>The following decorators can declare Angular class types:</p>\n<ul>\n<li><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code></li>\n<li><code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code></li>\n<li><code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>()</code></li>\n<li><code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code></li>\n<li><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code></li>\n</ul>\n<a id=\"class-field-decorator\"></a>\n<h2 id=\"class-field-decorator\">class field decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#class-field-decorator\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#decorator\">decorator</a> statement immediately before a field in a class definition that declares the type of that field. Some examples are <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code>. </p>\n<a id=\"cli\"></a>\n<h2 id=\"command-line-interface-cli\">command-line interface (CLI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#command-line-interface-cli\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"cli\">Angular CLI</a> is a command-line tool for managing the Angular development cycle. Use it to create the initial filesystem scaffolding for a <a href=\"guide/glossary#workspace\">workspace</a> or <a href=\"guide/glossary#project\">project</a>, and to run <a href=\"guide/glossary#schematic\">schematics</a> that add and modify code for initial generic versions of various elements. The CLI supports all stages of the development cycle, including building, testing, bundling, and deployment.</p>\n<ul>\n<li>To begin using the CLI for a new project, see <a href=\"guide/quickstart\">Getting Started</a>.</li>\n<li>To learn more about the full capabilities of the CLI, see the <a href=\"cli\">CLI command reference</a>.</li>\n</ul>\n<a id=\"component\"></a>\n<h2 id=\"component\">component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class with the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator\">decorator</a> that associates it with a companion <a href=\"guide/glossary#template\">template</a>. Together, the component and template define a <a href=\"guide/glossary#view\">view</a>.\nA component is a special type of <a href=\"guide/glossary#directive\">directive</a>.\nThe <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> decorator extends the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> decorator with template-oriented features. </p>\n<p>An Angular component class is responsible for exposing data and handling most of the view's display and user-interaction logic through <a href=\"guide/glossary#data-binding\">data binding</a>.</p>\n<p>Read more about components, templates, and views in <a href=\"guide/architecture\">Architecture Overview</a>.</p>\n<a id=\"custom-element\"></a>\n<h2 id=\"custom-element\">custom element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#custom-element\"><i class=\"material-icons\">link</i></a></h2>\n<p>A web platform feature, currently supported by most browsers and available in other browsers through polyfills (see <a href=\"guide/browser-support\">Browser support</a>). </p>\n<p>The custom element feature extends HTML by allowing you to define a tag whose content is created and controlled by JavaScript code. A custom element (also called a <em>web component</em>) is recognized by a browser when it's added to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry\">CustomElementRegistry</a>.</p>\n<p>You can use the API to transform an Angular component so that it can be registered with the browser and used in any HTML that you add directly to the DOM within an Angular app. The custom element tag inserts the component's view, with change-detection and data-binding functionality, into content that would otherwise be displayed without Angular processing.</p>\n<p>See also <a href=\"guide/glossary#dynamic-components\">dynamic component loading</a>.</p>\n<a id=\"D\"></a>\n<a id=\"data-binding\"></a>\n<h2 id=\"data-binding\">data binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>A process that allows apps to display data values to a user and respond to user\nactions (such as clicks, touches, and keystrokes).</p>\n<p>In data binding, you declare the relationship between an HTML widget and a data source\nand let the framework handle the details.\nData binding is an alternative to manually pushing application data values into HTML, attaching\nevent listeners, pulling changed values from the screen, and\nupdating application data values.</p>\n<p>Read about the following forms of binding in <a href=\"guide/template-syntax\">Template Syntax</a>:</p>\n<!--\n * [Interpolation](guide/template-syntax#interpolation)\n * [Property binding](guide/template-syntax#property-binding)\n * [Event binding](guide/template-syntax#event-binding)\n * [Attribute binding](guide/template-syntax#attribute-binding)\n * [Class binding](guide/template-syntax#class-binding)\n * [Style binding](guide/template-syntax#style-binding)\n * [Two-way data binding with ngModel](guide/template-syntax#ngModel)\n-->\n<ul>\n<li><a href=\"guide/template-syntax#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B0%94%EC%9D%B8%EB%94%A9\">문자열 바인딩</a></li>\n<li><a href=\"guide/template-syntax#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\">프로퍼티 바인딩</a></li>\n<li><a href=\"guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\">이벤트 바인딩</a></li>\n<li><a href=\"guide/template-syntax#%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\">어트리뷰트 바인딩</a></li>\n<li><a href=\"guide/template-syntax#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%94%EC%9D%B8%EB%94%A9\">클래스 바인딩</a></li>\n<li><a href=\"guide/template-syntax#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B0%94%EC%9D%B8%EB%94%A9\">스타일 바인딩</a></li>\n<li><a href=\"guide/template-syntax#ngModel\">ngModel을 사용하는 양방향 바인딩</a></li>\n</ul>\n<a id=\"declarable\"></a>\n<h2 id=\"declarable\">declarable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#declarable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class type that you can add to the <code><a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a></code> list of an <a href=\"guide/glossary#ngmodule\">NgModule</a>.\nYou can declare <a href=\"guide/glossary#component\">components</a>, <a href=\"guide/glossary#directive\">directives</a>, and <a href=\"guide/glossary#pipe\">pipes</a>.</p>\n<p>Don't declare the following:</p>\n<ul>\n<li>A class that's already declared in another NgModule</li>\n<li>An array of directives imported from another package. For example, don't declare <code>FORMS_DIRECTIVES</code> from <code>@angular/forms</code></li>\n<li>NgModule classes</li>\n<li>Service classes</li>\n<li>Non-Angular classes and objects, such as strings, numbers, functions, entity models, configurations, business logic, and helper classes</li>\n</ul>\n<a id=\"decorator\"></a>\n<a id=\"decoration\"></a>\n<h2 id=\"decorator--decoration\">decorator | decoration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a></h2>\n<p>A function that modifies a class or property definition. Decorators (also called <em>annotations</em>) are an experimental (stage 2) <a href=\"https://github.com/wycats/javascript-decorators\">JavaScript language feature</a>.\nTypeScript adds support for decorators.</p>\n<p>Angular defines decorators that attach metadata to classes or properties\nso that it knows what those classes or properties mean and how they should work. </p>\n<p>See <a href=\"guide/glossary#class-decorator\">class decorator</a>, <a href=\"guide/glossary#class-field-decorator\">class field decorator</a>. </p>\n<a id=\"di\"></a>\n<a id=\"dependency-injection\"></a>\n<h2 id=\"dependency-injection-di\">dependency injection (DI)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection-di\"><i class=\"material-icons\">link</i></a></h2>\n<p>A design pattern and mechanism for creating and delivering some parts of an application (dependencies) to other parts of an application that require them.</p>\n<p>In Angular, dependencies are typically services, but they also can be values, such as strings or functions.\nAn <a href=\"guide/glossary#injector\">injector</a> for an app (created automatically during bootstrap) instantiates dependencies when needed, using a configured <a href=\"guide/glossary#provider\">provider</a> of the service or value.</p>\n<p>Learn more in <a href=\"guide/dependency-injection\">Dependency Injection in Angular</a>.</p>\n<a id=\"di-token\"></a>\n<h2 id=\"di-token\">DI token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#di-token\"><i class=\"material-icons\">link</i></a></h2>\n<p>A lookup token associated with a dependency <a href=\"guide/glossary#provider\">provider</a>, for use with the <a href=\"guide/glossary#di\">dependency injection</a> system.</p>\n<a id=\"directive\"></a>\n<a id=\"directives\"></a>\n<h2 id=\"directive\">directive<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class that can modify the structure of the DOM or modify attributes in the DOM and component data model. A directive class definition is immediately preceded by a <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code> <a href=\"guide/glossary#decorator\">decorator</a> that supplies metadata.</p>\n<p>A directive class is usually associated with an HTML element or attribute, and that element or attribute is often referred to as the directive itself. When Angular finds a directive in an HTML <a href=\"guide/glossary#template\">template</a>, it creates the matching directive class instance and gives the instance control over that portion of the browser DOM.</p>\n<p>There are three categories of directive:</p>\n<ul>\n<li>\n<p><a href=\"guide/glossary#component\">Components</a> use <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> (an extension of <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>()</code>) to associate a template with a class.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#attribute-directive\">Attribute directives</a> modify behavior and appearance of page elements.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#structural-directive\">Structural directives</a> modify the structure of the DOM.</p>\n</li>\n</ul>\n<p>Angular supplies a number of built-in directives that begin with the <code>ng</code> prefix.\nYou can also create new directives to implement your own functionality.\nYou associate a <em>selector</em> (an HTML tag such as <code>&#x3C;my-directive></code>) with a custom directive, thereby extending the <a href=\"guide/template-syntax\">template syntax</a> that you can use in your apps.</p>\n<a id=\"dom\"></a>\n<h2 id=\"domain-specific-language-dsl\">domain-specific language (DSL)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#domain-specific-language-dsl\"><i class=\"material-icons\">link</i></a></h2>\n<p>A special-purpose library or API; see <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\">Domain-specific language</a>.\nAngular extends TypeScript with domain-specific languages for a number of domains relevant to Angular apps, defined in NgModules such as <a href=\"guide/animations\">animations</a>, <a href=\"guide/forms\">forms</a>, and <a href=\"guide/router\">routing and navigation</a>.</p>\n<a id=\"dynamic-components\"></a>\n<h2 id=\"dynamic-component-loading\">dynamic component loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dynamic-component-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>A technique for adding a component to the DOM at run time. Requires that you exclude the component from compilation and then connect it to Angular's change-detection and event-handling framework when you add it to the DOM.</p>\n<p>See also <a href=\"guide/glossary#custom-element\">custom element</a>, which provides an easier path with the same result.</p>\n<a id=\"E\"></a>\n<a id=\"eager-loading\"></a>\n<h2 id=\"eager-loading\">eager loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#eager-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgModules or components that are loaded on launch are called eager-loaded, to distinguish them from those\nthat are loaded at run time (lazy-loaded).\nSee <a href=\"guide/glossary#lazy-load\">lazy loading</a>.</p>\n<a id=\"ecma\"></a>\n<h2 id=\"ecmascript\">ECMAScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ecmascript\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"https://en.wikipedia.org/wiki/ECMAScript\">official JavaScript language specification</a>.</p>\n<p>Not all browsers support the latest ECMAScript standard, but you can use a <a href=\"guide/glossary#transpile\">transpiler</a> (like <a href=\"guide/glossary#typescript\">TypeScript</a>) to write code using the latest features, which will then be transpiled to code that runs on versions that are supported by browsers. </p>\n<p>To learn more, see <a href=\"guide/browser-support\">Browser Support</a>.</p>\n<a id=\"element\"></a>\n<h2 id=\"element\">element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#element\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular defines an <code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> class to wrap render-specific native UI elements.\nIn most cases, this allows you to use Angular templates and  data binding to access DOM elements\nwithout reference to the native element.</p>\n<p>The documentation generally refers to <em>elements</em> (<code><a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a></code> instances), as distinct from  <em>DOM elements</em>\n(which can be accessed directly if necessary).</p>\n<p>Compare to <a href=\"guide/glossary#custom-element\">custom element</a>.</p>\n<a id=\"entry-point\"></a>\n<h2 id=\"entry-point\">entry point<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#entry-point\"><i class=\"material-icons\">link</i></a></h2>\n<p>A JavaScript symbol that makes parts of an <a href=\"guide/npm-packages\">npm package</a> available for import by other code.\nThe Angular <a href=\"guide/glossary#scoped-package\">scoped packages</a> each have an entry point named <code>index</code>.</p>\n<p>Within Angular, use <a href=\"guide/glossary#ngmodule\">NgModules</a> to make public parts available for import by other NgModules.</p>\n<a id=\"F\"></a>\n<a id=\"G\"></a>\n<a id=\"H\"></a>\n<a id=\"I\"></a>\n<a id=\"injectable\"></a>\n<h2 id=\"injectable\">injectable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injectable\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular class or other definition that provides a dependency using the <a href=\"guide/glossary#di\">dependency injection</a> mechanism. An injectable <a href=\"guide/glossary#service\">service</a> class must be marked by the <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> <a href=\"guide/glossary#decorator\">decorator</a>. Other items, such as constant values, can also be injectable.</p>\n<a id=\"injector\"></a>\n<h2 id=\"injector\">injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a></h2>\n<p>An object in the Angular <a href=\"guide/glossary#dependency-injection\">dependency-injection</a> system\nthat can find a named dependency in its cache or create a dependency\nusing a configured <a href=\"guide/glossary#provider\">provider</a>.\nInjectors are created for NgModules automatically as part of the bootstrap process\nand are inherited through the component hierarchy.</p>\n<ul>\n<li>\n<p>An injector provides a singleton instance of a dependency, and can inject this same instance in multiple components.</p>\n</li>\n<li>\n<p>A hierarchy of injectors at the NgModule and component level can provide different instances of a dependency to their own components and child components.</p>\n</li>\n<li>\n<p>You can configure injectors with different providers that can provide different implementations of the same dependency.</p>\n</li>\n</ul>\n<p>Learn more about the injector hierarchy in <a href=\"guide/hierarchical-dependency-injection\">Hierarchical Dependency Injectors</a>.</p>\n<a id=\"input\"></a>\n<h2 id=\"input\">input<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhen defining a [directive](guide/glossary#directive), the `@Input()` decorator on a directive property \nmakes that property available as a *target* of a [property binding](guide/template-syntax#property-binding).\nData values flow into an input property from the data source identified\nin the [template expression](guide/glossary#template-expression) to the right of the equal sign.\n-->\n<p>When defining a <a href=\"guide/glossary#directive\">directive</a>, the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator on a directive property\nmakes that property available as a <em>target</em> of a <a href=\"guide/template-syntax#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\">property binding</a>.\nData values flow into an input property from the data source identified\nin the <a href=\"guide/glossary#template-expression\">template expression</a> to the right of the equal sign.</p>\n<p>To learn more, see <a href=\"guide/template-syntax#inputs-outputs\">input and output properties</a>.</p>\n<a id=\"interpolation\"></a>\n<h2 id=\"interpolation\">interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a></h2>\n<p>A form of property <a href=\"guide/glossary#data-binding\">data binding</a> in which a <a href=\"guide/glossary#template-expression\">template expression</a> between double-curly braces renders as text.<br>\nThat text can be concatenated with neighboring text before it is assigned to an element property\nor displayed between element tags, as in this example.</p>\n<code-example language=\"html\" escape=\"html\">\n  <label>My current hero is {{hero.name}}</label>\n\n</code-example>\n<p>Read more about <a href=\"guide/template-syntax#interpolation\">interpolation</a> in <a href=\"guide/template-syntax\">Template Syntax</a>.</p>\n<a id=\"J\"></a>\n<a id=\"javascript\"></a>\n<h2 id=\"javascript\">JavaScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#javascript\"><i class=\"material-icons\">link</i></a></h2>\n<p>See <a href=\"guide/glossary#ecma\">ECMAScript</a>, <a href=\"guide/glossary#typescript\">TypeScript</a>.</p>\n<a id=\"jit\"></a>\n<h2 id=\"just-in-time-jit-compilation\">just-in-time (JIT) compilation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular just-in-time (JIT) compiler converts your Angular HTML and TypeScript code into\nefficient JavaScript code at run time, as part of bootstrapping.</p>\n<p>JIT compilation is the default (as opposed to AOT compilation) when you run Angular's <code>ng build</code> and <code>ng serve</code> CLI commands, and is a good choice during development.\nJIT mode is strongly discouraged for production use\nbecause it results in large application payloads that hinder the bootstrap performance.</p>\n<p>Compare to <a href=\"guide/glossary#aot\">ahead-of-time (AOT) compilation</a>.</p>\n<a id=\"K\"></a>\n<a id=\"L\"></a>\n<a id=\"lazy-load\"></a>\n<h2 id=\"lazy-loading\">lazy loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lazy-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>A process that speeds up application load time by splitting the application into multiple bundles and loading them on demand.\nFor example, dependencies can be lazy loaded as needed—as opposed to <a href=\"guide/glossary#eager-loading\">eager-loaded</a> modules that are required by the root module and are thus loaded on launch. </p>\n<p>The <a href=\"guide/glossary#router\">router</a> makes use of lazy loading to load child views only when the parent view is activated.\nSimilarly, you can build custom elements that can be loaded into an Angular app when needed.</p>\n<a id=\"library\"></a>\n<h2 id=\"library\">library<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#library\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a <a href=\"guide/glossary#project\">project</a> that provides functionality that can be included in other Angular apps.\nA library isn't a complete Angular app and can't run independently. </p>\n<ul>\n<li>\n<p>Library developers can use the <a href=\"guide/glossary#cli\">CLI</a> to <code>generate</code> scaffolding for a new library in an existing <a href=\"guide/glossary#workspace\">workspace</a>, and can publish a library as an <code>npm</code> package. </p>\n</li>\n<li>\n<p>App developers can use the <a href=\"guide/glossary#cli\">CLI</a> to <code>add</code> a published library for use with an app in the same <a href=\"guide/glossary#workspace\">workspace</a>. </p>\n</li>\n</ul>\n<a id=\"lifecycle-hook\"></a>\n<h2 id=\"lifecycle-hook\">lifecycle hook<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hook\"><i class=\"material-icons\">link</i></a></h2>\n<p>An interface that allows you to tap into the lifecycle of <a href=\"guide/glossary#directive\">directives</a> and <a href=\"guide/glossary#component\">components</a> as they are created, updated, and destroyed.</p>\n<p>Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>.\nFor example, the <code><a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a></code> interface has a hook method named <code>ngOnInit</code>.</p>\n<p>Angular calls these hook methods in the following order:</p>\n<ul>\n<li><code>ngOnChanges</code>: When an <a href=\"guide/glossary#input\">input</a>/<a href=\"guide/glossary#output\">output</a> binding value changes.</li>\n<li><code>ngOnInit</code>: After the first <code>ngOnChanges</code>.</li>\n<li><code>ngDoCheck</code>: Developer's custom change detection.</li>\n<li><code>ngAfterContentInit</code>: After component content initialized.</li>\n<li><code>ngAfterContentChecked</code>: After every check of component content.</li>\n<li><code>ngAfterViewInit</code>: After a component's views are initialized.</li>\n<li><code>ngAfterViewChecked</code>: After every check of a component's views.</li>\n<li><code>ngOnDestroy</code>: Just before the directive is destroyed.</li>\n</ul>\n<p>To learn more, see <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a>.</p>\n<a id=\"M\"></a>\n<a id=\"module\"></a>\n<h2 id=\"module\">module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a></h2>\n<p>In general, a module collects a block of code dedicated to a single purpose. Angular uses standard JavaScript modules and also defines an Angular module, <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>. </p>\n<p>In JavaScript (ECMAScript), each file is a module and all objects defined in the file belong to that module. Objects can exported, making them public, and public objects can be imported for use by other modules.</p>\n<p>Angular ships as a collection of JavaScript modules (also called libraries). Each Angular library name begins with the <code>@angular</code> prefix. Install Angular libraries with the <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">npm package manager</a> and import parts of them with JavaScript <code>import</code> declarations.</p>\n<p>Compare to <a href=\"guide/glossary#ngmodule\">NgModule</a>.</p>\n<a id=\"N\"></a>\n<a id=\"ngmodule\"></a>\n<h2 id=\"ngmodule\">NgModule<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class definition preceded by the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> <a href=\"guide/glossary#decorator\">decorator</a>, which declares and serves as a manifest for a block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.</p>\n<p>Like a <a href=\"guide/glossary#module\">JavaScript module</a>, an NgModule can export functionality for use by other NgModules and import public functionality from other NgModules.\nThe metadata for an NgModule class collects components, directives, and pipes that the application uses along with the list of imports and exports. See also <a href=\"guide/glossary#declarable\">declarable</a>.</p>\n<p>NgModules are typically named after the file in which the exported thing is defined. For example, the Angular <a href=\"api/common/DatePipe\">DatePipe</a> class belongs to a feature module named <code>date_pipe</code> in the file <code>date_pipe.ts</code>. You import them from an Angular <a href=\"guide/glossary#scoped-package\">scoped package</a> such as <code>@angular/core</code>.</p>\n<p>Every Angular application has a root module. By convention, the class is called <code>AppModule</code> and resides in a file named <code>app.module.ts</code>.</p>\n<p>To learn more, see <a href=\"guide/ngmodules\">NgModules</a>.</p>\n<a id=\"npm-package\"></a>\n<h2 id=\"npm-package\">npm package<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#npm-package\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\">npm package manager</a> is used to distribute and load Angular modules and libraries. </p>\n<p>Learn more about how Angular uses <a href=\"guide/npm-packages\">Npm Packages</a>.</p>\n<a id=\"O\"></a>\n<a id=\"observable\"></a>\n<h2 id=\"observable\">observable<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a></h2>\n<p>A producer of multiple values, which it pushes to <a href=\"guide/glossary#subscriber\">subscribers</a>. Used for asynchronous event handling throughout Angular. You execute an observable by subscribing to it with its <code>subscribe()</code> method, passing callbacks for notifications of new values, errors, or completion. </p>\n<p>Observables can deliver single or multiple values of any type to subscribers, either synchronously (as a function delivers a value to its caller) or on a schedule. A subscriber receives notification of new values as they are produced and notification of either normal completion or error completion. </p>\n<p>Angular uses a third-party library called <a href=\"http://reactivex.io/rxjs/\">Reactive Extensions (RxJS)</a>. </p>\n<p>To learn more, see <a href=\"guide/observables\">Observables</a>.</p>\n<a id=\"observer\"></a>\n<h2 id=\"observer\">observer<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observer\"><i class=\"material-icons\">link</i></a></h2>\n<p>An object passed to the <code>subscribe()</code> method for an <a href=\"guide/glossary#observable\">observable</a>. The object defines the callbacks for the <a href=\"guide/glossary#subscriber\">subscriber</a>.</p>\n<a id=\"output\"></a>\n<h2 id=\"output\">output<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhen defining a [directive](guide/glossary#directive), the `@Output{}` decorator on a directive property \nmakes that property available as a *target* of [event binding](guide/template-syntax#event-binding). \nEvents stream *out* of this property to the receiver identified\nin the [template expression](guide/glossary#template-expression) to the right of the equal sign.\n-->\n<p>When defining a <a href=\"guide/glossary#directive\">directive</a>, the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>{}</code> decorator on a directive property\nmakes that property available as a <em>target</em> of <a href=\"guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\">event binding</a>.\nEvents stream <em>out</em> of this property to the receiver identified\nin the <a href=\"guide/glossary#template-expression\">template expression</a> to the right of the equal sign.</p>\n<p>To learn more, see <a href=\"guide/template-syntax#inputs-outputs\">Input and Output Properties</a>.</p>\n<a id=\"P\"></a>\n<a id=\"pipe\"></a>\n<h2 id=\"pipe\">pipe<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a></h2>\n<p>A class which is preceded by the <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>{}</code> decorator and which defines a function that transforms input values to output values for display in a <a href=\"guide/glossary#view\">view</a>. Angular defines various pipes, and you can define new pipes.</p>\n<p>To learn more, see <a href=\"guide/pipes\">Pipes</a>.</p>\n<a id=\"polyfill\"></a>\n<h2 id=\"polyfill\">polyfill<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#polyfill\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <a href=\"guide/npm-packages\">npm package</a> that plugs gaps in a browser's JavaScript implementation.\nSee <a href=\"guide/browser-support\">Browser Support</a> for polyfills that support particular functionality for particular platforms. </p>\n<a id=\"project\"></a>\n<h2 id=\"project\">project<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#project\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a folder within a <a href=\"guide/glossary#workspace\">workspace</a> that contains an Angular app or <a href=\"guide/glossary#library\">library</a>.\nA workspace can contain multiple projects.\nAll apps in a workspace can use libraries in the same workspace.</p>\n<a id=\"provider\"></a>\n<h2 id=\"provider\">provider<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a></h2>\n<p>An object that implements one of the <a href=\"api/core/Provider\"><code>Provider</code></a> interfaces. A provider object defines how to obtain an injectable dependency associated with a <a href=\"guide/glossary#token\">DI token</a>.\nAn <a href=\"guide/glossary#injector\">injector</a> uses the provider to create a new instance of a dependency\nfor a class that requires it.</p>\n<p>Angular registers its own providers with every injector, for services that Angular defines.\nYou can register your own providers for services that your app needs.</p>\n<p>See also <a href=\"guide/glossary#service\">service</a>, <a href=\"guide/glossary#di\">dependency injection</a>.</p>\n<p>Learn more in <a href=\"guide/dependency-injection\">Dependency Injection</a>.</p>\n<a id=\"Q\"></a>\n<a id=\"R\"></a>\n<a id=\"reactive-forms\"></a>\n<h2 id=\"reactive-forms\">reactive forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p>A framework for building Angular forms through code in a component.\nThe alternative is a <a href=\"guide/glossary#template-driven-forms\">template-driven form</a>.</p>\n<p>When building reactive forms:</p>\n<ul>\n<li>The \"source of truth\" is the component. The validation is defined using code in the component.</li>\n<li>Each control is explicitly created in the component class with <code>new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code> or with <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>.</li>\n<li>The template input elements do <em>not</em> use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>.</li>\n<li>The associated Angular directives are prefixed with <code><a href=\"api/forms/Form\" class=\"code-anchor\">Form</a></code>, such as <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>()</code>, <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>()</code>, and <code><a href=\"api/forms/FormControlName\" class=\"code-anchor\">FormControlName</a>()</code>.</li>\n</ul>\n<p>Reactive forms are powerful, flexible, and a good choice for more complex data-entry form scenarios, such as dynamic generation of form controls.</p>\n<a id=\"router\"></a>\n<a id=\"router-module\"></a>\n<h2 id=\"router\">router<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a></h2>\n<p>A tool that configures and implements navigation among states and <a href=\"guide/glossary#view\">views</a> within an Angular app.</p>\n<p>The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> module is an <a href=\"guide/glossary#ngmodule\">NgModule</a> that provides the necessary service providers and directives for navigating through application views. A <a href=\"guide/glossary#routing-component\">routing component</a> is one that imports the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> module and whose template contains a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> element where it can display views produced by the router.</p>\n<p>The router defines navigation among views on a single page, as opposed to navigation among pages. It interprets URL-like links to determine which views to create or destroy, and which components to load or unload. It allows you to take advantage of <a href=\"guide/glossary#lazy-load\">lazy loading</a> in your Angular apps.</p>\n<p>To learn more, see <a href=\"guide/router\">Routing and Navigation</a>.</p>\n<a id=\"router-outlet\"></a>\n<h2 id=\"router-outlet\">router outlet<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p>A <a href=\"guide/glossary#directive\">directive</a> that acts as a placeholder in a routing component's template. Angular dynamically renders the template based on the current router state.</p>\n<a id=\"router-component\"></a>\n<h2 id=\"routing-component\">routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a></h2>\n<p>An Angular <a href=\"guide/glossary#component\">component</a> with a <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">RouterOutlet</a></code> directive in its template that displays views based on router navigations.</p>\n<p>For more information, see <a href=\"guide/router\">Routing and Navigation</a>.</p>\n<a id=\"S\"></a>\n<a id=\"schematic\"></a>\n<h2 id=\"schematic\">schematic<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#schematic\"><i class=\"material-icons\">link</i></a></h2>\n<p>A scaffolding library that defines how to generate or transform a programming project by creating, modifying, refactoring, or moving files and code.\nThe Angular <a href=\"guide/glossary#cli\">CLI</a> uses schematics to generate and modify <a href=\"guide/glossary#project\">Angular projects</a> and parts of projects.</p>\n<ul>\n<li>\n<p>Angular provides a set of schematics for use with the CLI. See the <a href=\"cli\">Angular CLI command reference</a>. The <a href=\"cli/add\"><code>ng add</code></a> command runs schematics as part of adding a library to your project. The <a href=\"cli/generate\"><code>ng generate</code></a> command runs schematics to create apps, libraries, and Angular code constructs. </p>\n</li>\n<li>\n<p>Library developers can create schematics that enable the CLI to generate their published libraries.\nFor more information, see <a href=\"https://www.npmjs.com/package/@angular-devkit/schematics\">devkit documentation</a>. </p>\n</li>\n</ul>\n<a id=\"scoped-package\"></a>\n<h2 id=\"scoped-package\">scoped package<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a></h2>\n<p>A way to group related <a href=\"guide/npm-packages\">npm packages</a>.\nNgModules are delivered within scoped packages whose names begin with the Angular <em>scope name</em> <code>@angular</code>. For example, <code>@angular/core</code>, <code>@angular/common</code>, <code>@angular/forms</code>, and <code>@angular/router</code>.</p>\n<p>Import a scoped package in the same way that you import a normal package. </p>\n<code-example path=\"architecture/src/app/app.component.ts\" linenums=\"false\" header=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n</code-example>\n<a id=\"service\"></a>\n<h2 id=\"service\">service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a class with the <a href=\"guide/glossary#injectable\">@Injectable()</a> decorator that encapsulates non-UI logic and code that can be reused across an application.\nAngular distinguishes components from services to increase modularity and reusability.</p>\n<p>The <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()</code> metadata allows the service class to be used with the <a href=\"guide/glossary#di\">dependency injection</a> mechanism.\nThe injectable class is instantiated by a <a href=\"guide/glossary#provider\">provider</a>.\n<a href=\"guide/glossary#injector\">Injectors</a> maintain lists of providers and use them to provide service instances when they are required by components or other services.</p>\n<p>To learn more, see <a href=\"guide/architecture-services\">Introduction to Services and Dependency Injection</a>.</p>\n<a id=\"structural-directive\"></a>\n<a id=\"structural-directives\"></a>\n<h2 id=\"structural-directives\">structural directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>A category of <a href=\"guide/glossary#directive\">directive</a> that is responsible for shaping HTML layout by modifying the DOM&#x26;mdashthat is, adding, removing, or manipulating elements and their children.</p>\n<p>To learn more, see <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n<a id=\"subscriber\"></a>\n<h2 id=\"subscriber\">subscriber<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#subscriber\"><i class=\"material-icons\">link</i></a></h2>\n<p>A function that defines how to obtain or generate values or messages to be published. This function is executed when a consumer calls the <code>subscribe()</code> method of an <a href=\"guide/glossary#observable\">observable</a>.</p>\n<p>The act of subscribing to an observable triggers its execution, associates callbacks with it, and creates a <code>Subscription</code> object that lets you unsubscribe.</p>\n<p>The <code>subscribe()</code> method takes a JavaScript object (called an <a href=\"guide/glossary#observer\">observer</a>) with up to three callbacks, one for each type of notification that an observable can deliver:</p>\n<ul>\n<li>The <code>next</code> notification sends a value such as a number, a string, or an object.</li>\n<li>The <code>error</code> notification sends a JavaScript Error or exception.</li>\n<li>The <code>complete</code> notification doesn't send a value, but the handler is called when the call completes. Scheduled values can continue to be returned after the call completes.</li>\n</ul>\n<a id=\"T\"></a>\n<a id=\"template\"></a>\n<h2 id=\"template\">template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a></h2>\n<p>Code associated with a component that defines how to render the component's <a href=\"guide/glossary#view\">view</a>. </p>\n<p>A template combines straight HTML with Angular <a href=\"guide/glossary#data-binding\">data-binding</a> syntax, <a href=\"guide/glossary#directive\">directives</a>,\nand <a href=\"guide/glossary#template-expression\">template expressions</a> (logical constructs).\nThe Angular elements insert or calculate values that modify the HTML elements before the page is displayed.</p>\n<p>A template is associated with a <a href=\"guide/glossary#component\">component</a> class through the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>()</code> <a href=\"guide/glossary#decorator\">decorator</a>. The HTML can be provided inline, as the value of the <code><a href=\"api/core/Component#template\" class=\"code-anchor\">template</a></code> property, or in a separate HTML file linked through the <code>templateUrl</code> property. </p>\n<p>Additional templates, represented by <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> objects, can define alternative or <em>embedded</em> views, which can be referenced from multiple components.</p>\n<a id=\"template-drive-forms\"></a>\n<h2 id=\"template-driven-forms\">template-driven forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p>A format for building Angular forms using HTML forms and input elements in the view.\nThe alternative format uses the <a href=\"guide/glossary#reactive-forms\">reactive forms</a> framework.</p>\n<p>When building template-driven forms:</p>\n<ul>\n<li>The \"source of truth\" is the template. The validation is defined using attributes on the individual input elements.</li>\n<li><a href=\"guide/glossary#data-binding\">Two-way binding</a> with <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> keeps the component model synchronized with the user's entry into the input elements.</li>\n<li>Behind the scenes, Angular creates a new control for each input element, provided you have set up a <code>name</code> attribute and two-way binding for each input.</li>\n<li>The associated Angular directives are prefixed with <code>ng</code> such as <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code>, <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>, and <code><a href=\"api/forms/NgModelGroup\" class=\"code-anchor\">ngModelGroup</a></code>.</li>\n</ul>\n<p>Template-driven forms are convenient, quick, and simple. They are a good choice for many basic data-entry form scenarios.</p>\n<p>Read about how to build template-driven forms in <a href=\"guide/forms\">Forms</a>.</p>\n<a id=\"template-expression\"></a>\n<h2 id=\"template-expression\">template expression<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a></h2>\n<p>A TypeScript-like syntax that Angular evaluates within a <a href=\"guide/glossary#data-binding\">data binding</a>.</p>\n<!--\nRead about how to write template expressions in  [Template expressions](guide/template-syntax#template-expressions).\n-->\n<p>Read about how to write template expressions in  <a href=\"guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%91%9C%ED%98%84%EC%8B%9D\">Template expressions</a>.</p>\n<a id=\"token\"></a>\n<h2 id=\"token\">token<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#token\"><i class=\"material-icons\">link</i></a></h2>\n<p>An opaque identifier used for efficient table lookup. In Angular, a <a href=\"guide/glossary#di-token\">DI token</a> is used to find <a href=\"guide/glossary#provider\">providers</a> of dependencies in the <a href=\"guide/glossary#di\">dependency injection</a> system.</p>\n<a id=\"transpile\"></a>\n<h2 id=\"transpile\">transpile<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a></h2>\n<p>The translation process that transforms one version of JavaScript to another version; for example, down-leveling ES2015 to the older ES5 version.</p>\n<a id=\"typescript\"></a>\n<h2 id=\"typescript\">TypeScript<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript\"><i class=\"material-icons\">link</i></a></h2>\n<p>A programming language based on JavaScript that is notable for its optional typing system.\nTypeScript provides compile-time type checking and strong tooling support (such as\ncode completion, refactoring, inline documentation, and intelligent search).\nMany code editors and IDEs support TypeScript either natively or with plug-ins.</p>\n<p>TypeScript is the preferred language for Angular development.\nRead more about TypeScript at <a href=\"http://www.typescriptlang.org/\">typescriptlang.org</a>.</p>\n<a id=\"U\"></a>\n<a id=\"V\"></a>\n<a id=\"view\"></a>\n<h2 id=\"view\">view<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a></h2>\n<p>The smallest grouping of display elements that can be created and destroyed together.\nAngular renders a view under the control of one or more <a href=\"guide/glossary#directive\">directives</a>,\nespecially <a href=\"guide/glossary#component\">component</a> directives and their companion <a href=\"guide/glossary#template\">templates</a>. </p>\n<p>A view is specifically represented by a <code><a href=\"api/core/ViewRef\" class=\"code-anchor\">ViewRef</a></code> instance associated with the component.\nA view that belongs to a component is called a <em>host view</em>.\nViews are typically collected into <a href=\"guide/glossary#view-tree\">view hierarchies</a>. </p>\n<p>Properties of elements in a view can change dynamically, in response to user actions;\nthe structure (number and order) of elements in a view can't.\nYou can change the structure of elements by inserting, moving, or removing nested views within their view containers.</p>\n<p>View hierarchies can be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a <a href=\"guide/glossary#router\">router</a>.</p>\n<a id=\"view-tree\"></a>\n<h2 id=\"view-hierarchy\">view hierarchy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view-hierarchy\"><i class=\"material-icons\">link</i></a></h2>\n<p>A tree of related views that can be acted on as a unit. The root view is a component's <em>host view</em>.  A host view can be the root of a tree of <em>embedded views</em>, collected in a <em>view container</em> (<code><a href=\"api/core/ViewContainerRef\" class=\"code-anchor\">ViewContainerRef</a></code>) attached to an anchor element in the hosting component. The view hierarchy is a key part of Angular change detection. </p>\n<p>The view hierarchy doesn't imply a component hierarchy. Views that are embedded in the context of a particular hierarchy can be host views of other components. Those components can be in the same NgModule as the hosting component, or belong to other NgModules.</p>\n<a id=\"W\"></a>\n<a id=\"web-component\"></a>\n<h2 id=\"web-component\">web component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#web-component\"><i class=\"material-icons\">link</i></a></h2>\n<p>See <a href=\"guide/glossary#custom-element\">custom element</a>.</p>\n<a id=\"workspace\"></a>\n<h2 id=\"workspace\">workspace<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#workspace\"><i class=\"material-icons\">link</i></a></h2>\n<p>In Angular, a folder that contains <a href=\"guide/glossary#project\">projects</a> (that is, apps and libraries).\nThe <a href=\"guide/glossary#cli\">CLI</a> <code>ng new</code> command creates a workspace to contain projects.\nCommands that create or operate on apps and libraries (such as <code>add</code> and <code>generate</code>) must be executed from within a workspace folder. </p>\n<a id=\"X\"></a>\n<a id=\"Y\"></a>\n<a id=\"Z\"></a>\n<a id=\"zone\"></a>\n<h2 id=\"zone\">zone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a></h2>\n<p>An execution context for a set of asynchronous tasks. Useful for debugging, profiling, and testing apps that include asynchronous operations such as event processing, promises, and calls to remote servers.</p>\n<p>An Angular app runs in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays by resolving <a href=\"guide/glossary#data-binding\">data bindings</a>.</p>\n<p>A zone client can take action before and after an async operation completes. </p>\n<p>Learn more about zones in this\n<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\">Brian Ford video</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common/http\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/core\n - api/core/Component\n - api/core/ComponentRef\n - api/core/Directive\n - api/core/EmbeddedViewRef\n - api/core/NgModule\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/platform-browser/animations\n - api/platform-browser/animations/BrowserAnimationsModule\n - cli\n - guide/animations\n - guide/architecture-components\n - guide/bootstrapping\n - guide/dependency-injection\n - guide/dependency-injection-in-action\n - guide/dependency-injection-navtree\n - guide/dependency-injection-providers\n - guide/file-structure\n - guide/i18n\n - guide/quickstart\n - guide/router\n - guide/setup\n - guide/template-syntax\n - guide/universal\n - tutorial/toh-pt0\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/core/Component\n - api/core/Component#template\n - api/core/Directive\n - api/core/ElementRef\n - api/core/Injectable\n - api/core/Input\n - api/core/NgModule\n - api/core/NgModule#bootstrap\n - api/core/NgModule#declarations\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Provider\n - api/core/TemplateRef\n - api/core/ViewContainerRef\n - api/core/ViewRef\n - api/forms/Form\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormControlName\n - api/forms/FormGroup\n - api/forms/NgForm\n - api/forms/NgModel\n - api/forms/NgModelGroup\n - api/router/Router\n - api/router/RouterOutlet\n - cli\n - cli/add\n - cli/generate\n - guide/animations\n - guide/architecture\n - guide/architecture-services\n - guide/attribute-directives\n - guide/bootstrapping\n - guide/browser-support\n - guide/dependency-injection\n - guide/elements\n - guide/forms\n - guide/glossary#A\n - guide/glossary#B\n - guide/glossary#C\n - guide/glossary#D\n - guide/glossary#E\n - guide/glossary#F\n - guide/glossary#G\n - guide/glossary#H\n - guide/glossary#I\n - guide/glossary#J\n - guide/glossary#K\n - guide/glossary#L\n - guide/glossary#M\n - guide/glossary#N\n - guide/glossary#O\n - guide/glossary#P\n - guide/glossary#Q\n - guide/glossary#R\n - guide/glossary#S\n - guide/glossary#T\n - guide/glossary#U\n - guide/glossary#V\n - guide/glossary#W\n - guide/glossary#X\n - guide/glossary#Y\n - guide/glossary#Z\n - guide/glossary#ahead-of-time-aot-compilation\n - guide/glossary#angular-element\n - guide/glossary#annotation\n - guide/glossary#aot\n - guide/glossary#attribute-directive\n - guide/glossary#attribute-directives\n - guide/glossary#binding\n - guide/glossary#bootstrap\n - guide/glossary#case-types\n - guide/glossary#class-decorator\n - guide/glossary#class-field-decorator\n - guide/glossary#cli\n - guide/glossary#command-line-interface-cli\n - guide/glossary#component\n - guide/glossary#custom-element\n - guide/glossary#data-binding\n - guide/glossary#declarable\n - guide/glossary#decorator\n - guide/glossary#decorator--decoration\n - guide/glossary#dependency-injection\n - guide/glossary#dependency-injection-di\n - guide/glossary#di\n - guide/glossary#di-token\n - guide/glossary#directive\n - guide/glossary#domain-specific-language-dsl\n - guide/glossary#dynamic-component-loading\n - guide/glossary#dynamic-components\n - guide/glossary#eager-loading\n - guide/glossary#ecma\n - guide/glossary#ecmascript\n - guide/glossary#element\n - guide/glossary#entry-point\n - guide/glossary#glossary\n - guide/glossary#injectable\n - guide/glossary#injector\n - guide/glossary#input\n - guide/glossary#interpolation\n - guide/glossary#javascript\n - guide/glossary#jit\n - guide/glossary#just-in-time-jit-compilation\n - guide/glossary#lazy-load\n - guide/glossary#lazy-loading\n - guide/glossary#library\n - guide/glossary#lifecycle-hook\n - guide/glossary#module\n - guide/glossary#ngmodule\n - guide/glossary#npm-package\n - guide/glossary#observable\n - guide/glossary#observer\n - guide/glossary#output\n - guide/glossary#pipe\n - guide/glossary#polyfill\n - guide/glossary#project\n - guide/glossary#provider\n - guide/glossary#reactive-forms\n - guide/glossary#router\n - guide/glossary#router-outlet\n - guide/glossary#routing-component\n - guide/glossary#schematic\n - guide/glossary#scoped-package\n - guide/glossary#service\n - guide/glossary#structural-directive\n - guide/glossary#structural-directives\n - guide/glossary#subscriber\n - guide/glossary#template\n - guide/glossary#template-driven-forms\n - guide/glossary#template-expression\n - guide/glossary#token\n - guide/glossary#transpile\n - guide/glossary#typescript\n - guide/glossary#view\n - guide/glossary#view-hierarchy\n - guide/glossary#view-tree\n - guide/glossary#web-component\n - guide/glossary#workspace\n - guide/glossary#zone\n - guide/hierarchical-dependency-injection\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/npm-packages\n - guide/observables\n - guide/pipes\n - guide/quickstart\n - guide/router\n - guide/structural-directives\n - guide/styleguide#02-01\n - guide/template-syntax\n - guide/template-syntax#%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%EC%96%B4%ED%8A%B8%EB%A6%AC%EB%B7%B0%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%91%9C%ED%98%84%EC%8B%9D\n - guide/template-syntax#%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#interpolation\n - guide/template-syntax#ngModel\n - http://reactivex.io/rxjs/\n - http://www.typescriptlang.org/\n - https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry\n - https://docs.npmjs.com/getting-started/what-is-npm\n - https://en.wikipedia.org/wiki/Domain-specific_language\n - https://en.wikipedia.org/wiki/ECMAScript\n - https://github.com/angular/angular/edit/master/aio/content/guide/glossary.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/wycats/javascript-decorators\n - https://www.npmjs.com/package/@angular-devkit/schematics\n - https://www.youtube.com/watch?v=3IqtmUscE_U\n-->"
}