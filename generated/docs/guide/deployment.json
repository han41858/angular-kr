{
  "id": "guide/deployment",
  "title": "배포",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/deployment.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Deployment\n-->\n<h1 id=\"배포\">배포<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#배포\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nWhen you are ready to deploy your Angular application to a remote server, you have various options for deployment.\n-->\n<p>이 문서는 Angular 애플리케이션을 리모트 서버에 배포하는 방법에 대해 자세하게 안내합시다.</p>\n<a id=\"dev-deploy\"></a>\n<a id=\"copy-files\"></a>\n<h2 id=\"simple-deployment-options\">Simple deployment options<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simple-deployment-options\"><i class=\"material-icons\">link</i></a></h2>\n<p>Before fully deploying your application, you can test the process, build configuration, and deployed behavior by using one of these interim techniques</p>\n<h3 id=\"building-and-serving-from-disk\">Building and serving from disk<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#building-and-serving-from-disk\"><i class=\"material-icons\">link</i></a></h3>\n<p>During development, you typically use the <code>ng serve</code> command to build, watch, and serve the application from local memory, using <a href=\"https://webpack.js.org/guides/development/#webpack-dev-server\">webpack-dev-server</a>.\nWhen you are ready to deploy, however, you must use the <code>ng build</code> command to build the app and deploy the build artifacts elsewhere.</p>\n<p>Both <code>ng build</code> and <code>ng serve</code> clear the output folder before they build the project, but only the <code>ng build</code> command writes the generated build artifacts to the output folder.</p>\n<div class=\"alert is-helpful\">\n<p>The output folder is  <code>dist/project-name/</code> by default.\nTo output to a different folder, change the <code>outputPath</code> in <code>angular.json</code>.</p>\n</div>\n<p>As you near the end of the development process, serving the contents of your output folder from a local web server can give you a better idea of how your application will behave when it is deployed to a remote server.\nYou will need two terminals to get the live-reload experience.</p>\n<ul>\n<li>\n<p>On the first terminal, run the <a href=\"cli/build\"><code>ng build</code> command</a> in <em>watch</em> mode to compile the application to the <code>dist</code> folder.</p>\n<code-example language=\"none\" class=\"code-shell\">\n ng build --watch\n</code-example>\n<p>Like the <code>ng serve</code> command, this regenerates output files when source files change.</p>\n</li>\n<li>\n<p>On the second terminal, install a web server (such as <a href=\"https://github.com/johnpapa/lite-server\">lite-server</a>), and run it against the output folder. For example:</p>\n<code-example language=\"none\" class=\"code-shell\">\n lite-server --baseDir=\"dist\"\n</code-example>\n<p> The server will automatically reload your browser when new files are output.</p>\n</li>\n</ul>\n<div class=\"alert is-critical\">\n<p>This method is for development and testing only, and is not a supported or secure way of deploying an application.</p>\n</div>\n<h3 id=\"basic-deployment-to-a-remote-server\">Basic deployment to a remote server<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#basic-deployment-to-a-remote-server\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nFor the simplest deployment, create a production build and copy the output directory to a web server.\n-->\n<p>애플리케이션을 배포하는 방법중 가장 간단한 것은 애플리케이션을 운영용으로 빌드한 후에 생성되는 빌드 결과물을 웹 서버로 복사하는 것입니다.</p>\n<!--\n1. Start with the production build:\n-->\n<ol>\n<li>\n<p>애플리케이션을 운영용으로 빌드합니다.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod\n</code-example>\n</li>\n</ol>\n<!--\n2. Copy _everything_ within the output folder (`dist/` by default) to a folder on the server.\n-->\n<ol start=\"2\">\n<li>빌드 결과물이 생성된 폴더(기본 위치는 <code>dist/</code>)에 있는 <em>모든 파일</em> 을 서버로 복사합니다.</li>\n</ol>\n<!--\n3. Configure the server to redirect requests for missing files to `index.html`.\nLearn more about server-side redirects [below](#fallback).\n\nThis is the simplest production-ready deployment of your application.\n-->\n<ol start=\"3\">\n<li>서버로 오는 요청 중에서 실제로 존재하지 않는 파일에 대한 요청은 <code>index.html</code>로 리다이렉트하도록 합니다.\n자세한 내용은 <a href=\"guide/deployment#fallback\">아래</a>에서 다룹니다.</li>\n</ol>\n<p>이 방법이 애플리케이션을 배포하는 방법 중 가장 간단한 방법입니다.</p>\n<a id=\"deploy-to-github\"></a>\n<!--\n### Deploy to GitHub pages\n-->\n<h3 id=\"github-페이지에-배포하기\">GitHub 페이지에 배포하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#github-페이지에-배포하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAnother simple way to deploy your Angular app is to use [GitHub Pages](https://help.github.com/articles/what-is-github-pages/).\n\n1. You need to [create a GitHub account](https://github.com/join) if you don't have one, and then [create a repository](https://help.github.com/articles/create-a-repo/) for your project.\nMake a note of the user name and project name in GitHub.\n\n1. Build your project using Github project name, with the Angular CLI command [`ng build`](cli/build) and the options shown here:\n-->\n<p>또 다른 방법은 Angular 앱을 <a href=\"https://help.github.com/articles/what-is-github-pages/\">GitHub Pages</a>에 배포하는 것입니다.</p>\n<ol>\n<li>\n<p>GitHub 페이지에 배포하려면 먼저 <a href=\"https://github.com/join\">GitHub 계정을 생성</a>해야 합니다. 그리고 프로젝트가 위치할 <a href=\"https://help.github.com/articles/create-a-repo/\">코드 저장소를 하나 만듭니다</a>.</p>\n</li>\n<li>\n<p>Github 프로젝트 이름을 기본 주소로 지정하면서 Angular 프로젝트를 빌드합니다. <a href=\"cli/build\"><code>ng build</code></a>를 실행할 때 옵션을 다음과 같이 사용하면 됩니다:\n<code-example language=\"none\" class=\"code-shell\">\nng build --prod --output-path docs --base-href /&#x3C;project_name>/\n</code-example></p>\n</li>\n</ol>\n<!--\n1. When the build is complete, make a copy of `docs/index.html` and name it `docs/404.html`.\n\n1. Commit your changes and push.\n\n1. On the GitHub project page, configure it to [publish from the docs folder](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch).\n\nYou can see your deployed page at `https://<user_name>.github.io/<project_name>/`.\n-->\n<ol start=\"3\">\n<li>\n<p>빌드가 끝나면 <code>docs/index.html</code> 파일을 복사해서 <code>docs/404.html</code> 파일을 생성합니다.</p>\n</li>\n<li>\n<p>변경사항을 커밋하고 레파지토리에 푸시합니다.</p>\n</li>\n<li>\n<p>GitHub 프로젝트 페이지에서 <a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">docs 폴더가 static으로 동작하도록 설정</a>합니다.</p>\n</li>\n</ol>\n<p>이제 <code>https://&#x3C;user_name>.github.io/&#x3C;project_name>/</code>에 접속하면 Angular 애플리케이션이 동작하는 것을 확인할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nCheck out [angular-cli-ghpages](https://github.com/angular-buch/angular-cli-ghpages), a full featured package that does all this for you and has extra functionality.\n-->\n<p><a href=\"https://github.com/angular-buch/angular-cli-ghpages\">angular-cli-ghpages</a>도 확인해 보세요.\n이 프로젝트를 활용하면 Angular CLI를 사용하는 환경에서 GitHub 페이지 설정을 더 간단하고 다양하게 할 수 있습니다.</p>\n</div>\n<hr>\n<a id=\"server-configuration\"></a>\n<!--\n## Server configuration\n-->\n<h2 id=\"서버-설정\">서버 설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#서버-설정\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThis section covers changes you may have make to the server or to files deployed to the server.\n-->\n<p>이 섹션에서는 Angular 애플리케이션을 서버에 배포할 때 수정해야 할 수도 있는 서버 설정에 대해 다룹니다.</p>\n<a id=\"fallback\"></a>\n<!--\n### Routed apps must fallback to `index.html`\n-->\n<h3 id=\"angular-앱이-동작해야-하는-경우는-모두-indexhtml로-보내야-합니다\">Angular 앱이 동작해야 하는 경우는 모두 <code>index.html</code>로 보내야 합니다.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#angular-앱이-동작해야-하는-경우는-모두-indexhtml로-보내야-합니다\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAngular apps are perfect candidates for serving with a simple static HTML server.\nYou don't need a server-side engine to dynamically compose application pages because\nAngular does that on the client-side.\n\nIf the app uses the Angular router, you must configure the server\nto return the application's host page (`index.html`) when asked for a file that it does not have.\n-->\n<p>Angular 애플리케이션은 간단한 정적 HTML 서버로 호스팅하는 것도 아주 간단합니다.\n이 경우에는 Angular 애플리케이션이 클라이언트에서 실행되기 때문에 서버에서 동적으로 애플리케이션 페이지를 처리해야 하는 엔진도 필요 없습니다.</p>\n<p>그런데 Angular 애플리케이션을 이렇게 활용하는 경우에는 실제로 존재하는 파일을 요청하지 않는 이상 모든 GET 요청이 Angular 호스트 페이지(<code>index.html</code>)로 향하도록(fallback) 서버 설정을 조정해야 합니다.</p>\n<a id=\"deep-link\"></a>\n<!--\nA routed application should support \"deep links\".\nA _deep link_ is a URL that specifies a path to a component inside the app.\nFor example, `http://www.mysite.com/heroes/42` is a _deep link_ to the hero detail page\nthat displays the hero with `id: 42`.\n\nThere is no issue when the user navigates to that URL from within a running client.\nThe Angular router interprets the URL and routes to that page and hero.\n\nBut clicking a link in an email, entering it in the browser address bar,\nor merely refreshing the browser while on the hero detail page &mdash;\nall of these actions are handled by the browser itself, _outside_ the running application.\nThe browser makes a direct request to the server for that URL, bypassing the router.\n\nA static server routinely returns `index.html` when it receives a request for `http://www.mysite.com/`.\nBut it rejects `http://www.mysite.com/heroes/42` and returns a `404 - Not Found` error *unless* it is\nconfigured to return `index.html` instead.\n-->\n<p>Angular 라우터를 사용하는 애플리케이션은 \"딥 링크(deep links)\"를 지원해야 합니다.\nAngular에서 <em>딥 링크</em> 란 Angular 애플리케이션 안에 있는 특정 컴포넌트를 가리키는 URL을 의미합니다.\n그래서 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/heroes/42</code>라는 <em>딥 링크</em> 는 <code>id: 42</code>에 해당하는 히어로의 상세 정보를 표현하는 페이지를 가리킵니다.</p>\n<p>이 주소는 클라이언트쪽에서 네비게이션하는 방식으로 이동했을 때는 전혀 문제가 없습니다.\nAngular 라우터가 이 URL을 확인하면 해당 페이지로 이동하고 원하는 히어로의 정보도 화면에 표시할 것입니다.</p>\n<p>그런데 이메일에 있는 링크를 클릭하거나 브라우저 주소표시줄에 이 주소를 직접 입력했을 때, 히어로 상세정보 페이지에서 브라우저를 새로고침한 경우에는 이 주소를 브라우저가 직접 처리하기 때문에 Angular 애플리케이션이 관여하는 영역을 <em>벗어나게</em> 됩니다.\n그래서 이 경우에는 브라우저가 Angular 라우터를 건너뛰고 해당 URL로 직접 서버 요청을 보냅니다.</p>\n<p>일반적으로 정적 서버는 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com</code>과 같은 요청을 받았을 때 <code>index.html</code>을 반환합니다.\n하지만 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/heroes/42</code>라는 요청을 정적 서버가 받으면 <code>index.html</code>을 보내도록 따로 설정하지 않은 이상 <code>404 - Not Found</code>를 반환합니다.</p>\n<!--\n#### Fallback configuration examples\n-->\n<h4 id=\"폴백fallback-설정-예\">폴백(fallback) 설정 예<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#폴백fallback-설정-예\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThere is no single configuration that works for every server.\nThe following sections describe configurations for some of the most popular servers.\nThe list is by no means exhaustive, but should provide you with a good starting point.\n\n* [Apache](https://httpd.apache.org/): add a\n[rewrite rule](http://httpd.apache.org/docs/current/mod/mod_rewrite.html) to the `.htaccess` file as shown\n  (https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/):\n-->\n<p>모든 서버에 동일하게 적용할 수 있는 만능 설정은 없습니다.\n그래서 이제부터는 개발자들이 많이 사용하는 서버를 대상으로 폴백을 어떻게 설정할 수 있는지 알아봅시다.\n이 문서에서 모든 서버를 다루지는 않지만, 이렇게 사용한다는 것을 참고하면 설명하지 않은 서버를 설정할 때도 도움이 될 것입니다.</p>\n<ul>\n<li>\n<p><a href=\"https://httpd.apache.org/\">Apache</a>: <code>.htaccess</code> 파일에 <a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">rewrite rule</a>을 추가합니다. (<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\">참고</a>)</p>\n<code-example format=\".\">\n  RewriteEngine On\n  # 서버에 존재하는 리소스나 폴더를 요청하면 해당 리소스를 보냅니다.\n  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]\n  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d\n  RewriteRule ^ - [L]\n\n  # 실제로 존재하지 않는 리소스를 요청하면 index.html을 보냅니다.\n  RewriteRule ^ /index.html\n</code-example>\n</li>\n</ul>\n<!--\n* [Nginx](http://nginx.org/): use `try_files`, as described in\n[Front Controller Pattern Web Apps](https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps),\nmodified to serve `index.html`:\n-->\n<ul>\n<li>\n<p><a href=\"http://nginx.org/\">Nginx</a>: <a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">Front Controller Pattern Web Apps</a>에서 설명하는 대로 <code>try_files</code>를 사용해서 <code>index.html</code>을 보내도록 설정합니다.</p>\n<code-example format=\".\">\n  try_files $uri $uri/ /index.html;\n</code-example>\n</li>\n</ul>\n<!--\n* [IIS](https://www.iis.net/): add a rewrite rule to `web.config`, similar to the one shown\n[here](http://stackoverflow.com/a/26152011/2116927):\n-->\n<ul>\n<li>\n<p><a href=\"https://www.iis.net/\">IIS</a>: <a href=\"http://stackoverflow.com/a/26152011/2116927\">이 글</a>에서 설명한 것과 비슷하게 <code>web.config</code>에 rewrite rule을 추가합니다.</p>\n<code-example format=\".\">\n  &#x3C;system.webServer>\n    &#x3C;rewrite>\n      &#x3C;rules>\n        &#x3C;rule name=\"Angular <a href=\"api/router/Routes\" class=\"code-anchor\">Routes</a>\" stopProcessing=\"true\">\n          &#x3C;match url=\".*\" />\n          &#x3C;conditions logicalGrouping=\"MatchAll\">\n            &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          &#x3C;/conditions>\n          &#x3C;action type=\"Rewrite\" url=\"/index.html\" />\n        &#x3C;/rule>\n      &#x3C;/rules>\n    &#x3C;/rewrite>\n  &#x3C;/system.webServer>\n\n</code-example>\n</li>\n</ul>\n<!--\n* [GitHub Pages](https://pages.github.com/): you can't\n[directly configure](https://github.com/isaacs/github/issues/408)\nthe GitHub Pages server, but you can add a 404 page.\nCopy `index.html` into `404.html`.\nIt will still be served as the 404 response, but the browser will process that page and load the app properly.\nIt's also a good idea to\n[serve from `docs/` on master](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch)\nand to\n[create a `.nojekyll` file](https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm)\n-->\n<ul>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a>: 개발자가 GitHub Pages 서버 설정을 <a href=\"https://github.com/isaacs/github/issues/408\">직접 변경할 수는 없지만</a>, 404 페이지를 활용할 수 있습니다.\n이 방법은 아주 간단합니다.\n<code>index.html</code> 파일을 복사해서 <code>404.html</code> 파일로 만들기만 하면 됩니다.\n그러면 서버가 404 응답을 반환하더라도 브라우저는 Angular 앱을 실행하기 때문에 원하는 페이지로 접근할 수 있습니다.\n이 방법 외에도 <a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">master 브랜치의 <code>docs/</code> 폴더</a>에서 Angular 애플리케이션을 서비스하거나, <a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\"><code>.nojekyll</code> 파일을 만들어서</a> 설정하는 방법도 있습니다.</li>\n</ul>\n<!--\n* [Firebase hosting](https://firebase.google.com/docs/hosting/): add a\n[rewrite rule](https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites).\n-->\n<ul>\n<li>\n<p><a href=\"https://firebase.google.com/docs/hosting/\">Firebase hosting</a>: <a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">rewrite rule</a>을 다음과 같이 추가합니다.</p>\n<code-example format=\".\">\n  \"rewrites\": [ {\n    \"<a href=\"\" class=\"code-anchor\">source</a>\": \"**\",\n    \"destination\": \"/index.html\"\n  } ]\n\n</code-example>\n</li>\n</ul>\n<a id=\"cors\"></a>\n<!--\n### Requesting services from a different server (CORS)\n-->\n<h3 id=\"다른-서버로-요청-보내기-cors\">다른 서버로 요청 보내기 (CORS)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#다른-서버로-요청-보내기-cors\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAngular developers may encounter a\n<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\">\n<i>cross-origin resource sharing</i></a> error when making a service request (typically a data service request)\nto a server other than the application's own host server.\nBrowsers forbid such requests unless the server permits them explicitly.\n\nThere isn't anything the client application can do about these errors.\nThe server must be configured to accept the application's requests.\nRead about how to enable CORS for specific servers at\n<a href=\"http://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>.\n-->\n<p>Angular 애플리케이션을 개발하다보면 애플리케이션이 호스팅되는 서버와 다른 서버로 요청을 보낼 때 <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\">\n<i>교차 출처 리소스 공유(cross-origin resource sharing, CORS)</i></a> 에러가 발생하는 일이 종종 있습니다.\n이 에러는 서버에서 명시적으로 허용하지 않는 한 거절됩니다.</p>\n<p>이 에러가 발생할 때 클라이언트 애플리케이션 쪽에서 처리할 수 있는 것은 아무것도 없습니다.\n클라이언트 애플리케이션이 요청하는 것을 서버가 처리할 수 있도록 서버의 설정을 변경해야 합니다.\n서버 종류에 따라 CORS를 허용하는 방법은 <a href=\"http://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a> 문서를 참고하세요.</p>\n<hr>\n<a id=\"optimize\"></a>\n<!--\n## Production optimizations\n-->\n<h2 id=\"운영-배포-최적화\">운영 배포 최적화<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#운영-배포-최적화\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `--prod` _meta-flag_ engages the following build optimization features.\n-->\n<p><code>--prod</code> <em>메타 플래그</em> 를 사용하면 Angular 애플리케이션을 운영용으로 최적화해서 빌드할 수 있습니다.</p>\n<!--\n* [Ahead-of-Time (AOT) Compilation](guide/aot-compiler): pre-compiles Angular component templates.\n* [Production mode](#enable-prod-mode): deploys the production environment which enables _production mode_.\n* Bundling: concatenates your many application and library files into a few bundles.\n* Minification: removes excess whitespace, comments, and optional tokens.\n* Uglification: rewrites code to use short, cryptic variable and function names.\n* Dead code elimination: removes unreferenced modules and much unused code.\n-->\n<ul>\n<li><a href=\"guide/aot-compiler\">AOT 컴파일러</a> 사용: Angular 컴포넌트의 템플릿을 미리 컴파일합니다.</li>\n<li><a href=\"guide/deployment#enable-prod-mode\">운영 모드</a> 활성화: 애플리케이션이 동작하는 환경을 <em>운영 모드</em> 로 변경합니다.</li>\n<li>번들링(Bundling): 애플리케이션 파일과 라이브러리 파일들을 묶어서 몇개의 번들링 파일로 생성합니다.</li>\n<li>코드 압축(Minification): 공백 문자, 주석, 옵션 토큰을 제거합니다.</li>\n<li>난독화(Uglification): 변수와 함수 이름을 난독화하고 길이도 짧게 줄입니다.</li>\n<li>데드 코드 제거: 사용하지 않는 모듈과 코드를 제거합니다.</li>\n</ul>\n<!--\nSee [`ng build`](cli/build) for more about CLI build options and what they do.\n-->\n<p>이 때 활용할 수 있는 Angular CLI 빌드 옵션은 <a href=\"cli/build\"><code>ng build</code></a> 문서를 참고하세요.</p>\n<a id=\"enable-prod-mode\"></a>\n<!--\n### Enable runtime production mode\n-->\n<h3 id=\"운영-모드-활성화하기\">운영 모드 활성화하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#운영-모드-활성화하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn addition to build optimizations, Angular also has a runtime production mode. Angular apps run in development mode by default, as you can see by the following message on the browser console:\n-->\n<p>빌드 최적화와 함께 Angular에도 운영 모드가 존재합니다.\nAngular 애플리케이션은 기본적으로 개발모드로 동작하며, 이 모드에서는 브라우저 콘솔에 다음과 같은 메시지가 출력됩니다:</p>\n<code-example format=\"nocode\">\n  Angular is running in the development mode. Call <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>() to enable the production mode.\n</code-example>\n<!--\nSwitching to _production mode_ makes it run faster by disabling development specific checks such as the dual change detection cycles.\n-->\n<p>애플리케이션이 동작하는 환경을 <em>운영 모드</em> 로 변경하면 개발 모드에서 동작하는 이중 변화 감지 로직이 생략되기 때문에 애플리케이션 실행속도가 조금 더 빨라집니다.</p>\n<!--\nWhen you enable production builds via `--prod` command line flag, the runtime production mode is enabled as well.\n-->\n<p>Angular 애플리케이션을 빌드할 때 <code>--prod</code> 플래그를 사용하면 Angular 실행 환경이 자동으로 운영 모드로 변경됩니다.</p>\n<a id=\"lazy-loading\"></a>\n<!--\n### Lazy loading\n-->\n<h3 id=\"지연-로딩\">지연 로딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#지연-로딩\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can dramatically reduce launch time by only loading the application modules that\nabsolutely must be present when the app starts.\n-->\n<p>전체 모듈 중에서 애플리케이션 초기 실행에 필요한 모듈만 로딩하면 애플리케이션 초기 실행 속도를 더 빠르게 만들 수 있습니다.</p>\n<!--\nConfigure the Angular Router to defer loading of all other modules (and their associated code), either by\n[waiting until the app has launched](guide/router#preloading  \"Preloading\")\nor by [_lazy loading_](guide/router#asynchronous-routing \"Lazy loading\")\nthem on demand.\n-->\n<p>그리고 애플리케이션 초기 실행과 관련되지 않은 모듈은 Angular 라우터로 지연로딩하거나 <a href=\"guide/router#preloading\" title=\"Preloading\">애플리케이션이 시작된 직후에</a> 로딩할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\n#### Don't eagerly import something from a lazy-loaded module\n-->\n<h4 id=\"지연로딩하는-모듈에-있는-심볼을-즉시로딩하지-마세요\">지연로딩하는 모듈에 있는 심볼을 즉시로딩하지 마세요.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#지연로딩하는-모듈에-있는-심볼을-즉시로딩하지-마세요\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nIf you mean to lazy-load a module, be careful not import it\nin a file that's eagerly loaded when the app starts (such as the root `AppModule`).\nIf you do that, the module will be loaded immediately.\n\nThe bundling configuration must take lazy loading into consideration.\nBecause lazy-loaded modules aren't imported in JavaScript, bundlers exclude them by default.\nBundlers don't know about the router configuration and can't create separate bundles for lazy-loaded modules.\nYou would have to create these bundles manually.\n-->\n<p>지연로딩하는 모듈이 있다면 애플리케이션이 시작할 때 즉시 로드되는 모듈(ex. <code>AppModule</code>)에서 지연로딩되는 모듈의 구성요소를 로드하지 않도록 주의해야 합니다.\n이런 경우에는 모듈이 지연로딩되지 않고 즉시 로드됩니다.</p>\n<p>번들링 설정에서도 지연로딩을 고려해야 합니다.\n왜냐하면 지연로딩되는 모듈은 기본 번들링 결과물에 포함되지 않고 따로 번들링되기 때문입니다.\n하지만 번들러는 라우터 설정이나 지연로딩되는 모듈을 스스로 인식해서 가장 효율적인 방법으로 번들링하지는 않습니다.\n이런 설정은 개발자가 직접 해줘야 합니다.</p>\n<!--\nThe CLI runs the\n[Angular Ahead-of-Time Webpack Plugin](https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack)\nwhich automatically recognizes lazy-loaded `NgModules` and creates separate bundles for them.\n-->\n<p>Angular CLI는 <a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\">Angular AoT Webpack 플러그인</a>을 사용하기 때문에 지연로딩되는 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>을 자동으로 인식하고 번들링 파일을 생성합니다.</p>\n</div>\n<a id=\"measure\"></a>\n<!--\n### Measure performance\n-->\n<h3 id=\"성능-측정하기\">성능 측정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#성능-측정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can make better decisions about what to optimize and how when you have a clear and accurate understanding of\nwhat's making the application slow.\nThe cause may not be what you think it is.\nYou can waste a lot of time and money optimizing something that has no tangible benefit or even makes the app slower.\nYou should measure the app's actual behavior when running in the environments that are important to you.\n-->\n<p>애플리케이션의 동작 성능을 최적화하려면 애플리케이션의 어떤 부분을 어떻게 수정해야 하는지 정확하게 알고 있는 것이 좋습니다.\n하지만 애플리케이션을 잘 알고 있다고 해도 예상치 못한 결과는 언제든지 생길 수 있습니다.\n수많은 시간과 자금을 들여 애플리케이션을 최적화했는데 이전과 크게 차이나지 않거나 오히려 더 느려질 수도 있습니다.\n그래서 애플리케이션을 최적화 할 때는 실제로 동작하는 환경에서 어떻게 동작하는지 측정해야 합니다.</p>\n<!--\nThe\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools Network Performance\">\nChrome DevTools Network Performance page</a> is a good place to start learning about measuring performance.\n-->\n<p>애플리케이션의 성능을 측정할 때는 <a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools Network Performance\">Chrome 개발자도구의 네트워크 퍼포먼트 페이지</a>를 사용하는 것이 좋습니다.</p>\n<!--\nThe [WebPageTest](https://www.webpagetest.org/) tool is another good choice\nthat can also help verify that your deployment was successful.\n-->\n<p>그리고 이미 배포된 애플리케이션은 <a href=\"https://www.webpagetest.org/\">WebPageTest</a>과 같은 툴로 성능을 측정할 수 있습니다.</p>\n<a id=\"inspect-bundle\"></a>\n<!--\n### Inspect the bundles\n-->\n<h3 id=\"번들파일-분석하기\">번들파일 분석하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#번들파일-분석하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe <a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a>\ntool is a great way to inspect the generated JavaScript bundles after a production build.\n-->\n<p>애플리케이션을 운영용으로 빌드한 후라면 <a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a>를 사용해서 JavaScript로 번들링 된 파일을 분석할 수 있습니다.</p>\n<!--\nInstall `source-map-explorer`:\n-->\n<p><code>source-map-explorer</code>는 다음 명령을 실행해서 설치합니다:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm install source-map-explorer --save-dev\n</code-example>\n<!--\nBuild your app for production _including the source maps_\n-->\n<p>그리고 애플리케이션을 운영용으로 빌드할 때 <em>소스 맵</em> 을 함께 생성하도록 다음과 같이 실행합니다.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ng build --prod --source-map\n</code-example>\n<!--\nList the generated bundles in the `dist/` folder.\n-->\n<p>빌드가 끝나면 <code>dist/</code> 폴더의 내용을 확인해 봅시다.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  ls dist/*.bundle.js\n</code-example>\n<!--\nRun the explorer to generate a graphical representation of one of the bundles.\nThe following example displays the graph for the _main_ bundle.\n-->\n<p>이제 <code>source-map-explorer</code>로 번들링 파일을 로드하면 번들링 파일의 구조를 시각화해볼 수 있습니다.\n예를 들어 <em>main</em> 파일이 번들링된 결과물을 분석하려면 다음과 같이 실행합니다.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/source-map-explorer dist/main.*.bundle.js\n</code-example>\n<!--\nThe `source-map-explorer` analyzes the source map generated with the bundle and draws a map of all dependencies,\nshowing exactly which classes are included in the bundle.\n-->\n<p>그러면 <code>source-map-explorer</code>가 번들링 결과물과 소스 맵을 처리해서 이 번들링 파일에 어떤 클래스가 포함되어 있는지 분석할 수 있는 정보를 제공합니다.</p>\n<!--\nHere's the output for the _main_ bundle of an example app called `cli-quickstart`.\n-->\n<p><code>cli-quickstart</code> 프로젝트의 <em>main</em> 파일을 번들링한 결과로 이 프로그램을 실행시켜보면 다음과 같은 결과를 확인할 수 있습니다.</p>\n<figure>\n  <img src=\"generated/images/guide/deployment/quickstart-sourcemap-explorer.png\" alt=\"quickstart sourcemap explorer\" width=\"767\" height=\"401\">\n</figure>\n<a id=\"base-tag\"></a>\n<!--\n## The `base` tag\n-->\n<h2 id=\"base-태그\"><code>base</code> 태그<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#base-태그\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe HTML [_&lt;base href=\"...\"/&gt;_](/guide/router)\nspecifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets.\nFor example, given the `<base href=\"/my/app/\">`, the browser resolves a URL such as `some/place/foo.jpg`\ninto a server request for `my/app/some/place/foo.jpg`.\nDuring navigation, the Angular router uses the _base href_ as the base path to component, template, and module files.\n-->\n<p>이미지 파일이나 스크립트 파일, 스타일 시트는 상대 URL로 참조하는데, 상대 URL이 시작하는 위치는 HTML 문서에 <a href=\"/guide/router\"><em>&#x3C;base href=\"...\"/></em></a>로 지정합니다.\n그래서 예를 들어 <code>&#x3C;base href=\"/my/app/\"></code>라고 지정된 HTML 문서가 있고 <code>some/place/foo.jpg</code> 경로의 이미지 파일을 참조한다고 하면, 결과적으로 <code>my/app/some/place/foo.jpg</code> 경로에 요청을 보내게 됩니다.\n그리고 Angular 라우터를 사용해서 네비게이션을 할 때도 <em>base href</em> 를 참조해서 컴포넌트의 위치를 결정하며, 템플릿과 모듈 파일을 참조할 때도 이 주소를 기본으로 사용합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nSee also the [*APP_BASE_HREF*](api/common/APP_BASE_HREF \"API: APP_BASE_HREF\") alternative.\n-->\n<p><a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><em>APP_BASE_HREF</em></a>를 사용하면 이 설정을 대체할 수 있습니다.</p>\n</div>\n<!--\nIn development, you typically start the server in the folder that holds `index.html`.\nThat's the root folder and you'd add `<base href=\"/\">` near the top of `index.html` because `/` is the root of the app.\n-->\n<p>개발 중에는 일반적으로 <code>index.html</code>이 있는 폴더를 서버로 띄웁니다.\n이 경우에는 <code>index.html</code> 파일 위쪽에 <code>&#x3C;base href=\"/\"></code>를 지정하면 애플리케이션 최상위 주소를 <code>/</code>로 연결할 수 있습니다.</p>\n<!--\nBut on the shared or production server, you might serve the app from a subfolder.\nFor example, when the URL to load the app is something like `http://www.mysite.com/my/app/`,\nthe subfolder is `my/app/` and you should add `<base href=\"/my/app/\">` to the server version of the `index.html`.\n-->\n<p>하지만 다른 앱과 함께 사용하는 서버라면 애플리케이션을 서브 폴더에 두어야 하는 경우도 생깁니다.\n그래서 애플리케이션이 시작되는 위치가 <code><a href=\"api/common/http\" class=\"code-anchor\">http</a>://www.mysite.com/my/app/</code>이고 이 애플리케이션이 위치하는 폴더가 <code>my/app/</code>이라면 <code>index.html</code> 파일에서 기본 주소를 <code>&#x3C;base href=\"/my/app/\"></code>으로 지정해야 합니다.</p>\n<!--\nWhen the `base` tag is mis-configured, the app fails to load and the browser console displays `404 - Not Found` errors\nfor the missing files. Look at where it _tried_ to find those files and adjust the base tag appropriately.\n-->\n<p><code>base</code> 태그가 잘못된 값으로 설정되면 애플리케이션 파일을 찾을 수 없기 때문에 애플리케이션을 실행할 수 없어서 브라우저 콘솔에 <code>404 - Not Found</code> 에러가 출력됩니다.\n이 에러가 발생하면 <code>base</code> 태그값을 바꿔보면서 정확한 위치를 지정해야 합니다.</p>\n<h2 id=\"differential-loading\">Differential Loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#differential-loading\"><i class=\"material-icons\">link</i></a></h2>\n<p>When building web applications, making sure your application is compatible with the majority of browsers is a goal. Even as JavaScript continues to evolve, with new features being introduced, not all browsers are updated with support for these new features at the same pace. This is where compilation and <a href=\"guide/browser-support#polyfills\">polyfills</a> come in. The code you write in development using TypeScript is compiled and bundled into a format that is compatible with most browsers, commonly known as ES5. Polyfills are used bridge the gap, providing functionality that simply doesn't exist in some legacy browsers. </p>\n<p>There is a cost to ensure this browser compatibility, and it comes in the form of larger bundle size. All modern browsers support ES2015 and beyond, but in most cases, you still have to account for users accessing your application from a browser that doesn't. To maximize compatibility, you ship a single bundle that includes all your compiled code, plus any polyfills that may be needed. Users with modern browsers shouldn't pay the price of increased bundle size when used in a modern browser that supports many of the latest features in JavaScript. This is where differential loading comes into play.</p>\n<p>Differential loading is a strategy where the CLI builds two separate bundles as part of your deployed application. The modern bundle contains modern syntax, takes advantage of built-in support in modern browsers, ships less polyfills, and results in a smaller bundle size. The second bundle, includes the additional compiled code, all necessary polyfills, and results in a larger bundle size. This strategy allows you to continue to build your web application to support multiple browsers, but only load the necessary code that the browser needs.</p>\n<h3 id=\"differential-builds\">Differential builds<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#differential-builds\"><i class=\"material-icons\">link</i></a></h3>\n<p>The Angular CLI handles differential loading for you as part of the <em>build</em> process for deployment. The Angular CLI will produce the necessary bundles used for differential loading, based on your browser support requirements and compilation target. </p>\n<p>The Angular CLI uses two configurations for differential loading:</p>\n<ul>\n<li>Browserslist - The <code>browserslist</code> configuration file is included in your application <a href=\"guide/file-structure#application-configuration-files\">project structure</a> and provides the minimum browsers your application supports. See the <a href=\"https://github.com/browserslist/browserslist\">Browserslist spec</a> for complete configuration options.</li>\n<li>tsconfig.json - The <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> in the TypeScript <code>compilerOptions</code> determines the ECMAScript target version that the code is compiled to. Modern browsers support ES2015 natively, while ES5 is more commonly used to support legacy browsers.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> Differential loading is currently only supported when using <code>es2015</code> as a compilation <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code>. When used with targets higher than <code>es2015</code>, a warning is emitted during build time.</p>\n</div>\n<p>The CLI queries the Browserslist configuration, and checks the <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> to determine if support for legacy browsers is required. The combination of these two configurations determines whether multiple bundles are produced when you create a <em>build</em>. When you create a development build using <a href=\"cli/build\"><code>ng build</code></a> and differential loading is enabled, the output produced is simpler and easier to debug, allowing you to rely less on sourcemaps of compiled code. When you create a production build using <a href=\"cli/build\"><code>ng build --prod</code></a>, the CLI uses the defined configurations above to determine the bundles to build for deployment of your application. </p>\n<p>The <code>index.html</code> file is also modified during the build process to include script tags that enable differential loading. See the sample output below from the <code>index.html</code> file produced during a build using <code>ng build</code>.</p>\n<code-example language=\"html\">\n&#x3C;!-- ... -->\n&#x3C;body>\n  &#x3C;app-root>&#x3C;/app-root>\n  &#x3C;script src=\"runtime-es2015.js\" type=\"module\">&#x3C;/script>\n  &#x3C;script src=\"runtime-es5.js\" nomodule>&#x3C;/script>\n  &#x3C;script src=\"polyfills-es2015.js\" type=\"module\">&#x3C;/script>\n  &#x3C;script src=\"polyfills-es5.js\" nomodule>&#x3C;/script>\n  &#x3C;script src=\"styles-es2015.js\" type=\"module\">&#x3C;/script>\n  &#x3C;script src=\"styles-es5.js\" nomodule>&#x3C;/script>\n  &#x3C;script src=\"vendor-es2015.js\" type=\"module\">&#x3C;/script>\n  &#x3C;script src=\"vendor-es5.js\" nomodule>&#x3C;/script>\n  &#x3C;script src=\"main-es2015.js\" type=\"module\">&#x3C;/script>\n  &#x3C;script src=\"main-es5.js\" nomodule>&#x3C;/script>\n&#x3C;/body>\n&#x3C;!-- ... -->\n</code-example>\n<p>Each script tag has a <code>type=\"module\"</code> or <code>nomodule</code> attribute. Browsers with native support for ES modules only load the scripts with the <code>module</code> type attribute and ignore scripts with the <code>nomodule</code> attribute. Legacy browsers only load the scripts with the <code>nomodule</code> attribute, and ignore the script tags with the <code>module</code> type that load ES modules. </p>\n<div class=\"alert is-helpful\">\n<p><strong>Note:</strong> Some legacy browsers still download both bundles, but only execute the appropriate scripts based on the attributes mentioned above. You can read more on the issue <a href=\"https://github.com/philipwalton/webpack-esnext-boilerplate/issues/1\">here</a>.</p>\n</div>\n<p>See the <a href=\"guide/deployment#configuration-table\">configuration table</a> below for the configurations for enabling differential loading.</p>\n<h3 id=\"configuring-differential-loading\">Configuring differential loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#configuring-differential-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p>Differential loading for creating builds is already supported with version 8 and later of the Angular CLI. For each application project in your workspace, you can configure how builds are produced based on the mentioned <code>browserslist</code> and <code>tsconfig.json</code> files in your application project.</p>\n<p>Look at the default configuration for a newly created Angular application:</p>\n<p>The <code>browserslist</code> looks like this:</p>\n<code-example>\n> 0.5%\nlast 2 versions\nFirefox ESR\nnot dead\nnot IE 9-11 # For IE 9-11 support, remove 'not'.\n</code-example>\n<p>The <code>tsconfig.json</code> looks like this:</p>\n<code-example>\n{\n  \"compileOnSave\": false,\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    \"outDir\": \"./dist/out-tsc\",\n    \"sourceMap\": true,\n    \"declaration\": false,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"importHelpers\": true,\n    \"<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>\": \"es2015\",\n    \"typeRoots\": [\n      \"node_modules/@types\"\n    ],\n    \"lib\": [\n      \"es2018\",\n      \"dom\"\n    ]\n  }\n}\n</code-example>\n<p>By default, legacy browsers such as IE 9-11 are ignored, and the compilation target is ES2015. As a result, this produces two builds, and differential loading is enabled. If you ignore browsers without ES2015 support, a single build is produced. To see the build result for differential loading based on different configurations, refer to the table below. </p>\n<div class=\"alert is-important\">\n<p><strong>Note:</strong> To see which browsers are supported with the above configuration, see which settings meet to your browser support requirements, see the <a href=\"https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+Chrome+41%2C+not+dead%2C+not+IE+9-11\">Browserslist compatibility page</a>.</p>\n</div>\n<a id=\"configuration-table\"></a>\n<table>\n<thead>\n<tr>\n<th>ES5 Browserslist Result</th>\n<th>ES Target</th>\n<th>Build Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>es5</td>\n<td>Single build</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>es5</td>\n<td>Single build w/Conditional Polyfills</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>es2015</td>\n<td>Single build</td>\n</tr>\n<tr>\n<td>enabled</td>\n<td>es2015</td>\n<td>Differential Loading (Two builds w/Conditional Polyfills</td>\n</tr>\n</tbody>\n</table>\n<p>When the ES5 Browserslist result is <code>disabled</code>, then ES5 browser support is not required. Otherwise, ES5 browser support is required.</p>\n<h3 id=\"opting-out-of-differential-loading\">Opting out of differential loading<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#opting-out-of-differential-loading\"><i class=\"material-icons\">link</i></a></h3>\n<p>Differential loading can be explicitly disabled if it causes unexpected issues or you need to target ES5 specifically for legacy browser support. </p>\n<p>To explicitly disable differential loading:</p>\n<ul>\n<li>Enable the <code>dead</code> or <code>IE</code> browsers in the <code>browserslist</code> config file by removing the <code>not</code> keyword in front of them.</li>\n<li>Set the <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> in the <code>compilerOptions</code> to <code>es5</code>.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/npm-packages\n - guide/setup\n - guide/visual-studio-2015\n - start/deployment\n-->\n<!-- links from this doc:\n - /guide/router\n - api/common/APP_BASE_HREF\n - api/common/http\n - api/core/NgModule\n - api/core/enableProdMode\n - api/router/RouterLinkWithHref#target\n - api/router/Routes\n - cli/build\n - guide/aot-compiler\n - guide/browser-support#polyfills\n - guide/deployment#angular-앱이-동작해야-하는-경우는-모두-indexhtml로-보내야-합니다\n - guide/deployment#base-태그\n - guide/deployment#basic-deployment-to-a-remote-server\n - guide/deployment#building-and-serving-from-disk\n - guide/deployment#configuration-table\n - guide/deployment#configuring-differential-loading\n - guide/deployment#differential-builds\n - guide/deployment#differential-loading\n - guide/deployment#enable-prod-mode\n - guide/deployment#fallback\n - guide/deployment#github-페이지에-배포하기\n - guide/deployment#opting-out-of-differential-loading\n - guide/deployment#simple-deployment-options\n - guide/deployment#다른-서버로-요청-보내기-cors\n - guide/deployment#배포\n - guide/deployment#번들파일-분석하기\n - guide/deployment#서버-설정\n - guide/deployment#성능-측정하기\n - guide/deployment#운영-모드-활성화하기\n - guide/deployment#운영-배포-최적화\n - guide/deployment#지연-로딩\n - guide/deployment#지연로딩하는-모듈에-있는-심볼을-즉시로딩하지-마세요\n - guide/deployment#폴백fallback-설정-예\n - guide/file-structure#application-configuration-files\n - guide/router#preloading\n - http://enable-cors.org/server.html\n - http://httpd.apache.org/docs/current/mod/mod_rewrite.html\n - http://nginx.org/\n - http://stackoverflow.com/a/26152011/2116927\n - https://browserl.ist/?q=%3E+0.5%25%2C+last+2+versions%2C+Firefox+ESR%2C+Chrome+41%2C+not+dead%2C+not+IE+9-11\n - https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\n - https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\n - https://firebase.google.com/docs/hosting/\n - https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\n - https://github.com/angular-buch/angular-cli-ghpages\n - https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\n - https://github.com/angular/angular/edit/master/aio/content/guide/deployment.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/browserslist/browserslist\n - https://github.com/danvk/source-map-explorer/blob/master/README.md\n - https://github.com/isaacs/github/issues/408\n - https://github.com/johnpapa/lite-server\n - https://github.com/join\n - https://github.com/philipwalton/webpack-esnext-boilerplate/issues/1\n - https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\n - https://help.github.com/articles/create-a-repo/\n - https://help.github.com/articles/what-is-github-pages/\n - https://httpd.apache.org/\n - https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\n - https://pages.github.com/\n - https://webpack.js.org/guides/development/#webpack-dev-server\n - https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\n - https://www.iis.net/\n - https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\n - https://www.webpagetest.org/\n-->"
}