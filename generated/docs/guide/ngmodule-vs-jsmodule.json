{
  "id": "guide/ngmodule-vs-jsmodule",
  "title": "JavaScript 모듈 vs. NgModules",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/ngmodule-vs-jsmodule.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# JavaScript modules vs. NgModules\n-->\n<h1 id=\"javascript-모듈-vs-ngmodules\">JavaScript 모듈 vs. NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-모듈-vs-ngmodules\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nJavaScript and Angular use modules to organize code, and\nthough they organize it differently, Angular apps rely on both.\n-->\n<p>JavaScript와 Angular는 코드를 효율적으로 관리하기 위해 모듈 체계를 사용하지만, 두 영역의 모듈 체계는 서로 다릅니다. Angular 애플리케이션에서는 두 모듈 체계를 모두 사용합니다.</p>\n<!--\n## JavaScript modules\n-->\n<h2 id=\"javascript-모듈\">JavaScript 모듈<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#javascript-모듈\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIn JavaScript, modules are individual files with JavaScript code in them. To make what’s in them available, you write an export statement, usually after the relevant code, like this:\n-->\n<p>JavaScript에서는 JavaScript 코드가 작성된 개별 파일을 모듈로 구분합니다. 그리고 이 파일 안에 있는 내용을 외부로 공개하려면 다음과 같이 <code>export</code> 키워드를 지정하면 됩니다.</p>\n<code-example language=\"typescript\">\nexport class AppComponent { ... }\n</code-example>\n<!--\nThen, when you need that file’s code in another file, you import it like this:\n-->\n<p>그러면 다른 파일에서 이 객체를 불러와서 사용할 수 있습니다:</p>\n<code-example language=\"typescript\">\nimport { AppComponent } from './app.component';\n</code-example>\n<!--\nJavaScript modules help you namespace, preventing accidental global variables.\n-->\n<p>JavaScript 모듈은 네임스페이스를 지원하기 때문에, 전역 변수와 충돌하는 것을 방지하는 용도로도 사용합니다.</p>\n<p>JavaScript 모듈에 대해 자세하게 알아보려면 <a href=\"https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\">JavaScript/ECMAScript modules</a> 문서를 참고하세요.</p>\n<h2 id=\"ngmodules\">NgModules<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodules\"><i class=\"material-icons\">link</i></a></h2>\n<!-- KW-- perMisko: let's discuss. This does not answer the question why it is different. Also, last sentence is confusing.-->\n<!--\nNgModules are classes decorated with `@NgModule`. The `@NgModule` decorator’s `imports` array tells Angular what other NgModules the current module needs. The modules in the `imports` array are different than JavaScript modules because they are NgModules rather than regular JavaScript modules. Classes with an `@NgModule` decorator are by convention kept in their own files, but what makes them an `NgModule` isn’t being in their own file, like JavaScript modules; it’s the presence of `@NgModule` and its metadata.\n-->\n<p>NgModule은 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 데코레이터가 지정된 클래스입니다. 이 데코레이터의 <code>imports</code> 배열에는 현재 모듈에 필요한 Angular 모듈이 어떤 것이 있는지 나열하는데, 이때 지정하는 모듈은 JavaScript 모듈이 아니라 Angular 모듈입니다. Angular 모듈을 어떻게 구성하는지는 개별 파일을 어떻게 구성하느냐에 따라 달라집니다.</p>\n<!--\nThe `AppModule` generated from the [Angular CLI](cli) demonstrates both kinds of modules in action:\n-->\n<p><a href=\"cli\">Angular CLI</a>로 생성된 기본 <code>AppModule</code>은 다음과 같이 구성됩니다:</p>\n<!--\n```typescript\n/* These are JavaScript import statements. Angular doesn’t know anything about these. */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n/* The @NgModule decorator lets Angular know that this is an NgModule. */\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [     /* These are NgModule imports. */\n    BrowserModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n```\n-->\n<code-example language=\"typescript\">\n/* 가장 처음에는 JavaScript import 구문을 작성합니다. 이 부분은 Angular와 관련된 코드는 아닙니다. */\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\n\nimport { AppComponent } from './app.component';\n\n/* @<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> 데코레이터를 지정하면 이 클래스가 Angular의 <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>이라는 것을 나타냅니다.  */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  declarations: [\n    AppComponent\n  ],\n  imports: [     /* 이 부분에 <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>을 로드합니다. */\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n</code-example>\n<!--\nThe NgModule classes differ from JavaScript module in the following key ways:\n-->\n<p>NgModule 클래스는 JavaScript 모듈과 비교했을 때 이런 점들이 다릅니다:</p>\n<!--\n* An NgModule bounds [declarable classes](guide/ngmodule-faq#q-declarable) only.\nDeclarables are the only classes that matter to the [Angular compiler](guide/ngmodule-faq#q-angular-compiler).\n* Instead of defining all member classes in one giant file as in a JavaScript module,\nyou list the module's classes in the `@NgModule.declarations` list.\n* An NgModule can only export the [declarable classes](guide/ngmodule-faq#q-declarable)\nit owns or imports from other modules. It doesn't declare or export any other kind of class.\n* Unlike JavaScript modules, an NgModule can extend the _entire_ application with services\nby adding providers to the `@NgModule.providers` list.\n-->\n<ul>\n<li>NgModule의 범위는 이 모듈의 <a href=\"guide/ngmodule-faq#q-declarable\">구성요소로 선언한 클래스(declarable classes)</a>들로 제한됩니다. 이 부분은 <a href=\"guide/ngmodule-faq#q-angular-compiler\">Angular 컴파일러</a>와도 관계가 있습니다.</li>\n<li>JavaScript 모듈처럼 클래스의 모든 멤버를 한 파일에 작성하는 대신, 모듈에서 사용하는 클래스들은 <code>@<a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">NgModule.declarations</a></code> 배열을 사용해서 여러 파일로 나눌 수 있습니다.</li>\n<li>NgModule에서는 이 모듈의 <a href=\"guide/ngmodule-faq#q-declarable\">구성요소로 선언한 클래스</a>만 모듈 외부로 공개할 수 있고, 이렇게 모듈 외부로 공개된 클래스만 다른 모듈에서 로드할 수 있습니다. 일반 클래스를 <code>export</code> 키워드로 지정했다고 해서 모듈에서 참조할 수 있는 것은 아닙니다.</li>\n<li>JavaScript 모듈과는 다르게, NgModule은 <code>@<a href=\"api/core/NgModule#providers\" class=\"code-anchor\">NgModule.providers</a></code> 배열에서 지정하는 서비스와 서비스 프로바이더를 사용해서 애플리케이션 <em>전체</em> 를 확장할 수 있습니다.</li>\n</ul>\n<hr>\n<!--\n## More on NgModules\n-->\n<h2 id=\"ngmodule-더-알아보기\">NgModule 더 알아보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-vs-jsmodule#ngmodule-더-알아보기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nFor more information on NgModules, see:\n* [Bootstrapping](guide/bootstrapping).\n* [Frequently used modules](guide/frequent-ngmodules).\n* [Providers](guide/providers).\n-->\n<p>다음 내용을 더 확인해 보세요:</p>\n<ul>\n<li><a href=\"guide/bootstrapping\">부트스트랩</a>.</li>\n<li><a href=\"guide/frequent-ngmodules\">자주 사용하는 NgModule</a>.</li>\n<li><a href=\"guide/providers\">프로바이더</a>.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/bootstrapping\n - guide/feature-modules\n - guide/frequent-ngmodules\n - guide/ngmodule-faq\n-->\n<!-- links from this doc:\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/NgModule#providers\n - api/platform-browser/BrowserModule\n - cli\n - guide/bootstrapping\n - guide/frequent-ngmodules\n - guide/ngmodule-faq#q-angular-compiler\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-vs-jsmodule#javascript-모듈\n - guide/ngmodule-vs-jsmodule#javascript-모듈-vs-ngmodules\n - guide/ngmodule-vs-jsmodule#ngmodule-더-알아보기\n - guide/ngmodule-vs-jsmodule#ngmodules\n - guide/providers\n - https://github.com/angular/angular/edit/master/aio/content/guide/ngmodule-vs-jsmodule.md?message=docs%3A%20describe%20your%20change...\n - https://hacks.mozilla.org/2015/08/es6-in-depth-modules/\n-->"
}