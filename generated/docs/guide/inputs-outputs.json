{
  "id": "guide/inputs-outputs",
  "title": "@Input() and @Output() properties",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/inputs-outputs.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"input-and-output-properties\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#input-and-output-properties\"><i class=\"material-icons\">link</i></a></h1>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> allow Angular to share data between the parent context\nand child directives or components. An <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property is writable\nwhile an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property is observable.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<p>Consider this example of a child/parent relationship:</p>\n<code-example language=\"html\">\n&#x3C;parent-component>\n  &#x3C;child-component>&#x3C;/child-component>\n&#x3C;/parent-component>\n</code-example>\n<p>Here, the <code>&#x3C;child-component></code> selector, or child directive, is embedded\nwithin a <code>&#x3C;parent-component></code>, which serves as the child's context.</p>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> act as\nthe API, or application programming interface, of the child\ncomponent in that they allow the child to\ncommunicate with the parent. Think of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> like ports\nor doorways—<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> is the doorway into the component allowing data\nto flow in while <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is the doorway out of the component, allowing the\nchild component to send data out.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"input-and-output-are-independent\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> are independent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#input-and-output-are-independent\"><i class=\"material-icons\">link</i></a></h4>\n<p>Though <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> often appear together in apps, you can use\nthem separately. If the nested\ncomponent is such that it only needs to send data to its parent, you wouldn't\nneed an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, only an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. The reverse is also true in that if the\nchild only needs to receive data from the parent, you'd only need <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.</p>\n</div>\n<a id=\"input\"></a>\n<h2 id=\"how-to-use-input\">How to use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#how-to-use-input\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component or directive to let Angular know\nthat a property in that component can receive its value from its parent component.\nIt helps to remember that the data flow is from the perspective of the\nchild component. So an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> allows data to be input <em>into</em> the\nchild component from the parent component.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input.svg\" alt=\"Input data flow diagram\" width=\"671\" height=\"346\">\n</div>\n<p>To illustrate the use of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, edit these parts of your app:</p>\n<ul>\n<li>The child component class and template</li>\n<li>The parent component class and template</li>\n</ul>\n<h3 id=\"in-the-child\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#in-the-child\"><i class=\"material-icons\">link</i></a></h3>\n<p>To use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component class, first import\n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and then decorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.ts\" region=\"use-input\" header=\"src/app/item-detail/item-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> 심볼을 로드합니다.\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item: string; // 프로퍼티에 @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() 데코레이터를 지정합니다.\n}\n\n</code-example>\n<p>In this case, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorates the property <code class=\"no-auto-link\">item</code>, which has\na type of <code>string</code>, however, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> properties can have any type, such as\n<code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>, <code>string</code>, <code>boolean</code>, or <code>object</code>. The value for <code>item</code> will come from the parent component, which the next section covers.</p>\n<p>Next, in the child component template, add the following:</p>\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.html\" region=\"property-in-template\" header=\"src/app/item-detail/item-detail.component.html\">\n&#x3C;p>\n  Today's item: {{item}}\n&#x3C;/p>\n\n</code-example>\n<h3 id=\"in-the-parent\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#in-the-parent\"><i class=\"material-icons\">link</i></a></h3>\n<p>The next step is to bind the property in the parent component's template.\nIn this example, the parent component template is <code>app.component.html</code>.</p>\n<p>First, use the child's selector, here <code>&#x3C;app-item-detail></code>, as a directive within the\nparent component template. Then, use <a href=\"guide/property-binding\">property binding</a>\nto bind the property in the child to the property of the parent.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [item]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Next, in the parent component class, <code>app.component.ts</code>, designate a value for <code>currentItem</code>:</p>\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n<p>With <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, Angular passes the value for <code>currentItem</code> to the child so that <code>item</code> renders as <code>Television</code>.</p>\n<p>The following diagram shows this structure:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" alt=\"Property binding diagram\" width=\"502\" height=\"304\">\n</div>\n<p>The target in the square brackets, <code>[]</code>, is the property you decorate\nwith <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component. The binding source, the part\nto the right of the equal sign, is the data that the parent\ncomponent passes to the nested component.</p>\n<p>The key takeaway is that when binding to a child component's property in a parent component—that is, what's\nin square brackets—you must\ndecorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component.</p>\n<div class=\"alert is-helpful\">\n<h3 id=\"onchanges-and-input\"><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> and <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#onchanges-and-input\"><i class=\"material-icons\">link</i></a></h3>\n<p>To watch for changes on an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, use\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, one of Angular's <a href=\"guide/lifecycle-hooks#onchanges\">lifecycle hooks</a>.\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> is specifically designed to work with properties that have the\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator. See the <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a> section of the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> guide for more details and examples.</p>\n</div>\n<a id=\"output\"></a>\n<h2 id=\"how-to-use-output\">How to use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#how-to-use-output\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator in the child component or directive to allow data to flow from\nthe child <em>out</em> to the parent.</p>\n<p>An <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property should normally be initialized to an Angular <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a> with values flowing out of the component as <a href=\"guide/event-binding\">events</a>.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/output.svg\" alt=\"Output diagram\" width=\"666\" height=\"340\">\n</div>\n<p>Just like with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, you can use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\non a property of the child component but its type should be\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.</p>\n<p><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> marks a property in a child component as a doorway\nthrough which data can travel from the child to the parent.\nThe child component then has to raise an event so the\nparent knows something has changed. To raise an event,\n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> works hand in hand with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich is a class in <code>@angular/core</code> that you\nuse to emit custom events.</p>\n<p>When you use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, edit these parts of your app:</p>\n<ul>\n<li>The child component class and template</li>\n<li>The parent component class and template</li>\n</ul>\n<p>The following example shows how to set up an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in a child\ncomponent that pushes data you enter in an HTML <code>&#x3C;input></code> to an array in the\nparent component.</p>\n<div class=\"alert is-helpful\">\n<p>The HTML element <code>&#x3C;input></code> and the Angular decorator <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>\nare different. This documentation is about component communication in Angular as it pertains to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. For more information on the HTML element <code>&#x3C;input></code>, see the <a href=\"https://www.w3.org/TR/html5/sec-forms.html#the-input-element\">W3C Recommendation</a>.</p>\n</div>\n<h2 id=\"in-the-child-1\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#in-the-child-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>This example features an <code>&#x3C;input></code> where a user can enter a value and click a <code>&#x3C;button></code> that raises an event. The <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> then relays the data to the parent component.</p>\n<p>First, be sure to import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>\nin the child component class:</p>\n<code-example language=\"js\">\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n</code-example>\n<p>Next, still in the child, decorate a property with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in the component class.\nThe following example <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is called <code>newItemEvent</code> and its type is\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which means it's an event.</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output\" header=\"src/app/item-output/item-output.component.ts\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n\n</code-example>\n<p>The different parts of the above declaration are as follows:</p>\n<ul>\n<li><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>—a decorator function marking the property as a way for data to go from the child to the parent</li>\n<li><code>newItemEvent</code>—the name of the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></li>\n<li><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code>—the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>'s type</li>\n<li><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code>—tells Angular to create a new event emitter and that the data it emits is of type string. The type could be any type, such as <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>, <code>boolean</code>, and so on. For more information on <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, see the <a href=\"api/core/EventEmitter\">EventEmitter API documentation</a>.</li>\n</ul>\n<p>Next, create an <code>addNewItem()</code> method in the same component class:</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output-class\" header=\"src/app/item-output/item-output.component.ts\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p>The <code>addNewItem()</code> function uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, <code>newItemEvent</code>,\nto raise an event in which it emits the value the user\ntypes into the <code>&#x3C;input></code>. In other words, when\nthe user clicks the add button in the UI, the child lets the parent know\nabout the event and gives that data to the parent.</p>\n<h3 id=\"in-the-childs-template\">In the child's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#in-the-childs-template\"><i class=\"material-icons\">link</i></a></h3>\n<p>The child's template has two controls. The first is an HTML <code>&#x3C;input></code> with a\n<a href=\"guide/template-reference-variables\">template reference variable</a> , <code>#newItem</code>,\nwhere the user types in an item name. Whatever the user types\ninto the <code>&#x3C;input></code> gets stored in the <code>value</code> property of the <code>#newItem</code> variable.</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.html\" region=\"child-output\" header=\"src/app/item-output/item-output.component.html\">\n&#x3C;label>Add an item: &#x3C;input #newItem>&#x3C;/label>\n&#x3C;button (click)=\"addNewItem(newItem.value)\">Add to parent's list&#x3C;/button>\n\n</code-example>\n<p>The second element is a <code>&#x3C;button></code>\nwith an <a href=\"guide/event-binding\">event binding</a>. You know it's\nan event binding because the part to the left of the equal\nsign is in parentheses, <code>(click)</code>.</p>\n<p>The <code>(click)</code> event is bound to the <code>addNewItem()</code> method in the child component class which\ntakes as its argument whatever the value of <code>#newItem.value</code> property is.</p>\n<p>Now the child component has an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nfor sending data to the parent and a method for raising an event.\nThe next step is in the parent.</p>\n<h2 id=\"in-the-parent-1\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#in-the-parent-1\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this example, the parent component is <code>AppComponent</code>, but you could use\nany component in which you could nest the child.</p>\n<p>The <code>AppComponent</code> in this example features a list of <code>items</code>\nin an array and a method for adding more items to the array.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p>The <code>addItem()</code> method takes an argument in the form of a string\nand then pushes, or adds, that string to the <code>items</code> array.</p>\n<h3 id=\"in-the-parents-template\">In the parent's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#in-the-parents-template\"><i class=\"material-icons\">link</i></a></h3>\n<p>Next, in the parent's template, bind the parent's\nmethod to the child's event. Put the child selector, here <code>&#x3C;app-item-output></code>,\nwithin the parent component's\ntemplate, <code>app.component.html</code>.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-output (newItemEvent)=\"addItem($event)\">&#x3C;/app-item-output>\n\n</code-example>\n<p>The event binding, <code>(newItemEvent)='addItem($event)'</code>, tells\nAngular to connect the event in the child, <code>newItemEvent</code>, to\nthe method in the parent, <code>addItem()</code>, and that the event that the child\nis notifying the parent about is to be the argument of <code>addItem()</code>.\nIn other words, this is where the actual hand off of data takes place.\nThe <code>$event</code> contains the data that the user types into the <code>&#x3C;input></code>\nin the child template UI.</p>\n<p>Now, in order to see the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> working, add the following to the parent's template:</p>\n<code-example language=\"html\">\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item}}&#x3C;/li>\n  &#x3C;/ul>\n</code-example>\n<p>The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over the items in the <code>items</code> array. When you enter a value in the child's <code>&#x3C;input></code> and click the button, the child emits the event and the parent's <code>addItem()</code> method pushes the value to the <code>items</code> array and it renders in the list.</p>\n<h2 id=\"input-and-output-together\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same child component as in the following:</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"together\" header=\"src/app/app.component.html\">\n&#x3C;app-input-output [item]=\"currentItem\" (deleteRequest)=\"crossOffItem($event)\">&#x3C;/app-input-output>\n\n</code-example>\n<p>The target, <code>item</code>, which is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property in the child component class, receives its value from the parent's property, <code>currentItem</code>. When you click delete, the child component raises an event, <code>deleteRequest</code>, which is the argument for the parent's <code>crossOffItem()</code> method.</p>\n<p>The following diagram is of an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same\nchild component and shows the different parts of each:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" alt=\"Input/Output diagram\" width=\"800\" height=\"333\">\n</div>\n<p>As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is <code>&#x3C;app-input-output></code> with <code>item</code> and <code>deleteRequest</code> being <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nproperties in the child component class. The property <code>currentItem</code> and the method <code>crossOffItem()</code> are both in the parent component class.</p>\n<p>To combine property and event bindings using the banana-in-a-box\nsyntax, <code>[()]</code>, see <a href=\"guide/two-way-binding\">Two-way Binding</a>.</p>\n<h2 id=\"input-and-output-declarations\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> declarations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#input-and-output-declarations\"><i class=\"material-icons\">link</i></a></h2>\n<p>Instead of using the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorators\nto declare inputs and outputs, you can identify\nmembers in the <code>inputs</code> and <code>outputs</code> arrays\nof the directive metadata, as in this example:</p>\n<code-example path=\"inputs-outputs/src/app/in-the-metadata/in-the-metadata.component.ts\" region=\"metadata\" header=\"src/app/in-the-metadata/in-the-metadata.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['clearanceItem'],\noutputs: ['buyEvent']\n// tslint:enable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<p>While declaring <code>inputs</code> and <code>outputs</code> in the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nmetadata is possible, it is a better practice to use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nclass decorators instead, as follows:</p>\n<code-example path=\"inputs-outputs/src/app/input-output/input-output.component.ts\" region=\"input-output\" header=\"src/app/input-output/input-output.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() item: string;\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n</code-example>\n<p>See the <a href=\"guide/styleguide#decorate-input-and-output-properties\">Decorate input and output properties</a> section of the\n<a href=\"guide/styleguide\">Style Guide</a> for details.</p>\n<div class=\"alert is-helpful\">\n<p>If you get a template parse error when trying to use inputs or outputs, but you know that the\nproperties do indeed exist, double check\nthat your properties are annotated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> or that you've declared\nthem in an <code>inputs</code>/<code>outputs</code> array:</p>\n<code-example language=\"bash\">\nUncaught Error: Template parse errors:\nCan't bind to 'item' since it isn't a known property of 'app-item-detail'\n</code-example>\n</div>\n<a id=\"aliasing-io\"></a>\n<h2 id=\"aliasing-inputs-and-outputs\">Aliasing inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes the public name of an input/output property should be different from the internal name. While it is a best practice to avoid this situation, Angular does\noffer a solution.</p>\n<h3 id=\"aliasing-in-the-metadata\">Aliasing in the metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#aliasing-in-the-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p>Alias inputs and outputs in the metadata using a colon-delimited (<code>:</code>) string with\nthe directive property name on the left and the public alias on the right:</p>\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias\" header=\"src/app/aliasing/aliasing.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['input1: saveForLaterItem'], // 프로퍼티_이름:클래스_밖에서_사용할_이름\noutputs: ['outputEvent1: saveForLaterEvent']\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<h3 id=\"aliasing-with-the-inputoutput-decorator\">Aliasing with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/inputs-outputs#aliasing-with-the-inputoutput-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can specify the alias for the property name by passing the alias name to the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator. The internal name remains as usual.</p>\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias-input-output\" header=\"src/app/aliasing/aliasing.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('wishListItem') input2: string; //  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>(클래스_밖에서_사용할_이름)\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('wishEvent') outputEvent2 = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>(); //  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>(클래스_밖에서_사용할_이름) 프로퍼티_이름 = ...\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - api/core/Input\n - api/core/Output\n - guide/built-in-directives\n - guide/component-interaction\n - guide/glossary\n - guide/observables-in-angular\n - guide/structural-directives\n - guide/template-syntax\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/DecimalPipe\n - api/common/NgForOf\n - api/core/Component\n - api/core/Directive\n - api/core/EventEmitter\n - api/core/Input\n - api/core/OnChanges\n - api/core/Output\n - guide/event-binding\n - guide/inputs-outputs#aliasing-in-the-metadata\n - guide/inputs-outputs#aliasing-inputs-and-outputs\n - guide/inputs-outputs#aliasing-with-the-inputoutput-decorator\n - guide/inputs-outputs#how-to-use-input\n - guide/inputs-outputs#how-to-use-output\n - guide/inputs-outputs#in-the-child\n - guide/inputs-outputs#in-the-child-1\n - guide/inputs-outputs#in-the-childs-template\n - guide/inputs-outputs#in-the-parent\n - guide/inputs-outputs#in-the-parent-1\n - guide/inputs-outputs#in-the-parents-template\n - guide/inputs-outputs#input-and-output-are-independent\n - guide/inputs-outputs#input-and-output-declarations\n - guide/inputs-outputs#input-and-output-properties\n - guide/inputs-outputs#input-and-output-together\n - guide/inputs-outputs#onchanges-and-input\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/property-binding\n - guide/styleguide\n - guide/styleguide#decorate-input-and-output-properties\n - guide/template-reference-variables\n - guide/two-way-binding\n - https://github.com/angular/angular/edit/master/aio/content/guide/inputs-outputs.md?message=docs%3A%20describe%20your%20change...\n - https://www.w3.org/TR/html5/sec-forms.html#the-input-element\n-->"
}