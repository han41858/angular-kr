{
  "id": "guide/file-structure",
  "title": "워크스페이스, 프로젝트 파일 구조",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/file-structure.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Workspace and project file structure\n-->\n<h1 id=\"워크스페이스-프로젝트-파일-구조\">워크스페이스, 프로젝트 파일 구조<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#워크스페이스-프로젝트-파일-구조\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nYou develop applications in the context of an Angular [workspace](guide/glossary#workspace). A workspace contains the files for one or more [projects](guide/glossary#project). A project is the set of files that comprise a standalone application or a shareable library.\n\nThe Angular CLI `ng new` command creates a workspace.\n-->\n<p>Angular 애플리케이션은 Angular <a href=\"guide/glossary#workspace\">워크스페이스(workspace)</a> 컨텍스트 안에서 개발합니다.\n그리고 워크스페이스에는 <a href=\"guide/glossary#project\">프로젝트(project)</a>가 여러개 존재할 수도 있습니다.\n프로젝트는 단독으로 동작하는 애플리케이션이나 라이브러리를 구성하는 파일 모음을 의미합니다.</p>\n<p>Angular CLI로 <code>ng new</code> 명령을 실행하면 워크스페이스를 생성할 수 있습니다.</p>\n<code-example language=\"bash\">\nng new &#x3C;my-project>\n</code-example>\n<!--\nWhen you run this command, the CLI installs the necessary Angular npm packages and other dependencies in a new workspace, with a root-level application named *my-project*.\nThe workspace root folder contains various support and configuration files, and a README file with generated descriptive text that you can customize.\n\nBy default, `ng new` creates an initial skeleton application at the root level of the workspace, along with its end-to-end tests.\nThe skeleton is for a simple Welcome application that is ready to run and easy to modify.\nThe root-level application has the same name as the workspace, and the source files reside in the `src/` subfolder of the workspace.\n\nThis default behavior is suitable for a typical \"multi-repo\" development style where each application resides in its own workspace.\nBeginners and intermediate users are encouraged to use `ng new` to create a separate workspace for each application.\n\nAngular also supports workspaces with [multiple projects](#multiple-projects).\nThis type of development environment is suitable for advanced users who are developing [shareable libraries](guide/glossary#library),\nand for enterprises that use a \"monorepo\" development style, with a single repository and global configuration for all Angular projects.\n\nTo set up a monorepo workspace, you should skip the creating the root application.\nSee [Setting up for a multi-project workspace](#multiple-projects) below.\n-->\n<p>그러면 Angular CLI가 Angular npm 패키지를 설치하면서 새로운 <em>my-project</em>라는 폴더에 워크스페이스를 생성합니다.\n워크스페이스 최상위 폴더에는 워크스페이스 관리 파일이나 환경설정 파일이 생성됩니다.\n워크스페이스 설명은 보통 README 파일에 작성하는데, 이 파일도 이 때 생성됩니다.</p>\n<p>그리고 <code>ng new</code> 명령을 실행하면 워크스페이스 최상위 폴더에 애플리케이션의 기본 틀과 엔드-투-엔드 테스트 환경도 함께 구성됩니다.\n이 때 생성되는 애플리케이션 기본틀은 바로 실행할 수 있을 정도로 구성되기 때문에 수정하기도 쉽습니다.\n이 애플리케이션의 이름은 워크스페이스 이름과 같고, 소스 파일은 워크스페이스의 <code>src/</code> 폴더 안에 구성됩니다.</p>\n<p>워크스페이스 하나에 애플리케이션을 여러개 구성할 수도 있습니다.\n하지만 아직 Angular에 익숙하지 않다면 애플리케이션 하나를 생성할 때마다 <code>ng new</code> 명령을 실행하는 것이 좋습니다.</p>\n<p>Angluar 워크스페이스에는 <a href=\"guide/file-structure#multiple-projects\">프로젝트를 여러개</a> 구성할 수도 있습니다.\n<a href=\"guide/glossary#library\">라이브러리</a>를 만들어서 공유할 목적이라면 이런 개발 환경도 고려해볼만 합니다.\n워크스페이스 아래 생성하는 Angular 프로젝트는 모두 한 저장소(repository)로 관리할 수 있으며, 워크스페이스 환경설정의 영향을 받습니다.</p>\n<p>단일 저장소(monorepo) 워크스페이스를 구성하려면 최상위 폴더에 생성되는 애플리케이션 생성을 건너뛰는 것이 좋습니다.\n아래 <a href=\"guide/file-structure#multiple-projects\">프로젝트가 여러개인 워크스페이스 구성하기</a> 섹션을 참고하세요.</p>\n<!--\n## Workspace configuration files\n-->\n<h2 id=\"워크스페이스-환경설정-파일\">워크스페이스 환경설정 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#워크스페이스-환경설정-파일\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAll projects within a workspace share a [CLI configuration context](guide/workspace-config).\nThe top level of the workspace contains workspace-wide configuration files, configuration files for the root-level application, and subfolders for the root-level application source and test files.\n\n| WORKSPACE CONFIG FILES    | PURPOSE |\n| :--------------------- | :------------------------------------------|\n| `.editorconfig`        | Configuration for code editors. See [EditorConfig](https://editorconfig.org/). |\n| `.gitignore`           | Specifies intentionally untracked files that [Git](https://git-scm.com/) should ignore. |\n| `README.md`            | Introductory documentation for the root app. |\n| `angular.json`         | CLI configuration defaults for all projects in the workspace, including configuration options for build, serve, and test tools that the CLI uses, such as [TSLint](https://palantir.github.io/tslint/), [Karma](https://karma-runner.github.io/), and [Protractor](http://www.protractortest.org/). For details, see [Angular Workspace Configuration](guide/workspace-config). |\n| `package.json`          | Configures [npm package dependencies](guide/npm-packages) that are available to all projects in the workspace. See [npm documentation](https://docs.npmjs.com/files/package.json) for the specific format and contents of this file. |\n| `package-lock.json`     | Provides version information for all packages installed into `node_modules` by the npm client. See [npm documentation](https://docs.npmjs.com/files/package-lock.json) for details. If you use the yarn client, this file will be [yarn.lock](https://yarnpkg.com/lang/en/docs/yarn-lock/) instead. |\n| `src/`                  | Source files for the root-level application project. |\n| `node_modules/`         | Provides [npm packages](guide/npm-packages) to the entire workspace. Workspace-wide `node_modules` dependencies are visible to all projects. |\n| `tsconfig.json`         | Default [TypeScript](https://www.typescriptlang.org/) configuration for projects in the workspace. |\n| `tslint.json`           | Default [TSLint](https://palantir.github.io/tslint/) configuration for projects in the workspace. |\n-->\n<p>워크스페이스 안에 있는 모든 프로젝트는 같은 <a href=\"guide/workspace-config\">CLI 환경설정 컨텍스트</a>를 공유합니다.\n그래서 워크스페이스 전역에 적용되는 환경설정 파일과 최상위 애플리케이션의 환경설정 파일은 워크스페이스 최상위 폴더에 위치하며, 그 아래로 최상위 애플리케이션의 소스 파일과 테스트 파일이 위치합니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">워크스페이스 파일</th>\n<th align=\"left\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>.editorconfig</code></td>\n<td align=\"left\">코드 에디터 환경설정 파일입니다. <a href=\"https://editorconfig.org/\">EditConfig</a>를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>.gitignore</code></td>\n<td align=\"left\"><a href=\"https://git-scm.com/\">Git</a>으로 관리하지 않을 파일을 지정합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>README.md</code></td>\n<td align=\"left\">앱 설명 파일입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>angular.json</code></td>\n<td align=\"left\">워크스페이스에 있는 모든 프로젝트에 적용되는 Angular CLI 환경설정파일입니다. Angular CLI로 빌드, 서빙, 테스트할 때 사용하는 <a href=\"https://palantir.github.io/tslint/\">TSLint</a>, <a href=\"https://karma-runner.github.io/\">Karma</a>, <a href=\"http://www.protractortest.org/\">Protractor</a> 설정도 이 파일에 구성합니다. 자세한 내용은 <a href=\"guide/workspace-config\">Angular 워크스페이스 환경설정</a> 문서를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\">워크스페이스에 있는 모든 프로젝트에 적용될 <a href=\"guide/npm-packages\">npm 패키지</a> 목록을 지정합니다. 자세한 내용은 <a href=\"https://docs.npmjs.com/files/package.json\">npm 문서</a>를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>package-lock.json</code></td>\n<td align=\"left\"><code>node_modules</code>에 설치된 패키지들의 버전 정보를 저장합니다. 자세한 내용은 <a href=\"https://docs.npmjs.com/files/package-lock.json\">npm 문서</a>를 참고하세요. 이 파일은 npm을 사용했을 때 생성되며, yarn을 사용한다면 이 파일 대신 <a href=\"https://yarnpkg.com/lang/en/docs/yarn-lock/\">yarn.lock</a> 파일이 생성됩니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>src/</code></td>\n<td align=\"left\">최상위 애플리케이션 프로젝트를 구성하는 소스 파일입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>node_modules/</code></td>\n<td align=\"left\">워크스페이스에 사용할 <a href=\"guide/npm-packages\">npm 패키지</a>가 설치되는 폴더입니다. 이 폴더에 설치한 <a href=\"guide/npm-packages\">npm 패키지</a>는 워크스페이스에 존재하는 모든 프로젝트에 사용할 수 있습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tsconfig.json</code></td>\n<td align=\"left\">워크스페이스에 있는 프로젝트에 적용할 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 환경설정 파일입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tslint.json</code></td>\n<td align=\"left\">워크스페이스에 있는 프로젝트에 적용할 <a href=\"https://palantir.github.io/tslint/\">TSLint</a> 환경설정 파일입니다.</td>\n</tr>\n</tbody>\n</table>\n<!--\n## Application project files\n-->\n<h2 id=\"애플리케이션-프로젝트-파일\">애플리케이션 프로젝트 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#애플리케이션-프로젝트-파일\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nBy default, the CLI command `ng new my-app` creates a workspace folder named \"my-app\" and generates a new application skeleton in a `src/` folder at the top level of the workspace.\nA newly generated application contains source files for a root module, with a root component and template.\n\nWhen the workspace file structure is in place, you can use the `ng generate` command on the command line to add functionality and data to the application.\nThis initial root-level application is the *default app* for CLI commands (unless you change the default after creating [additional apps](#multiple-projects)).\n\n<div class=\"alert is-helpful\">\n\n   Besides using the CLI on the command line, you can also use an interactive development environment like [Angular Console](https://angularconsole.com/), or manipulate files directly in the app's source folder and configuration files.\n\n</div>\n\nFor a single-application workspace, the `src/` subfolder of the workspace contains the source files (application logic, data, and assets) for the root application.\nFor a multi-project workspace, additional projects in the `projects/` folder contain a `project-name/src/` subfolder with the same structure.\n-->\n<p>Angular CLI로 <code>ng new my-app</code> 명령을 실행하면 \"my-app\" 폴더가 생성되며 이 폴더의 <code>src/</code> 폴더에 애플리케이션 기본 코드가 생성됩니다.\n이 때 애플리케이션에는 최상위 모듈과 최상위 컴포넌트 코드, 최상위 컴포넌트의 템플릿도 함께 구성됩니다.</p>\n<p>그리고 워크스페이스 안에서는 <code>ng generate</code> 명령으로 애플리케이션의 구성 요소를 생성할 수 있습니다.\n<code>ng new</code> 명령을 실행했을 때 생성되는 최상위 애플리케이션은 <a href=\"guide/file-structure#multiple-projects\">추가로 앱을 만들어서</a> 변경하지 않는한 Angular CLI가 조작하는 <em>기본 앱</em>입니다.</p>\n<div class=\"alert is-helpful\">\n<p>   커맨드라인에서 Angular CLI를 사용하는 방법 대신 <a href=\"https://angularconsole.com/\">Angular Console</a>로 개발 환경을 조작할 수 있으며, 앱 소스 파일이나 환경설정 파일을 직접 수정해도 됩니다.</p>\n</div>\n<p>워크스페이스에 애플리케이션이 하나만 존재하면 이 애플리케이션이 워크스페이스의 최상위 애플리케이션이며, 애플리케이션을 구성하는 로직, 데이터, 리소스 파일은 <code>src/</code> 폴더 안에 위치합니다.\n그리고 워크스페이스에 프로젝트가 여러개 있다면 <code>projects/</code> 폴더 안에 프로젝트가 위치하며, 이 폴더의  <code>프로젝트-이름/src</code> 폴더에 해당 프로젝트가 구성됩니다.</p>\n<!--\n### Application source files\n-->\n<h3 id=\"애플리케이션-소스-파일\">애플리케이션 소스 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#애플리케이션-소스-파일\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nFiles at the top level of `src/` support testing and running your application. Subfolders contain the application source and application-specific configuration.\n\n| APP SUPPORT FILES    | PURPOSE |\n| :--------------------- | :------------------------------------------|\n| `app/`                 | Contains the component files in which your application logic and data are defined. See details [below](#app-src). |\n| `assets/`              | Contains image and other asset files to be copied as-is when you build your application. |\n| `environments/`        | Contains build configuration options for particular target environments. By default there is an unnamed standard development environment and a production (\"prod\") environment. You can define additional target environment configurations. |\n| `favicon.ico`          | An icon to use for this application in the bookmark bar. |\n| `index.html`           | The main HTML page that is served when someone visits your site. The CLI automatically adds all JavaScript and CSS files when building your app, so you typically don't need to add any `<script>` or` <link>` tags here manually. |\n| `main.ts`              | The main entry point for your application. Compiles the application with the [JIT compiler](https://angular.io/guide/glossary#jit) and bootstraps the application's root module (AppModule) to run in the browser. You can also use the [AOT compiler](https://angular.io/guide/aot-compiler) without changing any code by appending the `--aot` flag to the CLI `build` and `serve` commands. |\n| `polyfills.ts`         | Provides polyfill scripts for browser support. |\n| `styles.sass`          | Lists CSS files that supply styles for a project. The extension reflects the style preprocessor you have configured for the project. |\n| `test.ts`              | The main entry point for your unit tests, with some Angular-specific configuration. You don't typically need to edit this file. |\n\n<a id=\"app-src\"></a>\n\nInside the `src/` folder, the `app/` folder contains your project's logic and data.\nAngular components, templates, and styles go here.\n\n| `src/app/` FILES | PURPOSE |\n| :-------------------------- | :------------------------------------------|\n| `app/app.component.ts`      | Defines the logic for the app's root component, named `AppComponent`. The view associated with this root component becomes the root of the [view hierarchy](guide/glossary#view-hierarchy) as you add components and services to your application. |\n| `app/app.component.html`    | Defines the HTML template associated with the root `AppComponent`. |\n| `app/app.component.css`     | Defines the base CSS stylesheet for the root `AppComponent`. |\n| `app/app.component.spec.ts` | Defines a unit test for the root `AppComponent`. |\n| `app/app.module.ts`         | Defines the root module, named `AppModule`, that tells Angular how to assemble the application. Initially declares only the `AppComponent`. As you add more components to the app, they must be declared here. |\n-->\n<p><code>src/</code> 폴더에는 애플리케이션을 실행하거나 테스트할 때 필요한 파일들이 존재합니다.\n그리고 이 폴더의 하위 폴더에는 해당 애플리케이션에만 적용되는 환경설정 파일이나 애플리케이션을 구성하는 파일이 존재합니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">앱 지원 파일</th>\n<th align=\"left\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>app/</code></td>\n<td align=\"left\">애플리케이션 로직과 데이터를 관리하는 컴포넌트 파일이 구성됩니다. 자세한 내용은 <a href=\"guide/file-structure#app-src\">아래</a>를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>assets/</code></td>\n<td align=\"left\">애플리케이션을 빌드할 때 그대로 복사할 이미지 파일이나 리소스 파일이 존재합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>environments/</code></td>\n<td align=\"left\">환경에 맞게 적용될 빌드 환경설정 옵션이 존재합니다. 아무 접미사 없는 파일이 기본으로 적용되는 파일이며, 운영용 빌드 환경설정 파일은 \"prod\" 접미사가 붙습니다. 추가로 필요하면 다른 빌드 환경설정을 추가할 수도 있습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>favicon.ico</code></td>\n<td align=\"left\">애플리케이션이 즐겨찾기에 추가될 때 표시될 아이콘입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>index.html</code></td>\n<td align=\"left\">웹사이트에 접근한 사용자가 보게 되는 메인 HTML 파일입니다. 앱에 사용되는 JavaScript 파일과 CSS 파일은 Angular CLI가 빌드시점에 자동으로 <code>index.html</code> 파일에 추가하기 때문에 <code>&#x3C;script></code> 태그나 <code>&#x3C;link></code> 태그를 수동으로 작성할 필요는 없습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>main.ts</code></td>\n<td align=\"left\">애플리케이션이 시작되는 진입 파일입니다. <a href=\"https://angular.io/guide/glossary#jit\">JIT 컴파일러</a>를 사용하면 이 파일에 있는 최상위 모듈(AppModule)을 시작으로 브라우저에서 실행할 애플리케이션을 빌드하며, <a href=\"https://angular.io/guide/aot-compiler\">AOT 컴파일러</a>를 사용할 때도 마찬가지입니다. Angular CLI <code>build</code> 명령이나 <code>serve</code> 명령을 실행할 때 <code>--aot</code> 플래그를 붙이면 AOT 컴파일러를 사용할 수 있습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>polyfills.ts</code></td>\n<td align=\"left\">오래된 브라우저를 지원하기 위한 폴리필 스크립트를 작성합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>styles.sass</code></td>\n<td align=\"left\">프로젝트에 적용될 CSS 파일 목록을 지정합니다. 프로젝트에 지정된 기본 스타일 전처리기에 따라서 확장자가 달라질 수 있습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>test.ts</code></td>\n<td align=\"left\">유닛 테스트를 실행할 때 진입점이 될 파일입니다. 이 파일은 수정할 일이 거의 없습니다.</td>\n</tr>\n</tbody>\n</table>\n<a id=\"app-src\"></a>\n<p>그리고 <code>src/app/</code> 폴더에는 프로젝트 로직과 데이터를 관리하는 파일들이 위치합니다.\nAngular 컴포넌트 코드와 템플릿, 스타일 파일도 <code>app/</code> 폴더 안에 구성됩니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><code>src/app/</code> 파일</th>\n<th align=\"left\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>app/app.component.ts</code></td>\n<td align=\"left\">앱 최상위 컴포넌트 <code>AppComponent</code>를 정의합니다. 사용자가 보는 화면은 이 최상위 컴포넌트를 기준으로 구성된 <a href=\"guide/glossary#view-hierarchy\">뷰 계층</a>이며, 개발자가 구현한 컴포넌트와 서비스도 최상위 컴포넌트 안에서 동작합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app/app.component.html</code></td>\n<td align=\"left\">최상위 컴포넌트 <code>AppComponent</code>의 HTML 템플릿을 정의합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app/app.component.css</code></td>\n<td align=\"left\">최상위 컴포넌트 <code>AppComponent</code>의 CSS 스타일을 정의합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app/app.component.spec.ts</code></td>\n<td align=\"left\">최상위 컴포넌트 <code>AppComponent</code>의 유닛 테스트 스펙을 정의합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>app/app.module.ts</code></td>\n<td align=\"left\">애플리케이션 구성이 시작될 최상위 모듈 <code>AppModule</code>을 정의합니다. 프로젝트를 생성한 시점에는 <code>AppComponent</code>만 존재하지만, 앱이 커질수록 컴포넌트도 계속 늘어날 것입니다.</td>\n</tr>\n</tbody>\n</table>\n<a id=\"application-configuration-files\"></a>\n<!--\n### Application configuration files\n-->\n<h3 id=\"애플리케이션-환경설정-파일\">애플리케이션 환경설정 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#애플리케이션-환경설정-파일\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe application-specific configuration files for the root application reside at the workspace root level.\nFor a multi-project workspace, project-specific configuration files are in the project root, under `projects/project-name/`.\n\nProject-specific [TypeScript](https://www.typescriptlang.org/) configuration files inherit from the workspace-wide `tsconfig.json`, and project-specific [TSLint](https://palantir.github.io/tslint/) configuration files inherit from the workspace-wide `tslint.json`.\n\n| APPLICATION-SPECIFIC CONFIG FILES    | PURPOSE |\n| :--------------------- | :------------------------------------------|\n| `browserslist`         | Configures sharing of target browsers and Node.js versions among various front-end tools. See [Browserslist on GitHub](https://github.com/browserslist/browserslist) for more information.  |\n| `karma.conf.js`      | Application-specific [Karma](https://karma-runner.github.io/2.0/config/configuration-file.html) configuration. |\n| `tsconfig.app.json`    | Application-specific [TypeScript](https://www.typescriptlang.org/) configuration, including TypeScript and Angular template compiler options. See [TypeScript Configuration](guide/typescript-configuration) and [Angular Compiler Options](guide/angular-compiler-options). |\n| `tsconfig.spec.json`   | [TypeScript](https://www.typescriptlang.org/) configuration for the application tests. See [TypeScript Configuration](guide/typescript-configuration). |\n| `tslint.json`          | Application-specific [TSLint](https://palantir.github.io/tslint/) configuration. |\n-->\n<p>최상위 애플리케이션과 관련된 환경설정 파일은 워크스페이스 최상위 폴더에 위치합니다.\n그리고 워크스페이스에 프로젝트가 여러개 있다면 각 프로젝트 환경설정 파일은 <code>projects/프로젝트-이름</code> 폴더 아래 위치합니다.</p>\n<p>개별 프로젝트에 적용될 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 환경설정 파일은 워크스페이스 전역 <code>tsconfig.json</code> 파일을 상속받으며, <a href=\"https://palantir.github.io/tslint/\">TSLint</a> 환경설정 파일은 워크스페이스 전역 <code>tslint.json</code> 파일을 상속받습니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">애플리케이션 환경설정 파일</th>\n<th align=\"left\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>browserslist</code></td>\n<td align=\"left\">지원할 브라우저와 Node.js 버전을 지정합니다. 자세한 내용은 <a href=\"https://github.com/browserslist/browserslist\">GitHub에 있는 Browserlist 문서</a>를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>karma.conf.js</code></td>\n<td align=\"left\"><a href=\"https://karma-runner.github.io/2.0/config/configuration-file.html\">Karma</a> 실행 환경을 구성합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tsconfig.app.json</code></td>\n<td align=\"left\"><a href=\"https://www.typescriptlang.org/\">TypeScript</a> 환경설정 파일입니다. 애플리케이션에 사용될 TypeScript 문법 옵션과 Angular 템플릿 컴파일러 옵션을 지정합니다. 자세한 내용은 <a href=\"guide/typescript-configuration\">TypeScript 환경설정</a> 문서와 <a href=\"guide/angular-compiler-options\">Angular 컴파일러 옵션</a> 문서를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tsconfig.spec.json</code></td>\n<td align=\"left\">애플리케이션을 테스트할 때 사용할 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 환경을 구성합니다. 자세한 내용은 <a href=\"guide/typescript-configuration\">TypeScript 환경설정</a> 문서를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tslint.json</code></td>\n<td align=\"left\"><a href=\"https://palantir.github.io/tslint/\">TSLint</a> 환경을 구성합니다.</td>\n</tr>\n</tbody>\n</table>\n<!--\n### End-to-end test files\n-->\n<h3 id=\"엔드-투-엔드-테스트-파일\">엔드-투-엔드 테스트 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#엔드-투-엔드-테스트-파일\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAn `e2e/` folder at the top level contains source files for a set of end-to-end tests that correspond to the root-level application, along with test-specific configuration files.\n\nFor a multi-project workspace, application-specific end-to-end tests are in the project root, under `projects/project-name/e2e/`.\n\n<code-example language=\"none\">\n  e2e/\n     src/                 (end-to-end tests for my-app)\n        app.e2e-spec.ts\n        app.po.ts\n      protractor.conf.js  (test-tool config)\n      tsconfig.json       (TypeScript config inherits from workspace)\n</code-example>\n-->\n<p><code>e2e/</code> 폴더에는 최상위 애플리케이션을 대상으로 엔드-투-엔드 테스트를 실행할 때 필요한 파일들이 존재합니다.</p>\n<p>워크스페이스에 프로젝트가 여러개 존재한다면 특정 프로젝트에 적용될 테스트 관련 파일이 <code>projects/프로젝트-이름/e2e/</code>에 존재합니다.</p>\n<code-example language=\"none\">\n  e2e/\n     src/                 (my-app 엔드-투-엔드 테스트 스펙)\n        app.e2e-spec.ts\n        app.po.ts\n      protractor.conf.js  (테스트 환경설정)\n      tsconfig.json       (워크스페이스에서 상속받은 TypeScript 환경설정)\n</code-example>\n<a id=\"multiple-projects\"></a>\n<!--\n## Multiple projects\n-->\n<h2 id=\"프로젝트가-여러개인-경우\">프로젝트가 여러개인 경우<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#프로젝트가-여러개인-경우\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA multi-project workspace is suitable for an enterprise that uses a single repository and global configuration for all Angular projects (the \"monorepo\" model). A multi-project workspace also supports library development.\n-->\n<p>레파지토리 하나에서 프로젝트 여러개를 관리하고 모든 프로젝트에 같은 환경설정을 적용한다면 이런 구성을 해보는 것도 좋습니다.\n이 패턴은 라이브러리를 개발하는 경우에도 좋습니다.</p>\n<!--\n### Setting up for a multi-project workspace\n-->\n<h3 id=\"프로젝트가-여러개인-워크스페이스-구성하기\">프로젝트가 여러개인 워크스페이스 구성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#프로젝트가-여러개인-워크스페이스-구성하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIf you intend to have multiple projects in a workspace, you can skip the initial application generation when you create the workspace, and give the workspace a unique name.\nThe following command creates a workspace with all of the workspace-wide configuration files, but no root-level application.\n\n<code-example language=\"bash\">\nng new my-workspace --createApplication=\"false\"\n</code-example>\n\nYou can then generate apps and libraries with names that are unique within the workspace.\n\n<code-example language=\"bash\">\ncd my-workspace\nng generate application my-first-app\n</code-example>\n-->\n<p>워크스페이스에 프로젝트를 여러개 구성한다면 워크스페이스를 생성할 때 기본으로 생성되는 애플리케이션 생성을 생략할 수 있습니다.\n최상위 애플리케이션 없이 워크스페이스를 생성하려면 다음 명령을 실행하면 됩니다.</p>\n<code-example language=\"bash\">\nng new my-workspace --createApplication=\"false\"\n</code-example>\n<p>그리고 다음 명령을 실행하면 워크스페이스 안에 라이브러리 프로젝트를 생성할 수 있습니다.</p>\n<code-example language=\"bash\">\ncd my-workspace\nng generate application my-first-app\n</code-example>\n<!--\n### Multiple project file structure\n-->\n<h3 id=\"프로젝트가-여러개인-워크스페이스의-파일-구조\">프로젝트가 여러개인 워크스페이스의 파일 구조<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#프로젝트가-여러개인-워크스페이스의-파일-구조\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe first explicitly generated application goes into the `projects/` folder along with all other projects in the workspace.\nNewly generated libraries are also added under `projects/`.\nWhen you create projects this way, the file structure of the workspace is entirely consistent with the structure of the [workspace configuration file](guide/workspace-config), `angular.json`.\n\n<code-example language=\"none\">\nmy-workspace/\n  ...             (workspace-wide config files)\n  projects/       (generated applications and libraries)\n    my-first-app/ --(an explicitly generated application)\n      ...         --(application-specific config)\n      e2e/        ----(corresponding e2e tests)\n         src/     ----(e2e tests source)\n         ...      ----(e2e-specific config)\n      src/        --(source and support files for application)\n    my-lib/       --(a generated library)\n      ...         --(library-specific config)\n      src/        --source and support files for library)\n</code-example>\n-->\n<p>위 명령을 실행해서 애플리케이션을 생성하면 <code>projects/</code> 폴더 안에 새로운 애플리케이션이 생성됩니다.\n그리고 애플리케이션이 아니라 라이브러리를 생성할 때도 마찬가지로 <code>projects/</code> 폴더 안에 생성됩니다.\n이 때 <a href=\"guide/workspace-config\">워크스페이스 환경설정 파일</a> <code>angular.json</code> 파일에도 새로 추가된 프로젝트와 관련된 설정이 추가됩니다.</p>\n<code-example language=\"none\">\nmy-workspace/\n  ...             (워크스페이스 환경설정 파일)\n  projects/       (새로 생성한 애플리케이션이나 라이브러리)\n    my-first-app/ --(새로 생성한 애플리케이션)\n      ...         --(애플리케이션 환경설정 파일)\n      e2e/        ----(e2e 테스트 관련 파일)\n         src/     ----(e2e 테스트 소스)\n         ...      ----(e2e 환경설정 파일)\n      src/        --(애플리케이션 소스 파일)\n    my-lib/       --(새로 생성한 라이브러리)\n      ...         --(라이브러리 환경설정 파일)\n      src/        --(라이브러리 소스 파일)\n</code-example>\n<a id=\"library-project-files\"></a>\n<!--\n## Library project files\n-->\n<h2 id=\"라이브러리-프로젝트-파일-구조\">라이브러리 프로젝트 파일 구조<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/file-structure#라이브러리-프로젝트-파일-구조\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhen you generate a library using the CLI (with a command such as `ng generate library my-lib`), the generated files go into the projects/ folder of the workspace. For more information about creating your own libraries, see  [Creating Libraries](https://angular.io/guide/creating-libraries).\n\nLibraries (unlike applications and their associated e2e projects) have their own `package.json` configuration files.\n\nUnder the `projects/` folder, the `my-lib` folder contains your library code.\n\n| LIBRARY SOURCE FILES | PURPOSE                                                                      |\n| :------------------- | :----------------------------------------------------------------------------|\n| `src/lib`           |  Contains your library project's logic and data. Like an application project, a library project can contain components, services, modules, directives, and pipes.                                                            |\n| `src/test.ts`       | The main entry point for your unit tests, with some library-specific configuration. You don't typically need to edit this file.                                                                                            |\n| `src/public-api.ts`  | Specifies all files that are exported from your library.                                                                                                                                                                     |\n| `karma.conf.js`      | Library-specific [Karma](https://karma-runner.github.io/2.0/config/configuration-file.html) configuration.                                                                                                                   |\n| `ng-package.json`    | Configuration file used by [ng-packagr](https://github.com/ng-packagr/ng-packagr) for building your library.                                                                                                                 |\n| `package.json`       | Configures [npm package dependencies](guide/npm-packages) that are required for this library.                                                                                                                                |\n| `tsconfig.lib.json`  | Library-specific [TypeScript](https://www.typescriptlang.org/) configuration, including TypeScript and Angular template compiler options. See [TypeScript Configuration](guide/typescript-configuration).            |\n| `tsconfig.spec.json` | [TypeScript](https://www.typescriptlang.org/) configuration for the library tests. See [TypeScript Configuration](guide/typescript-configuration).                                                                     |\n| `tslint.json`        | Library-specific [TSLint](https://palantir.github.io/tslint/) configuration. |\n-->\n<p>Angular CLI로 <code>ng generate library my-lib</code> 명령을 실행하면 이 라이브러리는 워크스페이스 <code>projects/</code> 폴더 아래에 생성됩니다.\n자세한 내용은 <a href=\"guide/creating-libraries\">라이브러리 만들기</a> 문서를 참고하세요.</p>\n<p>라이브러리 프로젝트에는 애플리케이션 프로젝트나 e2e 프로젝트와는 다르게 독립적인 <code>package.json</code> 환경설정 파일이 존재합니다.</p>\n<p><code>projects/</code> 폴더 아래 생성되는 <code>my-lib</code> 폴더는 다음과 같이 구성됩니다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">라이브러리 소스 파일</th>\n<th align=\"left\">용도</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>src/lib</code></td>\n<td align=\"left\">라이브러리 로직과 데이터를 관리하는 파일들이 존재합니다. 애플리케이션 프로젝트와 비슷하게 라이브러리 프로젝트도 컴포넌트,서비스, 모듈, 디렉티브, 파이프로 구성할 수 있습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>src/test.ts</code></td>\n<td align=\"left\">라이브러리를 대상으로 유닛 테스트를 실행할 때 진입점이 되는 파일입니다. 이 파일을 수정할 일은 거의 없습니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>src/public-api.ts</code></td>\n<td align=\"left\">라이브러리가 외부로 공개할 API를 지정합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>karma.conf.js</code></td>\n<td align=\"left\"><a href=\"https://karma-runner.github.io/2.0/config/configuration-file.html\">Karma</a> 환경설정 파일입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>ng-package.json</code></td>\n<td align=\"left\">라이브러리를 빌드할 때 사용하는 <a href=\"https://github.com/ng-packagr/ng-packagr\">ng-packagr</a> 환경설정 파일입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>package.json</code></td>\n<td align=\"left\"><a href=\"guide/npm-packages\">npm 의존 패키지</a> 목록을 지정하는 파일입니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tsconfig.lib.json</code></td>\n<td align=\"left\"><a href=\"https://www.typescriptlang.org/\">TypeScript</a> 환경설정 파일입니다. 라이브러리에 사용될 TypeScript 문법 옵션과 Angular 템플릿 컴파일러 옵션을 지정합니다. 자세한 내용은 <a href=\"guide/typescript-configuration\">TypeScript 환경설정</a> 문서를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tsconfig.spec.json</code></td>\n<td align=\"left\">라이브러리를 테스트할 때 사용할 <a href=\"https://www.typescriptlang.org/\">TypeScript</a> 환경설정 파일입니다. 자세한 내용은 <a href=\"guide/typescript-configuration\">TypeScript 환경설정</a> 문서를 참고하세요.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>tslint.json</code></td>\n<td align=\"left\"><a href=\"https://palantir.github.io/tslint/\">TSLint</a> 환경설정 파일입니다.</td>\n</tr>\n</tbody>\n</table>\n\n</div>\n\n<!-- links to this doc:\n - cli\n - guide/architecture-next-steps\n - guide/creating-libraries\n - guide/deployment\n - guide/glossary\n - guide/setup-local\n - guide/typescript-configuration\n - guide/upgrade-setup\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - guide/angular-compiler-options\n - guide/creating-libraries\n - guide/file-structure#app-src\n - guide/file-structure#multiple-projects\n - guide/file-structure#라이브러리-프로젝트-파일-구조\n - guide/file-structure#애플리케이션-소스-파일\n - guide/file-structure#애플리케이션-프로젝트-파일\n - guide/file-structure#애플리케이션-환경설정-파일\n - guide/file-structure#엔드-투-엔드-테스트-파일\n - guide/file-structure#워크스페이스-프로젝트-파일-구조\n - guide/file-structure#워크스페이스-환경설정-파일\n - guide/file-structure#프로젝트가-여러개인-경우\n - guide/file-structure#프로젝트가-여러개인-워크스페이스-구성하기\n - guide/file-structure#프로젝트가-여러개인-워크스페이스의-파일-구조\n - guide/glossary#library\n - guide/glossary#project\n - guide/glossary#view-hierarchy\n - guide/glossary#workspace\n - guide/npm-packages\n - guide/typescript-configuration\n - guide/workspace-config\n - http://www.protractortest.org/\n - https://angular.io/guide/aot-compiler\n - https://angular.io/guide/glossary#jit\n - https://angularconsole.com/\n - https://docs.npmjs.com/files/package-lock.json\n - https://docs.npmjs.com/files/package.json\n - https://editorconfig.org/\n - https://git-scm.com/\n - https://github.com/angular/angular/edit/master/aio/content/guide/file-structure.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/browserslist/browserslist\n - https://github.com/ng-packagr/ng-packagr\n - https://karma-runner.github.io/\n - https://karma-runner.github.io/2.0/config/configuration-file.html\n - https://palantir.github.io/tslint/\n - https://www.typescriptlang.org/\n - https://yarnpkg.com/lang/en/docs/yarn-lock/\n-->"
}