{
  "id": "guide/template-reference-variables",
  "title": "Template reference variables (#var)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-reference-variables.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"template-reference-variables-var\">Template reference variables (<code>#var</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-reference-variables-var\"><i class=\"material-icons\">link</i></a></h1>\n<p>A <strong>template reference variable</strong> is often a reference to a DOM element within a template.\nIt can also refer to a directive (which contains a component), an element, <a href=\"api/core/TemplateRef\">TemplateRef</a>, or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<p>Use the hash symbol (#) to declare a reference variable.\nThe following reference variable, <code>#phone</code>, declares a <code>phone</code> variable on an <code>&#x3C;input></code> element.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>You can refer to a template reference variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- 다른 엘리먼트들 -->\n\n&#x3C;!-- input 엘리먼트는 이벤트 핸들러에 phone 엘리먼트의 `value`를 전달합니다. -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<p>Angular assigns each template reference variable a value based on where you declare the variable:</p>\n<ul>\n<li>If you declare the variable on a component, the variable refers to the component instance.</li>\n<li>If you declare the variable on a standard HTML tag, the variable refers to the element.</li>\n<li>If you declare the variable on an <code>&#x3C;ng-template></code> element, the variable refers to a <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> instance, which represents the template.</li>\n<li>If the variable specifies a name on the right-hand side, such as <code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>, the variable refers to the directive or component on the element with a matching <code>exportAs</code> name.</li>\n</ul>\n<h3 class=\"no-toc\" id=\"how-a-reference-variable-gets-its-value\">How a reference variable gets its value<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#how-a-reference-variable-gets-its-value\"><i class=\"material-icons\">link</i></a></h3>\n<p>In most cases, Angular sets the reference variable's value to the element on which it is declared.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n<p>The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive can change that behavior and set the value to something else. In the following example, the template reference variable, <code>itemForm</code>, appears three times separated\nby HTML.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\"\n    >Name &#x3C;input class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;/label>\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p>The reference value of <code>itemForm</code>, without the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> attribute value, would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>.\nThere is, however, a difference between a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> in that a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nwill be referenced without specifying the attribute value, and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> will not\nchange the implicit reference (that is, the element).</p>\n<p>However, with <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code>, <code>itemForm</code> is a reference to the <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a>\ndirective with the ability to track the value and validity of every control in the form.</p>\n<p>The native <code>&#x3C;form></code> element doesn't have a <code>form</code> property, but the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive does, which allows disabling the submit button\nif the <code>itemForm.form.valid</code> is invalid and passing the entire form control tree\nto the parent component's <code>onSubmit()</code> method.</p>\n<h3 class=\"no-toc\" id=\"template-reference-variable-considerations\">Template reference variable considerations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#template-reference-variable-considerations\"><i class=\"material-icons\">link</i></a></h3>\n<p>A template <em>reference</em> variable (<code>#phone</code>) is not the same as a template <em>input</em> variable (<code>let phone</code>) such as in an <a href=\"guide/built-in-directives#template-input-variable\"><code>*ngFor</code></a>.\nSee <a href=\"guide/structural-directives#template-input-variable\"><em>Structural directives</em></a> for more information.</p>\n<p>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</p>\n<h3 id=\"alternative-syntax\">Alternative syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#alternative-syntax\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can use the <code>ref-</code> prefix alternative to <code>#</code>.\nThis example declares the <code>fax</code> variable as <code>ref-fax</code> instead of <code>#fax</code>.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-fax\" header=\"src/app/app.component.html\">\n&#x3C;input ref-fax placeholder=\"fax number\" />\n&#x3C;button (click)=\"callFax(fax.value)\">Fax&#x3C;/button>\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgForOf\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/structural-directives\n - guide/template-statements\n - guide/template-syntax\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Directive\n - api/core/TemplateRef\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives#template-input-variable\n - guide/structural-directives#template-input-variable\n - guide/template-reference-variables#alternative-syntax\n - guide/template-reference-variables#how-a-reference-variable-gets-its-value\n - guide/template-reference-variables#template-reference-variable-considerations\n - guide/template-reference-variables#template-reference-variables-var\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-reference-variables.md?message=docs%3A%20describe%20your%20change...\n-->"
}