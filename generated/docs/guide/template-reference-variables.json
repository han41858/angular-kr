{
  "id": "guide/template-reference-variables",
  "title": "템플릿 참조 변수 (#var)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-reference-variables.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Template reference variables (`#var`)\n-->\n<h1 id=\"템플릿-참조-변수-var\">템플릿 참조 변수 (<code>#var</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#템플릿-참조-변수-var\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nA **template reference variable** is often a reference to a DOM element within a template.\nIt can also refer to a directive (which contains a component), an element, [TemplateRef](api/core/TemplateRef), or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.\n\n<div class=\"alert is-helpful\">\n\nSee the <live-example></live-example> for a working example containing the code snippets in this guide.\n\n</div>\n\nUse the hash symbol (#) to declare a reference variable.\nThe following reference variable, `#phone`, declares a `phone` variable on an `<input>` element.\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=&quot;phone number&quot; /&gt;\n\n</code-example>\n\nYou can refer to a template reference variable anywhere in the component's template.\nHere, a `<button>` further down the template refers to the `phone` variable.\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&lt;input #phone placeholder=&quot;phone number&quot; /&gt;\n\n&lt;!-- 다른 엘리먼트들 --&gt;\n\n&lt;!-- input 엘리먼트는 이벤트 핸들러에 phone 엘리먼트의 `value`를 전달합니다. --&gt;\n&lt;button (click)=&quot;callPhone(phone.value)&quot;&gt;Call&lt;/button&gt;\n\n</code-example>\n\nAngular assigns each template reference variable a value based on where you declare the variable:\n\n* If you declare the variable on a component, the variable refers to the component instance.\n* If you declare the variable on a standard HTML tag, the variable refers to the element.\n* If you declare the variable on an `<ng-template>` element, the variable refers to a `TemplateRef` instance, which represents the template.\n* If the variable specifies a name on the right-hand side, such as `#var=\"ngModel\"`, the variable refers to the directive or component on the element with a matching `exportAs` name.\n-->\n<p><strong>템플릿 참조 변수(template reference variable)</strong>는 템플릿 안에서 DOM 엘리먼트를 참조할 때 사용합니다.\n이 때 참조하는 대상은 디렉티브(컴포넌트 포함)일 수 있으며, 표준 엘리먼트일 수도 있고 <a href=\"api/core/TemplateRef\">TemplateRef</a>나 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">웹 컴포넌트</a>일수도 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<p>템플릿에서 해시 기호(<code>#</code>)를 사용하면 템플릿 참조 변수를 선언할 수 있습니다.\n그래서 <code>&#x3C;input></code> 엘리먼트에 <code>#phone</code>라고 선언하면 이 엘리먼트를 <code>phone</code>라는 변수로 참조할 수 있습니다.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>이렇게 선언한 템플릿 참조 변수는 컴포넌트 템플릿 범위 어디에서도 자유롭게 참조할 수 있습니다.\n예제 코드에서는 템플릿 아래쪽 <code>&#x3C;button></code> 엘리먼트에서 <code>phone</code> 변수를 사용하도록 작성했습니다.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- 다른 엘리먼트들 -->\n\n&#x3C;!-- input 엘리먼트는 이벤트 핸들러에 phone 엘리먼트의 `value`를 전달합니다. -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<p>템플릿 참조 변수는 선언된 곳에 따라 다른 타입을 가리킵니다:</p>\n<ul>\n<li>컴포넌트에 선언하면 컴포넌트 인스턴스를 가리킵니다.</li>\n<li>표준 HTML 태그에 선언하면 엘리먼트를 가리킵니다.</li>\n<li><code>&#x3C;ng-template></code> 엘리먼트에 선언하면 템플릿을 표현하는 <code><a href=\"api/core/TemplateRef\" class=\"code-anchor\">TemplateRef</a></code> 인스턴스를 가리킵니다.</li>\n<li><code>#var=\"<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>\"</code>과 같이 등호 오른쪽에 이름을 붙여 선언하면 엘리먼트에 사용된 디렉티브(컴포넌트)에서 <code>exportAs</code>에 해당되는 변수를 가리킵니다.</li>\n</ul>\n<!--\n<h3 class=\"no-toc\">How a reference variable gets its value</h3>\n\nIn most cases, Angular sets the reference variable's value to the element on which it is declared.\nIn the previous example, `phone` refers to the phone number `<input>`.\nThe button's click handler passes the `<input>` value to the component's `callPhone()` method.\n\nThe `NgForm` directive can change that behavior and set the value to something else. In the following example, the template reference variable, `itemForm`, appears three times separated\nby HTML.\n\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&lt;form #itemForm=&quot;ngForm&quot; (ngSubmit)=&quot;onSubmit(itemForm)&quot;&gt;\n  &lt;label for=&quot;name&quot;\n    &gt;Name &lt;input class=&quot;form-control&quot; name=&quot;name&quot; ngModel required /&gt;\n  &lt;/label&gt;\n  &lt;button type=&quot;submit&quot;&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n\n&lt;div [hidden]=&quot;!itemForm.form.valid&quot;&gt;\n  &lt;p&gt;{{ submitMessage }}&lt;/p&gt;\n&lt;/div&gt;\n\n\n</code-example>\n\nThe reference value of `itemForm`, without the `ngForm` attribute value, would be\nthe [HTMLFormElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement).\nThere is, however, a difference between a `Component` and a `Directive` in that a `Component`\nwill be referenced without specifying the attribute value, and a `Directive` will not\nchange the implicit reference (that is, the element).\n\n\n\nHowever, with `NgForm`, `itemForm` is a reference to the [NgForm](api/forms/NgForm \"API: NgForm\")\ndirective with the ability to track the value and validity of every control in the form.\n\nThe native `<form>` element doesn't have a `form` property, but the `NgForm` directive does, which allows disabling the submit button\nif the `itemForm.form.valid` is invalid and passing the entire form control tree\nto the parent component's `onSubmit()` method.\n-->\n<h3 class=\"no-toc\" id=\"템플릿-참조-변수가-값을-가져오는-방식\">템플릿 참조 변수가 값을 가져오는 방식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#템플릿-참조-변수가-값을-가져오는-방식\"><i class=\"material-icons\">link</i></a></h3>\n<p>일반적으로 엘리먼트에 템플릿 참조 변수를 선언하면 Angular는 해당 엘리먼트를 가리키도록 템플릿 참조 변수를 선언합니다.\n이전 예제에서도 <code>phone</code>은 전화번호를 입력받는 <code>&#x3C;input></code> 엘리먼트를 가리키며, 버튼을 클릭하면 이벤트 핸들러가 <code>&#x3C;input></code> 엘리먼트의 값을 컴포넌트 <code>callPhone()</code> 메서드로 전달하는 방식으로 작성되었습니다.</p>\n<p><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 디렉티브를 활용하면 원하는 동작을 추가하거나 폼 값을 다른 곳에 전달할 수 있습니다.\n아래 예제에서 선언된 템플릿 참조 변수 <code>itemForm</code>는 HTML 문서에 3번 사용되었습니다.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\"\n    >Name &#x3C;input class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;/label>\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a></code> 없이 <code>#itemForm</code>라고만 선언하면 이 템플릿 참조 변수는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>를 가리킵니다.\n이 때 템플릿 참조 변수는 컴포넌트와 디렉티브에 사용되었을 때 동작이 약간 다르다는 것에 주의해야 합니다.\n템플릿 참조 변수를 컴포넌트에 선언하면 어트리뷰트 이름을 지정하지 않아도 컴포넌트를 참조할 수 있지만, 디렉티브에 선언할 때 어트리뷰트 이름을 지정하지 않으면 디렉티브가 아니라 엘리먼트 자체를 가리킵니다.</p>\n<p><code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code>를 활용하는 방식으로 <code>itemForm</code>을 선언하면 이 템플릿 참조 변수는 <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a> 디렉티브를 가리킵니다.\n이렇게 작성해야 폼이 관리하는 데이터를 참조할 수 있으며 폼 유효성도 검사할 수 있습니다.</p>\n<p>표준 엘리먼트 <code>&#x3C;form></code>에는 <code>form</code>라는 프로퍼티가 존재하지 않습니다.\n하지만 <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> 디렉티브에는 <code>form</code> 프로퍼티가 존재하며, 이 프로퍼티를 참조해서 제출 버튼을 비활성화하는 <code>itemForm.form.valid</code>라는 표현을 사용할 수 있고, 폼이 제출되었을 때 컴포넌트 <code>onSubmit()</code> 메서드로 폼 트리 전체를 전달할 수 있습니다.</p>\n<!--\n<h3 class=\"no-toc\">Template reference variable considerations</h3>\n\nA template _reference_ variable (`#phone`) is not the same as a template _input_ variable (`let phone`) such as in an [`*ngFor`](guide/built-in-directives#template-input-variable).\nSee [_Structural directives_](guide/structural-directives#template-input-variable) for more information.\n\nThe scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.\n-->\n<h3 class=\"no-toc\" id=\"템플릿-참조-변수를-선언할-때-주의해야-할-점\">템플릿 참조 변수를 선언할 때 주의해야 할 점<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#템플릿-참조-변수를-선언할-때-주의해야-할-점\"><i class=\"material-icons\">link</i></a></h3>\n<p>템플릿 <em>참조</em> 변수(<code>#phone</code>)는 <a href=\"guide/built-in-directives#template-input-variable\"><code>*ngFor</code></a> 안에 사용된 템플릿 <em>입력</em> 변수(<code>let phone</code>)와는 다릅니다.\n자세한 내용은 <a href=\"guide/structural-directives#template-input-variable\"><em>구조 디렉티브</em></a> 문서를 참고하세요.</p>\n<p>템플릿 참조 변수는 템플릿 어디에서도 접근할 수 있습니다.\n그래서 한 템플릿 안에 같은 이름으로 템플릿 참조 변수를 여러개 선언하면 오류는 발생하지 않더라도 예상치 못한 동작할 수 있으니 주의해야 합니다.</p>\n<!--\n### Alternative syntax\n-->\n<h3 id=\"대체-문법\">대체 문법<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-reference-variables#대체-문법\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can use the `ref-` prefix alternative to `#`.\nThis example declares the `fax` variable as `ref-fax` instead of `#fax`.\n-->\n<p><code>#</code> 대신 <code>ref-</code> 접두사를 활용하는 방법도 있습니다.\n아래 예제에서 <code>ref-fax</code>라고 작성된 코드는 템플릿 참조 변수 <code>fax</code>를 선언하기 위해 <code>#fax</code>라고 작성한 것과 같은 역할을 합니다.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-fax\" header=\"src/app/app.component.html\">\n&#x3C;input ref-fax placeholder=\"fax number\" />\n&#x3C;button (click)=\"callFax(fax.value)\">Fax&#x3C;/button>\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgForOf\n - guide/forms\n - guide/glossary\n - guide/inputs-outputs\n - guide/structural-directives\n - guide/template-statements\n - guide/template-syntax\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/core/TemplateRef\n - api/forms/NgForm\n - api/forms/NgModel\n - guide/built-in-directives#template-input-variable\n - guide/structural-directives#template-input-variable\n - guide/template-reference-variables#대체-문법\n - guide/template-reference-variables#템플릿-참조-변수-var\n - guide/template-reference-variables#템플릿-참조-변수가-값을-가져오는-방식\n - guide/template-reference-variables#템플릿-참조-변수를-선언할-때-주의해야-할-점\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-reference-variables.md?message=docs%3A%20describe%20your%20change...\n-->"
}