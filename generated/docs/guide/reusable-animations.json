{
  "id": "guide/reusable-animations",
  "title": "애니메이션 재사용하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/reusable-animations.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Reusable animations\n-->\n<h1 id=\"애니메이션-재사용하기\">애니메이션 재사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reusable-animations#애니메이션-재사용하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\n#### Prerequisites\n-->\n<h4 id=\"사전지식\">사전지식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reusable-animations#사전지식\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nA basic understanding of the following concepts:\n\n* [Introduction to Angular animations](guide/animations)\n* [Transition and triggers](guide/transition-and-triggers)\n\n<hr>\n\nThe [AnimationOptions](https://angular.io/api/animations/AnimationOptions) interface in Angular animations enables you to create animations that you can reuse across different components.\n-->\n<p>다음 내용은 미리 이해하고 이 문서를 보는 것이 좋습니다:</p>\n<ul>\n<li><a href=\"guide/animations\">Angular 애니메이션 소개</a></li>\n<li><a href=\"guide/transition-and-triggers\">트랜지션 &#x26; 트리거</a></li>\n</ul>\n<hr>\n<p>애니메이션을 정의해두고 여러 컴포넌트에서 사용하려면 <a href=\"https://angular.io/api/animations/AnimationOptions\">AnimationOptions</a> 인터페이스를 사용해서 애니메이션을 정의하면 됩니다.</p>\n<!--\n## Creating reusable animations\n-->\n<h2 id=\"애니메이션-정의하기\">애니메이션 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reusable-animations#애니메이션-정의하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo create a reusable animation, use the [`animation()`](https://angular.io/api/animations/animation) method to define an animation in a separate `.ts` file and declare this animation definition as a `const` export variable. You can then import and reuse this animation in any of your app components using the [`useAnimation()`](https://angular.io/api/animations/useAnimation) API.\n\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts\" region=\"reusable\" language=\"typescript\">\nimport {\n  animation, trigger, animateChild, group,\n  transition, animate, style, query\n} from &#39;@angular/animations&#39;;\n\nexport const transAnimation = animation([\n  style({\n    height: &#39;{{ height }}&#39;,\n    opacity: &#39;{{ opacity }}&#39;,\n    backgroundColor: &#39;{{ backgroundColor }}&#39;\n  }),\n  animate(&#39;{{ time }}&#39;)\n]);\n\n</code-example>\n\nIn the above code snippet, `transAnimation` is made reusable by declaring it as an export variable.\n\n<div class=\"alert is-helpful\">\n\n**Note:** The `height`, `opacity`, `backgroundColor`, and `time` inputs are replaced during runtime.\n</div>\n\nYou can import the reusable `transAnimation` variable in your component class and reuse it using the `useAnimation()` method as shown below.\n\n<code-example path=\"animations/src/app/open-close.component.3.ts\" header=\"src/app/open-close.component.ts\" region=\"reusable\" language=\"typescript\">\nimport { Component } from &#39;@angular/core&#39;;\nimport { useAnimation, transition, trigger, style, animate } from &#39;@angular/animations&#39;;\nimport { transAnimation } from &#39;./animations&#39;;\n\n@Component({\n    trigger(&#39;openClose&#39;, [\n      transition(&#39;open =&gt; closed&#39;, [\n        useAnimation(transAnimation, {\n          params: {\n            height: 0,\n            opacity: 1,\n            backgroundColor: &#39;red&#39;,\n            time: &#39;1s&#39;\n          }\n        })\n      ])\n    ])\n})\n\n</code-example>\n-->\n<p>애니메이션을 재사용하려면 <a href=\"https://angular.io/api/animations/animation\"><code>animation()</code></a> 함수를 사용해서 애니메이션만 <code>.ts</code> 파일에 따로 정의하고 이 애니메이션을 상수(<code>const</code>)로 선언한 후에 파일 외부로 공개해야 합니다. 그러면 컴포넌트 메타데이터에서 <a href=\"https://angular.io/api/animations/useAnimation\"><code>useAnimation()</code></a> API로 이 애니메이션을 불러와서 적용할 수 있습니다. </p>\n<code-example path=\"animations/src/app/animations.ts\" header=\"src/app/animations.ts\" region=\"reusable\" language=\"typescript\">\nimport {\n  <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>, <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/animateChild\" class=\"code-anchor\">animateChild</a>, group,\n  <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/query\" class=\"code-anchor\">query</a>\n} from '@angular/animations';\n\nexport const transAnimation = <a href=\"api/animations/animation\" class=\"code-anchor\">animation</a>([\n  <a href=\"api/animations/style\" class=\"code-anchor\">style</a>({\n    height: '{{ height }}',\n    opacity: '{{ opacity }}',\n    backgroundColor: '{{ backgroundColor }}'\n  }),\n  <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a>('{{ <a href=\"\" class=\"code-anchor\">time</a> }}')\n]);\n\n</code-example>\n<p>위 예제 코드에서 <code>transAnimation</code>이 재사용할 수 있도록 선언된 애니메이션입니다.</p>\n<div class=\"alert is-helpful\">\n<p><strong>참고:</strong> <code>height</code>, <code>opacity</code>, <code>backgroundColor</code>, <code><a href=\"\" class=\"code-anchor\">time</a></code>은 실행 시점에 다시 지정할 수 있습니다.</p>\n</div>\n<p>그리고 이 <code>transAnimation</code> 애니메이션은 컴포넌트 클래스 코드에 <code><a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>()</code> 메소드로 다음과 같이 적용합니다.</p>\n<code-example path=\"animations/src/app/open-close.component.3.ts\" header=\"src/app/open-close.component.ts\" region=\"reusable\" language=\"typescript\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\nimport { <a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>, <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>, <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>, <a href=\"api/animations/style\" class=\"code-anchor\">style</a>, <a href=\"api/animations/animate\" class=\"code-anchor\">animate</a> } from '@angular/animations';\nimport { transAnimation } from './animations';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n    <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a>('openClose', [\n      <a href=\"api/animations/transition\" class=\"code-anchor\">transition</a>('open => closed', [\n        <a href=\"api/animations/useAnimation\" class=\"code-anchor\">useAnimation</a>(transAnimation, {\n          params: {\n            height: 0,\n            opacity: 1,\n            backgroundColor: 'red',\n            <a href=\"\" class=\"code-anchor\">time</a>: '1s'\n          }\n        })\n      ])\n    ])\n})\n\n</code-example>\n<!--\n## More on Angular animations\n-->\n<h2 id=\"더-알아보기\">더 알아보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/reusable-animations#더-알아보기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou may also be interested in the following:\n\n* [Introduction to Angular animations](guide/animations)\n* [Transition and triggers](guide/transition-and-triggers)\n* [Complex animation Sequences](guide/complex-animation-sequences)\n* [Route transition animations](guide/route-animations)\n-->\n<p>다음 내용에 대해서도 알아보세요:</p>\n<ul>\n<li><a href=\"guide/animations\">Angular 애니메이션 소개</a></li>\n<li><a href=\"guide/transition-and-triggers\">트랜지션 &#x26; 트리거</a></li>\n<li><a href=\"guide/complex-animation-sequences\">복잡한 애니메이션 시퀀스</a></li>\n<li><a href=\"guide/route-animations\">페이지 전환 애니메이션</a></li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/animations\n - guide/complex-animation-sequences\n - guide/route-animations\n - guide/transition-and-triggers\n-->\n<!-- links from this doc:\n - api/animations/animate\n - api/animations/animateChild\n - api/animations/animation\n - api/animations/query\n - api/animations/style\n - api/animations/transition\n - api/animations/trigger\n - api/animations/useAnimation\n - api/core/Component\n - guide/animations\n - guide/complex-animation-sequences\n - guide/reusable-animations#더-알아보기\n - guide/reusable-animations#사전지식\n - guide/reusable-animations#애니메이션-재사용하기\n - guide/reusable-animations#애니메이션-정의하기\n - guide/route-animations\n - guide/transition-and-triggers\n - https://angular.io/api/animations/AnimationOptions\n - https://angular.io/api/animations/animation\n - https://angular.io/api/animations/useAnimation\n - https://github.com/angular/angular/edit/master/aio/content/guide/reusable-animations.md?message=docs%3A%20describe%20your%20change...\n-->"
}