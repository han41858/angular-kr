{
  "id": "guide/template-syntax",
  "title": "템플릿 문법",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-syntax.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Template syntax\n-->\n<h1 id=\"템플릿-문법\">템플릿 문법<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-문법\"><i class=\"material-icons\">link</i></a></h1>\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n  h4 .syntax { font-size: 100%; }\n</style>\n<!--\nThe Angular application manages what the user sees and can do, achieving this through the interaction of a component class instance (the *component*) and its user-facing template.\n-->\n<p>Angular 애플리케이션은 사용자의 행동에 반응하면서 화면에 데이터를 표시하는데, 이 과정은 컴포넌트 클래스와 템플릿이 상호작용하면서 이루어집니다.</p>\n<!--\nYou may be familiar with the component/template duality from your experience with model-view-controller (MVC) or model-view-viewmodel (MVVM).\nIn Angular, the component plays the part of the controller/viewmodel, and the template represents the view.\n-->\n<p>MVC(모델-뷰-컨트롤러)나 MVVM(모델-뷰-뷰모델) 구조를 다뤄봤다면 컴포넌트와 템플릿의 관계가 이미 익숙할 수도 있습니다.\nAngular에서는 컴포넌트가 컨트롤러나 뷰모델 역할을 하고, 템플릿이 뷰 역할을 합니다.</p>\n<!--\nThis page is a comprehensive technical reference to the Angular template language.\nIt explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.\n-->\n<p>이 문서에서는 Angular 템플릿 문법의 기술적인 부분을 종합적으로 다룹니다.\n템플릿 문법의 기초부터 시작해서 다른 가이드 페이지에서도 등장하는 템플릿 문법 대부분을 이 문서에서 다룹니다.</p>\n<!--\nMany code snippets illustrate the points and concepts, all of them available\nin the <live-example title=\"Template Syntax Live Code\"></live-example>.\n-->\n<p>템플릿 문법의 개념을 확실하게 이해하기 위해 많은 코드를 살펴볼 것이며,\n이 문서에서 설명하는 코드는 <live-example title=\"템플릿 문법 라이브 코딩\"></live-example> 에서 확인하거나 다운받을 수 있습니다.</p>\n<a id=\"html\"></a>\n<!--\n## HTML in templates\n-->\n<h2 id=\"템플릿과-html\">템플릿과 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿과-html\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nHTML is the language of the Angular template.\nAlmost all HTML syntax is valid template syntax.\nThe `<script>` element is a notable exception;\nit is forbidden, eliminating the risk of script injection attacks.\nIn practice, `<script>` is ignored and a warning appears in the browser console.\nSee the [Security](guide/security) page for details.\n-->\n<p>Angular 템플릿에는 HTML을 사용하며, 거의 모든 HTML 문법은 템플릿 문법에서도 유효합니다.\n하지만 <code>&#x3C;script></code> 엘리먼트는 예외입니다. 이 엘리먼트는 스크립트 인젝션 공격에 노출될 수 있기 때문에 Angular 템플릿에 있더라도 처리되지 않으며, 브라우저 콘솔에 경고 메시지를 출력합니다.\n더 자세한 내용은 <a href=\"guide/security\">보안</a> 문서를 확인하세요.</p>\n<!--\nSome legal HTML doesn't make much sense in a template.\nThe `<html>`, `<body>`, and `<base>` elements have no useful role.\nPretty much everything else is fair game.\n-->\n<p>Angular 템플릿에 유효하지 않은 HTML 엘리먼트가 몇가지 더 있습니다.\n<code>&#x3C;html></code> 이나 <code>&#x3C;body></code>, <code>&#x3C;base></code> 엘리먼트는 Angular 템플릿에 사용해도 에러나 경고가 표시되지 않지만, 별다른 역할을 하지는 않습니다.\n언급하지 않은 엘리먼트는 사용해도 됩니다.</p>\n<!--\nYou can extend the HTML vocabulary of your templates with components and directives that appear as new elements and attributes.\nIn the following sections, you'll learn how to get and set DOM (Document Object Model) values dynamically through data binding.\n-->\n<p>컴포넌트나 디렉티브를 정의하면 템플릿에 사용할 수 있는 HTML 엘리먼트를 새롭게 정의하거나 표준 HTML 엘리먼트에는 없던 속성을 추가할 수 있습니다.\n이 문서에서는 템플릿 문법을 하나씩 살펴보면서 DOM(Document Object Model) 값을 어떻게 참조하고 어떻게 원하는 값을 지정하는지 알아볼 것입니다.</p>\n<!--\nBegin with the first form of data binding&mdash;interpolation&mdash;to see how much richer template HTML can be.\n-->\n<p>가장 간단한 데이터 바인딩인 문자열 바인딩(interpolation)부터 살펴보면서 템플릿 HTML이 어떻게 확장되는지 알아봅시다.</p>\n<hr>\n<a id=\"interpolation\"></a>\n<a id=\"문자열-바인딩\"></a>\n<!--\n## Interpolation and Template Expressions\n-->\n<h2 id=\"문자열-바인딩과-템플릿-표현식\">문자열 바인딩과 템플릿 표현식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#문자열-바인딩과-템플릿-표현식\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nInterpolation allows you to incorporate calculated strings into the text\nbetween HTML element tags and within attribute assignments. Template\nexpressions are what you use to calculate those strings.\n\nThe interpolation <live-example></live-example> demonstrates all of\nthe syntax and code snippets described in this section.\n-->\n<p>문자열 바인딩(Interpolation)을 사용하면 HTML 엘리먼트 태그나 어트리뷰트에 지정하는 문자열을 조합할 수 있습니다.\n그리고 이 문자열은 템플릿 표현식으로도 조합할 수 있습니다.</p>\n<p>이 섹션에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n<!--\n### Interpolation `{{...}}`\n-->\n<h3 id=\"문자열-바인딩-\">문자열 바인딩 <code>{{...}}</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#문자열-바인딩-\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nInterpolation refers to embedding expressions into marked up text.\nBy default, interpolation uses as its delimiter the double curly braces, `{{` and `}}`.\n\nIn the following snippet, `{{ currentCustomer }}` is an example of interpolation.\n-->\n<p>문자열 바인딩은 문자열 안에 포함된 표현식을 의미합니다.\n기본적으로 문자열 바인딩 문법은 이중 중괄호 <code>{{</code>와 <code>}}</code>를 사용합니다.</p>\n<p>그래서 아래 코드에서 <code>{{ currentCustomer }}</code> 부분이 문자열 바인딩이 사용된 코드입니다.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"interpolation-example1\" header=\"src/app/app.component.html\">\n&#x3C;h3>Current customer: {{ currentCustomer }}&#x3C;/h3>\n\n</code-example>\n<!--\nThe text between the braces is often the name of a component\nproperty. Angular replaces that name with the\nstring value of the corresponding component property.\n-->\n<p>이중 중괄호 안에는 보통 컴포넌트 프로퍼티 이름을 사용합니다.\n그러면 Angular가 템플릿을 파싱하면서 이 프로퍼티 이름을 해당 프로퍼티에 할당된 문자열 값으로 치환합니다.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-property\" header=\"src/app/app.component.html\">\n&#x3C;p>{{title}}&#x3C;/p>\n&#x3C;div>&#x3C;img src=\"{{itemImageUrl}}\">&#x3C;/div>\n\n</code-example>\n<!--\nIn the example above, Angular evaluates the `title` and `itemImageUrl` properties\nand fills in the blanks, first displaying some title text and then an image.\n\nMore generally, the text between the braces is a **template expression**\nthat Angular first **evaluates** and then **converts to a string**.\nThe following interpolation illustrates the point by adding two numbers:\n-->\n<p>위 예제에서 Angular는 <code>title</code>과 <code>itemImageUrl</code> 프로퍼티의 값으로 템플릿의 내용을 치환하기 때문에 화면에는 애플리케이션의 이름과 이미지가 표시됩니다.</p>\n<p>좀 더 일반적으로 이야기하면, 이중 중괄호 안에 있는 텍스트는 <strong>템플릿 표현식(template expression)</strong>인데, 이 표현식은 Angular가 가장 먼저 <strong>평가(evaluate)</strong>해서 <strong>문자열로 변환합니다</strong>.\n그래서 다음과 같이 숫자 2개를 더하는 연산도 처리할 수 있습니다:</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"convert-string\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is 2\" -->\n&#x3C;p>The sum of 1 + 1 is {{1 + 1}}.&#x3C;/p>\n\n</code-example>\n<!--\nThe expression can invoke methods of the host component such as `getVal()` in\nthe following example:\n-->\n<p>템플릿 표현식에서는 메소드를 실행할 수도 있습니다. 아래 예제에 사용된 <code>getVal()</code>은 호스트 컴포넌트에 선언된 메소드입니다:</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"invoke-method\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"The sum of 1 + 1 is not 4\" -->\n&#x3C;p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}.&#x3C;/p>\n\n</code-example>\n<!--\nAngular evaluates all expressions in double curly braces,\nconverts the expression results to strings, and links them with neighboring literal strings. Finally,\nit assigns this composite interpolated result to an **element or directive property**.\n\nYou appear to be inserting the result between element tags and assigning it to attributes.\nHowever, interpolation is a special syntax that Angular converts into a *property binding*.\n-->\n<p>이중 중괄호 안에 있는 템플릿 표현식은 Angular 프레임워크가 평가하고 문자열로 변환해서 같은 엘리먼트에 있는 문자열과 연결합니다. 이렇게 템플릿에 삽입된 문자열은 <strong>엘리먼트나 디렉티브의 프로퍼티</strong>로 사용됩니다.\n사실 문자열 바인딩은 프로퍼티 바인딩을 사용하는 문법 중 하나입니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nIf you'd like to use something other than `{{` and `}}`, you can\nconfigure the interpolation delimiter via the\n[interpolation](api/core/Component#interpolation)\noption in the `Component` metadata.\n-->\n<p><code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 메타데이터에 <a href=\"api/core/Component#interpolation\">interpolation</a> 옵션을 지정하면 <code>{{</code>와 <code>}}</code> 대신 다른 표기법을 사용할 수 있습니다.</p>\n</div>\n<a id=\"template-expressions\"></a>\n<!--\n### Template expressions\n-->\n<h3 id=\"템플릿-표현식\">템플릿 표현식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-표현식\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nA template **expression** produces a value and appears within the double\ncurly braces, `{{ }}`.\nAngular executes the expression and assigns it to a property of a binding target;\nthe target could be an HTML element, a component, or a directive.\n\nThe interpolation braces in `{{1 + 1}}` surround the template expression `1 + 1`.\nIn the property binding,\na template expression appears in quotes to the right of the&nbsp;`=` symbol as in `[property]=\"expression\"`.\n-->\n<p>템플릿 <strong>표현식</strong>은 이중 중괄호를 사용해서 <code>{{ }}</code>와 같이 사용하며, 표현식이 실행된 결과를 반환합니다.\nAngular는 이 표현식을 실행하고 HTML 엘리먼트나 컴포넌트, 디렉티브 등 바인딩 대상이 되는 프로퍼티에 연결합니다.</p>\n<p>그리고 문자열 바인딩은 템플릿 표현식을 감싼 형태입니다. 그래서 <code>1 + 1</code> 이라는 템플릿 표현식을 문자열 바인딩하면 <code>{{1 + 1}}</code>과 같은 형태가 됩니다.\n프로퍼티 바인딩과 함께 사용한다면 큰따옴표(<code>\"</code>)와 등호(<code>=</code>)를 사용해서 <code>[프로퍼티]=\"표현식\"</code>과 같이 사용합니다.</p>\n<!--\nIn terms of syntax, template expressions are similar to JavaScript.\nMany JavaScript expressions are legal template expressions, with a few exceptions.\n\nYou can't use JavaScript expressions that have or promote side effects,\nincluding:\n\n* Assignments (`=`, `+=`, `-=`, `...`)\n* Operators such as `new`, `typeof`, `instanceof`, etc.\n* Chaining expressions with <code>;</code> or <code>,</code>\n* The increment and decrement operators `++` and `--`\n* Some of the ES2015+ operators\n-->\n<p>문법으로만 보면 템플릿 표현식은 JavaScript 문법과 비슷합니다.\n그래서 JavaScript 문법 대부분은 템플릿 표현식에도 사용할 수 있지만 예외가 몇가지 있습니다.</p>\n<p>다음 JavaScript 표현식은 템플릿 표현식에 사용할 수 없습니다:</p>\n<ul>\n<li>값을 할당하는 표현 (<code>=</code>, <code>+=</code>, <code>-=</code>, <code>...</code>)</li>\n<li><code>new</code>, <code>typeof</code>, <code>instanceof</code> 연산자</li>\n<li><code>;</code>나 <code>,</code>로 체이닝하는 표현식</li>\n<li>증감연산자 <code>++</code>, <code>--</code></li>\n<li>ES2015 이후에 도입된 연산자 중 일부</li>\n</ul>\n<!--\nOther notable differences from JavaScript syntax include:\n\n* No support for the bitwise operators such as `|` and `&`\n* New [template expression operators](guide/template-syntax#expression-operators), such as `|`, `?.` and `!`\n-->\n<p>그리고 이런 점도 JavaScript 문법과 다릅니다:</p>\n<ul>\n<li>비트 연산자 <code>|</code>와 <code>&#x26;</code>는 사용할 수 없습니다.</li>\n<li><a href=\"guide/template-syntax#expression-operators\">템플릿 표현식</a>에서만 사용하는 연산자도 존재합니다: <code>|</code>, <code>?.</code>, <code>!</code></li>\n</ul>\n<!--\n### Expression context\n-->\n<h3 id=\"표현식의-컨텍스트\">표현식의 컨텍스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#표현식의-컨텍스트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe *expression context* is typically the _component_ instance.\nIn the following snippets, the `recommended` within double curly braces and the\n`itemImageUrl2` in quotes refer to properties of the `AppComponent`.\n-->\n<p><em>템플릿 표현식의 컨텍스트</em>는 일반적으로 <em>컴포넌트</em> 인스턴스의 범위와 같습니다.\n그래서 아래 예제에서 이중 중괄호 안에 사용된 <code>recommended</code>와 <code>itemImageUrl2</code>는 모두 <code>AppComponent</code>에 선언된 프로퍼티를 가리킵니다.</p>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"component-context\" header=\"src/app/app.component.html\">\n&#x3C;h4>{{recommended}}&#x3C;/h4>\n&#x3C;img [src]=\"itemImageUrl2\">\n\n</code-example>\n<!--\nAn expression may also refer to properties of the _template's_ context\nsuch as a template input variable,\n&lt;!-- link to built-in-directives#template-input-variables --&gt;\n`let customer`, or a template reference variable, `#customerInput`.\n&lt;!-- link to guide/template-ref-variables --&gt;\n-->\n<p>템플릿 표현식에서는 <em>템플릿 안에</em> 선언된 템플릿 입력 변수도 참조할 수 있습니다.\n그래서 아래 코드에 선언된 <code>let customer</code>나 <code>#customerInput</code>도 템플릿 표현식에 사용할 수 있습니다.</p>\n<!--\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (template input variable)\">\n&lt;ul&gt;\n  &lt;li *ngFor=&quot;let customer of customers&quot;&gt;{{customer.name}}&lt;/li&gt;\n&lt;/ul&gt;\n\n</code-example>\n\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (template reference variable)\">\n&lt;label&gt;Type something:\n  &lt;input #customerInput&gt;{{customerInput.value}}\n&lt;/label&gt;\n\n</code-example>\n-->\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-input-variable\" header=\"src/app/app.component.html (템플릿 입력 변수)\">\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let customer of customers\">{{customer.name}}&#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<code-example path=\"interpolation/src/app/app.component.html\" region=\"template-reference-variable\" header=\"src/app/app.component.html (템플릿 참조 변수)\">\n&#x3C;label><a href=\"api/core/Type\" class=\"code-anchor\">Type</a> something:\n  &#x3C;input #customerInput>{{customerInput.value}}\n&#x3C;/label>\n\n</code-example>\n<!--\nThe context for terms in an expression is a blend of the _template variables_,\nthe directive's _context_ object (if it has one), and the component's _members_.\nIf you reference a name that belongs to more than one of these namespaces,\nthe template variable name takes precedence, followed by a name in the directive's _context_,\nand, lastly, the component's member names.\n-->\n<p>Angular 템플릿의 컨텍스트는 <em>템플릿 변수</em>와 디렉티브의 <em>context</em> 객체, 컴포넌트의 <em>멤버</em> 가 조합된 범위입니다.\n이 중 참조하는 항목의 이름이 동시에 두 군데 존재하면 템플릿 변수의 우선순위가 가장 높습니다.\n그 다음 우선순위는 디렉티브의 <em>context</em> 객체이며, 컴포넌트 멤버의 우선순위가 가장 낮습니다.</p>\n<!--\nThe previous example presents such a name collision. The component has a `customer`\nproperty and the `*ngFor` defines a `customer` template variable.\n-->\n<p>위에서 살펴본 예제에도 이름이 겹치는 상황이 있습니다.\n템플릿에 사용된 변수 <code>customer</code>는 컴포넌트 프로퍼티로도 존재하고 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 안에도 존재합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe `customer` in `{{customer.name}}`\nrefers to the template input variable, not the component's property.\n\nTemplate expressions cannot refer to anything in\nthe global namespace, except `undefined`. They can't refer to\n`window` or `document`. Additionally, they\ncan't call `console.log()` or `Math.max()` and they are restricted to referencing\nmembers of the expression context.\n-->\n<p><code>{{customer.name}}</code>에 사용된 <code>customer</code>는 컴포넌트 프로퍼티가 아니라 템플릿 입력 변수를 가리킵니다.</p>\n<p>그리고 템플릿 표현식은 전역 범위에 있는 객체는 사용할 수 없으며 <code>undefined</code>만 허용됩니다.\n그래서 <code>window</code>나 <code><a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a></code>도 참조할 수 없습니다.\n마찬가지로, <code>console.log()</code>나 <code>Math.max()</code>와 같은 템플릿 표현식도 사용할 수 없습니다.</p>\n</div>\n<!--\n### Expression guidelines\n-->\n<h3 id=\"템플릿-표현식-가이드라인\">템플릿 표현식 가이드라인<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-표현식-가이드라인\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen using template expressions follow these guidelines:\n\n* [Simplicity](guide/template-syntax#simplicity)\n* [Quick execution](guide/template-syntax#quick-execution)\n* [No visible side effects](guide/template-syntax#no-visible-side-effects)\n-->\n<p>템플릿 표현식은 다음 가이드라인을 준수하며 사용하는 것을 권장합니다:</p>\n<ul>\n<li><a href=\"guide/template-syntax#simplicity\">Simplicity</a></li>\n<li><a href=\"guide/template-syntax#quick-execution\">Quick execution</a></li>\n<li><a href=\"guide/template-syntax#no-visible-side-effects\">No visible side effects</a></li>\n</ul>\n<h4 id=\"simplicity\">Simplicity<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#simplicity\"><i class=\"material-icons\">link</i></a></h4>\n<p>Although it's possible to write complex template expressions, it's a better\npractice to avoid them.</p>\n<p>A property name or method call should be the norm, but an occasional Boolean negation, <code>!</code>, is OK.\nOtherwise, confine application and business logic to the component,\nwhere it is easier to develop and test.</p>\n<h4 id=\"quick-execution\">Quick execution<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#quick-execution\"><i class=\"material-icons\">link</i></a></h4>\n<p>Angular executes template expressions after every change detection cycle.\nChange detection cycles are triggered by many asynchronous activities such as\npromise resolutions, HTTP results, timer events, key presses and mouse moves.</p>\n<p>Expressions should finish quickly or the user experience may drag, especially on slower devices.\nConsider caching values when their computation is expensive.</p>\n<a id=\"no-visible-side-effects\"></a>\n<!--\n#### No visible side effects\n-->\n<h4 id=\"외부-영향-최소화\">외부 영향 최소화<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#외부-영향-최소화\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nA template expression should not change any application state other than the value of the\ntarget property.\n-->\n<p>템플릿 표현식은 대상 프로퍼티의 값만 변경하는 방식으로 작성하는 것이 좋습니다.\n여러 프로퍼티나 애플리케이션의 상태를 변경하는 로직은 작성하지 않는 것을 권장합니다.</p>\n<!--\nThis rule is essential to Angular's \"unidirectional data flow\" policy.\nYou should never worry that reading a component value might change some other displayed value.\nThe view should be stable throughout a single rendering pass.\n-->\n<p>이 규칙은 Angular가 제안하는 \"단방향 데이터 흐름\"의 관점에서도 아주 중요합니다.\n다른 프로퍼티의 영향을 최소화하면 컴포넌트 프로퍼티를 참조하는 과정에 다른 프로퍼티의 영향을 걱정할 필요가 없으며, 뷰는 렌더링 단계에서 한 번만 갱신됩니다.</p>\n<!--\nAn [idempotent](https://en.wikipedia.org/wiki/Idempotence) expression is ideal because\nit is free of side effects and improves Angular's change detection performance.\nIn Angular terms, an idempotent expression always returns\n*exactly the same thing* until one of its dependent values changes.\n-->\n<p>그래서 템플릿 표현식은 사이드 이펙트를 방지하고 Angular의 변화 감지 성능을 최대화하기 위해 <a href=\"https://en.wikipedia.org/wiki/Idempotence\">멱등적 (idempotent)</a>인 표현식으로 작성하는 것이 이상적입니다.</p>\n<p>Angular에서 이야기하는 멱등적인 표현식이란, 어떤 값을 기준으로 표현식을 실행했을 때 <em>항상 같은 값을</em> 반환하는 표현식을 의미합니다.</p>\n<!--\nDependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object, including an `array`, it returns the same object *reference* when called twice in a row.\n-->\n<p>그리고 템플릿 표현식에 사용된 값은 이벤트 루프가 한 번 실행되는 동안 여러변 변경되면 안됩니다.\n템플릿 표현식을 멱등적으로 작성해서 어떤 문자열이나 숫자를 반환한다면, 이 템플릿 표현식은 여러번 실행되더라도 항상 같은 값을 반환해야 합니다.\n그리고 템플릿 표현식이 객체나 배열을 반환한다면, 이 템플릿 표현식은 여러번 실행되더라도 항상 같은 객체를 참조해야 합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThere is one exception to this behavior that applies to `*ngFor`. `*ngFor` has `trackBy` functionality that can deal with referential inequality of objects when iterating over them. See [*ngFor with `trackBy`](guide/template-syntax#ngfor-with-trackby) for details.\n-->`*ngFor`의 동작을 제어할 때는 이 규칙을 예외로 처리할 수 있습니다.\n<p><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 사용하면서 <code>trackBy</code> 기능을 사용하면 이전과 다른 객체를 참조하더라도 같은 객체를 참조하는 것으로 간주할 수 있습니다.</p>\n<p>더 자세한 내용을 확인하려면 이 문서의 <a href=\"guide/template-syntax#trackBy\"><code>trackBy</code>와 함께 사용하기</a> 섹션을 참고하세요.</p>\n</div>\n<!-- end of Interpolation doc -->\n<hr>\n<!--\n<a id=\"template-statements\"></a>\n-->\n<a id=\"템플릿-실행문\"></a>\n<!--\n## Template statements\n-->\n<h2 id=\"템플릿-실행문-template-statements\">템플릿 실행문 (Template statements)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-실행문-template-statements\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA template **statement** responds to an **event** raised by a binding target\nsuch as an element, component, or directive.\nYou'll see template statements in the [event binding](guide/template-syntax#event-binding) section,\nappearing in quotes to the right of the `=`&nbsp;symbol as in `(event)=\"statement\"`.\n-->\n<p>템플릿 <strong>실행문</strong>은 엘리먼트나 컴포넌트, 디렉티브에서 발생하는 <strong>이벤트</strong>에 반응합니다.\n템플릿 실행문은 이 문서의 <a href=\"guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\">이벤트 바인딩</a> 섹션에서도 확인할 수 있으며,\n<code>=</code> 기호를 사용해서 <code>(이벤트)=\"실행문\"</code>과 같이 작성합니다.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<!--\nA template statement *has a side effect*.\nThat's the whole point of an event.\nIt's how you update application state from user action.\n-->\n<p>템플릿 실행문은 <em>변화를 발생</em>시키며, 이벤트의 목적도 이것을 위한 것입니다.\n템플릿 실행문은 사용자의 행동에 따라 애플리케이션을 동작시키기 위해 사용합니다.</p>\n<!--\nResponding to events is the other side of Angular's \"unidirectional data flow\".\nYou're free to change anything, anywhere, during this turn of the event loop.\n-->\n<p>이벤트에 반응하는 것은 Angular가 제안하는 \"단방향 데이터 흐름\"의 또다른 한 방향입니다.\n이 방향은 컴포넌트 프로퍼티가 뷰로 반영되는 것의 반대 방향이며, 이벤트 루프에서는 어떠한 객체의 어떠한 값도 자유롭게 변경할 수 있습니다.</p>\n<!--\nLike template expressions, template *statements* use a language that looks like JavaScript.\nThe template statement parser differs from the template expression parser and\nspecifically supports both basic assignment (`=`) and chaining expressions\n(with <code>;</code> or <code>,</code>).\n-->\n<p>템플릿 표현식과 비슷하게 템플릿 <em>실행문</em>도 JavaScript와 비슷한 문법을 사용합니다.\n하지만 템플릿 실행문을 파싱하는 파서는 템플릿 표현식을 파싱하는 파서와 다르며, 템플릿 표현식에서는 사용할 수 없는 문법도 몇 가지는 사용할 수 있습니다.\n템플릿 실행문에서는 값을 할당하는 표현이나(<code>=</code>) 여러 줄에 걸친 표현(<code>;</code>, <code>,</code>)도 사용할 수 있습니다.</p>\n<!--\nHowever, certain JavaScript syntax is not allowed:\n-->\n<p>하지만 다음과 같은 JavaScript 문법은 사용할 수 없습니다.</p>\n<!--\n* <code>new</code>\n* increment and decrement operators, `++` and `--`\n* operator assignment, such as `+=` and `-=`\n* the bitwise operators `|` and `&`\n* the [template expression operators](guide/template-syntax#expression-operators)\n-->\n<ul>\n<li><code>new</code> 키워드</li>\n<li><code>+=</code>나 <code>-=</code>와 같은 연산 할당자</li>\n<li><code>|</code>나 <code>&#x26;</code>와 같은 비트 연산자</li>\n<li><a href=\"guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%91%9C%ED%98%84%EC%8B%9D-%EC%A0%84%EC%9A%A9-%EC%97%B0%EC%82%B0%EC%9E%90\">템플릿 표현식 전용 연산자</a></li>\n</ul>\n<!--\n### Statement context\n-->\n<h3 id=\"템플릿-실행문의-컨텍스트\">템플릿 실행문의 컨텍스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-실행문의-컨텍스트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAs with expressions, statements can refer only to what's in the statement context\nsuch as an event handling method of the component instance.\n-->\n<p>템플릿 표현식과 비슷하게 템플릿 실행문도 컨텍스트가 제한되어 있으며, 컴포넌트 인스턴스에 있는 이벤트 핸들링 메소드를 주로 사용합니다.</p>\n<!--\nThe *statement context* is typically the component instance.\nThe *deleteHero* in `(click)=\"deleteHero()\"` is a method of the data-bound component.\n-->\n<p><em>템플릿 실행문의 컨텍스트</em>는 컴포넌트 인스턴스의 범위와 같습니다.\n예를 들어 아래 코드에서 <code>(click)=\"deleteHero()\"</code>에 사용된 <code>deleteHero</code>는 컴포넌트에서 데이터를 처리하는 메소드입니다.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<!--\nThe statement context may also refer to properties of the template's own context.\nIn the following examples, the template `$event` object,\na [template input variable](guide/template-syntax#template-input-variable) (`let hero`),\nand a [template reference variable](guide/template-syntax#ref-vars) (`#heroForm`)\nare passed to an event handling method of the component.\n-->\n<p>템플릿 실행문의 컨텍스트에서는 템플릿 컨텍스트 안에 있는 프로퍼티에 접근할 수도 있습니다.\n아래 예제에서 <code>$event</code> 객체는 템플릿 변수이며, <code>let hero</code>는 <a href=\"guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%85%EB%A0%A5-%EB%B3%80%EC%88%98\">템플릿 입력 변수</a>이고,\n<code>#heroForm</code>은 <a href=\"guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%B0%B8%EC%A1%B0-%EB%B3%80%EC%88%98\">템플릿 참조 변수</a>입니다.\n각각의 변수는 컴포넌트의 이벤트 핸들링 메소드로 전달됩니다.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n&#x3C;button *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}&#x3C;/button>\n&#x3C;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... &#x3C;/form>\n\n</code-example>\n<!--\nTemplate context names take precedence over component context names.\nIn `deleteHero(hero)` above, the `hero` is the template input variable,\nnot the component's `hero` property.\n-->\n<p>템플릿 컨텍스트의 항목 이름과 컴포넌트의 프로퍼티 이름이 중복되면 템플릿 컨텍스트의 우선순위가 높습니다.\n위 코드를 예로 들면, <code>deleteHero(hero)</code>에 사용된 <code>hero</code>는 템플릿 입력 변수이며, 컴포넌트에 있는 <code>hero</code> 프로퍼티는 템플릿 변수에 의해 가려졌습니다.</p>\n<!--\n### Statement guidelines\n-->\n<h3 id=\"템플릿-실행문-가이드라인\">템플릿 실행문 가이드라인<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-실행문-가이드라인\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTemplate statements cannot refer to anything in the global namespace. They\ncan't refer to `window` or `document`.\nThey can't call `console.log` or `Math.max`.\n-->\n<p>템플릿 실행문에서는 템플릿 표현식과 마찬가지로 전역 공간에 접근할 수 없습니다.\n또, <code>window</code>나 <code><a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a></code>에도 접근할 수 없고, <code>console.log</code>나 <code>Math.max</code>와 같은 함수도 실행할 수 없습니다.</p>\n<!--\nAs with expressions, avoid writing complex template statements.\nA method call or simple property assignment should be the norm.\n-->\n<p>템플릿 표현식과 마찬가지로 템플릿 실행문에도 복잡한 로직을 작성하지 않는 것이 좋습니다.\n간단하게 프로퍼티를 참조하거나 함수를 실행하는 것이 가장 좋은 방법입니다.</p>\n<hr>\n<!--\n<a id=\"binding-syntax\"></a>\n-->\n<a id=\"바인딩-문법\"></a>\n<!--\n## Binding syntax: an overview\n-->\n<h2 id=\"바인딩-문법--개요\">바인딩 문법 : 개요<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#바인딩-문법--개요\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nData-binding is a mechanism for coordinating what users see, specifically\nwith application data values.\nWhile you could push values to and pull values from HTML,\nthe application is easier to write, read, and maintain if you turn these tasks over to a binding framework.\nYou simply declare bindings between binding sources, target HTML elements, and let the framework do the rest.\n\nFor a demonstration of the syntax and code snippets in this section, see the <live-example name=\"binding-syntax\">binding syntax example</live-example>.\n\nAngular provides many kinds of data-binding. Binding types can be grouped into three categories distinguished by the direction of data flow:\n\n* From the _source-to-view_\n* From _view-to-source_\n* Two-way sequence: _view-to-source-to-view_\n-->\n<p>사용자가 보는 화면과 애플리케이션 데이터의 값은 데이터 바인딩을 통해 자동으로 동기화됩니다.\n데이터 바인딩을 지원하는 프레임워크에서는 HTML에 값을 반영하거나 HTML에서 값을 가져오는 과정이 훨씬 간단하기 때문에,\n애플리케이션 로직을 쉽고 빠르면서 간결하게 작성할 수 있습니다.\n바인딩할 객체와 HTML을 단순하게 연결하기만 하면 그 이후는 프레임워크가 알아서 필요한 작업을 수행합니다.</p>\n<p>For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"binding-syntax\">binding syntax example</live-example>.</p>\n<p>Angular는 데이터 바인딩을 여러가지 방식으로 제공합니다.\n이 문서에서는 Angular가 제공하는 데이터 바인딩을 기본부터 차근차근 알아봅시다.</p>\n<ul>\n<li>From the <em>source-to-view</em></li>\n<li>From <em>view-to-source</em></li>\n<li>Two-way sequence: <em>view-to-source-to-view</em></li>\n</ul>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"30%\">\n  \n  <col width=\"50%\">\n  \n  <col width=\"20%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      <!--\n      Type\n      -->\n      종류\n    </th>\n    <th>\n      <!--\n      Syntax\n      -->\n      문법\n    </th>\n    <th>\n      Category\n    </th>\n  </tr>\n  <tr>\n     <td>\n      Interpolation<br>\n      Property<br>\n      Attribute<br>\n      Class<br>\n      Style\n    </td>\n    <td>\n      <!--\n      <code-example>\n        {{expression}}\n        [target]=\"expression\"\n        bind-target=\"expression\"\n      </code-example>\n      -->\n      <code-example>\n        {{표현식}}\n        [대상]=\"표현식\"\n        bind-대상=\"표현식\"\n      </code-example>\n    </td>\n    <td>\n      One-way<br>from data source<br>to view target\n    </td>\n    </tr><tr>\n      <td>\n        Event\n      </td>\n      <td>\n        <!--\n        <code-example>\n          (target)=\"statement\"\n          on-target=\"statement\"\n        </code-example>\n      -->\n        <code-example>\n          (대상)=\"실행문\"\n          on-대상=\"실행문\"\n        </code-example>\n      </td>\n      <td>\n        One-way<br>from view target<br>to data source\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <!--\n        Two-way\n        -->\n        양방향\n      </td>\n      <td>\n        <!--\n        <code-example>\n          [(target)]=\"expression\"\n          bindon-target=\"expression\"\n        </code-example>\n        -->\n        <code-example>\n          [(대상)]=\"표현식\"\n          bindon-대상=\"표현식\"\n        </code-example>\n      </td>\n      <td>\n        <!--\n        Two-way\n        -->\n        양방향\n      </td>\n    </tr>\n  \n</tbody></table>\n<!--\nBinding types other than interpolation have a **target name** to the left of the equal sign, either surrounded by punctuation, `[]` or `()`,\nor preceded by a prefix: `bind-`, `on-`, `bindon-`.\n\nThe *target* of a binding is the property or event inside the binding punctuation: `[]`, `()` or `[()]`.\n\nEvery public member of a **source** directive is automatically available for binding.\nYou don't have to do anything special to access a directive member in a template expression or statement.\n-->\n<p>문자열 바인딩을 제외하면 모든 바인딩 방식에는 등호 왼쪽에 <strong>바인딩할 대상의 이름</strong>이 있고, <code>[]</code>나 <code>()</code>로 둘러싸여 있거나 <code>bind-</code>, <code>on-</code>, <code>bindon-</code> 접두사가 붙습니다.</p>\n<p>The <em>target</em> of a binding is the property or event inside the binding punctuation: <code>[]</code>, <code>()</code> or <code>[()]</code>.</p>\n<p>Every public member of a <strong>source</strong> directive is automatically available for binding.\nYou don't have to do anything special to access a directive member in a template expression or statement.</p>\n<!--\n### Data-binding and HTML\n-->\n<h3 id=\"데이터-바인딩과-html\">데이터 바인딩과 HTML<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#데이터-바인딩과-html\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn the normal course of HTML development, you create a visual structure with HTML elements, and\nyou modify those elements by setting element attributes with string constants.\n-->\n<p>일반적으로 HTML 문서를 작성할 때는 화면에 표시하는 모양에 맞게 HTML 엘리먼트 구조를 잡고 각 엘리먼트의 어트리뷰트를 문자열로 직접 지정했습니다.</p>\n<code-example language=\"html\">\n&#x3C;div class=\"special\">Plain old <a href=\"api/core/SecurityContext#HTML\" class=\"code-anchor\">HTML</a>&#x3C;/div>\n&#x3C;img src=\"images/item.png\">\n&#x3C;button disabled>Save&#x3C;/button>\n</code-example>\n<p>With data-binding, you can control things like the state of a button:</p>\n<code-example path=\"binding-syntax/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- Bind button disabled <a href=\"api/animations/state\" class=\"code-anchor\">state</a> to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Save&#x3C;/button>\n\n</code-example>\n<p>Notice that the binding is to the <code>disabled</code> property of the button's DOM element,\n<strong>not</strong> the attribute. This applies to data-binding in general. Data-binding works with <em>properties</em> of DOM elements, components, and directives, not HTML <em>attributes</em>.</p>\n<!--\n### HTML attribute vs. DOM property\n-->\n<h3 id=\"html-어트리뷰트-vs-dom-프로퍼티\">HTML 어트리뷰트 vs. DOM 프로퍼티<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-어트리뷰트-vs-dom-프로퍼티\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe distinction between an HTML attribute and a DOM property is key to understanding\nhow Angular binding works. **Attributes are defined by HTML. Properties are accessed from DOM (Document Object Model) nodes.**\n-->\n<p>Angular에서 바인딩이 어떻게 동작하는지 이해하려면, HTML 어트리뷰트와 DOM 프로퍼티를 확실하게 구분해야 합니다.\n<strong>어트리뷰트는 HTML에 지정합니다. 그리고 프로퍼티는 DOM(Document Object Model)에 지정합니다.</strong></p>\n<ul>\n<li>\n<p>A few HTML attributes have 1:1 mapping to properties; for example, <code>id</code>.</p>\n</li>\n<li>\n<p>Some HTML attributes don't have corresponding properties; for example, <code>aria-*</code>.</p>\n</li>\n<li>\n<p>Some DOM properties don't have corresponding attributes; for example, <code>textContent</code>.</p>\n</li>\n</ul>\n<p>It is important to remember that <em>HTML attribute</em> and the <em>DOM property</em> are different things, even when they have the same name.\nIn Angular, the only role of HTML attributes is to initialize element and directive state.</p>\n<p><strong>Template binding works with <em>properties</em> and <em>events</em>, not <em>attributes</em>.</strong></p>\n<p>When you write a data-binding, you're dealing exclusively with the <em>DOM properties</em> and <em>events</em> of the target object.</p>\n<div class=\"alert is-helpful\">\n<p>This general rule can help you build a mental model of attributes and DOM properties:\n<strong>Attributes initialize DOM properties and then they are done.\nProperty values can change; attribute values can't.</strong></p>\n<p>There is one exception to this rule.\nAttributes can be changed by <code>setAttribute()</code>, which re-initializes corresponding DOM properties.</p>\n</div>\n<p>For more information, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\">MDN Interfaces documentation</a> which has API docs for all the standard DOM elements and their properties.\nComparing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\"><code>&#x3C;td></code> attributes</a> attributes to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\"><code>&#x3C;td></code> properties</a> provides a helpful example for differentiation.\nIn particular, you can navigate from the attributes page to the properties via \"DOM interface\" link, and navigate the inheritance hierarchy up to <code>HTMLTableCellElement</code>.</p>\n<h4 id=\"example-1-an-input\">Example 1: an <code>&#x3C;input></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-1-an-input\"><i class=\"material-icons\">link</i></a></h4>\n<p>When the browser renders <code>&#x3C;input type=\"text\" value=\"Sarah\"></code>, it creates a\ncorresponding DOM node with a <code>value</code> property initialized to \"Sarah\".</p>\n<code-example language=\"html\">\n&#x3C;input type=\"text\" value=\"Sarah\">\n</code-example>\n<p>When the user enters \"Sally\" into the <code>&#x3C;input></code>, the DOM element <code>value</code> <em>property</em> becomes \"Sally\".\nHowever, if you look at the HTML attribute <code>value</code> using <code>input.getAttribute('value')</code>, you can see that the <em>attribute</em> remains unchanged—it returns \"Sarah\".</p>\n<!--\nThe HTML attribute `value` specifies the *initial* value; the DOM `value` property is the *current* value.\n-->\n<p>HTML에 있는 <code>value</code> 어트리뷰트는 연결된 DOM 필드의 값을 초기화할 뿐이고, DOM에 있는 <code>value</code> 프로퍼티가 <em>현재값</em> 을 나타냅니다.</p>\n<p>To see attributes versus DOM properties in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax.</p>\n<h4 id=\"example-2-a-disabled-button\">Example 2: a disabled button<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#example-2-a-disabled-button\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>disabled</code> attribute is another example. A button's <code>disabled</code>\n<em>property</em> is <code>false</code> by default so the button is enabled.</p>\n<p>When you add the <code>disabled</code> <em>attribute</em>, its presence alone\ninitializes the button's <code>disabled</code> <em>property</em> to <code>true</code>\nso the button is disabled.</p>\n<code-example language=\"html\">\n&#x3C;button disabled>Test Button&#x3C;/button>\n</code-example>\n<p>Adding and removing the <code>disabled</code> <em>attribute</em> disables and enables the button.\nHowever, the value of the <em>attribute</em> is irrelevant,\nwhich is why you cannot enable a button by writing <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code>.</p>\n<p>To control the state of the button, set the <code>disabled</code> <em>property</em>,</p>\n<div class=\"alert is-helpful\">\n<p>Though you could technically set the <code>[attr.disabled]</code> attribute binding, the values are different in that the property binding requires to a boolean value, while its corresponding attribute binding relies on whether the value is <code>null</code> or not. Consider the following:</p>\n<code-example language=\"html\">\n&#x3C;input [disabled]=\"condition ? true : false\">\n&#x3C;input [attr.disabled]=\"condition ? 'disabled' : null\">\n</code-example>\n<p>Generally, use property binding over attribute binding as it is more intuitive (being a boolean value), has a shorter syntax, and is more performant.</p>\n</div>\n<p>To see the <code>disabled</code> button example in a functioning app, see the <live-example name=\"binding-syntax\"></live-example> especially for binding syntax. This example shows you how to toggle the disabled property from the component.</p>\n<h2 id=\"binding-types-and-targets\">Binding types and targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-types-and-targets\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <strong>target of a data-binding</strong> is something in the DOM.\nDepending on the binding type, the target can be a property (element, component, or directive),\nan event (element, component, or directive), or sometimes an attribute name.\nThe following table summarizes the targets for the different binding types.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <!--\n  <col width=\"10%\">\n  </col>\n  <col width=\"15%\">\n  </col>\n  <col width=\"75%\">\n  </col>\n  -->\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"21%\">\n  \n  <col width=\"64%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      <!--\n      Type\n  \t  -->\n  \t  종류\n    </th>\n    <th>\n      <!--\n      Target\n      -->\n      대상\n    </th>\n    <th>\n      <!--\n      Examples\n      -->\n      예제\n    </th>\n  </tr>\n  <tr>\n    <td>\n      <!--\n      Property\n      -->\n      프로퍼티\n    </td>\n    <td>\n      <!--\n      Element&nbsp;property<br>\n      Component&nbsp;property<br>\n      Directive&nbsp;property\n      -->\n      엘리먼트 프로퍼티<br>\n      컴포넌트 프로퍼티<br>\n      디렉티브 프로퍼티\n    </td>\n    <td>\n      <code>src</code>, <code>hero</code>, and <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> in the following:\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\">\n&#x3C;img [src]=\"heroImageUrl\">\n&#x3C;app-hero-detail [hero]=\"currentHero\">&#x3C;/app-hero-detail>\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example>\n      <!-- For more information, see [Property Binding](guide/property-binding). -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <!--\n      Event\n      -->\n      이벤트\n    </td>\n    <td>\n      <!--\n      Element&nbsp;event<br>\n      Component&nbsp;event<br>\n      Directive&nbsp;event\n      -->\n      엘리먼트 이벤트<br>\n      컴포넌트 이벤트<br>\n      디렉티브 이벤트\n    </td>\n    <td>\n      <code>click</code>, <code>deleteRequest</code>, and <code>myClick</code> in the following:\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;app-hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/app-hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example>\n      <!-- KW--Why don't these links work in the table? -->\n      <!-- <div>For more information, see [Event Binding](guide/event-binding).</div> -->\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <!--\n      Two-way\n      -->\n      양방향\n    </td>\n    <td>\n      <!--\n      Event and property\n      -->\n      이벤트나 프로퍼티\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\">\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"name\">\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <!--\n      Attribute\n      -->\n      어트리뷰트\n    </td>\n    <td>\n      <!--\n      Attribute\n      (the&nbsp;exception)\n      -->\n      어트리뷰트(일부)\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\">\n&#x3C;button [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <!--\n      Class\n      -->\n      클래스\n    </td>\n    <td>\n      <!--\n      <code>class</code> property\n      -->\n      <code>class</code> 프로퍼티\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      <!--\n      Style\n      -->\n      스타일\n    </td>\n    <td>\n      <!--\n      <code>style</code> property\n      -->\n      <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 프로퍼티\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\">\n&#x3C;button [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example>\n    </td>\n  </tr>\n</tbody></table>\n<!-- end of binding syntax -->\n<hr>\n<a id=\"property-binding\"></a>\n<a id=\"프로퍼티-바인딩\"></a>\n<h2 id=\"property-binding-property\">Property binding <code>[property]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-property\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use property binding to <em>set</em> properties of target elements or\ndirective <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorators. For an example\ndemonstrating all of the points in this section, see the\n<live-example name=\"property-binding\">property binding example</live-example>.</p>\n<h3 id=\"one-way-in\">One-way in<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-way-in\"><i class=\"material-icons\">link</i></a></h3>\n<p>Property binding flows a value in one direction,\nfrom a component's property into a target element property.</p>\n<p>You can't use property\nbinding to read or pull values out of target elements. Similarly, you cannot use\nproperty binding to call a method on the target element.\nIf the element raises events, you can listen to them with an <a href=\"guide/template-syntax#event-binding\">event binding</a>.</p>\n<p>If you must read a target element property or call one of its methods,\nsee the API reference for <a href=\"api/core/ViewChild\">ViewChild</a> and\n<a href=\"api/core/ContentChild\">ContentChild</a>.</p>\n<h3 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#examples\"><i class=\"material-icons\">link</i></a></h3>\n<p>The most common property binding sets an element property to a component\nproperty value. An example is\nbinding the <code>src</code> property of an image element to a component's <code>itemImageUrl</code> property:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p>Here's an example of binding to the <code>colSpan</code> property. Notice that it's not <code>colspan</code>,\nwhich is the attribute, spelled with a lowercase <code>s</code>.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- Notice the colSpan property is camel case -->\n&#x3C;tr>&#x3C;td [colSpan]=\"2\">Span 2 columns&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n<p>For more details, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\">MDN HTMLTableCellElement</a> documentation.</p>\n<!-- Add link when Attribute Binding updates are merged:\nFor more about `colSpan` and `colspan`, see (Attribute Binding)[guide/template-syntax]. -->\n<p>Another example is disabling a button when the component says that it <code>isUnchanged</code>:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- Bind button disabled <a href=\"api/animations/state\" class=\"code-anchor\">state</a> to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Disabled Button&#x3C;/button>\n\n</code-example>\n<p>Another is setting a property of a directive:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"classes\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the classes property making this blue&#x3C;/p>\n\n</code-example>\n<p>Yet another is setting the model property of a custom component—a great way\nfor parent and child components to communicate:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<!--\n### Binding targets\n-->\n<h3 id=\"바인딩-대상\">바인딩 대상<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#바인딩-대상\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAn element property between enclosing square brackets identifies the target property.\nThe target property in the following code is the image element's `src` property.\n-->\n<p>엘리먼트의 프로퍼티를 대괄호(<code>[</code>, <code>]</code>)로 감싸면 프로퍼티 바인딩 대상으로 지정할 수 있습니다.\n그래서 다음 코드에서는 이미지 엘리먼트의 <code>src</code> 프로퍼티가 프로퍼티 바인딩의 대상 프로퍼티입니다.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<!--\nThere's also the `bind-` prefix alternative:\n-->\n<p>이 방식이 익숙하지 않다면 다음과 같이 <code>bind-</code> 접두사를 사용할 수도 있습니다.\n--></p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"bind-prefix\" header=\"src/app/app.component.html\">\n&#x3C;img bind-src=\"itemImageUrl\">\n\n</code-example>\n<p>In most cases, the target name is the name of a property, even\nwhen it appears to be the name of an attribute.\nSo in this case, <code>src</code> is the name of the <code>&#x3C;img></code> element property.</p>\n<!--\nElement properties may be the more common targets,\nbut Angular looks first to see if the name is a property of a known directive,\nas it is in the following example:\n-->\n<p>바인딩되는 프로퍼티는 대상 엘리먼트의 프로퍼티인 것이 일반적이지만, 다음과 같이 Angular가 제공하는 기본 디렉티브의 프로퍼티일 수도 있습니다.\n이 때는 엘리먼트 프로퍼티보다 디렉티브 프로퍼티의 우선순위가 높습니다:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"classes\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the classes property making this blue&#x3C;/p>\n\n</code-example>\n<p>Technically, Angular is matching the name to a directive <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>,\none of the property names listed in the directive's <code>inputs</code> array\nor a property decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.\nSuch inputs map to the directive's own properties.</p>\n<p>If the name fails to match a property of a known directive or element, Angular reports an “unknown directive” error.</p>\n<div class=\"alert is-helpful\">\n<p>Though the target name is usually the name of a property,\nthere is an automatic attribute-to-property mapping in Angular for\nseveral common attributes. These include <code>class</code>/<code>className</code>, <code>innerHtml</code>/<code>innerHTML</code>, and\n<code>tabindex</code>/<code>tabIndex</code>.</p>\n</div>\n<a id=\"avoid-side-effects\"></a>\n<!--\n### Avoid side effects\n-->\n<h3 id=\"외부-영향-최소화-1\">외부 영향 최소화<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#외부-영향-최소화-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>Evaluation of a template expression should have no visible side effects.\nThe expression language itself, or the way you write template expressions,\nhelps to a certain extent;\nyou can't assign a value to anything in a property binding expression\nnor use the increment and decrement operators.</p>\n<p>For example, you could have an expression that invoked a property or method that had\nside effects. The expression could call something like <code>getFoo()</code> where only you\nknow what <code>getFoo()</code> does. If <code>getFoo()</code> changes something\nand you happen to be binding to that something,\nAngular may or may not display the changed value. Angular may detect the\nchange and throw a warning error.\nAs a best practice, stick to properties and to methods that return\nvalues and avoid side effects.</p>\n<h3 id=\"return-the-proper-type\">Return the proper type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h3>\n<p>The template expression should evaluate to the type of value\nthat the target property expects.\nReturn a string if the target property expects a string, a number if it\nexpects a number, an object if it expects an object, and so on.</p>\n<p>In the following example, the <code>childItem</code> property of the <code>ItemDetailComponent</code> expects a string, which is exactly what you're sending in the property binding:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>You can confirm this by looking in the <code>ItemDetailComponent</code> where the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> type is set to a string:\n<code-example path=\"property-binding/src/app/item-detail/item-detail.component.ts\" region=\"input-type\" header=\"src/app/item-detail/item-detail.component.ts (setting the @Input() type)\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem: string;\n\n</code-example></p>\n<p>As you can see here, the <code>parentItem</code> in <code>AppComponent</code> is a string, which the <code>ItemDetailComponent</code> expects:\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\" header=\"src/app/app.component.ts\">\nparentItem = 'lamp';\n\n</code-example></p>\n<h4 id=\"passing-in-an-object\">Passing in an object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h4>\n<p>The previous simple example showed passing in a string. To pass in an object,\nthe syntax and thinking are the same.</p>\n<p>In this scenario, <code>ListItemComponent</code> is nested within <code>AppComponent</code> and the <code>items</code> property expects an array of objects.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"pass-object\" header=\"src/app/app.component.html\">\n&#x3C;app-list-item [items]=\"currentItem\">&#x3C;/app-list-item>\n\n</code-example>\n<p>The <code>items</code> property is declared in the <code>ListItemComponent</code> with a type of <code>Item</code> and decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n<code-example path=\"property-binding/src/app/list-item/list-item.component.ts\" region=\"item-input\" header=\"src/app/list-item.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[];\n\n</code-example>\n<p>In this sample app, an <code>Item</code> is an object that has two properties; an <code>id</code> and a <code>name</code>.</p>\n<code-example path=\"property-binding/src/app/item.ts\" region=\"item-class\" header=\"src/app/item.ts\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p>While a list of items exists in another file, <code>mock-items.ts</code>, you can\nspecify a different item in <code>app.component.ts</code> so that the new item will render:</p>\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\" header=\"src/app.component.ts\">\ncurrentItem = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p>You just have to make sure, in this case, that you're supplying an array of objects because that's the type of <code>items</code> and is what the nested component, <code>ListItemComponent</code>, expects.</p>\n<p>In this example, <code>AppComponent</code> specifies a different <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> object\n(<code>currentItem</code>) and passes it to the nested <code>ListItemComponent</code>. <code>ListItemComponent</code> was able to use <code>currentItem</code> because it matches what an <code>Item</code> object is according to <code>item.ts</code>. The <code>item.ts</code> file is where\n<code>ListItemComponent</code> gets its definition of an <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>.</p>\n<!--\n### Remember the brackets\n-->\n<h3 id=\"괄호를-깜빡하면-안됩니다\">괄호를 깜빡하면 안됩니다.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#괄호를-깜빡하면-안됩니다\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe brackets, `[]`, tell Angular to evaluate the template expression.\nIf you omit the brackets, Angular treats the string as a constant\nand *initializes the target property* with that string:\n-->\n<p>템플릿 표현식은 프로퍼티를 대괄호로 감싸야 Angular가 템플릿 표현식이라고 인식하고 실행할 수 있습니다.\n그래서 대괄호가 없으면 Angular는 이 문장을 단순하게 문자열로 판단하고 <em>대상 프로퍼티를 그 문자열로 초기화</em>할 것입니다.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"no-evaluation\" header=\"src/app.component.html\">\n&#x3C;app-item-detail childItem=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Omitting the brackets will render the string\n<code>parentItem</code>, not the value of <code>parentItem</code>.</p>\n<!--\n### One-time string initialization\n-->\n<h3 id=\"문자열을-그대로-사용하는-경우\">문자열을 그대로 사용하는 경우<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#문자열을-그대로-사용하는-경우\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou *should* omit the brackets when all of the following are true:\n-->\n<p>다음과 같은 경우라면 프로퍼티 바인딩에 사용하는 대괄호를 사용하지 않는 것이 좋습니다.</p>\n<!--\n* The target property accepts a string value.\n* The string is a fixed value that you can put directly into the template.\n* This initial value never changes.\n-->\n<ul>\n<li>바인딩 대상 프로퍼티에 문자열 값을 할당하는 경우</li>\n<li>변경되지 않는 문자열</li>\n</ul>\n<!--\nYou routinely initialize attributes this way in standard HTML, and it works\njust as well for directive and component property initialization.\nThe following example initializes the `prefix` property of the `StringInitComponent` to a fixed string,\nnot a template expression. Angular sets it and forgets about it.\n-->\n<p>HTML에서 어트리뷰트를 초기화하는 방식은 Angular에서도 유효하며, 디렉티브나 컴포넌트 프로퍼티를 초기화할 때도 같은 방식을 사용합니다.\n다음 예제를 보면 <code>HeroDetailComponent</code> 에 사용할 <code>prefix</code> 프로퍼티를 초기화하는데, 이 때 템플릿 표현식을 사용하지 않고 고정된 문자열을 사용했습니다.\n그러면 Angular는 대상 프로퍼티의 초기값을 설정할 때만 이 문자열을 사용하고, 이후에는 신경쓰지 않습니다.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"string-init\" header=\"src/app/app.component.html\">\n&#x3C;app-string-init prefix=\"This is a one-time initialized string.\">&#x3C;/app-string-init>\n\n</code-example>\n<p>The <code>[<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]</code> binding, on the other hand, remains a live binding to the component's <code>currentItem</code> property.</p>\n<h3 id=\"property-binding-vs-interpolation\">Property binding vs. interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-vs-interpolation\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou often have a choice between interpolation and property binding.\nThe following binding pairs do the same thing:\n-->\n<p>코드를 작성하다보면 프로퍼티 바인딩을 해야할 지 문자열 바인딩(Interpolation)을 해야할 지 고민될 때가 있습니다.\n코드를 보면서 생각해봅시다:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding-interpolation\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;img src=\"{{itemImageUrl}}\"> is the &#x3C;i>interpolated&#x3C;/i> image.&#x3C;/p>\n&#x3C;p>&#x3C;img [src]=\"itemImageUrl\"> is the &#x3C;i>property bound&#x3C;/i> image.&#x3C;/p>\n\n&#x3C;p>&#x3C;span>\"{{interpolationTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> title.&#x3C;/span>&#x3C;/p>\n&#x3C;p>\"&#x3C;span [innerHTML]=\"propertyTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation is a convenient alternative to property binding in\nmany cases. When rendering data values as strings, there is no\ntechnical reason to prefer one form to the other, though readability\ntends to favor interpolation. However, <em>when setting an element\nproperty to a non-string data value, you must use property binding</em>.</p>\n<h3 id=\"content-security\">Content security<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#content-security\"><i class=\"material-icons\">link</i></a></h3>\n<p>Imagine the following malicious content.</p>\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"malicious-content\" header=\"src/app/app.component.ts\">\nevilTitle = '<a href=\"\" class=\"code-anchor\">Template</a> &#x3C;script>alert(\"evil never sleeps\")&#x3C;/script> Syntax';\n\n</code-example>\n<p>In the component template, the content might be used with interpolation:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-interpolated\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;span>\"{{evilTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> evil title.&#x3C;/span>&#x3C;/p>\n\n</code-example>\n<p>Fortunately, Angular data binding is on alert for dangerous HTML. In the above case,\nthe HTML displays as is, and the Javascript does not execute. Angular <strong>does not</strong>\nallow HTML with script tags to leak into the browser, neither with interpolation\nnor property binding.</p>\n<p>In the following example, however, Angular <a href=\"guide/security#sanitization-and-security-contexts\">sanitizes</a>\nthe values before displaying them.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-content\" header=\"src/app/app.component.html\">\n &#x3C;!--\n Angular generates a warning for the following line as it sanitizes them\n WARNING: sanitizing <a href=\"api/core/SecurityContext#HTML\" class=\"code-anchor\">HTML</a> stripped some content (see http://g.co/ng/security#xss).\n-->\n &#x3C;p>\"&#x3C;span [innerHTML]=\"evilTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> evil title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation handles the <code>&#x3C;script></code> tags differently than\nproperty binding but both approaches render the\ncontent harmlessly. The following is the browser output\nof the <code>evilTitle</code> examples.</p>\n<code-example language=\"bash\">\n\"Template <script>alert(\"evil never sleeps\")</script> Syntax\" is the interpolated evil title.\n\"Template alert(\"evil never sleeps\")Syntax\" is the property bound evil title.\n</code-example>\n<hr>\n<a id=\"other-bindings\"></a>\n<a id=\"기타-바인딩\"></a>\n<!--\n## Attribute, class, and style bindings\n-->\n<h2 id=\"어트리뷰트-클래스-스타일-바인딩\">어트리뷰트, 클래스, 스타일 바인딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#어트리뷰트-클래스-스타일-바인딩\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.\n\nTo see attribute, class, and style bindings in a functioning app, see the <live-example name=\"attribute-binding\"></live-example> especially for this section.\n-->\n<p>Angular 템플릿에서는 프로퍼티 바인딩 외에도 다음과 같은 특수한 바인딩을 사용할 수 있습니다.</p>\n<p>To see attribute, class, and style bindings in a functioning app, see the <live-example name=\"attribute-binding\"></live-example> especially for this section.</p>\n<a id=\"attribute-binding\"></a>\n<!--\n### Attribute binding\n-->\n<h3 id=\"어트리뷰트-바인딩\">어트리뷰트 바인딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#어트리뷰트-바인딩\"><i class=\"material-icons\">link</i></a></h3>\n<p>Set the value of an attribute directly with an <strong>attribute binding</strong>. This is the only exception to the rule that a binding sets a target property and the only binding that creates and sets an attribute.</p>\n<p>Usually, setting an element property with a <a href=\"guide/template-syntax#property-binding\">property binding</a>\nis preferable to setting the attribute with a string. However, sometimes\nthere is no element property to bind, so attribute binding is the solution.</p>\n<p>Consider the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</p>\n<p>Attribute binding syntax resembles property binding, but\ninstead of an element property between brackets, start with the prefix <code>attr</code>,\nfollowed by a dot (<code>.</code>), and the name of the attribute.\nYou then set the attribute value, using an expression that resolves to a string,\nor remove the attribute when the expression resolves to <code>null</code>.</p>\n<p>One of the primary use cases for attribute binding\nis to set ARIA attributes, as in this example:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"attrib-binding-aria\" header=\"src/app/app.component.html\">\n&#x3C;!-- create and set an aria attribute for assistive technology -->\n&#x3C;button [attr.aria-label]=\"actionName\">{{actionName}} with Aria&#x3C;/button>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<h4 id=\"colspan-and-colspan\"><code>colspan</code> and <code>colSpan</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#colspan-and-colspan\"><i class=\"material-icons\">link</i></a></h4>\n<p>Notice the difference between the <code>colspan</code> attribute and the <code>colSpan</code> property.</p>\n<p>If you wrote something like this:</p>\n<code-example language=\"html\">\n  &#x3C;tr>&#x3C;td colspan=\"{{1 + 1}}\">Three-Four&#x3C;/td>&#x3C;/tr>\n</code-example>\n<!--\nYou'd get this error:\n-->\n<p>그러면 에러가 발생합니다:</p>\n<code-example language=\"bash\">\n  Template parse errors:\n  Can't bind to 'colspan' since it isn't a known native property\n</code-example>\n<p>As the message says, the <code>&#x3C;td></code> element does not have a <code>colspan</code> property. This is true\nbecause <code>colspan</code> is an attribute—<code>colSpan</code>, with a capital <code>S</code>, is the\ncorresponding property. Interpolation and property binding can set only <em>properties</em>, not attributes.</p>\n<p>Instead, you'd use property binding and write it like this:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- Notice the colSpan property is camel case -->\n&#x3C;tr>&#x3C;td [colSpan]=\"1 + 1\">Three-Four&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n</div>\n<hr>\n<h3 id=\"class-binding\">Class binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#class-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Here's how to set the <code>class</code> attribute without a binding in plain HTML:</p>\n<code-example language=\"html\">\n&#x3C;!-- standard class attribute setting -->\n&#x3C;div class=\"foo bar\">Some text&#x3C;/div>\n</code-example>\n<p>You can also add and remove CSS class names from an element's <code>class</code> attribute with a <strong>class binding</strong>.</p>\n<p>To create a single class binding, start with the prefix <code>class</code> followed by a dot (<code>.</code>) and the name of the CSS class (for example, <code>[class.foo]=\"hasFoo\"</code>).\nAngular adds the class when the bound expression is truthy, and it removes the class when the expression is falsy (with the exception of <code>undefined</code>, see <a href=\"guide/template-syntax#styling-delegation\">styling delegation</a>).</p>\n<p>To create a binding to multiple classes, use a generic <code>[class]</code> binding without the dot (for example, <code>[class]=\"classExpr\"</code>).\nThe expression can be a space-delimited string of class names, or you can format it as an object with class names as the keys and truthy/falsy expressions as the values.\nWith object format, Angular will add a class only if its associated value is truthy. </p>\n<p>It's important to note that with any object-like expression (<code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, etc), the identity of the object must change for the class list to be updated.\nUpdating the property without changing object identity will have no effect.</p>\n<p>If there are multiple bindings to the same class name, conflicts are resolved using <a href=\"guide/template-syntax#styling-precedence\">styling precedence</a>.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Binding Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Input Type\n    </th>\n    <th>\n      Example Input Values\n    </th>\n  </tr>\n  <tr>\n    <td>Single class binding</td>\n    <td><code>[class.foo]=\"hasFoo\"</code></td>\n    <td><code>boolean | undefined | null</code></td>\n    <td><code>true</code>, <code>false</code></td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">Multi-class binding</td>\n    <td rowspan=\"3\"><code>[class]=\"classExpr\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"my-class-1 my-class-2 my-class-3\"</code></td>\n  </tr>\n  <tr>\n    <td><code>{[key: string]: boolean | undefined | null}</code></td>\n    <td><code>{foo: true, bar: false}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['foo', 'bar']</code></td>\n  </tr>\n</tbody></table>\n<p>The <a href=\"guide/template-syntax#ngclass\">NgClass</a> directive can be used as an alternative to direct <code>[class]</code> bindings.\nHowever, using the above class binding syntax without <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> is preferred because due to improvements in class binding in Angular, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> no longer provides significant value, and might eventually be removed in the future.</p>\n<hr>\n<h3 id=\"style-binding\">Style binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#style-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Here's how to set the <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> attribute without a binding in plain HTML:</p>\n<code-example language=\"html\">\n&#x3C;!-- standard <a href=\"api/animations/style\" class=\"code-anchor\">style</a> attribute setting -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\">Some text&#x3C;/div>\n</code-example>\n<p>You can also set styles dynamically with a <strong>style binding</strong>.</p>\n<p>To create a single style binding, start with the prefix <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> followed by a dot (<code>.</code>) and the name of the CSS style property (for example, <code>[style.width]=\"width\"</code>).\nThe property will be set to the value of the bound expression, which is normally a string.\nOptionally, you can add a unit extension like <code>em</code> or <code>%</code>, which requires a number type.</p>\n<div class=\"alert is-helpful\">\n<p>Note that a <em>style property</em> name can be written in either\n<a href=\"guide/glossary#dash-case\">dash-case</a>, as shown above, or\n<a href=\"guide/glossary#camelcase\">camelCase</a>, such as <code>fontSize</code>.</p>\n</div>\n<p>If there are multiple styles you'd like to toggle, you can bind to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> property directly without the dot (for example, <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code>).\nThe expression attached to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding is most often a string list of styles like <code>\"width: 100px; height: 100px;\"</code>. </p>\n<p>You can also format the expression as an object with style names as the keys and style values as the values, like <code>{width: '100px', height: '100px'}</code>.\nIt's important to note that with any object-like expression (<code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, etc), the identity of the object must change for the class list to be updated.\nUpdating the property without changing object identity will have no effect.</p>\n<p>If there are multiple bindings to the same style property, conflicts are resolved using <a href=\"guide/template-syntax#styling-precedence\">styling precedence rules</a>.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Binding Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Input Type\n    </th>\n    <th>\n      Example Input Values\n    </th>\n  </tr>\n  <tr>\n    <td>Single style binding</td>\n    <td><code>[style.width]=\"width\"</code></td>\n    <td><code>string | undefined | null</code></td>\n    <td><code>\"100px\"</code></td>\n  </tr>\n  <tr>\n  </tr><tr>\n    <td>Single style binding with units</td>\n    <td><code>[style.width.px]=\"width\"</code></td>\n    <td><code>number | undefined | null</code></td>\n    <td><code>100</code></td>\n  </tr>\n    <tr>\n    <td rowspan=\"3\">Multi-style binding</td>\n    <td rowspan=\"3\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"width: 100px; height: 100px\"</code></td>\n  </tr>\n  <tr>\n    <td><code>{[key: string]: string | undefined | null}</code></td>\n    <td><code>{width: '100px', height: '100px'}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['width', '100px']</code></td>\n  </tr>\n</tbody></table>\n<p>The <a href=\"guide/template-syntax#ngstyle\">NgStyle</a> directive can be used as an alternative to direct <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> bindings.\nHowever, using the above style binding syntax without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> is preferred because due to improvements in style binding in Angular, <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> no longer provides significant value, and might eventually be removed in the future.</p>\n<hr>\n<a id=\"styling-precedence\"></a>\n<h3 id=\"styling-precedence\">Styling Precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#styling-precedence\"><i class=\"material-icons\">link</i></a></h3>\n<p>A single HTML element can have its CSS class list and style values bound to a multiple sources (for example, host bindings from multiple directives).</p>\n<p>When there are multiple bindings to the same class name or style property, Angular uses a set of precedence rules to resolve conflicts and determine which classes or styles are ultimately applied to the element.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"styling-precedence-highest-to-lowest\">Styling precedence (highest to lowest)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#styling-precedence-highest-to-lowest\"><i class=\"material-icons\">link</i></a></h4>\n<ol>\n<li>\n<p>Template bindings</p>\n<ol>\n<li>Property binding (for example, <code>&#x3C;div [class.foo]=\"hasFoo\"></code> or <code>&#x3C;div [style.color]=\"color\"></code>)</li>\n<li>Map binding (for example, <code>&#x3C;div [class]=\"classExpr\"></code> or <code>&#x3C;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"></code>)</li>\n<li>Static value (for example, <code>&#x3C;div class=\"foo\"></code> or <code>&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"></code>) </li>\n</ol>\n</li>\n<li>\n<p>Directive host bindings</p>\n<ol>\n<li>Property binding (for example, <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[class.foo]': 'hasFoo'}</code> or <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[style.color]': 'color'}</code>)</li>\n<li>Map binding (for example, <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[class]': 'classExpr'}</code> or <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code>)</li>\n<li>Static value (for example, <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'class': 'foo'}</code> or <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code>)    </li>\n</ol>\n</li>\n<li>\n<p>Component host bindings</p>\n<ol>\n<li>Property binding (for example, <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[class.foo]': 'hasFoo'}</code> or <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[style.color]': 'color'}</code>)</li>\n<li>Map binding (for example, <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[class]': 'classExpr'}</code> or <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code>)</li>\n<li>Static value (for example, <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'class': 'foo'}</code> or <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code>)    </li>\n</ol>\n</li>\n</ol>\n</div>\n<p>The more specific a class or style binding is, the higher its precedence.</p>\n<p>A binding to a specific class (for example, <code>[class.foo]</code>) will take precedence over a generic <code>[class]</code> binding, and a binding to a specific style (for example, <code>[style.bar]</code>) will take precedence over a generic <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"basic-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>Basic specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` binding will override any value for the `special` class in `classExpr`.  -->\n&#x3C;div [class.special]=\"isSpecial\" [class]=\"classExpr\">Some text.&#x3C;/div>\n\n&#x3C;!-- The `style.color` binding will override any value for the `color` property in `styleExpr`.  -->\n&#x3C;div [style.color]=\"color\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\">Some text.&#x3C;/div>\n\n</code-example>\n<p>Specificity rules also apply when it comes to bindings that originate from different sources.\nIt's possible for an element to have bindings in the template where it's declared, from host bindings on matched directives, and from host bindings on matched components.</p>\n<p>Template bindings are the most specific because they apply to the element directly and exclusively, so they have the highest precedence.</p>\n<p>Directive host bindings are considered less specific because directives can be used in multiple locations, so they have a lower precedence than template bindings.</p>\n<p>Directives often augment component behavior, so host bindings from components have the lowest precedence. </p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"source-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>Source specificity&#x3C;/h3>\n\n&#x3C;!-- The `class.special` template binding will override any <a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a> binding to the `special` class set by `dirWithClassBinding` or `comp-with-host-binding`.-->\n&#x3C;comp-with-host-binding [class.special]=\"isSpecial\" dirWithClassBinding>Some text.&#x3C;/comp-with-host-binding>\n\n&#x3C;!-- The `style.color` template binding will override any <a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a> binding to the `color` property set by `dirWithStyleBinding` or `comp-with-host-binding`. -->\n&#x3C;comp-with-host-binding [style.color]=\"color\" dirWithStyleBinding>Some text.&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p>In addition, bindings take precedence over static attributes. </p>\n<p>In the following case, <code>class</code> and <code>[class]</code> have similar specificity, but the <code>[class]</code> binding will take precedence because it is dynamic.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"dynamic-priority\" header=\"src/app/app.component.html\">\n&#x3C;h3><a href=\"\" class=\"code-anchor\">Dynamic</a> vs <a href=\"api/upgrade/static\" class=\"code-anchor\">static</a>&#x3C;/h3>\n\n&#x3C;!-- If `classExpr` has a value for the `special` class, this value will override the `class=\"special\"` below -->\n&#x3C;div class=\"special\" [class]=\"classExpr\">Some text.&#x3C;/div>\n\n&#x3C;!-- If `styleExpr` has a value for the `color` property, this value will override the `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"` below -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\">Some text.&#x3C;/div>\n\n\n</code-example>\n<a id=\"styling-delegation\"></a>\n<h3 id=\"delegating-to-styles-with-lower-precedence\">Delegating to styles with lower precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is possible for higher precedence styles to \"delegate\" to lower precedence styles using <code>undefined</code> values.\nWhereas setting a style property to <code>null</code> ensures the style is removed, setting it to <code>undefined</code> will cause Angular to fall back to the next-highest precedence binding to that style.</p>\n<p>For example, consider the following template: </p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"style-delegation\" header=\"src/app/app.component.html\">\n&#x3C;comp-with-host-binding dirWithHostBinding>&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p>Imagine that the <code>dirWithHostBinding</code> directive and the <code>comp-with-host-binding</code> component both have a <code>[style.width]</code> host binding.\nIn that case, if <code>dirWithHostBinding</code> sets its binding to <code>undefined</code>, the <code>width</code> property will fall back to the value of the <code>comp-with-host-binding</code> host binding.\nHowever, if <code>dirWithHostBinding</code> sets its binding to <code>null</code>, the <code>width</code> property will be removed entirely.</p>\n<!--\n<a id=\"event-binding\"></a>\n-->\n<a id=\"이벤트-바인딩\"></a>\n<a id=\"event-binding\"></a>\n<!--\n## Event binding `(event)`\n-->\n<h2 id=\"이벤트-바인딩-event\">이벤트 바인딩 <code>(event)</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#이벤트-바인딩-event\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nEvent binding allows you to listen for certain events such as\nkeystrokes, mouse movements, clicks, and touches. For an example\ndemonstrating all of the points in this section, see the <live-example name=\"event-binding\">event binding example</live-example>.\n\nAngular event binding syntax consists of a **target event** name\nwithin parentheses on the left of an equal sign, and a quoted\ntemplate statement on the right.\nThe following event binding listens for the button's click events, calling\nthe component's `onSave()` method whenever a click occurs:\n-->\n<p>이벤트 바인딩 문법을 사용하면 키 입력이나 마우스의 움직임, 클릭이나 터치 이벤트를 감지할 수 있습니다.\n이 섹션에서 설명하는 내용은 <live-example name=\"event-binding\">이벤트 바인딩 예제</live-example> 에서 직접 확인할 수 있습니다.</p>\n<p>이벤트 바인딩은 <strong>대상 이벤트</strong> 이름을 괄호(<code>(</code>, <code>)</code>)로 감싸고 템플릿 실행문을 등호로 연결해서 작성합니다.\n예를 들어 버튼의 클릭 이벤트를 감지하고 있다가 사용자가 버튼을 클릭할 때 컴포넌트에 있는 <code>onSave()</code> 메소드를 실행하려면 다음과 같이 구현합니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/template-syntax/syntax-diagram.svg\" alt=\"Syntax diagram\" width=\"600\" height=\"125\">\n</div>\n<!--\n### Target event\n-->\n<h3 id=\"대상-이벤트\">대상 이벤트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#대상-이벤트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAs above, the target is the button's click event.\n-->\n<p>위에서 언급한 것처럼, 대상 이벤트는 버튼 클릭 이벤트입니다.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-1\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n\n</code-example>\n<!--\nAlternatively, use the `on-` prefix, known as the canonical form:\n-->\n<p>이 방식이 익숙하지 않다면 다음과 같이 <code>on-</code> 접두사를 사용할 수도 있습니다.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-2\" header=\"src/app/app.component.html\">\n&#x3C;button on-click=\"onSave($event)\">on-click Save&#x3C;/button>\n\n</code-example>\n<!--\nElement events may be the more common targets, but Angular looks first to see if the name matches an event property\nof a known directive, as it does in the following example:\n-->\n<p>엘리먼트에서 발생하는 이벤트는 HTML 스펙에 정의된 이벤트인 경우가 대부분입니다. 하지만 커스텀 이벤트가 정의되어 있다면 그 이벤트도 같은 방식으로 사용할 수 있습니다. 커스텀 이벤트의 이름이 일반 이벤트 이름과 겹치면 커스텀 이벤트의 우선순위가 더 높습니다:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"custom-directive\" header=\"src/app/app.component.html\">\n&#x3C;h4>myClick is an event on the custom ClickDirective:&#x3C;/h4>\n&#x3C;button (myClick)=\"clickMessage=$event\" clickable>click with myClick&#x3C;/button>\n{{clickMessage}}\n\n</code-example>\n<!--\nIf the name fails to match an element event or an output property of a known directive,\nAngular reports an “unknown directive” error.\n-->\n<p>그리고 엘리먼트 이벤트나 커스텀 디렉티브에서 해당되는 이벤트 이름을 찾지 못하면 “unknown directive” 에러가 발생합니다.</p>\n<!--\n### *$event* and event handling statements\n-->\n<h3 id=\"event-객체와-이벤트-처리-실행문\"><em>$event</em> 객체와 이벤트 처리 실행문<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-객체와-이벤트-처리-실행문\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn an event binding, Angular sets up an event handler for the target event.\n-->\n<p>이벤트를 바인딩하면 Angular의 이벤트 처리 함수가 대상 이벤트와 연결됩니다.</p>\n<!--\nWhen the event is raised, the handler executes the template statement.\nThe template statement typically involves a receiver, which performs an action\nin response to the event, such as storing a value from the HTML control\ninto a model.\n-->\n<p>그러면 이벤트가 발생했을 때 Angular 프레임워크의 이벤트 처리 함수가 템플릿 실행문을 실행하는데,\n이 템플릿 실행문을 사용해서 원하는 동작을 실행할 수 있습니다.</p>\n<!--\nThe binding conveys information about the event. This information can include data values such as an event object, string, or number named `$event`.\n\nThe target event determines the shape of the `$event` object.\nIf the target event is a native DOM element event, then `$event` is a\n[DOM event object](https://developer.mozilla.org/en-US/docs/Web/Events),\nwith properties such as `target` and `target.value`.\n-->\n<p>이 때 템플릿 실행문에는 이벤트에 대한 정보와 이벤트가 발생한 HTML 컨트롤에 대한 정보가 <code>$event</code> 라는 객체에 담겨 전달됩니다.\n그리고 이 정보는 <code>$event</code>라는 이름으로 뭉뚱그려지기는 했지만 객체가 될 수도 있고 문자열이나 숫자가 될 수도 있습니다.</p>\n<p><code>$event</code> 객체의 타입은 이벤트가 어떤것이냐에 따라 달라집니다.\n대상 이벤트가 네이티브 DOM 엘리먼트의 이벤트라면 <code>$envet</code> 객체는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM 이벤트 객체</a>이며, 이 객체에서 <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code> 프로퍼티나 <code>target.value</code> 값을 참조할 수 있습니다.</p>\n<!--\nConsider this example:\n-->\n<p>다음 예제를 봅시다:</p>\n<code-example path=\"event-binding/src/app/app.component.html\" region=\"event-binding-3\" header=\"src/app/app.component.html\">\n&#x3C;input [value]=\"currentItem.name\"\n       (input)=\"currentItem.name=$event.target.value\" >\nwithout <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>\n\n</code-example>\n<!--\nThis code sets the `<input>` `value` property by binding to the `name` property.\nTo listen for changes to the value, the code binds to the `input`\nevent of the `<input>` element.\nWhen the user makes changes, the `input` event is raised, and the binding executes\nthe statement within a context that includes the DOM event object, `$event`.\n-->\n<p>이 코드에서는 <code>currentHero.name</code> 프로퍼티를 <code>&#x3C;input></code> 엘리먼트의 <code>value</code> 프로퍼티로 바인딩하면서 초기값을 지정합니다.\n그리고 값이 변경되는 것을 감지하기 위해 <code>&#x3C;input></code> 엘리먼트의 <code>input</code> 이벤트를 바인딩합니다.\n사용자가 입력 필드의 값을 변경하면 <code>input</code> 이벤트가 발생하고 이 이벤트에 연결된 템플릿 실행문이 실행되는데, 이 때 DOM 이벤트 객체가 <code>$event</code> 객체로 템플릿 실행문에 전달됩니다.</p>\n<!--\nTo update the `name` property, the changed text is retrieved by following the path `$event.target.value`.\n-->\n<p>그리고 이벤트 객체에서 값을 참조해서 <code>name</code> 프로퍼티 값을 다시 지정하기 위해 템플릿 실행문을 <code>$event.target.value</code> 와 같이 작성했습니다.</p>\n<!--\nIf the event belongs to a directive&mdash;recall that components\nare directives&mdash;`$event` has whatever shape the directive produces.\n-->\n<p>대상 이벤트가 DOM 엘리먼트의 이벤트가 아니고 커스텀 디렉티브(컴포넌트)에서 정의하는 이벤트라면, <code>$event</code> 객체는 해당 디렉티브에서 정의하는 대로 자유로운 형식이 될 수 있습니다.</p>\n<h3 id=\"custom-events-with-eventemitter\">Custom events with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#custom-events-with-eventemitter\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nDirectives typically raise custom events with an Angular [EventEmitter](api/core/EventEmitter).\nThe directive creates an `EventEmitter` and exposes it as a property.\nThe directive calls `EventEmitter.emit(payload)` to fire an event, passing in a message payload, which can be anything.\nParent directives listen for the event by binding to this property and accessing the payload through the `$event` object.\n-->\n<p>Angular에서 제공하는 <a href=\"api/core/EventEmitter\">EventEmitter</a>를 사용하면 커스텀 이벤트를 만들 수 있습니다.\n우선, 디렉티브에 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 타입의 프로퍼티를 선언하고 이 프로퍼티를 디렉티브 외부로 열어줍니다.\n그런 뒤 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 객체의 <code>emit(데이터)</code> 함수를 실행하면 데이터가 <code>$event</code> 객체에 담겨 디렉티브 외부로 전달됩니다.\n부모 디렉티브에서는 자식 디렉티브의 이벤트 프로퍼티를 바인딩해서 이 커스텀 이벤트를 감지하고 있다가, 이벤트가 발생했을 때 <code>$event</code> 이벤트에 담긴 데이터를 받아서 처리하면 됩니다.</p>\n<!--\nConsider an `ItemDetailComponent` that presents item information and responds to user actions.\nAlthough the `ItemDetailComponent` has a delete button, it doesn't know how to delete the hero. It can only raise an event reporting the user's delete request.\n\nHere are the pertinent excerpts from that `ItemDetailComponent`:\n-->\n<p><code>ItemDetailComponent</code> 는 아이템을 화면에 표시하면서 사용자의 동작에도 반응해야 한다고 합시다.\n그런데 이 컴포넌트에 삭제 버튼이 있다고 해도 이 컴포넌트는 히어로를 어떻게 삭제하는지 알지 못합니다.\n이 동작을 구현하려면 사용자가 삭제 요청을 했을 때 이벤트를 발생시키고, 부모 컴포넌트에서 이 이벤트를 받아 처리하는 방법이 가장 좋습니다.</p>\n<p><code>ItemDetailComponent</code> 코드에서 관련된 부분을 봅시다:</p>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.html\" header=\"src/app/item-detail/item-detail.component.html (template)\" region=\"line-through\">\n&#x3C;img src=\"{{itemImageUrl}}\" [style.display]=\"displayNone\">\n&#x3C;span [style.text-decoration]=\"lineThrough\">{{ item.name }}\n&#x3C;/span>\n&#x3C;button (click)=\"delete()\">Delete&#x3C;/button>\n\n</code-example>\n<code-example path=\"event-binding/src/app/item-detail/item-detail.component.ts\" header=\"src/app/item-detail/item-detail.component.ts (deleteRequest)\" region=\"deleteRequest\">\n// This component makes a request but it can't actually delete a hero.\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Item>();\n\ndelete() {\n  this.deleteRequest.emit(this.item);\n  this.displayNone = this.displayNone ? '' : 'none';\n  this.lineThrough = this.lineThrough ? '' : 'line-through';\n}\n\n</code-example>\n<!--\nThe component defines a `deleteRequest` property that returns an `EventEmitter`.\nWhen the user clicks *delete*, the component invokes the `delete()` method,\ntelling the `EventEmitter` to emit an `Item` object.\n\nNow imagine a hosting parent component that binds to the `deleteRequest` event\nof the `ItemDetailComponent`.\n-->\n<p>컴포넌트에는 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>를 반환하는 <code>deleteRequest</code> 프로퍼티가 존재합니다.\n사용자가 <em>삭제</em> 버튼을 클릭하면 <code>delete()</code> 메소드를 실행하고,\n이 함수에서는 컴포넌트에 <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> 타입으로 선언한 <code>deleteRequest</code> 프로퍼티에 <code>Item</code> 객체를 담아 컴포넌트 외부로 보냅니다.</p>\n<p>그러면 부모 컴포넌트에서 이 이벤트를 받기 위해 <code>deleteRequest</code> 프로퍼티를 바인딩하고 있어야 합니다.</p>\n<code-example path=\"event-binding/src/app/app.component.html\" header=\"src/app/app.component.html (event-binding-to-component)\" region=\"event-binding-to-component\">\n&#x3C;app-item-detail (deleteRequest)=\"deleteItem($event)\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<!--\nWhen the `deleteRequest` event fires, Angular calls the parent component's\n`deleteItem()` method, passing the *item-to-delete* (emitted by `ItemDetail`)\nin the `$event` variable.\n-->\n<p>최종적으로 <code>deleteRequest</code> 이벤트가 발생하면 Angular는 부모 컴포넌트의 <code>deleteItem()</code> 메소드를 실행하면서\n(<code>ItemDetail</code>에서 보낸) <em>삭제해야 할 아이템</em>에 대한 정보를 <code>$event</code> 변수에 담아 전달합니다.</p>\n<!--\n### Template statements have side effects\n-->\n<h3 id=\"템플릿-실행문의-영향\">템플릿 실행문의 영향<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-실행문의-영향\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThough [template expressions](guide/template-syntax#template-expressions) shouldn't have [side effects](guide/template-syntax#avoid-side-effects), template\nstatements usually do. The `deleteItem()` method does have\na side effect: it deletes an item.\n\nDeleting an item updates the model, and depending on your code, triggers\nother changes including queries and saving to a remote server.\nThese changes propagate through the system and ultimately display in this and other views.\n-->\n<p><a href=\"guide/template-syntax#template-expressions\">템플릿 표현식</a>은 실행되더라도 <a href=\"guide/template-syntax#avoid-side-effects\">사이드 이펙트</a>가 없지만, 템플릿 실행문은 사이드 이펙트를 유발할 수 있습니다. 예를 들어 <code>deleteItem()</code> 메소드를 실행하면 목록에서 항목이 하나 제거되는 것도 사이드 이펙트로 볼 수 있습니다.</p>\n<p>예제 코드로 보면, 아이템을 삭제하면 모델이 업데이트 되면서 서버에 새로운 목록을 요청하거나 삭제 요청을 보내는 등 다른 동작을 유발할 수 있습니다.\n이런 동작들은 뷰 데이터를 갱신하고 서버에 반영하면서 시스템을 자연스럽게 유지합니다.</p>\n<hr>\n<a id=\"two-way\"></a>\n<a id=\"양방향-바인딩\"></a>\n<h2 id=\"two-way-binding-\">Two-way binding <code>[(...)]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-\"><i class=\"material-icons\">link</i></a></h2>\n<p>Two-way binding gives your app a way to share data between a component class and\nits template.</p>\n<p>For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"two-way-binding\">two-way binding example</live-example>.</p>\n<h3 id=\"basics-of-two-way-binding\">Basics of two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#basics-of-two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>Two-way binding does two things:</p>\n<ol>\n<li>Sets a specific element property.</li>\n<li>Listens for an element change event.</li>\n</ol>\n<p>Angular offers a special <em>two-way data binding</em> syntax for this purpose, <code>[()]</code>.\nThe <code>[()]</code> syntax combines the brackets\nof property binding, <code>[]</code>, with the parentheses of event binding, <code>()</code>.</p>\n<div class=\"callout is-important\">\n<header>\n<!--\n  [( )] = banana in a box\n-->\n  [( )] = 상자 안에 든 바나나\n</header>\n<!--\nVisualize a *banana in a box* to remember that the parentheses go _inside_ the brackets.\n-->\n<p>두 괄호 중 어떤 괄호가 안에 들어가는지 헷갈린다면 <em>상자 안에 든 바나나</em> 의 모양을 떠올려 보세요.</p>\n</div>\n<!--\nThe `[()]` syntax is easy to demonstrate when the element has a settable\nproperty called `x` and a corresponding event named `xChange`.\nHere's a `SizerComponent` that fits this pattern.\n=======\nThe `[()]` syntax is easy to demonstrate when the element has a settable\nproperty called `x` and a corresponding event named `xChange`.\nHere's a `SizerComponent` that fits this pattern.\nIt has a `size` value property and a companion `sizeChange` event:\n-->\n<p><code>[()]</code> 라고 사용하면 컴포넌트에서 이름이 <code>x</code>인 프로퍼티가 프로퍼티 바인딩 되면서, 이벤트 이름이 <code>xChange</code>인 이벤트가 함께 이벤트 바인딩 됩니다.\n<code>SizerComponent</code> 예제를 보면서 이 내용을 확인해봅시다.\n이 컴포넌트에는 <code>size</code> 프로퍼티와 <code>sizeChange</code> 이벤트가 선언되어 있습니다.</p>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" header=\"src/app/sizer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sizer',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './sizer.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./sizer.component.css']\n})\nexport class SizerComponent {\n\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  size: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n\n}\n\n\n</code-example>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&#x3C;div>\n  &#x3C;button (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n  &#x3C;button (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n  &#x3C;label [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/label>\n&#x3C;/div>\n\n\n</code-example>\n<p>The initial <code>size</code> is an input value from a property binding.\nClicking the buttons increases or decreases the <code>size</code>, within\nmin/max value constraints,\nand then raises, or emits, the <code>sizeChange</code> event with the adjusted size.</p>\n<!--\nHere's an example in which the `AppComponent.fontSizePx` is two-way bound to the `SizerComponent`:\n-->\n<p>이 때 받은 커스텀 이벤트를 활용해서 <code>SizerComponent</code> 의 부모 컴포넌트인 <code>AppComponent</code>의 <code>fontSizePx</code> 프로퍼티를 양방향 바인딩으로 연결해 봅시다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-1)\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<!--\nThe `AppComponent.fontSizePx` establishes the initial `SizerComponent.size` value.\n\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n\nClicking the buttons updates the `AppComponent.fontSizePx` via the two-way binding.\nThe revised `AppComponent.fontSizePx` value flows through to the _style_ binding,\nmaking the displayed text bigger or smaller.\n-->\n<p><code>AppComponent</code>에서도 <code>fontSizePx</code> 프로퍼티의 초기값은 <code>SizerComponent.size</code> 값으로 초기화 됩니다.\n그리고 증감 버튼을 누를때마다 <code>AppComponent.fontSizePx</code>값이 양방향 바인딩에 의해 갱신됩니다.\n이렇게 갱신된 <code>AppComponent.fontSizePx</code> 값은 <em>스타일</em> 바인딩으로 연결되면서, <code>Resizable Text</code>의 크기가 커지거나 작아집니다.</p>\n<!--\nThe two-way binding syntax is really just syntactic sugar for a _property_ binding and an _event_ binding.\nAngular desugars the `SizerComponent` binding into this:\n-->\n<p>엄밀히 얘기하면, 양방향 바인딩 문법은 <em>프로퍼티</em> 바인딩과 <em>이벤트</em> 바인딩을 하나로 묶어둔 문법 설탕(syntatic sugar)일 뿐입니다.\n프로퍼티 바인딩과 이벤트 바인딩을 각각 구현하려면 코드를 다음과 같이 작성합니다:</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-2)\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<!--\nThe `$event` variable contains the payload of the `SizerComponent.sizeChange` event.\nAngular assigns the `$event` value to the `AppComponent.fontSizePx` when the user clicks the buttons.\n-->\n<p><code>$event</code> 객체에는 <code>SizeComponent.sizeChange</code> 이벤트에서 보내는 폰트 크기값이 담겨 있습니다.\n그래서 사용자가 증감 버튼을 클릭해서 이벤트가 발생할 때마다 <code>AppComponent.fontSizePx</code> 프로퍼티의 값을 새로운 값으로 할당하고 있습니다.</p>\n<h3 id=\"two-way-binding-in-forms\">Two-way binding in forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding-in-forms\"><i class=\"material-icons\">link</i></a></h3>\n<p>The two-way binding syntax is a great convenience compared to\nseparate property and event bindings. It would be convenient to\nuse two-way binding with HTML form elements like <code>&#x3C;input></code> and\n<code>&#x3C;select></code>. However, no native HTML element follows the <code>x</code>\nvalue and <code>xChange</code> event pattern.</p>\n<p>For more on how to use two-way binding in forms, see\nAngular <a href=\"guide/template-syntax#ngModel\">NgModel</a>.</p>\n<hr>\n<!--\n<a id=\"directives\"></a>\n-->\n<a id=\"디렉티브\"></a>\n<!--\n## Built-in directives\n-->\n<h2 id=\"기본-디렉티브\">기본 디렉티브<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#기본-디렉티브\"><i class=\"material-icons\">link</i></a></h2>\n<p>Angular offers two kinds of built-in directives: attribute\ndirectives and structural directives. This segment reviews some of the most common built-in directives,\nclassified as either <a href=\"guide/template-syntax#attribute-directives\"><em>attribute</em> directives</a> or <a href=\"guide/template-syntax#structural-directives\"><em>structural</em> directives</a> and has its own <live-example name=\"built-in-directives\">built-in directives example</live-example>.</p>\n<p>For more detail, including how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n<hr>\n<a id=\"attribute-directives\"></a>\n<a id=\"어트리뷰트-디렉티브\"></a>\n<!--\n### Built-in attribute directives\n-->\n<h2 id=\"기본-어트리뷰트-디렉티브\">기본 어트리뷰트 디렉티브<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#기본-어트리뷰트-디렉티브\"><i class=\"material-icons\">link</i></a></h2>\n<p>&#x3C;!-\nAttribute directives listen to and modify the behavior of\nother HTML elements, attributes, properties, and components.\nYou usually apply them to elements as if they were HTML attributes, hence the name.</p>\n<p>Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a>—adds and removes a set of CSS classes.</li>\n<li><a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a>—adds and removes a set of HTML styles.</li>\n<li><a href=\"guide/template-syntax#ngModel\"><code>NgModel</code></a>—adds two-way data binding to an HTML form element.\n-->\n어트리뷰트 디렉티브는 HTML 엘리먼트나 어트리뷰트, 프로퍼티, 컴포넌트의 동작을 조작합니다.\nYou usually apply them to elements as if they were HTML attributes, hence the name.</li>\n</ul>\n<p>Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngClass\"><code>NgClass</code></a>—CSS 클래스를 추가하거나 제거합니다.</li>\n<li><a href=\"guide/template-syntax#ngStyle\"><code>NgStyle</code></a>—HTML 스타일을 추가하거나 제거합니다.</li>\n<li><a href=\"guide/template-syntax#ngModel\"><code>NgModel</code></a>—HTML 폼 엘리먼트에 양방향 바인딩을 연결합니다.</li>\n</ul>\n<hr>\n<a id=\"ngClass\"></a>\n<h3 id=\"ngclass\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngclass\"><i class=\"material-icons\">link</i></a></h3>\n<p>Add or remove several CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\" header=\"src/app/app.component.html\">\n&#x3C;!-- toggle the \"special\" class on/off with a property -->\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\">This div is special&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\nTo add or remove a *single* class, use [class binding](guide/template-syntax#class-binding) rather than `NgClass`.\n-->\n<p>하지만 클래스 <em>여러 개를 동시에</em> 조작한다면 클래스 바인딩을 사용하는 것보다 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> 디렉티브를 사용하는 것이 더 좋습니다.</p>\n</div>\n<!--\nConsider a `setCurrentClasses()` component method that sets a component property,\n`currentClasses`, with an object that adds or removes three classes based on the\n`true`/`false` state of three other component properties. Each key of the object is a CSS class name; its value is `true` if the class should be added,\n`false` if it should be removed.\n-->\n<p>지정해야 하는 클래스가 여러 개라면 컴포넌트 프로퍼티를 따로 선언하고, 이 프로퍼티 값이 <code>true</code>냐 <code>false</code>냐에 따라 이 값에 따라 클래스를 지정하는 방법도 고려해볼만 합니다.\nEach key of the object is a CSS class name; its value is <code>true</code> if the class should be added,\n<code>false</code> if it should be removed.</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\" header=\"src/app/app.component.ts\">\ncurrentClasses: {};\nsetCurrentClasses() {\n  // CSS classes: added/removed per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component <a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">properties</a>\n  this.currentClasses =  {\n    'saveable': this.canSave,\n    'modified': !this.isUnchanged,\n    'special':  this.isSpecial\n  };\n}\n\n</code-example>\n<!--\nAdding an `ngClass` property binding to `currentClasses` sets the element's classes accordingly:\n-->\n<p>그리고 <code>currentClasses</code>를 <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> 디렉티브에 바인딩하려면 다음과 같이 구현합니다:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\">This div is initially saveable, unchanged, and special.&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Remember that in this situation you'd call <code>setCurrentClasses()</code>,\nboth initially and when the dependent properties change.</p>\n</div>\n<hr>\n<a id=\"ngStyle\"></a>\n<h3 id=\"ngstyle\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<p>Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set many inline styles simultaneously and dynamically, based on the state of the component.</p>\n<h4 id=\"without-ngstyle\">Without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#without-ngstyle\"><i class=\"material-icons\">link</i></a></h4>\n<p>For context, consider setting a <em>single</em> style value with <a href=\"guide/template-syntax#style-binding\">style binding</a>, without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-ng-style\" header=\"src/app/app.component.html\">\n&#x3C;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n&#x3C;/div>\n\n</code-example>\n<p>However, to set <em>many</em> inline styles at the same time, use the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> directive.</p>\n<p>The following is a <code>setCurrentStyles()</code> method that sets a component\nproperty, <code>currentStyles</code>, with an object that defines three styles,\nbased on the state of three other component properties:</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\" header=\"src/app/app.component.ts\">\ncurrentStyles: {};\nsetCurrentStyles() {\n  // CSS styles: set per current <a href=\"api/animations/state\" class=\"code-anchor\">state</a> of component <a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">properties</a>\n  this.currentStyles = {\n    'font-style':  this.canSave      ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n    'font-size':   this.isSpecial    ? '24px'   : '12px'\n  };\n}\n\n</code-example>\n<!--\nAdding an `ngStyle` property binding to `currentStyles` sets the element's styles accordingly:\n-->\n<p>그리고 <code>currentStyles</code>를 <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> 디렉티브에 바인딩하려면 다음과 같이 구현합니다:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Remember to call <code>setCurrentStyles()</code>, both initially and when the dependent properties change.</p>\n</div>\n<hr>\n<a id=\"ngModel\"></a>\n<h3 id=\"ngmodel-two-way-binding\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>: Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive allows you to display a data property and\nupdate that property when the user makes changes. Here's an example:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" header=\"src/app/app.component.html (NgModel example)\" region=\"NgModel-1\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<h4 id=\"import-formsmodule-to-use-ngmodel\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nBefore using the `ngModel` directive in a two-way data binding,\nyou must import the `FormsModule` and add it to the NgModule's `imports` list.\nLearn more about the `FormsModule` and `ngModel` in [Forms](guide/forms#ngModel).\n\nRemember to import the `FormsModule` to make `[(ngModel)]` available as follows:\n-->\n<p><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 디렉티브로 양방향 바인딩을 구현하려면 NgModule의 <code>imports</code> 목록에 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>을 추가해야 합니다.\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>과 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>에 대한 자세한 설명은 <a href=\"guide/forms#ngModel\">Forms</a> 문서를 참고하세요.</p>\n<p>NgModule에 <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> 을 다음과 같이 추가합니다.</p>\n<code-example path=\"built-in-directives/src/app/app.module.ts\" header=\"src/app/app.module.ts (FormsModule import)\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;--- JavaScript import from Angular\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;--- import into the <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>\n  ],\n/* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n<p>You could achieve the same result with separate bindings to\nthe <code>&#x3C;input></code> element's  <code>value</code> property and <code>input</code> event:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-NgModel\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"without\">without <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>:&#x3C;/label>\n&#x3C;input [value]=\"currentItem.name\" (input)=\"currentItem.name=$event.target.value\" id=\"without\">\n\n</code-example>\n<p>To streamline the syntax, the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive hides the details behind its own <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input and <code>ngModelChange</code> output properties:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModelChange\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-change\">(ngModelChange)=\"...name=$event\":&#x3C;/label>\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"currentItem.name=$event\" id=\"example-change\">\n\n</code-example>\n<!--\nThe `ngModel` data property sets the element's value property and the `ngModelChange` event property\nlistens for changes to the element's value.\n-->\n<p><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 프로퍼티는 엘리먼트의 프로퍼티 값을 지정하고 <code>ngModelChange</code> 이벤트 프로퍼티는 엘리먼트 값이 변경되는 것을 감지합니다.</p>\n<h4 id=\"ngmodel-and-value-accessors\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h4>\n<p>The details are specific to each kind of element and therefore the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive only works for an element\nsupported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>\nthat adapts an element to this protocol.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements and the\n<a href=\"guide/forms\">Forms</a> guide shows how to bind to them.</p>\n<p>You can't apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form native element or a\nthird-party custom component until you write a suitable value accessor. For more information, see\nthe API documentation on <a href=\"https://angular.io/api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n<p>You don't need a value accessor for an Angular component that\nyou write because you can name the value and event properties\nto suit Angular's basic <a href=\"guide/template-syntax#two-way\">two-way binding syntax</a>\nand skip <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> altogether.\nThe <code>sizer</code> in the\n<a href=\"guide/template-syntax#two-way\">Two-way Binding</a> section is an example of this technique.</p>\n<p>Separate <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> bindings are an improvement over binding to the\nelement's native properties, but you can streamline the binding with a\nsingle declaration using the <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<p>This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only <em>set</em> a data-bound property.\nIf you need to do something more, you can write the expanded form;\nfor example, the following changes the <code>&#x3C;input></code> value to uppercase:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\" header=\"src/app/app.component.html\">\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\">\n\n</code-example>\n<!--\nHere are all variations in action, including the uppercase version:\n-->\n<p><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> 디렉티브는 다음과 같이 다양한 문법으로 사용할 수 있습니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" alt=\"NgModel variations\" width=\"540\" height=\"264\">\n</div>\n<hr>\n<a id=\"structural-directives\"></a>\n<a id=\"구조-디렉티브\"></a>\n<!--\n## Built-in _structural_ directives\n-->\n<h2 id=\"기본-구조-디렉티브\">기본 <em>구조</em> 디렉티브<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#기본-구조-디렉티브\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nStructural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating\nthe host elements to which they are attached.\n-->\n<p>구조 디렉티브는 DOM 엘리먼트의 모양을 바꾸거나, DOM 트리에서 DOM 엘리먼트를 추가하거나 제거하는 등 HTML 레이아웃을 조작합니다.</p>\n<p>This section is an introduction to the common built-in structural directives:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngIf\"><code>NgIf</code></a>—conditionally creates or destroys subviews from the template.</li>\n<li><a href=\"guide/template-syntax#ngFor\"><code>NgFor</code></a>—repeat a node for each item in a list.</li>\n<li><a href=\"guide/template-syntax#ngSwitch\"><code>NgSwitch</code></a>—a set of directives that switch among alternative views.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>The deep details of structural directives are covered in the\n<a href=\"guide/structural-directives\">Structural Directives</a> guide,\nwhich explains the following:</p>\n<ul>\n<li>Why you\n<a href=\"guide/structural-directives#the-asterisk--prefix\">prefix the directive name with an asterisk (*)</a>.</li>\n<li>Using <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a>\nto group elements when there is no suitable host element for the directive.</li>\n<li>How to write your own structural directive.</li>\n<li>That you can only apply <a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">one structural directive</a> to an element.</li>\n</ul>\n</div>\n<hr>\n<a id=\"ngIf\"></a>\n<h3 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngif\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can add or remove an element from the DOM by applying an `NgIf` directive to\na host element.\nBind the directive to a condition expression like `isActive` in this example.\n-->\n<p><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 디렉티브를 사용하면 조건에 따라 원하는 위치(<em>호스트 엘리먼트</em>)에 엘리먼트를 추가하거나 제거할 수 있습니다.\n다음 예제에서 보면 <code><a href=\"api/router/RouterLinkActive#isActive\" class=\"code-anchor\">isActive</a></code>값에 따라 디렉티브가 뷰에 추가되거나 제거됩니다.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"<a href=\"api/router/RouterLinkActive#isActive\" class=\"code-anchor\">isActive</a>\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">&#x3C;/app-item-detail>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\nDon't forget the asterisk (`*`) in front of `ngIf`. For more information\non the asterisk, see the [asterisk (*) prefix](guide/structural-directives#the-asterisk--prefix) section of\n[Structural Directives](guide/structural-directives).\n-->\n<p><code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 앞에 별표(<code>*</code>)를 꼭 붙여야 합니다.\nFor more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n</div>\n<!--\nWhen the `isActive` expression returns a truthy value, `NgIf` adds the\n`ItemDetailComponent` to the DOM.\nWhen the expression is falsy, `NgIf` removes the `ItemDetailComponent`\nfrom the DOM, destroying that component and all of its sub-components.\n-->\n<p>이 코드에서는 <code><a href=\"api/router/RouterLinkActive#isActive\" class=\"code-anchor\">isActive</a></code> 표현식의 값이 참으로 평가되면 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> 디렉티브가 <code>HeroDetailComponent</code>를 DOM에 추가합니다.\n그리고 표현식의 값이 거짓으로 평가되면 이 컴포넌트를 DOM에서 제거합니다. 이 때 이 컴포넌트와 이 컴포넌트의 하위 컴포넌트는 모두 종료됩니다.</p>\n<h4 id=\"showhide-vs-ngif\">Show/hide vs. <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h4>\n<p>Hiding an element is different from removing it with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.\nFor comparison, the following example shows how to control\nthe visibility of an element with a\n<a href=\"guide/template-syntax#class-binding\">class</a> or <a href=\"guide/template-syntax#style-binding\">style</a> binding.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-3\" header=\"src/app/app.component.html\">\n&#x3C;!-- isSpecial is true -->\n&#x3C;div [class.hidden]=\"!isSpecial\">Show with class&#x3C;/div>\n&#x3C;div [class.hidden]=\"isSpecial\">Hide with class&#x3C;/div>\n\n&#x3C;p>ItemDetail is in the DOM but hidden&#x3C;/p>\n&#x3C;app-item-detail [class.hidden]=\"isSpecial\">&#x3C;/app-item-detail>\n\n&#x3C;div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n&#x3C;div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n\n</code-example>\n<p>When you hide an element, that element and all of its descendants remain in the DOM.\nAll components for those elements stay in memory and\nAngular may continue to check for changes.\nYou could be holding onto considerable computing resources and degrading performance\nunnecessarily.</p>\n<p><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> works differently. When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes the element and its descendants from the DOM.\nIt destroys their components, freeing up resources, which\nresults in a better user experience.</p>\n<p>If you are hiding large component trees, consider <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> as a more\nefficient alternative to showing/hiding.</p>\n<div class=\"alert is-helpful\">\n<p>For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code><a href=\"api/common/NgIf#ngIfElse\" class=\"code-anchor\">ngIfElse</a></code>, see the <a href=\"api/common/NgIf\">API documentation about NgIf</a>.</p>\n</div>\n<!--\n#### Guard against null\n-->\n<h4 id=\"null-방지\">null 방지<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#null-방지\"><i class=\"material-icons\">link</i></a></h4>\n<p>Another advantage of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is that you can use it to guard against null. Show/hide\nis best suited for very simple use cases, so when you need a guard, opt instead for <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. Angular will throw an error if a nested expression tries to access a property of <code>null</code>.</p>\n<p>The following shows <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> guarding two <code>&#x3C;div></code>s.\nThe <code>currentCustomer</code> name appears only when there is a <code>currentCustomer</code>.\nThe <code>nullCustomer</code> will not be displayed as long as it is <code>null</code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\">Hello, {{currentCustomer.name}}&#x3C;/div>\n\n</code-example>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\">Hello, &#x3C;span>{{nullCustomer}}&#x3C;/span>&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\nSee also the\n[safe navigation operator](guide/template-syntax#safe-navigation-operator \"Safe navigation operator (?.)\") below.\n-->\n<p><a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe navigation operator (?.)\">안전 참조 연산자</a> 에 대해서도 확인해 보세요.</p>\n</div>\n<hr>\n<a id=\"ngFor\"></a>\n<h3 id=\"ngfor\"><code>NgFor</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n`NgFor` is a repeater directive&mdash;a way to present a list of items.\nYou define a block of HTML that defines how a single item should be displayed\nand then you tell Angular to use that block as a template for rendering each item in the list.\nThe text assigned to `*ngFor` is the instruction that guides the repeater process.\n-->\n<p><code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code>는 템플릿을 반복하는 디렉티브이며, 배열의 각 항목을 뷰에 표시할 때 주로 사용합니다.\n이 디렉티브를 사용할 때는 배열의 한 항목을 뷰로 어떻게 표시할지 HTML 템플릿으로 먼저 정의합니다.\n그러면 Angular가 템플릿을 반복할 때마다 배열의 항목이 하나씩 전달되면서 뷰를 표시합니다.</p>\n<p>The following example shows <code>NgFor</code> applied to a simple <code>&#x3C;div></code>. (Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.)</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">{{item.name}}&#x3C;/div>\n\n</code-example>\n<p>You can also apply an <code>NgFor</code> to a component element, as in the following example.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">&#x3C;/app-item-detail>\n\n</code-example>\n<a id=\"microsyntax\"></a>\n<div class=\"callout is-critical\">\n<header>*ngFor microsyntax</header>\n<p>The string assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is not a <a href=\"guide/template-syntax#template-expressions\">template expression</a>. Rather,\nit's a <em>microsyntax</em>—a little language of its own that Angular interprets.\nThe string <code>\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\"</code> means:</p>\n<blockquote>\n<p><em>Take each item in the <code>items</code> array, store it in the local <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> looping variable, and\nmake it available to the templated HTML for each iteration.</em></p>\n</blockquote>\n<p>Angular translates this instruction into an <code>&#x3C;ng-template></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>\nin the list.\nFor more information about microsyntax, see the <a href=\"guide/structural-directives#microsyntax\">Structural Directives</a> guide.</p>\n</div>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<a id=\"템플릿-입력-변수\"></a>\n<!--\n#### Template input variables\n-->\n<h4 id=\"템플릿-입력-변수-template-input-variables\">템플릿 입력 변수 (Template input variables)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-입력-변수-template-input-variables\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `let` keyword before `item` creates a template input variable called `item`.\nThe `ngFor` directive iterates over the `items` array returned by the parent component's `items` property\nand sets `item` to the current item from the array during each iteration.\n\nReference `item` within the `ngFor` host element\nas well as within its descendants to access the item's properties.\nThe following example references `item` first in an interpolation\nand then passes in a binding to the `item` property of the `<app-item-detail>` component.\n-->\n<p><code>hero</code> 안에 있는 <code>let</code> 키워드는 <em>템플릿 입력 변수</em> <code>hero</code>를 만드는 키워드입니다.\n그리고 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 디렉티브는 부모 컴포넌트의 <code>heroes</code> 배열의 각 항목을 반환하면서 이 문법을 반복하고, 각각의 반복마다 새로운 <code>hero</code> 아이템을 템플릿에 적용합니다.</p>\n<p>Reference <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> within the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> host element\nas well as within its descendants to access the item's properties.\nThe following example references <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> first in an interpolation\nand then passes in a binding to the <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> property of the <code>&#x3C;app-item-detail></code> component.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\" header=\"src/app/app.component.html\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">{{item.name}}&#x3C;/div>\n&#x3C;!-- . . . -->\n  &#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\" [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>For more information about template input variables, see\n<a href=\"guide/structural-directives#template-input-variable\">Structural Directives</a>.</p>\n<h4 id=\"ngfor-with-index\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> with <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `index` property of the `NgFor` directive context\nreturns the zero-based index of the item in each iteration.\nYou can capture the `index` in a template input variable and use it in the template.\n-->\n<p><code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 디렉티브에서 제공하는 <code>index</code> 프로퍼티는 반복문이 반복되는 횟수를 나타내는 인덱스입니다.\n이 <code>index</code> 프로퍼티는 템플릿 입력 변수로 할당 받아 템플릿 안에서 사용할 수 있습니다.</p>\n<!--\nThe next example captures the `index` in a variable named `i` and displays it with the item name.\n-->\n<p>다음 코드는 <code>index</code> 프로퍼티를 변수 <code>i</code>로 할당하고 히어로의 이름과 함께 표시하는 예제입니다.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items; let i=index\">{{i + 1}} - {{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\n`NgFor` is implemented by the `NgForOf` directive. Read more about the other `NgForOf` context values such as `last`, `even`,\nand `odd` in the [NgForOf API reference](api/common/NgForOf).\n-->\n<p><code>NgFor</code>는 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 디렉티브로 만들어진 또 다른 디렉티브입니다. <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> 컨텍스트에서 제공되는 변수인 <code>last</code>나 <code><a href=\"api/common/NgForOfContext#even\" class=\"code-anchor\">even</a></code>, <code><a href=\"api/common/NgForOfContext#odd\" class=\"code-anchor\">odd</a></code>에 대해 더 알아보려면 <a href=\"api/common/NgForOf\">NgForOf API 문서</a>를 참고하세요.</p>\n</div>\n<a id=\"trackBy\"></a>\n<h4 id=\"ngfor-with-trackby\">*ngFor with <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h4>\n<p>If you use <code>NgFor</code> with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</p>\n<p>You can make this more efficient with <code>trackBy</code>.\nAdd a method to the component that returns the value <code>NgFor</code> should track.\nIn this case, that value is the hero's <code>id</code>. If the <code>id</code> has already been rendered,\nAngular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\" header=\"src/app/app.component.ts\">\ntrackByItems(index: number, <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: Item): number { return item.id; }\n\n</code-example>\n<p>In the microsyntax expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items; trackBy: trackByItems\">\n  ({{item.id}}) {{item.name}}\n&#x3C;/div>\n\n</code-example>\n<p>Here is an illustration of the <code>trackBy</code> effect.\n\"Reset items\" creates new items with the same <code>item.id</code>s.\n\"Change ids\" creates new items with new <code>item.id</code>s.</p>\n<ul>\n<li>With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</li>\n<li>With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</li>\n</ul>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" alt=\"Animation of trackBy\" width=\"492\" height=\"442\">\n</div>\n<div class=\"alert is-helpful\">\n<p>Built-in directives use only public APIs; that is,\nthey do not have special access to any private APIs that other directives can't access.</p>\n</div>\n<hr>\n<a id=\"ngSwitch\"></a>\n<!--\n## The `NgSwitch` directives\n-->\n<h3 id=\"ngswitch-디렉티브\"><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> 디렉티브<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngswitch-디렉티브\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nNgSwitch is like the JavaScript `switch` statement.\nIt displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.\n-->\n<p><em>NgSwitch</em> 디렉티브는 JavaScript의 <code>switch</code> 문법과 비슷합니다.\n이 디렉티브는 가능한 경우 몇가지 중에서 <em>스위치 조건</em> 에 만족하는 엘리먼트 <em>하나를</em> 뷰에 표시합니다.\n이 때 <em>선택된</em> 엘리먼트만 DOM에 추가되며, 조건을 만족하지 않는 엘리먼트들은 DOM에 존재하지 않습니다.</p>\n<!-- API Flagged -->\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is actually a set of three, cooperating directives:\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> as in the following example.</p>\n<p> <code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\">\n  &#x3C;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-stout-item>\n  &#x3C;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-device-item>\n  &#x3C;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-lost-item>\n  &#x3C;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-best-item>\n&#x3C;!-- . . . -->\n  &#x3C;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-unknown-item>\n&#x3C;/div>\n\n</code-example></p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngswitch.gif\" alt=\"Animation of NgSwitch\" width=\"370\" height=\"256\">\n</div>\n<!--\n`NgSwitch` is the controller directive. Bind it to an expression that returns\nthe *switch value*, such as `feature`. Though the `feature` value in this\nexample is a string, the switch value can be of any type.\n-->\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>는 해당하는 조건을 선택하는 디렉티브입니다. 이 디렉티브는 템플릿 표현식이 반환하는 값에 해당하는 <em>특정 조건</em>을 선택합니다.\n위 예제에서는 문자열 타입의 <code>emotion</code> 변수로 조건을 판단했지만, 타입은 자유롭게 사용할 수 있습니다.</p>\n<!--\n**Bind to `[ngSwitch]`**. You'll get an error if you try to set `*ngSwitch` because\n`NgSwitch` is an *attribute* directive, not a *structural* directive.\nRather than touching the DOM directly, it changes the behavior of its companion directives.\n-->\n<p>스위칭 조건을 판단하는 템플릿 표현식은 <strong><code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong> 와 같이 바인딩합니다.\n이 때 문법을 <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code>로 사용해도 되지 않을까 생각할 수 있지만, <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>는 <em>구조</em> 디렉티브가 아니라 <em>어트리뷰트</em> 디렉티브이기 때문에 <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code>로 사용하면 에러가 발생합니다.\nRather than touching the DOM directly, it changes the behavior of its companion directives.</p>\n<!--\n**Bind to `*ngSwitchCase` and `*ngSwitchDefault`**.\nThe `NgSwitchCase` and `NgSwitchDefault` directives are _structural_ directives\nbecause they add or remove elements from the DOM.\n-->\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>와는 다르게 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>와 <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>는 <em>구조</em> 디렉티브이며, <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code>, <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code>와 같이 사용합니다.\n두 디렉티브는 DOM에 엘리먼트를 직접 추가하거나 제거하는 디렉티브입니다.</p>\n<!--\n* `NgSwitchCase` adds its element to the DOM when its bound value equals the switch value and removes\nits bound value when it doesn't equal the switch value.\n\n* `NgSwitchDefault` adds its element to the DOM when there is no selected `NgSwitchCase`.\n-->\n<ul>\n<li><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>는 스위칭 조건이 맞을 때 해당 엘리먼트를 DOM에 추가하며, 조건에 맞지 않으면 해당 엘리먼트를 제거합니다.</li>\n<li><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code>는 <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>가 하나도 선택되지 않았을 때 DOM에 추가하는 엘리먼트를 지정합니다.</li>\n</ul>\n<!--\nThe switch directives are particularly useful for adding and removing *component elements*.\nThis example switches among four `item` components defined in the `item-switch.components.ts` file.\nEach component has an `item` [input property](guide/template-syntax#inputs-outputs \"Input property\")\nwhich is bound to the `currentItem` of the parent component.\n-->\n<p>스위치 디렉티브는 <em>컴포넌트 엘리먼트를</em> DOM에 추가하거나 제거하는 용도로도 많이 사용합니다.\n위에서 살펴본 예제는 <code>item-switch.component.ts</code> 파일에 정의된 컴포넌트 4개를 하나씩 선택해서 적용하는 예제입니다.\n각각의 컴포넌트는 부모 컴포넌트에서 전달되는 <code>currentItem</code> 프로퍼티를 <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>를 <a href=\"guide/template-syntax#inputs-outputs\" title=\"Input property\">입력 프로퍼티</a>로 바인딩합니다.</p>\n<!--\nSwitch directives work as well with native elements and web components too.\nFor example, you could replace the `<app-best-item>` switch case with the following.\n-->\n<p>그리고 스위치 디렉티브는 네이티브 엘리먼트나 웹 컴포넌트에도 자연스럽게 적용할 수 있습니다.\n위 예제에서 <code>&#x3C;confused-hero></code>에 사용했던 스위치 디렉티브는 다음과 같이 네이티브 엘리먼트에도 사용할 수 있습니다.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"> Are you as bright as {{currentItem.name}}?&#x3C;/div>\n\n</code-example>\n<hr>\n<a id=\"template-reference-variable\"></a>\n<a id=\"template-reference-variables--var-\"></a>\n<a id=\"ref-vars\"></a>\n<a id=\"ref-var\"></a>\n<a id=\"템플릿-참조-변수\"></a>\n<!--\n## Template reference variables (`#var`)\n-->\n<h2 id=\"템플릿-참조-변수-var\">템플릿 참조 변수 (<code>#var</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-참조-변수-var\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA **template reference variable** is often a reference to a DOM element within a template.\nIt can also refer to a directive (which contains a component), an element, [TemplateRef](api/core/TemplateRef), or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.\n\nFor a demonstration of the syntax and code snippets in this section, see the <live-example name=\"template-reference-variables\">template reference variables example</live-example>.\n-->\n<p><strong>템플릿 참조 변수</strong>는 템플릿 안에서 DOM 엘리먼트를 가리킬 때 사용합니다.\nIt can also refer to a directive (which contains a component), an element, <a href=\"api/core/TemplateRef\">TemplateRef</a>, or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.</p>\n<p>For a demonstration of the syntax and code snippets in this section, see the <live-example name=\"template-reference-variables\">template reference variables example</live-example>.</p>\n<!--\nUse the hash symbol (#) to declare a reference variable.\nThe following reference variable, `#phone`, declares a `phone` variable on an `<input>` element.\n-->\n<p>참조 변수는 해시 기호(#)를 사용해서 정의합니다.\n예를 들어, <code>&#x3C;input></code> 엘리먼트를 <code>phone</code> 변수로 가리키려면 <code>#phone</code> 과 같이 정의합니다.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-var\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n</code-example>\n<p>You can refer to a template reference variable anywhere in the component's template.\nHere, a <code>&#x3C;button></code> further down the template refers to the <code>phone</code> variable.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-phone\" header=\"src/app/app.component.html\">\n&#x3C;input #phone placeholder=\"phone number\" />\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<!--\n<h3 class=\"no-toc\">How a reference variable gets its value</h3>\n-->\n<h3 class=\"no-toc\" id=\"참조-변수를-사용해서-입력값-얻기\">참조 변수를 사용해서 입력값 얻기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#참조-변수를-사용해서-입력값-얻기\"><i class=\"material-icons\">link</i></a></h3>\n<p>In most cases, Angular sets the reference variable's value to the element on which it is declared.\nIn the previous example, <code>phone</code> refers to the phone number <code>&#x3C;input></code>.\nThe button's click handler passes the <code>&#x3C;input></code> value to the component's <code>callPhone()</code> method.</p>\n<p>The <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive can change that behavior and set the value to something else. In the following example, the template reference variable, <code>itemForm</code>, appears three times separated\nby HTML.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ngForm\" header=\"src/app/hero-form.component.html\">\n&#x3C;form #itemForm=\"<a href=\"api/forms/NgForm\" class=\"code-anchor\">ngForm</a>\" (ngSubmit)=\"onSubmit(itemForm)\">\n  &#x3C;label for=\"name\"\n    >Name &#x3C;input class=\"form-control\" name=\"name\" <a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a> required />\n  &#x3C;/label>\n  &#x3C;button type=\"submit\">Submit&#x3C;/button>\n&#x3C;/form>\n\n&#x3C;div [hidden]=\"!itemForm.form.valid\">\n  &#x3C;p>{{ submitMessage }}&#x3C;/p>\n&#x3C;/div>\n\n\n</code-example>\n<p>The reference value of itemForm, without the ngForm attribute value, would be\nthe <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>.\nThere is, however, a difference between a Component and a Directive in that a <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nwill be referenced without specifying the attribute value, and a <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> will not\nchange the implicit reference (that is, the element).</p>\n<p>However, with <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code>, <code>itemForm</code> is a reference to the <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a>\ndirective with the ability to track the value and validity of every control in the form.</p>\n<p>The native <code>&#x3C;form></code> element doesn't have a <code>form</code> property, but the <code><a href=\"api/forms/NgForm\" class=\"code-anchor\">NgForm</a></code> directive does, which allows disabling the submit button\nif the <code>itemForm.form.valid</code> is invalid and passing the entire form control tree\nto the parent component's <code>onSubmit()</code> method.</p>\n<h3 class=\"no-toc\" id=\"template-reference-variable-considerations\">Template reference variable considerations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variable-considerations\"><i class=\"material-icons\">link</i></a></h3>\n<p>A template <em>reference</em> variable (<code>#phone</code>) is not the same as a template <em>input</em> variable (<code>let phone</code>) such as in an <a href=\"guide/template-syntax#template-input-variable\"><code>*ngFor</code></a>.\nSee <a href=\"guide/structural-directives#template-input-variable\"><em>Structural Directives</em></a> for more information.</p>\n<p>The scope of a reference variable is the entire template. So, don't define the same variable name more than once in the same template as the runtime value will be unpredictable.</p>\n<h4 id=\"alternative-syntax\">Alternative syntax<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#alternative-syntax\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou can use the `ref-` prefix alternative to `#`.\nThis example declares the `fax` variable as `ref-fax` instead of `#fax`.\n-->\n<p><code>#</code> 기호를 사용하는 것이 어색하다면 <code>ref-</code> 접두사를 대신 사용할 수도 있습니다.\n접두사를 사용해서 <code>ref-fax</code> 라고 작성하면 <code>#fax</code> 로 <code>fax</code> 변수를 정의한 것과 같습니다.</p>\n<code-example path=\"template-reference-variables/src/app/app.component.html\" region=\"ref-fax\" header=\"src/app/app.component.html\">\n&#x3C;input ref-fax placeholder=\"fax number\" />\n&#x3C;button (click)=\"callFax(fax.value)\">Fax&#x3C;/button>\n\n</code-example>\n<hr>\n<a id=\"inputs-outputs\"></a>\n<a id=\"입출력 프로퍼티\"></a>\n<h2 id=\"input-and-output-properties\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-properties\"><i class=\"material-icons\">link</i></a></h2>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> allow Angular to share data between the parent context\nand child directives or components. An <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property is writable\nwhile an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property is observable.</p>\n<p>Consider this example of a child/parent relationship:</p>\n<code-example language=\"html\">\n&#x3C;parent-component>\n  &#x3C;child-component>&#x3C;/child-component>\n&#x3C;/parent-component>\n</code-example>\n<p>Here, the <code>&#x3C;child-component></code> selector, or child directive, is embedded\nwithin a <code>&#x3C;parent-component></code>, which serves as the child's context.</p>\n<p><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> act as\nthe API, or application programming interface, of the child\ncomponent in that they allow the child to\ncommunicate with the parent. Think of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> like ports\nor doorways—<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> is the doorway into the component allowing data\nto flow in while <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is the doorway out of the component, allowing the\nchild component to send data out.</p>\n<p>This section about <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> has its own <live-example name=\"inputs-outputs\"></live-example>. The following subsections highlight\nkey points in the sample app.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"input-and-output-are-independent\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> are independent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-are-independent\"><i class=\"material-icons\">link</i></a></h4>\n<p>Though <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> often appear together in apps, you can use\nthem separately. If the nested\ncomponent is such that it only needs to send data to its parent, you wouldn't\nneed an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, only an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. The reverse is also true in that if the\nchild only needs to receive data from the parent, you'd only need <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.</p>\n</div>\n<a id=\"input\"></a>\n<h2 id=\"how-to-use-input\">How to use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-input\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component or directive to let Angular know\nthat a property in that component can receive its value from its parent component.\nIt helps to remember that the data flow is from the perspective of the\nchild component. So an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> allows data to be input <em>into</em> the\nchild component from the parent component.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input.svg\" alt=\"Input data flow diagram\" width=\"671\" height=\"346\">\n</div>\n<p>To illustrate the use of <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, edit these parts of your app:</p>\n<ul>\n<li>The child component class and template</li>\n<li>The parent component class and template</li>\n</ul>\n<h3 id=\"in-the-child\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child\"><i class=\"material-icons\">link</i></a></h3>\n<p>To use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator in a child component class, first import\n<code><a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> and then decorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.ts\" region=\"use-input\" header=\"src/app/item-detail/item-detail.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a> } from '@angular/core'; // <a href=\"\" class=\"code-anchor\">First</a>, import <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>\nexport class ItemDetailComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: string; // decorate the property with @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()\n}\n\n</code-example>\n<p>In this case, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorates the property <code class=\"no-auto-link\">item</code>, which has\na type of <code>string</code>, however, <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> properties can have any type, such as\n<code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>, <code>string</code>, <code>boolean</code>, or <code>object</code>. The value for <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> will come from the parent component, which the next section covers.</p>\n<p>Next, in the child component template, add the following:</p>\n<code-example path=\"inputs-outputs/src/app/item-detail/item-detail.component.html\" region=\"property-in-template\" header=\"src/app/item-detail/item-detail.component.html\">\n&#x3C;p>\n  Today's <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>}}\n&#x3C;/p>\n\n</code-example>\n<h3 id=\"in-the-parent\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent\"><i class=\"material-icons\">link</i></a></h3>\n<p>The next step is to bind the property in the parent component's template.\nIn this example, the parent component template is <code>app.component.html</code>.</p>\n<p>First, use the child's selector, here <code>&#x3C;app-item-detail></code>, as a directive within the\nparent component template. Then, use <a href=\"guide/template-syntax#property-binding\">property binding</a>\nto bind the property in the child to the property of the parent.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"input-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Next, in the parent component class, <code>app.component.ts</code>, designate a value for <code>currentItem</code>:</p>\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"parent-property\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  currentItem = 'Television';\n}\n\n</code-example>\n<p>With <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, Angular passes the value for <code>currentItem</code> to the child so that <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> renders as <code>Television</code>.</p>\n<p>The following diagram shows this structure:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input-diagram-target-source.svg\" alt=\"Property binding diagram\" width=\"502\" height=\"304\">\n</div>\n<p>The target in the square brackets, <code>[]</code>, is the property you decorate\nwith <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component. The binding source, the part\nto the right of the equal sign, is the data that the parent\ncomponent passes to the nested component.</p>\n<p>The key takeaway is that when binding to a child component's property in a parent component—that is, what's\nin square brackets—you must\ndecorate the property with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> in the child component.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"onchanges-and-input\"><code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> and <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#onchanges-and-input\"><i class=\"material-icons\">link</i></a></h4>\n<p>To watch for changes on an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property, use\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code>, one of Angular's <a href=\"guide/lifecycle-hooks#onchanges\">lifecycle hooks</a>.\n<code><a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a></code> is specifically designed to work with properties that have the\n<code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorator. See the <a href=\"guide/lifecycle-hooks#onchanges\"><code>OnChanges</code></a> section of the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> guide for more details and examples.</p>\n</div>\n<a id=\"output\"></a>\n<h2 id=\"how-to-use-output\">How to use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-to-use-output\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator in the child component or directive to allow data to flow from\nthe child <em>out</em> to the parent.</p>\n<p>An <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> property should normally be initialized to an Angular <a href=\"api/core/EventEmitter\"><code>EventEmitter</code></a> with values flowing out of the component as <a href=\"guide/template-syntax#event-binding\">events</a>.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/output.svg\" alt=\"Output diagram\" width=\"666\" height=\"340\">\n</div>\n<p>Just like with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>, you can use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\non a property of the child component but its type should be\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>.</p>\n<p><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> marks a property in a child component as a doorway\nthrough which data can travel from the child to the parent.\nThe child component then has to raise an event so the\nparent knows something has changed. To raise an event,\n<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> works hand in hand with <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich is a class in <code>@angular/core</code> that you\nuse to emit custom events.</p>\n<p>When you use <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, edit these parts of your app:</p>\n<ul>\n<li>The child component class and template</li>\n<li>The parent component class and template</li>\n</ul>\n<p>The following example shows how to set up an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in a child\ncomponent that pushes data you enter in an HTML <code>&#x3C;input></code> to an array in the\nparent component.</p>\n<div class=\"alert is-helpful\">\n<p>The HTML element <code>&#x3C;input></code> and the Angular decorator <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>\nare different. This documentation is about component communication in Angular as it pertains to <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>. For more information on the HTML element <code>&#x3C;input></code>, see the <a href=\"https://www.w3.org/TR/html5/sec-forms.html#the-input-element\">W3C Recommendation</a>.</p>\n</div>\n<h3 id=\"in-the-child-1\">In the child<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-child-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>This example features an <code>&#x3C;input></code> where a user can enter a value and click a <code>&#x3C;button></code> that raises an event. The <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code> then relays the data to the parent component.</p>\n<p>First, be sure to import <code><a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> and <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>\nin the child component class:</p>\n<code-example language=\"js\">\nimport { <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n</code-example>\n<p>Next, still in the child, decorate a property with <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> in the component class.\nThe following example <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> is called <code>newItemEvent</code> and its type is\n<code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, which means it's an event.</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output\" header=\"src/app/item-output/item-output.component.ts\">\n\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n\n</code-example>\n<p>The different parts of the above declaration are as follows:</p>\n<ul>\n<li><code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>—a decorator function marking the property as a way for data to go from the child to the parent</li>\n<li><code>newItemEvent</code>—the name of the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code></li>\n<li><code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string></code>—the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>'s type</li>\n<li><code>new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>()</code>—tells Angular to create a new event emitter and that the data it emits is of type string. The type could be any type, such as <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">number</a></code>, <code>boolean</code>, and so on. For more information on <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>, see the <a href=\"api/core/EventEmitter\">EventEmitter API documentation</a>.</li>\n</ul>\n<p>Next, create an <code>addNewItem()</code> method in the same component class:</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.ts\" region=\"item-output-class\" header=\"src/app/item-output/item-output.component.ts\">\nexport class ItemOutputComponent {\n\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() newItemEvent = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n  addNewItem(value: string) {\n    this.newItemEvent.emit(value);\n  }\n}\n\n</code-example>\n<p>The <code>addNewItem()</code> function uses the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>, <code>newItemEvent</code>,\nto raise an event in which it emits the value the user\ntypes into the <code>&#x3C;input></code>. In other words, when\nthe user clicks the add button in the UI, the child lets the parent know\nabout the event and gives that data to the parent.</p>\n<h4 id=\"in-the-childs-template\">In the child's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-childs-template\"><i class=\"material-icons\">link</i></a></h4>\n<p>The child's template has two controls. The first is an HTML <code>&#x3C;input></code> with a\n<a href=\"guide/template-syntax#ref-var\">template reference variable</a> , <code>#newItem</code>,\nwhere the user types in an item name. Whatever the user types\ninto the <code>&#x3C;input></code> gets stored in the <code>#newItem</code> variable.</p>\n<code-example path=\"inputs-outputs/src/app/item-output/item-output.component.html\" region=\"child-output\" header=\"src/app/item-output/item-output.component.html\">\n&#x3C;label>Add an <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: &#x3C;input #newItem>&#x3C;/label>\n&#x3C;button (click)=\"addNewItem(newItem.value)\">Add to parent's list&#x3C;/button>\n\n</code-example>\n<p>The second element is a <code>&#x3C;button></code>\nwith an <a href=\"guide/template-syntax#event-binding\">event binding</a>. You know it's\nan event binding because the part to the left of the equal\nsign is in parentheses, <code>(click)</code>.</p>\n<p>The <code>(click)</code> event is bound to the <code>addNewItem()</code> method in the child component class which\ntakes as its argument whatever the value of <code>#newItem</code> is.</p>\n<p>Now the child component has an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nfor sending data to the parent and a method for raising an event.\nThe next step is in the parent.</p>\n<h3 id=\"in-the-parent-1\">In the parent<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parent-1\"><i class=\"material-icons\">link</i></a></h3>\n<p>In this example, the parent component is <code>AppComponent</code>, but you could use\nany component in which you could nest the child.</p>\n<p>The <code>AppComponent</code> in this example features a list of <code>items</code>\nin an array and a method for adding more items to the array.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.ts\" region=\"add-new-item\" header=\"src/app/app.component.ts\">\nexport class AppComponent {\n  items = ['item1', 'item2', 'item3', 'item4'];\n\n  addItem(newItem: string) {\n    this.items.push(newItem);\n  }\n}\n\n</code-example>\n<p>The <code>addItem()</code> method takes an argument in the form of a string\nand then pushes, or adds, that string to the <code>items</code> array.</p>\n<h4 id=\"in-the-parents-template\">In the parent's template<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#in-the-parents-template\"><i class=\"material-icons\">link</i></a></h4>\n<p>Next, in the parent's template, bind the parent's\nmethod to the child's event. Put the child selector, here <code>&#x3C;app-item-output></code>,\nwithin the parent component's\ntemplate, <code>app.component.html</code>.</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"output-parent\" header=\"src/app/app.component.html\">\n&#x3C;app-item-output (newItemEvent)=\"addItem($event)\">&#x3C;/app-item-output>\n\n</code-example>\n<p>The event binding, <code>(newItemEvent)='addItem($event)'</code>, tells\nAngular to connect the event in the child, <code>newItemEvent</code>, to\nthe method in the parent, <code>addItem()</code>, and that the event that the child\nis notifying the parent about is to be the argument of <code>addItem()</code>.\nIn other words, this is where the actual hand off of data takes place.\nThe <code>$event</code> contains the data that the user types into the <code>&#x3C;input></code>\nin the child template UI.</p>\n<p>Now, in order to see the <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> working, add the following to the parent's template:</p>\n<code-example language=\"html\">\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> of items\">{{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>}}&#x3C;/li>\n  &#x3C;/ul>\n</code-example>\n<p>The <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> iterates over the items in the <code>items</code> array. When you enter a value in the child's <code>&#x3C;input></code> and click the button, the child emits the event and the parent's <code>addItem()</code> method pushes the value to the <code>items</code> array and it renders in the list.</p>\n<h2 id=\"input-and-output-together\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-together\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can use <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same child component as in the following:</p>\n<code-example path=\"inputs-outputs/src/app/app.component.html\" region=\"together\" header=\"src/app/app.component.html\">\n&#x3C;app-input-output [<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>]=\"currentItem\" (deleteRequest)=\"crossOffItem($event)\">&#x3C;/app-input-output>\n\n</code-example>\n<p>The target, <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code>, which is an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> property in the child component class, receives its value from the parent's property, <code>currentItem</code>. When you click delete, the child component raises an event, <code>deleteRequest</code>, which is the argument for the parent's <code>crossOffItem()</code> method.</p>\n<p>The following diagram is of an <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and an <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> on the same\nchild component and shows the different parts of each:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/inputs-outputs/input-output-diagram.svg\" alt=\"Input/Output diagram\" width=\"800\" height=\"333\">\n</div>\n<p>As the diagram shows, use inputs and outputs together in the same manner as using them separately. Here, the child selector is <code>&#x3C;app-input-output></code> with <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> and <code>deleteRequest</code> being <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nproperties in the child component class. The property <code>currentItem</code> and the method <code>crossOffItem()</code> are both in the parent component class.</p>\n<p>To combine property and event bindings using the banana-in-a-box\nsyntax, <code>[()]</code>, see <a href=\"guide/template-syntax#two-way\">Two-way Binding</a>.</p>\n<p>For more detail on how these work, see the previous sections on <a href=\"guide/template-syntax#input\">Input</a> and <a href=\"guide/template-syntax#output\">Output</a>. To see it in action, see the <live-example name=\"inputs-outputs\">Inputs and Outputs Example</live-example>.</p>\n<h2 id=\"input-and-output-declarations\"><code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> declarations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-declarations\"><i class=\"material-icons\">link</i></a></h2>\n<p>Instead of using the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorators\nto declare inputs and outputs, you can identify\nmembers in the <code>inputs</code> and <code>outputs</code> arrays\nof the directive metadata, as in this example:</p>\n<code-example path=\"inputs-outputs/src/app/in-the-metadata/in-the-metadata.component.ts\" region=\"metadata\" header=\"src/app/in-the-metadata/in-the-metadata.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['clearanceItem'],\noutputs: ['buyEvent']\n// tslint:enable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<p>While declaring <code>inputs</code> and <code>outputs</code> in the <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code> and <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>\nmetadata is possible, it is a better practice to use the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> and <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code>\nclass decorators instead, as follows:</p>\n<code-example path=\"inputs-outputs/src/app/input-output/input-output.component.ts\" region=\"input-output\" header=\"src/app/input-output/input-output.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>: string;\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() deleteRequest = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>();\n\n</code-example>\n<p>See the <a href=\"guide/styleguide#decorate-input-and-output-properties\">Decorate input and output properties</a> section of the\n<a href=\"guide/styleguide\">Style Guide</a> for details.</p>\n<div class=\"alert is-helpful\">\n<p>If you get a template parse error when trying to use inputs or outputs, but you know that the\nproperties do indeed exist, double check\nthat your properties are annotated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> / <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> or that you've declared\nthem in an <code>inputs</code>/<code>outputs</code> array:</p>\n<code-example language=\"bash\">\nUncaught Error: Template parse errors:\nCan't bind to 'item' since it isn't a known property of 'app-item-detail'\n</code-example>\n</div>\n<a id=\"aliasing-io\"></a>\n<h2 id=\"aliasing-inputs-and-outputs\">Aliasing inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes the public name of an input/output property should be different from the internal name. While it is a best practice to avoid this situation, Angular does\noffer a solution.</p>\n<h3 id=\"aliasing-in-the-metadata\">Aliasing in the metadata<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-in-the-metadata\"><i class=\"material-icons\">link</i></a></h3>\n<p>Alias inputs and outputs in the metadata using a colon-delimited (<code>:</code>) string with\nthe directive property name on the left and the public alias on the right:</p>\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias\" header=\"src/app/aliasing/aliasing.component.ts\">\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\ninputs: ['input1: saveForLaterItem'], // propertyName:alias\noutputs: ['outputEvent1: saveForLaterEvent']\n// tslint:disable: no-inputs-metadata-property no-outputs-metadata-property\n\n</code-example>\n<h3 id=\"aliasing-with-the-inputoutput-decorator\">Aliasing with the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-with-the-inputoutput-decorator\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can specify the alias for the property name by passing the alias name to the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>/<code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> decorator. The internal name remains as usual.</p>\n<code-example path=\"inputs-outputs/src/app/aliasing/aliasing.component.ts\" region=\"alias-input-output\" header=\"src/app/aliasing/aliasing.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('wishListItem') input2: string; //  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>(alias)\n@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>('wishEvent') outputEvent2 = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;string>(); //  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>(alias) propertyName = ...\n\n</code-example>\n<hr>\n<a id=\"expression-operators\"></a>\n<a id=\"템플릿-표현식-전용-연산자\"></a>\n<!--\n## Template expression operators\n-->\n<h2 id=\"템플릿-표현식-전용-연산자\">템플릿 표현식 전용 연산자<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#템플릿-표현식-전용-연산자\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios. The next sections cover three of these operators:</p>\n<ul>\n<li><a href=\"guide/template-syntax#pipe\">pipe</a></li>\n<li><a href=\"guide/template-syntax#safe-navigation-operator\">safe navigation operator</a></li>\n<li><a href=\"guide/template-syntax#non-null-assertion-operator\">non-null assertion operator</a></li>\n</ul>\n<a id=\"pipe\"></a>\n<!--\n### The pipe operator (`|`)\n-->\n<h3 id=\"파이프-연산자-\">파이프 연산자 (<code>|</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#파이프-연산자-\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe result of an expression might require some transformation before you're ready to use it in a binding.\nFor example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.\n\nPipes are simple functions that accept an input value and return a transformed value.\nThey're easy to apply within template expressions, using the pipe operator (`|`):\n-->\n<p>템플릿 표현식의 결과값을 그대로 사용하지 않고 바인딩하기 전에 적당한 형태로 변환해야 하는 경우가 있습니다.\n숫자를 화폐 단위로 표시하거나, 문자열을 대문자로 변환하거나, 배열의 일부를 필터링하거나 정렬하는 경우가 이런 경우에 해당됩니다.</p>\n<p>파이프는 입력값을 간단하게 변환해서 새로운 값으로 반환하는 함수입니다.\n템플릿에서는 다음과 같이 <strong>파이프 연산자 (<code>|</code>)</strong>를 사용해서 적용할 수 있습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"uppercase-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through uppercase pipe: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/p>\n\n</code-example>\n<!--\nThe pipe operator passes the result of an expression on the left to a pipe function on the right.\n-->\n<p>파이프 연산자 왼쪽에 있는 값은 파이프 연산자의 오른쪽으로 전달됩니다.</p>\n<!--\nYou can chain expressions through multiple pipes:\n-->\n<p>그래서 다음과 같이 파이프 여러개를 연달아 사용할 수도 있습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"pipe-chain\" header=\"src/app/app.component.html\">\n&#x3C;!-- convert title to uppercase, then to lowercase -->\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through a pipe chain: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/p>\n\n</code-example>\n<!--\nAnd you can also [apply parameters](guide/pipes#parameterizing-a-pipe) to a pipe:\n-->\n<p>그리고 파이프 함수에 <a href=\"guide/pipes#%ED%8C%8C%EC%9D%B4%ED%94%84-%EC%9D%B8%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">파이프 인자</a>를 전달해서 파이프의 동작을 구체적으로 지정할 수도 있습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"date-pipe\" header=\"src/app/app.component.html\">\n&#x3C;!-- pipe with configuration argument => \"February 25, 1980\" -->\n&#x3C;p>Manufacture date with date format pipe: {{item.manufactureDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'longDate'}}&#x3C;/p>\n\n</code-example>\n<!--\nThe `json` pipe is particularly helpful for debugging bindings:\n-->\n<p>바인딩되는 객체를 확인해야 할때 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> 파이프를 사용하면 디버깅이 훨씬 편해집니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"json-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p>Item json pipe: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/p>\n\n</code-example>\n<!--\nThe generated output would look something like this:\n-->\n<p>이 코드를 실행하면 화면에 다음과 같은 문자열이 표시됩니다:</p>\n<code-example language=\"json\">\n  { \"name\": \"Telephone\",\n    \"manufactureDate\": \"1980-02-25T05:00:00.000Z\",\n    \"price\": 98 }\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The pipe operator has a higher precedence than the ternary operator (<code>?:</code>),\nwhich means <code>a ? b : c | x</code> is parsed as <code>a ? b : (c | x)</code>.\nNevertheless, for a number of reasons,\nthe pipe operator cannot be used without parentheses in the first and second operands of <code>?:</code>.\nA good practice is to use parentheses in the third operand too.</p>\n</div>\n<hr>\n<a id=\"safe-navigation-operator\"></a>\n<h3 id=\"the-safe-navigation-operator----and-null-property-paths\">The safe navigation operator ( <code>?</code> ) and null property paths<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\"><i class=\"material-icons\">link</i></a></h3>\n<p>The Angular safe navigation operator, <code>?</code>, guards against <code>null</code> and <code>undefined</code>\nvalues in property paths. Here, it protects against a view render failure if <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> is <code>null</code>.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"safe\" header=\"src/app/app.component.html\">\n&#x3C;p>The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> name is: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>?.name}}&#x3C;/p>\n\n</code-example>\n<p>If <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> is <code>null</code>, the view still renders but the displayed value is blank; you see only \"The item name is:\" with nothing after it.</p>\n<p>Consider the next example, with a <code>nullItem</code>.</p>\n<code-example language=\"html\">\n  The null <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a> name is {{nullItem.name}}\n</code-example>\n<p>Since there is no safe navigation operator and <code>nullItem</code> is <code>null</code>, JavaScript and Angular would throw a <code>null</code> reference error and break the rendering process of Angular:</p>\n<code-example language=\"bash\">\n  TypeError: Cannot read property 'name' of null.\n</code-example>\n<!--\nSometimes however, `null` values in the property\npath may be OK under certain circumstances,\nespecially when the value starts out null but the data arrives eventually.\n\nWith the safe navigation operator, `?`, Angular stops evaluating the expression when it hits the first `null` value and renders the view without errors.\n\nIt works perfectly with long property paths such as `a?.b?.c?.d`.\n-->\n<p>Sometimes however, <code>null</code> values in the property\npath may be OK under certain circumstances,\nespecially when the value starts out null but the data arrives eventually.</p>\n<p>With the safe navigation operator, <code>?</code>, Angular stops evaluating the expression when it hits the first <code>null</code> value and renders the view without errors.</p>\n<p>안전 참조 연산자는 <code>a?.b?.c?.d</code>와 같은 경우에도 완벽하게 동작합니다.</p>\n<hr>\n<a id=\"non-null-assertion-operator\"></a>\n<a id=\"null-방지-연산자\"></a>\n<!--\n### The non-null assertion operator ( `!` )\n-->\n<h3 id=\"null-방지-연산자---\">null 방지 연산자 ( <code>!</code> )<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#null-방지-연산자---\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAs of Typescript 2.0, you can enforce [strict null checking](http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html \"Strict null checking in TypeScript\") with the `--strictNullChecks` flag. TypeScript then ensures that no variable is unintentionally null or undefined.\n\nIn this mode, typed variables disallow `null` and `undefined` by default. The type checker throws an error if you leave a variable unassigned or try to assign `null` or `undefined` to a variable whose type disallows `null` and `undefined`.\n\nThe type checker also throws an error if it can't determine whether a variable will be `null` or undefined at runtime. You tell the type checker not to throw an error by applying the postfix\n[non-null assertion operator, !](http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator \"Non-null assertion operator\").\n\nThe Angular non-null assertion operator, `!`, serves the same purpose in\nan Angular template. For example, after you use [*ngIf](guide/template-syntax#ngIf)\nto check that `item` is defined, you can assert that\n`item` properties are also defined.\n-->\n<p>TypeScript 2.0 버전부터  <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">null 검사를 더 엄격하게</a>하는 옵션이 추가되었습니다. 옵션은 <code>--strictNullChecks</code>로 활성화하며, 이 옵션을 설정하면 객체의 값이 null이나 undefined이 되는 것을 방지합니다.</p>\n<p>이 모드를 활성화하면 타입을 지정한 변수에 null이나 undefined을 할당하는 것이 허용되지 않습니다. 그래서 변수의 값을 할당하지 않고 놔두거나, 변수에 null이나 undefined을 할당하는 코드가 있으면 타입을 체크할 때 오류가 발생합니다.</p>\n<p>그런데 TypeScript 컴파일러는 앱이 실행되는 시점에 변수의 값이 null이나 undefined가 될 수 있는 코드에서도 에러를 발생합니다.\n개발자는 발생하지 않는 경우라고 할 수 있지만 TypeScript 컴파일러가 알수는 없기 때문이죠.\n그래서 실행시점에서도 이 객체가 null이 되지 않는다는 것을 <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"Non-null assertion operator\">null 방지 연산자</a>를 사용해서 TypeScript 컴파일러에게 알려줘야 합니다.</p>\n<p>The Angular non-null assertion operator, <code>!</code>, serves the same purpose in\nan Angular template. For example, after you use <a href=\"guide/template-syntax#ngIf\">*ngIf</a>\nto check that <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> is defined, you can assert that\n<code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> properties are also defined.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&#x3C;!--No color, no error -->\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>\">The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>'s color is: {{<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>!.color}}&#x3C;/p>\n\n</code-example>\n<p>When the Angular compiler turns your template into TypeScript code,\nit prevents TypeScript from reporting that <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> might be <code>null</code> or <code>undefined</code>.</p>\n<p>Unlike the <a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe navigation operator (?)\"><em>safe navigation operator</em></a>,\nthe non-null assertion operator does not guard against <code>null</code> or <code>undefined</code>.\nRather, it tells the TypeScript type checker to suspend strict <code>null</code> checks for a specific property expression.</p>\n<p>The non-null assertion operator, <code>!</code>, is optional with the exception that you must use it when you turn on strict null checks.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"built-in-template-functions\"></a>\n<!--\n## Built-in template functions\n-->\n<h2 id=\"기본-템플릿-함수\">기본 템플릿 함수<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#기본-템플릿-함수\"><i class=\"material-icons\">link</i></a></h2>\n<a id=\"any-type-cast-function\"></a>\n<a id=\"any-타입-캐스팅-함수\"></a>\n<!--\n### The `$any()` type cast function\n-->\n<h3 id=\"any-타입-캐스팅-함수\"><code>$any</code> 타입 캐스팅 함수<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#any-타입-캐스팅-함수\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nSometimes a binding expression triggers a type error during [AOT compilation](guide/aot-compiler) and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the `$any()` cast function to cast\nthe expression to the [`any` type](http://www.typescriptlang.org/docs/handbook/basic-types.html#any) as in the following example:\n-->\n<p>바인딩 표현식을 사용하다보면 <a href=\"guide/aot-compiler\">AOT 컴파일러</a>로 컴파일할 때 변수 타입에 맞지 않다는 에러가 발생하지만, 이 객체의 타입을 특정지을 수 없는 경우가 종종 발생합니다.\n이 에러를 없애려면 <code>$any()</code> 타입 캐스팅 함수를 사용해서 바인딩 표현식의 결과값이 <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> 타입</a>이 되도록 변환할 수 있습니다.</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&#x3C;p>The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>'s undeclared best by date is: {{$any(<a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>).bestByDate}}&#x3C;/p>\n\n</code-example>\n<!--\nWhen the Angular compiler turns this template into TypeScript code,\nit prevents TypeScript from reporting that `bestByDate` is not a member of the `item`\nobject when it runs type checking on the template.\n\nThe `$any()` cast function also works with `this` to allow access to undeclared members of\nthe component.\n-->\n<p>Angular 컴파일러가 이 템플릿 코드를 TypeScript 코드로 변환하고 나면 <code><a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a></code> 객체에 <code>bestByDate</code> 멤버가 없더라도 이제는 에러를 발생시키지 않고 그대로 실행됩니다.</p>\n<p>그리고 템플릿에서 <code>this</code>를 사용해서 컴포넌트 클래스에 직접 접근할 때도 <code>$any</code> 캐스트 함수를 사용할 수 있습니다.</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&#x3C;p>The <a href=\"api/core/IterableChangeRecord#item\" class=\"code-anchor\">item</a>'s undeclared best by date is: {{$any(this).bestByDate}}&#x3C;/p>\n\n</code-example>\n<!--\nThe `$any()` cast function works anywhere in a binding expression where a method call is valid.\n-->\n<p><code>$any()</code> 캐스팅 함수는 함수를 실행할 수 있는 바인딩 표현식이라면 어디에나 자유롭게 사용할 수 있습니다.</p>\n<h2 id=\"svg-in-templates\">SVG in templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#svg-in-templates\"><i class=\"material-icons\">link</i></a></h2>\n<p>It is possible to use SVG as valid templates in Angular. All of the template syntax below is\napplicable to both SVG and HTML. Learn more in the SVG <a href=\"https://www.w3.org/TR/SVG11/\">1.1</a> and\n<a href=\"https://www.w3.org/TR/SVG2/\">2.0</a> specifications.</p>\n<p>Why would you use SVG as template, instead of simply adding it as image to your application?</p>\n<p>When you use an SVG as the template, you are able to use directives and bindings just like with HTML\ntemplates. This means that you will be able to dynamically generate interactive graphics.</p>\n<p>Refer to the sample code snippet below for a syntax example:</p>\n<code-example path=\"template-syntax/src/app/svg.component.ts\" header=\"src/app/svg.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-svg',\n  <a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">templateUrl</a>: './svg.component.svg',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: ['./svg.component.css']\n})\nexport class SvgComponent {\n  fillColor = 'rgb(255, 0, 0)';\n\n  changeColor() {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    this.fillColor = `rgb(${r}, ${g}, ${b})`;\n  }\n}\n\n\n</code-example>\n<p>Add the following code to your <code>svg.component.svg</code> file:</p>\n<code-example path=\"template-syntax/src/app/svg.component.svg\" header=\"src/app/svg.component.svg\">\n&#x3C;svg>\n  &#x3C;g>\n    &#x3C;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" [attr.fill]=\"fillColor\" (click)=\"changeColor()\" />\n    &#x3C;text x=\"120\" y=\"50\">click the rectangle to change the fill color&#x3C;/text>\n  &#x3C;/g>\n&#x3C;/svg>\n\n\n</code-example>\n<p>Here you can see the use of a <code>click()</code> event binding and the property binding syntax\n(<code>[attr.fill]=\"fillColor\"</code>).</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Input\n - api/core/Output\n - guide/accessibility\n - guide/ajs-quick-reference\n - guide/aot-compiler\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/attribute-directives\n - guide/component-interaction\n - guide/displaying-data\n - guide/forms\n - guide/glossary\n - guide/observables-in-angular\n - guide/pipes\n - guide/router\n - guide/structural-directives\n - guide/styleguide\n - guide/template-typecheck\n - guide/upgrade\n - guide/user-input\n - start\n - tutorial/toh-pt2\n - tutorial/toh-pt3\n - tutorial/toh-pt4\n - tutorial/toh-pt5\n-->\n<!-- links from this doc:\n - api/animations/state\n - api/animations/style\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgForOfContext#even\n - api/common/NgForOfContext#odd\n - api/common/NgIf\n - api/common/NgIf#ngIfElse\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/common/UpperCasePipe\n - api/core/Component\n - api/core/Component#interpolation\n - api/core/Component#styleUrls\n - api/core/Component#templateUrl\n - api/core/ContentChild\n - api/core/DebugElement#properties\n - api/core/Directive\n - api/core/Directive#host\n - api/core/EventEmitter\n - api/core/Input\n - api/core/IterableChangeRecord#item\n - api/core/NgModule\n - api/core/OnChanges\n - api/core/Output\n - api/core/SecurityContext#HTML\n - api/core/TemplateRef\n - api/core/Type\n - api/core/ViewChild\n - api/forms/ControlValueAccessor\n - api/forms/FormsModule\n - api/forms/NgForm\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/platform-browser/Title\n - api/platform-server/PlatformConfig#document\n - api/router/RouterLinkActive#isActive\n - api/router/RouterLinkWithHref#target\n - api/upgrade/static\n - guide/aot-compiler\n - guide/attribute-directives\n - guide/forms\n - guide/forms#ngModel\n - guide/glossary#camelcase\n - guide/glossary#dash-case\n - guide/lifecycle-hooks\n - guide/lifecycle-hooks#onchanges\n - guide/pipes#%ED%8C%8C%EC%9D%B4%ED%94%84-%EC%9D%B8%EC%9E%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\n - guide/router\n - guide/security\n - guide/security#sanitization-and-security-contexts\n - guide/structural-directives\n - guide/structural-directives#microsyntax\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#one-per-element\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#the-asterisk--prefix\n - guide/styleguide\n - guide/styleguide#decorate-input-and-output-properties\n - guide/template-syntax#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%B0%94%EC%9D%B8%EB%94%A9\n - guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%85%EB%A0%A5-%EB%B3%80%EC%88%98\n - guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%B0%B8%EC%A1%B0-%EB%B3%80%EC%88%98\n - guide/template-syntax#%ED%85%9C%ED%94%8C%EB%A6%BF-%ED%91%9C%ED%98%84%EC%8B%9D-%EC%A0%84%EC%9A%A9-%EC%97%B0%EC%82%B0%EC%9E%90\n - guide/template-syntax#aliasing-in-the-metadata\n - guide/template-syntax#aliasing-inputs-and-outputs\n - guide/template-syntax#aliasing-with-the-inputoutput-decorator\n - guide/template-syntax#alternative-syntax\n - guide/template-syntax#any-타입-캐스팅-함수\n - guide/template-syntax#attribute-directives\n - guide/template-syntax#avoid-side-effects\n - guide/template-syntax#basics-of-two-way-binding\n - guide/template-syntax#binding-types-and-targets\n - guide/template-syntax#class-binding\n - guide/template-syntax#colspan-and-colspan\n - guide/template-syntax#content-security\n - guide/template-syntax#custom-events-with-eventemitter\n - guide/template-syntax#delegating-to-styles-with-lower-precedence\n - guide/template-syntax#event-binding\n - guide/template-syntax#event-객체와-이벤트-처리-실행문\n - guide/template-syntax#example-1-an-input\n - guide/template-syntax#example-2-a-disabled-button\n - guide/template-syntax#examples\n - guide/template-syntax#expression-operators\n - guide/template-syntax#how-to-use-input\n - guide/template-syntax#how-to-use-output\n - guide/template-syntax#html-어트리뷰트-vs-dom-프로퍼티\n - guide/template-syntax#import-formsmodule-to-use-ngmodel\n - guide/template-syntax#in-the-child\n - guide/template-syntax#in-the-child-1\n - guide/template-syntax#in-the-childs-template\n - guide/template-syntax#in-the-parent\n - guide/template-syntax#in-the-parent-1\n - guide/template-syntax#in-the-parents-template\n - guide/template-syntax#input\n - guide/template-syntax#input-and-output-are-independent\n - guide/template-syntax#input-and-output-declarations\n - guide/template-syntax#input-and-output-properties\n - guide/template-syntax#input-and-output-together\n - guide/template-syntax#inputs-outputs\n - guide/template-syntax#ngClass\n - guide/template-syntax#ngFor\n - guide/template-syntax#ngIf\n - guide/template-syntax#ngModel\n - guide/template-syntax#ngStyle\n - guide/template-syntax#ngSwitch\n - guide/template-syntax#ngclass\n - guide/template-syntax#ngfor\n - guide/template-syntax#ngfor-with-index\n - guide/template-syntax#ngfor-with-trackby\n - guide/template-syntax#ngif\n - guide/template-syntax#ngmodel-and-value-accessors\n - guide/template-syntax#ngmodel-two-way-binding\n - guide/template-syntax#ngstyle\n - guide/template-syntax#ngswitch-디렉티브\n - guide/template-syntax#no-visible-side-effects\n - guide/template-syntax#non-null-assertion-operator\n - guide/template-syntax#null-방지\n - guide/template-syntax#null-방지-연산자---\n - guide/template-syntax#onchanges-and-input\n - guide/template-syntax#one-way-in\n - guide/template-syntax#output\n - guide/template-syntax#passing-in-an-object\n - guide/template-syntax#pipe\n - guide/template-syntax#property-binding\n - guide/template-syntax#property-binding-property\n - guide/template-syntax#property-binding-vs-interpolation\n - guide/template-syntax#quick-execution\n - guide/template-syntax#ref-var\n - guide/template-syntax#return-the-proper-type\n - guide/template-syntax#safe-navigation-operator\n - guide/template-syntax#showhide-vs-ngif\n - guide/template-syntax#simplicity\n - guide/template-syntax#structural-directives\n - guide/template-syntax#style-binding\n - guide/template-syntax#styling-delegation\n - guide/template-syntax#styling-precedence\n - guide/template-syntax#styling-precedence-highest-to-lowest\n - guide/template-syntax#svg-in-templates\n - guide/template-syntax#template-expressions\n - guide/template-syntax#template-input-variable\n - guide/template-syntax#template-reference-variable-considerations\n - guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\n - guide/template-syntax#top-of-page\n - guide/template-syntax#trackBy\n - guide/template-syntax#two-way\n - guide/template-syntax#two-way-binding-\n - guide/template-syntax#two-way-binding-in-forms\n - guide/template-syntax#without-ngstyle\n - guide/template-syntax#괄호를-깜빡하면-안됩니다\n - guide/template-syntax#기본-구조-디렉티브\n - guide/template-syntax#기본-디렉티브\n - guide/template-syntax#기본-어트리뷰트-디렉티브\n - guide/template-syntax#기본-템플릿-함수\n - guide/template-syntax#대상-이벤트\n - guide/template-syntax#데이터-바인딩과-html\n - guide/template-syntax#문자열-바인딩-\n - guide/template-syntax#문자열-바인딩과-템플릿-표현식\n - guide/template-syntax#문자열을-그대로-사용하는-경우\n - guide/template-syntax#바인딩-대상\n - guide/template-syntax#바인딩-문법--개요\n - guide/template-syntax#어트리뷰트-바인딩\n - guide/template-syntax#어트리뷰트-클래스-스타일-바인딩\n - guide/template-syntax#외부-영향-최소화\n - guide/template-syntax#외부-영향-최소화-1\n - guide/template-syntax#이벤트-바인딩-event\n - guide/template-syntax#참조-변수를-사용해서-입력값-얻기\n - guide/template-syntax#템플릿-문법\n - guide/template-syntax#템플릿-실행문-template-statements\n - guide/template-syntax#템플릿-실행문-가이드라인\n - guide/template-syntax#템플릿-실행문의-영향\n - guide/template-syntax#템플릿-실행문의-컨텍스트\n - guide/template-syntax#템플릿-입력-변수-template-input-variables\n - guide/template-syntax#템플릿-참조-변수-var\n - guide/template-syntax#템플릿-표현식\n - guide/template-syntax#템플릿-표현식-가이드라인\n - guide/template-syntax#템플릿-표현식-전용-연산자\n - guide/template-syntax#템플릿과-html\n - guide/template-syntax#파이프-연산자-\n - guide/template-syntax#표현식의-컨텍스트\n - http://www.typescriptlang.org/docs/handbook/basic-types.html#any\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\n - https://angular.io/api/forms/DefaultValueAccessor\n - https://developer.mozilla.org/en-US/docs/Web/API#Interfaces\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\n - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\n - https://developer.mozilla.org/en-US/docs/Web/Events\n - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n - https://developer.mozilla.org/en-US/docs/Web/SVG\n - https://developer.mozilla.org/en-US/docs/Web/Web_Components\n - https://en.wikipedia.org/wiki/Idempotence\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-syntax.md?message=docs%3A%20describe%20your%20change...\n - https://www.w3.org/TR/SVG11/\n - https://www.w3.org/TR/SVG2/\n - https://www.w3.org/TR/html5/sec-forms.html#the-input-element\n-->"
}