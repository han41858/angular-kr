{
  "id": "guide/ngmodule-api",
  "title": "NgModule API",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/ngmodule-api.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"ngmodule-api\">NgModule API<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-api\"><i class=\"material-icons\">link</i></a></h1>\n<!--\n#### Prerequisites\n-->\n<h4 id=\"사전지식\">사전지식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#사전지식\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nA basic understanding of the following concepts:\n* [Bootstrapping](guide/bootstrapping).\n* [JavaScript Modules vs. NgModules](guide/ngmodule-vs-jsmodule).\n-->\n<p>다음 내용을 먼저 이해하고 이 문서를 보는 것이 좋습니다:</p>\n<ul>\n<li><a href=\"guide/bootstrapping\">부트스트랩</a></li>\n<li><a href=\"guide/ngmodule-vs-jsmodule\">JavaScript 모듈 vs. NgModules</a></li>\n</ul>\n<hr>\n<!--\n## Purpose of `@NgModule`\n-->\n<h2 id=\"ngmodule의-목적\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>의 목적<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule의-목적\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAt a high level, NgModules are a way to organize Angular apps\nand they accomplish this through the metadata in the `@NgModule`\ndecorator.\nThe metadata falls into three categories:\n-->\n<p>NgModule을 사용하면 Angular 애플리케이션의 코드를 효율적으로 구성할 수 있으며, 이 때 <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 데코레이터를 사용합니다. 이 데코레이터의 메타데이터는 세종류로 나눠 볼 수 있습니다:</p>\n<!--\n* **Static:** Compiler configuration which tells the compiler about directive selectors and where in templates the directives should be applied through selector matching. This is configured via the `declarations` array.\n* **Runtime:** Injector configuration via the `providers` array.\n* **Composability/Grouping:** Bringing NgModules together and making them available via the `imports` and `exports` arrays.\n-->\n<ul>\n<li><strong>정적(static) 설정:</strong> 컴파일러가 모듈을 빌드할 때 알아야 할 디렉티브를 등록합니다. <code>declarations</code> 배열이 해당됩니다.</li>\n<li><strong>런타임(runtime) 설정:</strong> 모듈이 실행될 때 의존성을 주입해야 한다면, <code>providers</code> 배열로 인젝터를 설정합니다.</li>\n<li><strong>그룹화(grouping) 설정:</strong> 다른 NgModule과 조합하기 위해 <code>imports</code>, <code>exports</code> 배열을 설정합니다.</li>\n</ul>\n<!--\n```typescript\n@NgModule({\n  // Static, that is compiler configuration\n  declarations: [], // Configure the selectors\n  entryComponents: [], // Generate the host factory\n\n  // Runtime, or injector configuration\n  providers: [], // Runtime injector configuration\n\n  // Composability / Grouping\n  imports: [], // composing NgModules together\n  exports: [] // making NgModules available to other parts of the app\n})\n```\n-->\n<code-example language=\"typescript\">\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  // 정적 설정. 이 내용은 컴파일러와 관련된 내용입니다.\n  declarations: [], // 셀렉터를 설정합니다.\n  entryComponents: [], // 진입 컴포넌트를 지정합니다.\n\n  // 런타임 설정, 인젝터 설정\n  providers: [], // 모듈이 실행될때 사용하는 인젝터를 설정합니다.\n\n  // 그룹화\n  imports: [], // 이 모듈이 사용하는 외부 <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>을 등록합니다.\n  exports: [] // 모듈의 구성요소를 모듈 외부로 공개할 때 사용합니다.\n})\n</code-example>\n<!--\n## `@NgModule` metadata\n-->\n<h2 id=\"ngmodule-메타데이터\"><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 메타데이터<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-메타데이터\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe following table summarizes the `@NgModule` metadata properties.\n-->\n<p><code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>에서 사용하는 메타데이터를 자세하게 알아봅시다.</p>\n<table>\n  <tbody><tr>\n    <th>\n      <!--\n      Property\n      -->\n      프로퍼티\n    </th>\n    <th>\n      <!--\n      Description\n      -->\n      설명\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>declarations</code>\n    </td>\n    <td>\n      <!--\n      A list of [declarable](guide/ngmodule-faq#q-declarable) classes,\n      (*components*, *directives*, and *pipes*) that _belong to this module_.\n\n      <ol>\n        <li>When compiling a template, you need to determine a set of selectors which should be used for triggering their corresponding directives.</li>\n        <li>\n          The template is compiled within the context of an NgModule&mdash;the NgModule within which the template's component is declared&mdash;which determines the set of selectors using the following rules:\n          <ul>\n            <li>All selectors of directives listed in `declarations`.</li>\n            <li>All selectors of directives exported from imported NgModules.</li>\n          </ul>\n        </li>\n      </ol>\n\n      Components, directives, and pipes must belong to _exactly_ one module.\n      The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported\n      directly or indirectly from another module.\n      The compiler emits an error if you try to declare the same class in more than one module.\n\n      Don't re-declare a class imported from another module.\n      -->\n<p>      <em>이 모듈에 포함되는</em> <a href=\"guide/ngmodule-faq#q-declarable\"><em>컴포넌트</em>와 <em>디렉티브</em>, <em>파이프</em></a>를 등록합니다.</p>\n      <ol>\n        <li>템플릿을 컴파일하려면 이 템플릿에 사용된 셀렉터들을 모듈에 미리 등록해야 합니다.</li>\n        <li>\n          템플릿이 컴파일되는 컨텍스트는 NgModule 컨텍스트와 같습니다. 그래서 템플릿에 사용되는 컴포넌트는 모듈의 컨텍스트 안에 정의되어야 하며, 사용할 수 있는 컴포넌트의 범위는 다음과 같습니다:\n          <ul>\n            <li><code>declarations</code> 배열에 등록된 디렉티브의 셀렉터</li>\n            <li><code>imports</code> 배열로 불러온 NgModule의 구성 요소 중 모듈 외부로 공개된 디렉티브의 셀렉터</li>\n          </ul>\n        </li>\n      </ol>\n      <!--\n      Components, directives, and pipes must belong to _exactly_ one module.\n      The compiler emits an error if you try to declare the same class in more than one module. Be careful not to re-declare a class that is imported\n      directly or indirectly from another module.\n      The compiler emits an error if you try to declare the same class in more than one module.\n\n      Don't re-declare a class imported from another module.\n      -->\n<p>      컴포넌트, 디렉티브, 파이프는 <em>반드시</em> 한 모듈에만 등록되어야 합니다. 어떤 항목이 모듈에 두 번 이상 등록되면 컴파일러에서 에러가 발생합니다. 중복 로드되지 않도록 주의하세요.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>providers</code>\n    </td>\n    <td>\n      <!--\n      A list of dependency-injection providers.\n\n      Angular registers these providers with the NgModule's injector.\n      If it is the NgModule used for bootstrapping then it is the root injector.\n\n      These services become available for injection into any component, directive, pipe or service which is a child of this injector.\n\n      A lazy-loaded module has its own injector which\n      is typically a child of the application root injector.\n\n      Lazy-loaded services are scoped to the lazy module's injector.\n      If a lazy-loaded module also provides the `UserService`,\n      any component created within that module's context (such as by router navigation)\n      gets the local instance of the service, not the instance in the root application injector.\n\n      Components in external modules continue to receive the instance provided by their injectors.\n\n      For more information on injector hierarchy and scoping, see [Providers](guide/providers) and the [DI Guide](guide/dependency-injection).\n      -->\n<p>      의존성 주입에 사용되는 서비스 프로바이더를 등록합니다.</p>\n<p>      이 목록에 지정된 프로바이더는 NgModule의 인젝터에 등록됩니다.\n그리고 이 모듈이 부트스트랩되는 모듈이라면 최상위 인젝터로 등록됩니다.</p>\n<p>      그러면 이 프로바이더가 생성하는 서비스를 컴포넌트나 디렉티브, 파이프, 서비스에 의존성으로 주입해서 사용할 수 있습니다.</p>\n<p>      지연로딩되는 서비스의 스코프는 지연로딩된 모듈의 인젝터 스코프와 같습니다.\n그래서 지연로딩된 모듈에 <code>UserService</code> 프로바이더가 등록되고 있고 이 모듈 안에 있는 컴포넌트가 <code>UserService</code>를 사용하면, 이 컴포넌트는 애플리케이션 최상위 인젝터가 생성한 서비스의 인스턴스 대신 모듈 안에서 생성된 인스턴스를 사용합니다.</p>\n<p>      이 때 모듈 밖에 있는 컴포넌트는 여전히 애플리케이션 최상위 인젝터를 사용합니다.</p>\n<p>      인젝터의 계층과 스코프에 대해 더 알아보려면 <a href=\"guide/providers\">프로바이더</a> 문서와 <a href=\"guide/dependency-injection\">DI Guide</a> 문서를 참고하세요.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>imports</code>\n    </td>\n    <td>\n      <!--\n      A list of modules which should be folded into this module. Folded means it is\n      as if all the imported NgModule's exported properties were declared here.\n\n      Specifically, it is as if the list of modules whose exported components, directives, or pipes\n      are referenced by the component templates were declared in this module.\n\n      A component template can [reference](guide/ngmodule-faq#q-template-reference) another component, directive, or pipe\n      when the reference is declared in this module or if the imported module has exported it.\n      For example, a component can use the `NgIf` and `NgFor` directives only if the\n      module has imported the Angular `CommonModule` (perhaps indirectly by importing `BrowserModule`).\n\n      You can import many standard directives from the `CommonModule`\n      but some familiar directives belong to other modules.\n      For example, you can use `[(ngModel)]` only\n      after importing the Angular `FormsModule`.\n      -->\n<p>      이 모듈 안에서 사용하는 외부 모듈을 등록합니다. 그러면 <code>imports</code>에 지정된 모듈의 내용이 이 모듈에 있는 것처럼 사용할 수 있습니다.</p>\n<p>      좀 더 정확하게 이야기하면, 불러온 모듈에서 모듈 외부로 공개된 컴포넌트나 디렉티브, 파이프만 이 모듈의 컴포넌트 템플릿에 사용할 수 있습니다.</p>\n<p>      컴포넌트 템플릿은 다른 컴포넌트나, 디렉티브, 파이프를 <a href=\"guide/ngmodule-faq#q-template-reference\">사용</a>할 수 있는데, 이 대상이 현재 모듈 안에 선언되어 있거나, 외부에서 불러온 모듈에서 모듈 외부로 공개한 항목이어야 사용할 수 있습니다.\n그래서 Angular의 기본 라이브러리 중 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>이나 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>을 로드하는 모듈은 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>나 <code>NgFor</code> 디렉티브를 자유롭게 사용할 수 있습니다.</p>\n<p>      <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>에서 제공하는 기본 디렉티브를 활용하는 것처럼 다른 모듈의 디렉티브도 같은 방식으로 활용할 수 있습니다.\n<code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code>을 로드한 후에 <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>을 사용하는 것도 이와 마찬가지입니다.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>exports</code>\n    </td>\n    <td>\n      <!--\n      A list of declarations&mdash;*component*, *directive*, and *pipe* classes&mdash;that\n      an importing module can use.\n\n      Exported declarations are the module's _public API_.\n      A component in another module can [use](guide/ngmodule-faq#q-template-reference) _this_\n      module's `UserComponent` if it imports this module and this module exports `UserComponent`.\n\n      Declarations are private by default.\n      If this module does _not_ export `UserComponent`, then only the components within _this_\n      module can use `UserComponent`.\n\n      Importing a module does _not_ automatically re-export the imported module's imports.\n      Module 'B' can't use `ngIf` just because it imported module 'A' which imported `CommonModule`.\n      Module 'B' must import `CommonModule` itself.\n\n      A module can list another module among its `exports`, in which case\n      all of that module's public components, directives, and pipes are exported.\n\n      [Re-export](guide/ngmodule-faq#q-reexport) makes module transitivity explicit.\n      If Module 'A' re-exports `CommonModule` and Module 'B' imports Module 'A',\n      Module 'B' components can use `ngIf` even though 'B' itself didn't import `CommonModule`.\n      -->\n<p>      이 모듈을 로드하는 다른 모듈에서 사용할 수 있도록, 모듈의 <em>컴포넌트</em>나 <em>디렉티브</em>, <em>파이프</em>를 외부에 공개할 때 사용합니다.</p>\n<p>      이렇게 모듈 외부로 공개되는 항목은 모듈의 <em>public API</em> 라고 볼 수도 있습니다.\n만약 이 모듈에서 <code>UserComponent</code>를 모듈 밖으로 공개한다고 선언하면, 이 모듈을 로드하는 다른 모듈도 <code>UserComponent</code>를 <a href=\"guide/ngmodule-faq#q-template-reference\">사용</a>할 수 있습니다.</p>\n<p>      모듈에 선언되는 컴포넌트나 디렉티브, 파이프는 기본적으로 private입니다.\n그래서 이 모듈이 <code>UserComponent</code>를 모듈 외부로 공개하지 않으면, 이 컴포넌트는 <em>이</em> 모듈에서만 사용할 수 있습니다.</p>\n<p>      모듈을 불러오는 것만으로는 이 모듈의 내용이 모듈 밖으로 연결되지 않습니다.\n그래서 모듈 A가 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 로드하면 모듈 A는 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>를 사용할 수 있지만, 모듈 A를 로드하는 모듈 B는 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 따로 로드하지 않는 한 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 디렉티브를 사용할 수 없습니다.</p>\n<p>      모듈의 구성요소를 <a href=\"guide/ngmodule-faq#q-reexport\">다시 외부로 공개(re-export)</a>하면 모듈을 중개하는 역할로 사용할 수도 있습니다.\n<code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 로드하는 모듈 A가 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 모듈 외부로 다시 공개하면, 모듈 B는 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>을 다시 로드하지 않아도 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>와 같은 <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>의 디렉티브를 사용할 수 있습니다.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>bootstrap</code>\n    </td>\n    <td>\n      <!--\n      A list of components that are automatically bootstrapped.\n\n      Usually there's only one component in this list, the _root component_ of the application.\n\n      Angular can launch with multiple bootstrap components,\n      each with its own location in the host web page.\n\n      A bootstrap component is automatically added to `entryComponents`.\n      -->\n<p>      자동으로 부트스트랩 될 컴포넌트를 지정합니다.</p>\n<p>      보통 이 목록에는 컴포넌트 하나만 등록하며, 앱 모듈의 경우에는 애플리케이션의 <em>최상위 컴포넌트</em> 를 여기에 등록합니다.</p>\n<p>      호스트 웹 페이지가 여러 개의 컴포넌트로 구성되어 있다면, 부트스트랩되는 컴포넌트를 여러 개 지정할 수도 있습니다.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>entryComponents</code>\n    </td>\n    <td>\n      <!--\n      A list of components that can be dynamically loaded into the view.\n\n      By default, an Angular app always has at least one entry component, the root component, `AppComponent`. Its purpose is to serve as a point of entry into the app, that is, you bootstrap it to launch the app.\n\n      Routed components are also _entry components_ because they need to be loaded dynamically.\n      The router creates them and drops them into the DOM near a `<router-outlet>`.\n\n      While the bootstrapped and routed components are _entry components_,\n      you don't have to add them to a module's `entryComponents` list,\n      as they are added implicitly.\n\n      Angular automatically adds components in the module's `bootstrap` and route definitions into the `entryComponents` list.\n\n      That leaves only components bootstrapped using one of the imperative techniques, such as [`ViewComponentRef.createComponent()`](https://angular.io/api/core/ViewContainerRef#createComponent) as undiscoverable.\n\n      Dynamic component loading is not common in most apps beyond the router. If you need to dynamically load components, you must add these components to the `entryComponents` list yourself.\n\n      For more information, see [Entry Components](guide/entry-components).\n      -->\n<p>      뷰에 동적으로 로드되는 컴포넌트의 목록을 지정합니다.</p>\n<p>      보통 Angular 앱은 최상위 컴포넌트 <code>AppComponent</code> 하나만 진입 컴포넌트로 지정합니다. 이 컴포넌트는 앱 전체의 진입점으로 사용되며, 애플리케이션이 실행되면서 같이 부트스트랩됩니다.</p>\n<p>      라우팅 대상이 되는 컴포넌트는 필요할 때 동적으로 로드되기 때문에 <em>진입 컴포넌트</em> 라고 볼 수 있습니다.\n이 컴포넌트들은 라우터가 생성하고 <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> 근처 DOM에 추가됩니다.</p>\n<p>      부트스트랩 대상 컴포넌트와 라우터 대상 컴포넌트는 <em>진입 컴포넌트</em> 이기는 하지만 모듈 메타데이터 중 <code>entryComponents</code>에 이 컴포넌트를 다시 추가할 필요는 없습니다.</p>\n<p>      모듈에서 부트스트랩 대상으로 지정되거나 라우팅 대상으로 지정된 컴포넌트는 해당 모듈의 <code>entryComponents</code> 목록에 자동으로 추가됩니다.</p>\n<p>      그러면 이 프로퍼티에는 <a href=\"https://angular.io/api/core/ViewContainerRef#createComponent\"><code>ViewComponentRef.createComponent()</code></a>와 같이 동적으로 생성되기 때문에 Angular가 자동으로 찾을 수 없는 컴포넌트만 남게 됩니다.</p>\n<p>      컴포넌트를 동적로딩하는 것은 특수한 경우이며, 이렇게 동적로딩된 컴포넌트는 <code>entryComponents</code> 목록에 직접 추가해야 합니다.</p>\n<p>      좀 더 자세한 내용은 <a href=\"guide/entry-components\">진입 컴포넌트</a> 문서를 참고하세요.</p>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<!--\n## More on NgModules\n-->\n<h2 id=\"ngmodule-더-알아보기\">NgModule 더 알아보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ngmodule-api#ngmodule-더-알아보기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou may also be interested in the following:\n* [Feature Modules](guide/feature-modules).\n* [Entry Components](guide/entry-components).\n* [Providers](guide/providers).\n* [Types of Feature Modules](guide/module-types).\n-->\n<p>다음 내용에 대해서도 확인해 보세요:</p>\n<ul>\n<li><a href=\"guide/feature-modules\">기능 모듈</a></li>\n<li><a href=\"guide/entry-components\">진입 컴포넌트</a></li>\n<li><a href=\"guide/providers\">프로바이더</a></li>\n<li><a href=\"guide/module-types\">기능 모듈의 종류</a></li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/common/CommonModule\n - api/common/NgIf\n - api/core/NgModule\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - api/router/RouterOutlet\n - guide/bootstrapping\n - guide/dependency-injection\n - guide/entry-components\n - guide/feature-modules\n - guide/module-types\n - guide/ngmodule-api#ngmodule-api\n - guide/ngmodule-api#ngmodule-더-알아보기\n - guide/ngmodule-api#ngmodule-메타데이터\n - guide/ngmodule-api#ngmodule의-목적\n - guide/ngmodule-api#사전지식\n - guide/ngmodule-faq#q-declarable\n - guide/ngmodule-faq#q-reexport\n - guide/ngmodule-faq#q-template-reference\n - guide/ngmodule-vs-jsmodule\n - guide/providers\n - https://angular.io/api/core/ViewContainerRef#createComponent\n - https://github.com/angular/angular/edit/master/aio/content/guide/ngmodule-api.md?message=docs%3A%20describe%20your%20change...\n-->"
}