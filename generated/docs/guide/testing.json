{
  "id": "guide/testing",
  "title": "테스트",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<a id=\"top\"></a>\n<!--\n# Testing\n-->\n<h1 id=\"테스트\">테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#테스트\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nThis guide offers tips and techniques for unit and integration testing Angular applications.\n\nThe guide presents tests of a sample application created with the [Angular CLI](cli). This sample application is much like the one created in the [_Tour of Heroes_ tutorial](tutorial).\nThe sample application and all tests in this guide are available for inspection and experimentation:\n\n- <live-example embedded-style>Sample app</live-example>\n- <live-example stackblitz=\"specs\">Tests</live-example>\n-->\n<p>이 문서는 Angular 애플리케이션에 유닛 테스트와 통합 테스트를 적용하는 방법에 대해 설명합니다.</p>\n<p>내용을 설명하면서 사용하는 예제 애플리케이션은 <a href=\"cli\">Angular CLI</a>를 사용해서 만든 것이며, <a href=\"tutorial\"><em>히어로들의 여행</em> 튜토리얼</a>에서 다룬 애플리케이션와도 비슷합니다.\n이 문서에서 다루는 예제 애플리케이션과 모든 테스트 코드는 다음 링크에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n<ul>\n<li><live-example embedded-style=\"\">예제 앱</live-example></li>\n<li><live-example stackblitz=\"specs\">테스트 코드</live-example></li>\n</ul>\n<hr>\n<!--\n## Setup\n-->\n<h2 id=\"환경-설정\">환경 설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#환경-설정\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe Angular CLI downloads and install everything you need to test an Angular application with the [Jasmine test framework](https://jasmine.github.io/).\n\nThe project you create with the CLI is immediately ready to test.\nJust run the [`ng test`](cli/test) CLI command:\n-->\n<p>Angular 애플리케이션은 <a href=\"https://jasmine.github.io/\">Jasmine 테스트 프레임워크</a>로 테스트하는데, 애플리케이션을 테스트할 때 필요한 환경은 Angular CLI가 프로젝트를 생성하면서 모두 준비하기 때문에 바로 테스트할 수 있는 상태입니다.\n프로젝트 최상위 폴더에서 <a href=\"cli/test\"><code>ng test</code></a> 명령을 실행해 보세요:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test\n</code-example>\n<!--\nThe `ng test` command builds the app in _watch mode_,\nand launches the [karma test runner](https://karma-runner.github.io).\n\nThe console output looks a bit like this:\n-->\n<p><code>ng test</code> 명령을 실행하면 애플리케이션을 <em>워치 모드 (watch mode)</em> 로 빌드하고 <a href=\"https://karma-runner.github.io\">karma 테스트 러너</a>를 실행합니다.</p>\n<p>콘솔은 다음과 같이 출력될 것입니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n10% building modules 1/1 modules 0 active\n...INFO [karma]: Karma v1.7.1 server started at <a href=\"api/common/http\" class=\"code-anchor\">http</a>://0.0.0.0:9876/\n...INFO [launcher]: Launching <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> Chrome ...\n...INFO [launcher]: Starting <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> Chrome\n...INFO [Chrome ...]: Connected on socket ...\nChrome ...: Executed 3 of 3 SUCCESS (0.135 secs / 0.205 secs)\n</code-example>\n<!--\nThe last line of the log is the most important.\nIt shows that Karma ran three tests that all passed.\n\nA chrome browser also opens and displays the test output in the \"Jasmine HTML Reporter\" like this.\n-->\n<p>이 로그에서 마지막 줄이 가장 중요합니다.\n마지막 줄을 보면, Karma가 3개의 테스트를 실행했고 테스트는 모두 통과했다는 것을 확인할 수 있습니다.</p>\n<p>테스트 실행 결과는 Chrome 브라우저에서도 확인할 수 있습니다.\n브라우저에서는 \"Jasmine HTML Reporter\"를 사용해서 다음과 같이 표시됩니다.</p>\n<!--\n<figure>\n  <img src='generated/images/guide/testing/initial-jasmine-html-reporter.png' alt=\"Jasmine HTML Reporter in the browser\">\n</figure>\n-->\n<figure>\n  <img src=\"generated/images/guide/testing/initial-jasmine-html-reporter.png\" alt=\"브라우저에서 Jasmine HTML Reporter 확인하기\" width=\"502\" height=\"306\">\n</figure>\n<!--\nMost people find this browser output easier to read than the console log.\nYou can click on a test row to re-run just that test or click on a description to re-run the tests in the selected test group (\"test suite\").\n\nMeanwhile, the `ng test` command is watching for changes.\n\nTo see this in action, make a small change to `app.component.ts` and save.\nThe tests run again, the browser refreshes, and the new test results appear.\n-->\n<p>테스트 결과는 콘솔 로그로 확인하는 것보다 브라우저에서 확인하는 것이 더 편합니다.\n브라우저에서는 특정 테스트 스펙을 클릭해서 해당 스펙만 다시 실행해볼 수 있고, 테스트 그룹(test suite)을 클릭해서 그룹 단위로 다시 실행할 수도 있습니다.</p>\n<p>그리고 <code>ng test</code> 명령을 실행했기 때문에 코드가 변경되는 것도 감지합니다.</p>\n<p><code>app.component.ts</code> 파일의 내용을 수정하고 저장해 보세요.\n그러면 테스트가 다시 실행되면서 브라우저도 갱신되고, 새로운 결과 화면이 표시될 것입니다.</p>\n<!--\n#### Configuration\n-->\n<h4 id=\"테스트-설정\">테스트 설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#테스트-설정\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe CLI takes care of Jasmine and karma configuration for you.\n\nYou can fine-tune many options by editing the `karma.conf.js` and\nthe `test.ts` files in the `src/` folder.\n\nThe `karma.conf.js` file is a partial karma configuration file.\nThe CLI constructs the full runtime configuration in memory,based on application structure specified in the `angular.json` file, supplemented by `karma.conf.js`.\n\nSearch the web for more details about Jasmine and karma configuration.\n-->\n<p>Angular CLI로 프로젝트를 생성하면 Jasmine과 Karma를 실행할 수 있는 환경 설정이 자동으로 구성됩니다.\n이후에 이 설정을 튜닝하고 싶으면 <code>karma.conf.js</code> 파일과 <code>src/test.ts</code> 파일을 수정하면 됩니다.</p>\n<p><code>karma.conf.js</code> 파일은 Karma가 실행되는 환경설정 중 일부를 담당합니다.\nKarma의 전체 설정값은 테스트를 실행하는 시점에 <code>angular.json</code> 파일과 <code>karma.conf.js</code>를 분석해서 Angular CLI가 구성합니다.</p>\n<p>자세한 내용은 Jasmine 문서와 Karma 문서를 참고하세요.</p>\n<!--\n#### Other test frameworks\n-->\n<h4 id=\"다른-테스트-프레임워크\">다른 테스트 프레임워크<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#다른-테스트-프레임워크\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou can also unit test an Angular app with other testing libraries and test runners.\nEach library and runner has its own distinctive installation procedures, configuration, and syntax.\n\nSearch the web to learn more.\n-->\n<p>Jasmine과 Karma 말고도 다른 라이브러리나 테스트 러너를 사용해서 Angular 앱을 테스트할 수도 있습니다.\n이 때 라이브러리를 설치하는 방법, 환경을 설정하는 방법, 실행하는 방법은 라이브러리에 따라 다르기 때문에 사용하려는 라이브러리가 제공하는 문서를 참고하세요.</p>\n<!--\n#### Test file name and location\n-->\n<h4 id=\"테스트-파일의-이름과-위치\">테스트 파일의 이름과 위치<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#테스트-파일의-이름과-위치\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nLook inside the `src/app` folder.\n\nThe CLI generated a test file for the `AppComponent` named `app.component.spec.ts`.\n-->\n<p><code>src/app</code> 폴더를 봅시다.</p>\n<p>Angular CLI로 프로젝트를 생성하면 <code>AppComponent</code>를 테스트 하는 코드는 <code>app.component.spec.ts</code> 파일에 존재합니다.</p>\n<div class=\"alert is-important\">\n<!--\nThe test file extension **must be `.spec.ts`** so that tooling can identify it as a file with tests (AKA, a _spec_ file).\n-->\n<p>IDE와 같은 툴에서 스펙 파일을 구분하려면 테스트 파일의 확장자를 <strong>반드시 <code>.spec.ts</code></strong>로 지정해야 합니다.</p>\n</div>\n<!--\nThe `app.component.ts` and `app.component.spec.ts` files are siblings in the same folder.\nThe root file names (`app.component`) are the same for both files.\n\nAdopt these two conventions in your own projects for _every kind_ of test file.\n-->\n<p>이 관계로 보면 <code>app.component.ts</code> 파일과 <code>app.component.spec.ts</code> 파일은 같은 폴더에 이웃한 파일이며, 두 파일의 컴포넌트 이름 부분(<code>app.component</code>)은 같다는 것을 확인할 수 있습니다.</p>\n<p>이 룰은 프로젝트 안에 있는 <em>모든</em> 테스트 파일에 적용하는 것이 좋습니다.</p>\n<a id=\"ci\"></a>\n<!--\n## Set up continuous integration\n-->\n<h2 id=\"지속적인-통합환경-구성하기\">지속적인 통합환경 구성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#지속적인-통합환경-구성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nOne of the best ways to keep your project bug free is through a test suite, but it's easy to forget to run tests all the time. \nContinuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request.\n\nThere are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others. \nAlthough Circle CI and Travis CI are paid services, they are provided free for open source projects. \nYou can create a public project on GitHub and add these services without paying. \nContributions to the Angular repo are automatically run through a whole suite of Circle CI tests.\n\nThis article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.\n-->\n<p>프로젝트에서 발생하는 버그를 방지하려면 주기적으로 테스트를 실행하는 것이 좋지만, 매번 테스트를 실행해야 하는 것은 번거로운 일입니다.\n이 때 프로젝트 레파지토리에 지속적인 통합(Continuous integration, CI) 서버를 연결하면 이 레파지토리에 커밋이나 풀 리퀘스트가 있을 때마다 자동으로 테스트를 실행하게 할 수 있습니다.</p>\n<p>Circle CI와 Travis CI는 이런 경우에 사용하는 유료 CI 서비스입니다. 그리고 Jenkins와 같은 툴을 사용하면 무료 CI 환경을 구성할 수도 있습니다.\nCircle CI와 Travis CI는 유료 서비스지만, 오픈 소스 프로젝트라면 무료로 사용할 수 있습니다.\n그래서 GitHub에 public 프로젝트를 만들면 이 서비스를 무료로 사용할 수 있습니다.\nAngular 공식 레파지토리에 코드를 반영할 때도 Circle CI 테스트가 자동으로 실행됩니다.</p>\n<p>이 섹션에서는 프로젝트에 Circle CI와 Travis CI를 연결하는 방법에 대해 설명하고, 프로젝트의 테스트 스펙을 리모트 서버의 Chrome 브라우저에서 실행하는 방법에 대해 안내합니다.</p>\n<!--\n### Configure project for Circle CI\n-->\n<h3 id=\"circle-ci-환경-설정하기\">Circle CI 환경 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#circle-ci-환경-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nStep 1: Create a folder called `.circleci` at the project root.\n\nStep 2: In the new folder, create a file called `config.yml` with the following content:\n-->\n<p>1단계: 프로젝트 최상위 폴더에 <code>.circleci</code> 폴더를 생성합니다.</p>\n<p>2단계: 이 폴더에 <code>config.yml</code> 파일을 생성하고 파일의 내용을 다음과 같이 작성합니다:</p>\n<code-example>\nversion: 2\njobs:\n  build:\n    working_directory: ~/my-project\n    docker:\n      - image: circleci/node:8-browsers\n    steps:\n      - checkout\n      - restore_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n      - run: npm install\n      - save_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n          paths:\n            - \"node_modules\"\n      - run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n      - run: npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js\n</code-example>\n<!--\nThis configuration caches `node_modules/` and uses [`npm run`](https://docs.npmjs.com/cli/run-script) to run CLI commands, because `@angular/cli` is not installed globally. \nThe double dash (`--`) is needed to pass arguments into the `npm` script.\n\nStep 3: Commit your changes and push them to your repository.\n\nStep 4: [Sign up for Circle CI](https://circleci.com/docs/2.0/first-steps/) and [add your project](https://circleci.com/add-projects). \nYour project should start building.\n\n* Learn more about Circle CI from [Circle CI documentation](https://circleci.com/docs/2.0/).\n-->\n<p>이 환경설정 파일의 내용은 <code>node_modules/</code> 폴더의 내용을 캐싱하고 <a href=\"https://docs.npmjs.com/cli/run-script\"><code>npm run</code></a>으로 Angular CLI 명령을 실행하는 것입니다.\n<code>@angular/cli</code>는 전역 범위에 필요하기 때문에 <code>npm install</code> 명령을 실행해서 설치했습니다.\n그리고 <code>npm</code> 스크립트에 옵션을 지정하려면 대시 2개(<code>--</code>)를 사용해야 합니다.</p>\n<p>3단계: 변경사항을 커밋하고 레파지토리에 푸시합니다.</p>\n<p>4단계: <a href=\"https://circleci.com/docs/2.0/first-steps/\">Circle CI에 회원가입</a>한 뒤에 <a href=\"https://circleci.com/add-projects\">프로젝트를 추가</a>합니다.\n이 때 프로젝트 빌드가 시작됩니다.</p>\n<ul>\n<li>더 자세한 내용은 <a href=\"https://circleci.com/docs/2.0/\">Circle CI 문서</a>를 참고하세요.</li>\n</ul>\n<!--\n### Configure project for Travis CI\n-->\n<h3 id=\"travis-ci-환경-설정하기\">Travis CI 환경 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#travis-ci-환경-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nStep 1: Create a file called `.travis.yml` at the project root, with the following content:\n-->\n<p>1단계: 프로젝트 최상위 폴더에 <code>.travis.yml</code> 파일을 생성하고 내용을 다음과 같이 작성합니다:</p>\n<code-example>\ndist: trusty\nsudo: false\n\nlanguage: node_js\nnode_js:\n  - \"8\"\n  \naddons:\n  apt:\n    sources:\n      - google-chrome\n    packages:\n      - google-chrome-stable\n\ncache:\n  directories:\n     - ./node_modules\n\ninstall:\n  - npm install\n\nscript:\n  - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n  - npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js\n</code-example>\n<!--\nThis does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.\n\nStep 2: Commit your changes and push them to your repository.\n\nStep 3: [Sign up for Travis CI](https://travis-ci.org/auth) and [add your project](https://travis-ci.org/profile). \nYou'll need to push a new commit to trigger a build.\n\n* Learn more about Travis CI testing from [Travis CI documentation](https://docs.travis-ci.com/).\n-->\n<p>이 환경설정 파일의 내용은 Circle CI에서 설정했던 내용과 같지만, Travis에는 Chrome이 설치되어있지 않기 때문에 Chromium을 추가로 설치했습니다.</p>\n<p>2단계: 변경사항을 커밋하고 레파지토리에 푸시합니다.</p>\n<p>3단계: <a href=\"https://travis-ci.org/auth\">Travis CI에 회원가입</a>한 뒤에 <a href=\"https://circleci.com/add-projects\">프로젝트를 추가</a>합니다.\n빌드를 실행하려면 레파지토리에 새로운 커밋이 푸시되어야 합니다.</p>\n<ul>\n<li>더 자세한 내용은 <a href=\"https://docs.travis-ci.com/\">Travis CI 문서</a>를 참고하세요.</li>\n</ul>\n<!--\n### Configure CLI for CI testing in Chrome\n-->\n<h3 id=\"ci-환경에서-chrome으로-테스트하기\">CI 환경에서 Chrome으로 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#ci-환경에서-chrome으로-테스트하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen the CLI commands `ng test` and `ng e2e` are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests.\n\nThere are configuration files for both the [Karma JavaScript test runner](https://karma-runner.github.io/latest/config/configuration-file.html) \nand [Protractor](https://www.protractortest.org/#/api-overview) end-to-end testing tool, \nwhich  you must adjust to start Chrome without sandboxing.\n\nWe'll be using [Headless Chrome](https://developers.google.com/web/updates/2017/04/headless-chrome#cli) in these examples.\n\n* In the Karma configuration file, `karma.conf.js`, add a custom launcher called ChromeHeadlessCI below browsers:\n-->\n<p>로컬 개발환경에서 Angular CLI로 <code>ng test</code> 명령이나 <code>ng e2e</code> 명령을 실행하면 Chrome 브라우저가 실행되고 이 브라우저에서 테스트가 실행됩니다.</p>\n<p>이런 환경을 구성하려면 <a href=\"https://karma-runner.github.io/latest/config/configuration-file.html\">Karma JavaScript 테스트 러너</a>와 e2e 테스트 툴인 <a href=\"https://www.protractortest.org/#/api-overview\">Protractor</a>가 실행될 환경이 모두 설정되어야 하지만, Angular CLI로 생성한 프로젝트에는 이 환경은 자동으로 구성되어 있습니다.\n하지만 CI 환경에서는 Chrome 브라우저를 직접 실행하지 않고 화면과 샌드박스 기능 없이 사용하는 것이 더 좋습니다.</p>\n<p>이번 섹션에서는 <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome#cli\">Headless Chrome</a>을 사용하는 방법에 대해 알아봅시다.</p>\n<ul>\n<li>Karma 환경설정 파일 <code>karma.conf.js</code>에 커스텀 런처를 ChromeHeadlessCI를 추가합니다:</li>\n</ul>\n<code-example>\nbrowsers: ['Chrome'],\ncustomLaunchers: {\n  ChromeHeadlessCI: {\n    base: 'ChromeHeadless',\n    flags: ['--no-sandbox']\n  }\n},\n</code-example>\n<!--\n* In the root folder of your e2e tests project, create a new file named `protractor-ci.conf.js`. This new file extends the original `protractor.conf.js`.\n-->\n<ul>\n<li>e2e 테스트 프로젝트의 최상위 폴더에 <code>protractor-ci.conf.js</code> 파일을 생성합니다. 이 파일은 기존에 존재하는 <code>protractor.conf.js</code> 파일을 확장하는 용도로 사용합니다.</li>\n</ul>\n<code-example>\nconst <a href=\"api/router/Router#config\" class=\"code-anchor\">config</a> = require('./protractor.conf').config;\n\nconfig.capabilities = {\n  browserName: 'chrome',\n  chromeOptions: {\n    args: ['--headless', '--no-sandbox']\n  }\n};\n\nexports.config = <a href=\"api/router/Router#config\" class=\"code-anchor\">config</a>;\n</code-example>\n<!--\nNow you can run the following commands to use the `--no-sandbox` flag:\n-->\n<p>그러면 아래 명령들은 <code>--no-sandbox</code> 플래그가 지정된 채로 실행됩니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n  ng e2e -- --protractor-config=e2e/protractor-ci.conf.js\n</code-example>\n<div class=\"alert is-helpful\">\n   <!--\n   **Note:** Right now, you'll also want to include the `--disable-gpu` flag if you're running on Windows. See [crbug.com/737678](https://crbug.com/737678).\n   -->\n<p>   <strong>참고:</strong> 개발 환경이 Windows라면 <code>--disable-gpu</code> 플래그를 사용하는 것이 나을 수 있습니다. 자세한 내용은 <a href=\"https://crbug.com/737678\">이 링크</a>를 참고하세요.</p>\n</div>\n<a id=\"code-coverage\"></a>\n<!--\n## Enable code coverage reports\n-->\n<h2 id=\"코드-커버리지-리포트-활성화하기\">코드 커버리지 리포트 활성화하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#코드-커버리지-리포트-활성화하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe CLI can run unit tests and create code coverage reports. \nCode coverage reports show you  any parts of our code base that may not be properly tested by your unit tests.\n\nTo generate a coverage report run the following command in the root of your project.\n-->\n<p>Angular CLI로 유닛 테스트를 실행하면서 코드 커버리지 리포트를 생성할 수 있습니다.\n코드 커버리지 리포트를 확인하면 유닛 테스트가 얼마나 충실하게 작성되었는지 확인할 수 있습니다.</p>\n<p>커버리지 리포트를 생성하려면 프로젝트를 테스트할 때 다음과 같이 실행하면 됩니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test --no-watch --code-coverage\n</code-example>\n<!--\nWhen  the tests are complete, the command creates a new `/coverage` folder in the project. Open the `index.html` file to see a report with your source code and code coverage values.\n\nIf you want to create code-coverage reports every time you test, you can set the following option in the CLI configuration file, `angular.json`:\n-->\n<p>이제 테스트가 끝나면 프로젝트에 <code>/coverage</code> 폴더가 생성됩니다.\n이 폴더에 있는 <code>index.html</code> 파일을 확인하면 소스 코드가 분석된 내용과 코드 커버리지를 확인할 수 있습니다.</p>\n<p>그리고 애플리케이션을 테스트를 할때마다 코드 커버리지 리포트를 생성하려면 Angular CLI 설정 파일 <code>angular.json</code>를 다음과 같이 수정하면 됩니다:</p>\n<code-example>\n  \"test\": {\n    \"options\": {\n      \"codeCoverage\": true\n    }\n  }\n</code-example>\n<!--\n### Code coverage enforcement\n-->\n<h3 id=\"코드-커버리지-강제하기\">코드 커버리지 강제하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#코드-커버리지-강제하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe code coverage percentages let you estimate how much of your code is tested.  \nIf your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI. \n\nFor example, suppose you want the code base to have a minimum of 80% code coverage. \nTo enable this, open the [Karma](https://karma-runner.github.io) test platform configuration file, `karma.conf.js`, and add the following in the `coverageIstanbulReporter:` key.\n-->\n<p>코드 커버리지 퍼센트를 확인하면 프로젝트 코드가 얼마나 많이 테스트되는지 확인할 수 있습니다.\n그리고 당신의 팀에서 유닛 테스트하기로 정한 최소한의 비율이 있다면, 이 비율을 강제하도록 Angular CLI를 설정할 수 있습니다.</p>\n<p>예를 들어 최소한 80% 이상의 코드가 테스트 대상이 되어야 한다고 합시다.\n그러면 <a href=\"https://karma-runner.github.io\">Karma</a> 설정 파일 <code>karma.conf.js</code> 파일을 열어서 <code>coverageIstanbulReporter</code> 키의 내용을 다음과 같이 수정하면 됩니다.</p>\n<code-example>\ncoverageIstanbulReporter: {\n  reports: [ 'html', 'lcovonly' ],\n  fixWebpackSourcePaths: true,\n  thresholds: {\n    statements: 80,\n    lines: 80,\n    branches: 80,\n    functions: 80\n  }\n}\n</code-example>\n<!--\nThe `thresholds` property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project.\n-->\n<p>이제 <code>thresholds</code> 프로퍼티를 추가했기 때문에 프로젝트를 대상으로 유닛 테스트가 실행될 때 80% 코드 커버리지를 달성하는 것이 강제됩니다.</p>\n<!--\n## Service Tests\n-->\n<h2 id=\"서비스-테스트하기\">서비스 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#서비스-테스트하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nServices are often the easiest files to unit test.\nHere are some synchronous and asynchronous unit tests of the `ValueService`\nwritten without assistance from Angular testing utilities.\n-->\n<p>서비스는 Angular 구성요소 중에서 유닛 테스트하기 가장 쉬운 구성요소입니다.\n이번 섹션에서는 Angular 테스트 유틸리티를 활용해서 <code>ValueService</code>를 동기적으로, 비동기적으로 테스트하는 방법에 대해 소개합니다.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"ValueService\" header=\"app/demo/demo.spec.ts\">\n// Angular가 제공하는 테스트 유틸리티를 사용하지 않고 Jasmine을 그대로 사용합니다.\ndescribe('ValueService', () => {\n  let service: ValueService;\n  beforeEach(() => { service = new ValueService(); });\n\n  it('#getValue should return real value', () => {\n    expect(service.getValue()).toBe('real value');\n  });\n\n  it('#getObservableValue should return value from observable',\n    (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n    service.getObservableValue().subscribe(value => {\n      expect(value).toBe('observable value');\n      <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n    });\n  });\n\n  it('#getPromiseValue should return value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> promise',\n    (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n    service.getPromiseValue().then(value => {\n      expect(value).toBe('promise value');\n      <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n    });\n  });\n});\n\n</code-example>\n<a id=\"services-with-dependencies\"></a>\n<!--\n#### Services with dependencies\n-->\n<h4 id=\"의존성-객체가-존재하는-서비스\">의존성 객체가 존재하는 서비스<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#의존성-객체가-존재하는-서비스\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nServices often depend on other services that Angular injects into the constructor.\nIn many cases, it easy to create and _inject_ these dependencies by hand while\ncalling the service's constructor.\n\nThe `MasterService` is a simple example:\n-->\n<p>서비스는 생성자로 다른 서비스를 의존성으로 주입받을 수 있습니다.\n의존성 객체가 있는 서비스를 간단하게 생성하려면 의존성 객체를 직접 생성한 후에 서비스 클래스에 <code>new</code> 키워드를 사용할 때 인자로 전달하면 됩니다.</p>\n<p><code>MasterService</code>의 경우를 봅시다:</p>\n<code-example path=\"testing/src/app/demo/demo.ts\" region=\"MasterService\" header=\"app/demo/demo.ts\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MasterService {\n  constructor(private valueService: ValueService) { }\n  getValue() { return this.valueService.getValue(); }\n}\n\n</code-example>\n<!--\n`MasterService` delegates its only method, `getValue`, to the injected `ValueService`.\n\nHere are several ways to test it.\n-->\n<p><code>MasterService</code>에는 <code>getValue</code> 메소드만 정의되어 있으며, <code>ValueService</code>를 의존성으로 주입받습니다.</p>\n<p>그러면 <code>MasterService</code>를 다음과 같이 다양하게 테스트할 수 있습니다.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"MasterService\" header=\"app/demo/demo.spec.ts\">\ndescribe('MasterService without Angular testing support', () => {\n  let masterService: MasterService;\n\n  it('#getValue should return real value from the real service', () => {\n    masterService = new MasterService(new ValueService());\n    expect(masterService.getValue()).toBe('real value');\n  });\n\n  it('#getValue should return faked value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> fakeService', () => {\n    masterService = new MasterService(new FakeValueService());\n    expect(masterService.getValue()).toBe('faked service value');\n  });\n\n  it('#getValue should return faked value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> fake object', () => {\n    const fake =  { getValue: () => 'fake value' };\n    masterService = new MasterService(fake as ValueService);\n    expect(masterService.getValue()).toBe('fake value');\n  });\n\n  it('#getValue should return stubbed value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> spy', () => {\n    // `getValue` 메소드가 정의된 스파이 객체를 정의합니다.\n    const valueServiceSpy =\n      jasmine.createSpyObj('ValueService', ['getValue']);\n\n    // `getValue` 스파이 메소드가 반환할 값을 정의합니다.\n    const stubValue = 'stub value';\n    valueServiceSpy.getValue.and.returnValue(stubValue);\n\n    masterService = new MasterService(valueServiceSpy);\n\n    expect(masterService.getValue())\n      .toBe(stubValue, 'service returned stub value');\n    expect(valueServiceSpy.getValue.calls.count())\n      .toBe(1, 'spy method was called once');\n    expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n      .toBe(stubValue);\n  });\n});\n\n</code-example>\n<!--\nThe first test creates a `ValueService` with `new` and passes it to the `MasterService` constructor.\n\nHowever, injecting the real service rarely works well as most dependent services are difficult to create and control.\n\nInstead you can mock the dependency, use a dummy value, or create a\n[spy](https://jasmine.github.io/2.0/introduction.html#section-Spies)\non the pertinent service method.\n-->\n<p>첫번째 테스트에서는 <code>new</code> 키워드를 사용해서 <code>ValueService</code>의 인스턴스를 직접 생성하고, 이 인스턴스를 <code>MasterService</code>의 생성자로 전달합니다.</p>\n<p>그런데 실제 서비스 클래스를 의존성으로 주입하면, 이 클래스가 실제로 어떤 동작을 할지 제어하기 힘들기 때문에  테스트가 제대로 동작하지 않을 가능성이 더 높아집니다.</p>\n<p>그렇다면 실제 서비스 대신 더미 객체나 <a href=\"https://jasmine.github.io/2.0/introduction.html#section-Spies\">스파이(spy)</a>를 활용하는 것이 더 간편합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nPrefer spies as they are usually the easiest way to mock services.\n-->\n<p>서비스를 모킹(mocking)하는 방법 중 간단한 방법은 스파이를 활용하는 것입니다.\n스파이를 적극적으로 활용하세요.</p>\n</div>\n<!--\nThese standard testing techniques are great for unit testing services in isolation.\n\nHowever, you almost always inject service into application classes using Angular\ndependency injection and you should have tests that reflect that usage pattern.\nAngular testing utilities make it easy to investigate how injected services behave.\n-->\n<p>이렇게 작성하면 테스트하려는 서비스만 따로 분리할 수 있기 때문에 테스트하기 편합니다.</p>\n<p>하지만 의존성 관계가 복잡하게 엮여 있거나 실제 사용하는 패턴으로 테스트를 실행해야 한다면 조금 다른 방법이 필요합니다.\n이런 상황에서 활용할 수 있는 Angular 테스트 기능에 대해 알아봅시다.</p>\n<!--\n#### Testing services with the _TestBed_\n-->\n<h4 id=\"testbed-로-서비스-테스트하기\"><em>TestBed</em> 로 서비스 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testbed-로-서비스-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYour app relies on Angular [dependency injection (DI)](guide/dependency-injection)\nto create services.\nWhen a service has a dependent service, DI finds or creates that dependent service.\nAnd if that dependent service has its own dependencies, DI finds-or-creates them as well.\n\nAs service _consumer_, you don't worry about any of this.\nYou don't worry about the order of constructor arguments or how they're created.\n\nAs a service _tester_, you must at least think about the first level of service dependencies\nbut you _can_ let Angular DI do the service creation and deal with constructor argument order\nwhen you use the `TestBed` testing utility to provide and create services.\n-->\n<p>서비스의 인스턴스를 생성할 때는 Angular가 제공하는 <a href=\"guide/dependency-injection\">의존성 주입(Dependency Injection, DI)</a> 시스템을 활용할 수도 있습니다.\n서비스에 의존성으로 주입될 서비스가 있다면, 이 의존성 객체의 인스턴스를 찾는 역할을 DI에 맡기는 방식입니다.\n의존성으로 주입되는 서비스에 또다른 의존성이 필요하다면 이 의존성 객체를 찾는 것도 DI가 처리합니다.</p>\n<p>개발자는 테스트할 서비스만 신경쓰면 됩니다.\n의존성 객체를 어떻게 생성하는지, 생성자에 전달하는 순서는 어떻게 되는지 신경쓸 필요가 없습니다.</p>\n<p>서비스를 테스트하는 입장에서도 테스트할 서비스 하나만 생각하면 됩니다.\n<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>를 활용하면 해당 서비스에 연결된 의존성 관계는 모두 Angular DI가 처리합니다.</p>\n<a id=\"testbed\"></a>\n<h4 id=\"angular-testbed\">Angular <em>TestBed</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#angular-testbed\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `TestBed` is the most important of the Angular testing utilities.\nThe `TestBed` creates a dynamically-constructed Angular _test_ module that emulates\nan Angular [@NgModule](guide/ngmodules).\n\nThe `TestBed.configureTestingModule()` method takes a metadata object that can have most of the properties of an [@NgModule](guide/ngmodules).\n\nTo test a service, you set the `providers` metadata property with an\narray of the services that you'll test or mock.\n-->\n<p><code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>는 Angular 테스트 유틸리티 중 가장 중요한 객체입니다.\n<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>는 Angular에서 <a href=\"guide/ngmodules\">@NgModule</a> 역할을 하는 <em>테스트</em> 모듈을 동적으로 생성합니다.</p>\n<p><code>TestBed.configureTestingModule()</code> 메소드는 메타데이터 객체를 인자로 받는데, 메타데이터는 <a href=\"guide/ngmodules\">@NgModule</a>에 사용하는 프로퍼티를 거의 대부분 지원합니다.</p>\n<p>그래서 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>에 <code>providers</code> 메타데이터 프로퍼티를 지정했던 것처럼 <code>TestBed.configureTestingModule()</code> 메소드에도 <code>providers</code> 프로퍼티를 지정할 수 있습니다.</p>\n<!--\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-before-each\" header=\"app/demo/demo.testbed.spec.ts (provide ValueService in beforeEach\">\nlet service: ValueService;\n\nbeforeEach(() =&gt; {\n  TestBed.configureTestingModule({ providers: [ValueService] });\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-before-each\" header=\"app/demo/demo.testbed.spec.ts (beforeEach()에서 ValueService 준비하기)\">\nlet service: ValueService;\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({ providers: [ValueService] });\n});\n\n</code-example>\n<!--\nThen inject it inside a test by calling `TestBed.get()` with the service class as the argument.\n-->\n<p>그리고 <code>TestBed.get()</code> 함수를 실행하면서 인자로 서비스 클래스를 전달하면 서비스 클래스의 인스턴스를 참조할 수 있습니다.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-inject-it\">\nit('should use ValueService', () => {\n  service = TestBed.get(ValueService);\n  expect(service.getValue()).toBe('real value');\n});\n\n</code-example>\n<!--\nOr inside the `beforeEach()` if you prefer to inject the service as part of your setup.\n-->\n<p>아니면 <code>beforeEach()</code> 안쪽에서 서비스 객체의 인스턴스를 변수에 할당해 둘 수도 있습니다.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-inject-before-each\">\nbeforeEach(() => {\n  TestBed.configureTestingModule({ providers: [ValueService] });\n  service = TestBed.get(ValueService);\n});\n\n</code-example>\n<!--\nWhen testing a service with a dependency, provide the mock in the `providers` array.\n\nIn the following example, the mock is a spy object.\n-->\n<p>서비스에 의존성으로 주입되는 객체가 있다면, 이 객체의 목(mock) 역할을 하는 객체도 <code>providers</code> 배열에 지정할 수 있습니다.</p>\n<p>아래 예제에서는 Jasmine 스파이 객체가 목으로 사용되었습니다.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"master-service-before-each\" linenums=\"false\">\nlet masterService: MasterService;\nlet valueServiceSpy: jasmine.SpyObj&#x3C;ValueService>;\n\nbeforeEach(() => {\n  const spy = jasmine.createSpyObj('ValueService', ['getValue']);\n\n  TestBed.configureTestingModule({\n    // 테스트할 서비스와 의존성으로 사용될 목 객체를 등록합니다.\n    providers: [\n      MasterService,\n      { provide: ValueService, useValue: spy }\n    ]\n  });\n  // 서비스의 인스턴스와 목 객체의 인스턴스를 가져옵니다.\n  masterService = TestBed.get(MasterService);\n  valueServiceSpy = TestBed.get(ValueService);\n});\n\n</code-example>\n<!--\nThe test consumes that spy in the same way it did earlier.\n-->\n<p>이 목 객체는 이전에 살펴봤던 테스트 코드에서 다음과 같이 사용되었습니다.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"master-service-it\">\nit('#getValue should return stubbed value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> spy', () => {\n  const stubValue = 'stub value';\n  valueServiceSpy.getValue.and.returnValue(stubValue);\n\n  expect(masterService.getValue())\n    .toBe(stubValue, 'service returned stub value');\n  expect(valueServiceSpy.getValue.calls.count())\n    .toBe(1, 'spy method was called once');\n  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n    .toBe(stubValue);\n});\n\n</code-example>\n<a id=\"no-before-each\"></a>\n<!--\n#### Testing without _beforeEach()_\n-->\n<h4 id=\"beforeeach-없이-테스트하기\"><em>beforeEach()</em> 없이 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#beforeeach-없이-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nMost test suites in this guide call `beforeEach()` to set the preconditions for each `it()` test\nand rely on the `TestBed` to create classes and inject services.\n\nThere's another school of testing that never calls `beforeEach()` and prefers to create classes explicitly rather than use the `TestBed`.\n\nHere's how you might rewrite one of the `MasterService` tests in that style.\n\nBegin by putting re-usable, preparatory code in a _setup_ function instead of `beforeEach()`.\n-->\n<p>이 문서에서 다루는 테스트 스윗(test suites) 대부분은 테스트가 실제로 수행되는 <code>it()</code> 블럭에 필요한 준비를 하기 위해 <code>beforeEach()</code> 함수를 실행합니다. <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>를 사용해서 의존성 관계를 연결하고, 서비스 인스턴스를 생성해서 변수에 할당하는 것이 이런 과정에 해당됩니다.</p>\n<p>그런데 <code>beforeEach()</code>를 한번도 사용하지 않으면서 테스트 준비를 모두 끝낼 수 있는 방법도 있습니다.</p>\n<p>이번에는 새로운 방식으로 <code>MasterService</code>를 테스트 코드를 작성해 봅시다.</p>\n<p>먼저, <code>beforeEach()</code> 함수에서 하던 작업을 대신하는 <em>setup</em> 함수를 정의합니다.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"no-before-each-setup\" header=\"app/demo/demo.spec.ts (setup)\" linenums=\"false\">\nfunction setup() {\n  const valueServiceSpy =\n    jasmine.createSpyObj('ValueService', ['getValue']);\n  const stubValue = 'stub value';\n  const masterService = new MasterService(valueServiceSpy);\n\n  valueServiceSpy.getValue.and.returnValue(stubValue);\n  return { masterService, stubValue, valueServiceSpy };\n}\n\n</code-example>\n<!--\nThe `setup()` function returns an object literal\nwith the variables, such as `masterService`, that a test might reference.\nYou don't define _semi-global_ variables (e.g., `let masterService: MasterService`)\nin the body of the `describe()`.\n\nThen each test invokes `setup()` in its first line, before continuing\nwith steps that manipulate the test subject and assert expectations.\n-->\n<p><code>setup()</code> 함수는 객체 리터럴을 반환하는데, 이 객체에는 <code>masterService</code>와 같이 테스트에서 사용할 프로퍼티가 들어 있습니다.\n그래서 <code>let masterService: MasterService</code>와 같이 <em>거의 전역으로 사용되는</em> 변수를 따로 선언할 필요가 없습니다.</p>\n<p>이제는 테스트 스펙 제일 첫 줄에서 <code>setup()</code> 함수를 실행한 후에 이 함수가 반환하는 객체를 사용해서 테스트 로직을 작성하면 됩니다.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"no-before-each-test\" linenums=\"false\">\nit('#getValue should return stubbed value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> spy', () => {\n  const { masterService, stubValue, valueServiceSpy } = setup();\n  expect(masterService.getValue())\n    .toBe(stubValue, 'service returned stub value');\n  expect(valueServiceSpy.getValue.calls.count())\n    .toBe(1, 'spy method was called once');\n  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n    .toBe(stubValue);\n});\n\n</code-example>\n<!--\nNotice how the test uses\n[_destructuring assignment_](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\nto extract the setup variables that it needs.\n-->\n<p>객체 리터럴에서 필요한 객체를 추출해서 각 변수에 할당하는 문법은 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"><em>구조 분해 할당(destructuring assignment)</em></a> 문법을 활용한 것입니다.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"no-before-each-setup-call\">\nconst { masterService, stubValue, valueServiceSpy } = setup();\n\n</code-example>\n<!--\nMany developers feel this approach is cleaner and more explicit than the\ntraditional `beforeEach()` style.\n\nAlthough this testing guide follows the tradition style and\nthe default [CLI schematics](https://github.com/angular/angular-cli)\ngenerate test files with `beforeEach()` and `TestBed`,\nfeel free to adopt _this alternative approach_ in your own projects.\n-->\n<p>전통적인 <code>beforeEach()</code> 스타일보다는 이 방식이 더 깔끔하고 좀 더 명확할 수 있습니다.</p>\n<p>이 문서에서는 기본 <a href=\"https://github.com/angular/angular-cli\">Angular CLI 스키매틱(schematics)</a>에 정의된 대로 <code>beforeEach()</code>와 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>를 활용하는 방식으로 테스트 스펙을 작성하지만, 프로젝트에 <em>이 새로운 방식</em> 을 적용해보는 것도 좋습니다.</p>\n<!--\n#### Testing HTTP services\n-->\n<h4 id=\"http-서비스-테스트하기\">HTTP 서비스 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#http-서비스-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nData services that make HTTP calls to remote servers typically inject and delegate\nto the Angular [`HttpClient`](guide/http) service for XHR calls.\n\nYou can test a data service with an injected `HttpClient` spy as you would\ntest any service with a dependency.\n-->\n<p>HTTP 요청을 보내는 데이터 서비스는 리모트 서버로 XHR 요청을 보내기 위해 Angular <a href=\"guide/http\"><code>HttpClient</code></a> 서비스를 의존성으로 주입받습니다.</p>\n<p>이런 데이터 서비스는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 스파이를 활용해서 테스트할 수 있습니다.</p>\n<!--\n<code-example path=\"testing/src/app/model/hero.service.spec.ts\" region=\"test-with-spies\" header=\"app/model/hero.service.spec.ts (tests with spies)\">\nlet httpClientSpy: { get: jasmine.Spy };\nlet heroService: HeroService;\n\nbeforeEach(() =&gt; {\n  // TODO: 다른 스파이 메소드 추가하기\n  httpClientSpy = jasmine.createSpyObj(&#39;HttpClient&#39;, [&#39;get&#39;]);\n  heroService = new HeroService(&lt;any&gt; httpClientSpy);\n});\n\nit(&#39;should return expected heroes (HttpClient called once)&#39;, () =&gt; {\n  const expectedHeroes: Hero[] =\n    [{ id: 1, name: &#39;A&#39; }, { id: 2, name: &#39;B&#39; }];\n\n  httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n\n  heroService.getHeroes().subscribe(\n    heroes =&gt; expect(heroes).toEqual(expectedHeroes, &#39;expected heroes&#39;),\n    fail\n  );\n  expect(httpClientSpy.get.calls.count()).toBe(1, &#39;one call&#39;);\n});\n\nit(&#39;should return an error when the server returns a 404&#39;, () =&gt; {\n  const errorResponse = new HttpErrorResponse({\n    error: &#39;test 404 error&#39;,\n    status: 404, statusText: &#39;Not Found&#39;\n  });\n\n  httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n\n  heroService.getHeroes().subscribe(\n    heroes =&gt; fail(&#39;expected an error, not heroes&#39;),\n    error  =&gt; expect(error.message).toContain(&#39;test 404 error&#39;)\n  );\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/model/hero.service.spec.ts\" region=\"test-with-spies\" header=\"app/model/hero.service.spec.ts (HttpClient 스파이로 테스트하기)\">\nlet httpClientSpy: { get: jasmine.Spy };\nlet heroService: HeroService;\n\nbeforeEach(() => {\n  // TODO: 다른 스파이 메소드 추가하기\n  httpClientSpy = jasmine.createSpyObj('<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>', ['get']);\n  heroService = new HeroService(&#x3C;any> httpClientSpy);\n});\n\nit('should return expected heroes (<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> called once)', () => {\n  const expectedHeroes: Hero[] =\n    [{ id: 1, name: 'A' }, { id: 2, name: 'B' }];\n\n  httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n\n  heroService.getHeroes().subscribe(\n    heroes => expect(heroes).toEqual(expectedHeroes, 'expected heroes'),\n    fail\n  );\n  expect(httpClientSpy.get.calls.count()).toBe(1, 'one call');\n});\n\nit('should return an error when the server returns <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> 404', () => {\n  const errorResponse = new <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>({\n    error: 'test 404 error',\n    status: 404, statusText: 'Not Found'\n  });\n\n  httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n\n  heroService.getHeroes().subscribe(\n    heroes => fail('expected an error, not heroes'),\n    error  => expect(error.message).toContain('test 404 error')\n  );\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<!--\nThe `HeroService` methods return `Observables`. You must\n_subscribe_ to an observable to (a) cause it to execute and (b)\nassert that the method succeeds or fails.\n\nThe `subscribe()` method takes a success (`next`) and fail (`error`) callback.\nMake sure you provide _both_ callbacks so that you capture errors.\nNeglecting to do so produces an asynchronous uncaught observable error that\nthe test runner will likely attribute to a completely different test.\n-->\n<p><code>HeroService</code>에 정의한 메소드는 모두 <code>Observable</code> 타입을 반환합니다.\n그러면 이 옵저버블은 (a) 실행하기 위해서, 그리고 (b) 메소드가 정상적으로 실행되었는지, 실패했는지 확인하기 위해 반드시 <em>구독(subscribe)</em> 해야 합니다.</p>\n<p><code>subscribe()</code> 메소드는 성공했을 때 실행할 콜백(<code>next</code>)과 실패했을 때 실행할 콜백(<code>error</code>)을 인자로 받습니다.\n그래서 옵저버블에서 발생한 에러를 확인하려면 두 인자를 모두 지정해야 합니다.\n옵저버블은 비동기로 실행되기 때문에 이 옵저버블에서 발생하는 에러를 확인하지 않으면 전혀 다른 테스트 결과를 낼 수도 있습니다.</p>\n</div>\n<h4 id=\"httpclienttestingmodule\"><em>HttpClientTestingModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#httpclienttestingmodule\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nExtended interactions between a data service and the `HttpClient` can be complex\nand difficult to mock with spies.\n\nThe `HttpClientTestingModule` can make these testing scenarios more manageable.\n\nWhile the _code sample_ accompanying this guide demonstrates `HttpClientTestingModule`,\nthis page defers to the [Http guide](guide/http#testing-http-requests),\nwhich covers testing with the `HttpClientTestingModule` in detail.\n-->\n<p>데이터 서비스와 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>는 복잡하게 연결될 수 있기 때문에 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 역할을 대신하는 목 스파이를 새로 만드는 것은 쉬운 작업이 아닙니다.</p>\n<p>하지만 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>을 활용하면 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 실행되는 과정을 좀 더 편하게 제어할 수 있기 때문에 테스트 시나리오를 작성하기도 편합니다.</p>\n<p>다만, 이 문서에서 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>의 내용을 모두 다루기 어렵기 때문에, 이 내용을 자세하게 다루는 <a href=\"guide/http#http-%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\">Http guide</a> 문서를 참고하세요.</p>\n<div class=\"alert is-helpful\">\n<!--\nThis guide's sample code also demonstrates testing of the _legacy_ `HttpModule`\nin `app/model/http-hero.service.spec.ts`.\n-->\n<p><em>이전 버전에서 제공하던</em> <code><a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a></code>을 사용하는 예제 코드는 <code>app/<a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a>/http-hero.service.spec.ts</code>에서 확인할 수 있습니다.</p>\n</div>\n<!--\n## Component Test Basics\n-->\n<h2 id=\"컴포넌트-테스트\">컴포넌트 테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#컴포넌트-테스트\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA component, unlike all other parts of an Angular application,\ncombines an HTML template and a TypeScript class.\nThe component truly is the template and the class _working together_.\nand to adequately test a component, you should test that they work together\nas intended.\n\nSuch tests require creating the component's host element in the browser DOM,\nas Angular does, and investigating the component class's interaction with\nthe DOM as described by its template.\n\nThe Angular `TestBed` facilitates this kind of testing as you'll see in the sections below.\nBut in many cases, _testing the component class alone_, without DOM involvement,\ncan validate much of the component's behavior in an easier, more obvious way.\n-->\n<p>다른 Angular 구성요소와는 다르게, 컴포넌트는 HTML 템플릿과 TypeScript 클래스가 조합되어 정의됩니다.\n그리고 컴포넌트가 실행될 때도 템플릿과 클래스가 <em>상호작용 하면서</em> 동작합니다.\n그래서 컴포넌트를 테스트하려면 템플릿과 TypeScript 클래스 코드가 서로 연동된다는 것을 염두에 두어야 합니다.</p>\n<p>컴포넌트가 위치할 호스트 엘리먼트는 테스트 환경의 DOM 트리에도 생성되어야 합니다.\n그래야 컴포넌트 클래스는 컴포넌트 템플릿이 렌더링되는 DOM과 상호작용할 수 있습니다.</p>\n<p>이 작업들은 모두 Angular <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>가 모두 처리하기 때문에 컴포넌트를 테스트하는 것이 그리 어려운 것만은 아닙니다.\n하지만 일반적으로는 DOM을 신경쓰지 않고 <em>컴포넌트 클래스만 테스트하는 경우</em> 가 많습니다.\n컴포넌트는 동작 위주로 테스트하는 것이 더 간단하고, 테스트 스펙을 정의하기도 명확합니다.</p>\n<!--\n### Component class testing\n-->\n<h3 id=\"컴포넌트-클래스-테스트\">컴포넌트 클래스 테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#컴포넌트-클래스-테스트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTest a component class on its own as you would test a service class.\n\nConsider this `LightswitchComponent` which toggles a light on and off\n(represented by an on-screen message) when the user clicks the button.\n-->\n<p>컴포넌트 클래스를 테스트하는 것은 서비스 클래스를 테스트하는 것과 비슷합니다.</p>\n<p>사용자가 버튼을 누르면 조명을 켜고 끄는 <code>LightswitchComponent</code>가 있다고 합시다. 조명이 켜진 상태는 화면에 텍스트로 표시됩니다.</p>\n<code-example path=\"testing/src/app/demo/demo.ts\" region=\"LightswitchComp\" header=\"app/demo/demo.ts (LightswitchComp)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'lightswitch-comp',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;button (click)=\"clicked()\">Click me!&#x3C;/button>\n    &#x3C;span>{{<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>}}&#x3C;/span>`\n})\nexport class LightswitchComponent {\n  isOn = false;\n  clicked() { this.isOn = !this.isOn; }\n  get <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>() { return `The light is ${this.isOn ? 'On' : 'Off'}`; }\n}\n\n</code-example>\n<!--\nYou might decide only to test that the `clicked()` method\ntoggles the light's _on/off_ state and sets the message appropriately.\n\nThis component class has no dependencies.\nTo test a service with no dependencies, you create it with `new`, poke at its API,\nand assert expectations on its public state.\nDo the same with the component class.\n-->\n<p>이 컴포넌트를 테스트한다면 조명을 <em>켜거나/끄는</em> 동작을 하는 <code>clicked()</code> 메소드를 테스트하는 것이 가장 합리적입니다.\n조명이 켜진 상태는 화면에 표시된 메시지로 체크하면 됩니다.</p>\n<p>이 클래스에는 의존성으로 주입되는 객체가 없습니다.\n그러면 의존성이 없는 서비스르 테스트했던 것과 마찬가지로, <code>new</code> 키워드로 컴포넌트 인스턴스를 생성하고, API를 직접 실행한 후에, public 프로퍼티를 검사하면 됩니다.</p>\n<!--\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"Lightswitch\" header=\"app/demo/demo.spec.ts (Lightswitch tests)\" linenums=\"false\">\ndescribe(&#39;LightswitchComp&#39;, () =&gt; {\n  it(&#39;#clicked() should toggle #isOn&#39;, () =&gt; {\n    const comp = new LightswitchComponent();\n    expect(comp.isOn).toBe(false, &#39;off at first&#39;);\n    comp.clicked();\n    expect(comp.isOn).toBe(true, &#39;on after click&#39;);\n    comp.clicked();\n    expect(comp.isOn).toBe(false, &#39;off after second click&#39;);\n  });\n\n  it(&#39;#clicked() should set #message to &quot;is on&quot;&#39;, () =&gt; {\n    const comp = new LightswitchComponent();\n    expect(comp.message).toMatch(/is off/i, &#39;off at first&#39;);\n    comp.clicked();\n    expect(comp.message).toMatch(/is on/i, &#39;on after clicked&#39;);\n  });\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"Lightswitch\" header=\"app/demo/demo.spec.ts (Lightswitch 테스트하기)\" linenums=\"false\">\ndescribe('LightswitchComp', () => {\n  it('#clicked() should toggle #isOn', () => {\n    const comp = new LightswitchComponent();\n    expect(comp.isOn).toBe(false, 'off at first');\n    comp.clicked();\n    expect(comp.isOn).toBe(true, 'on after click');\n    comp.clicked();\n    expect(comp.isOn).toBe(false, 'off after second click');\n  });\n\n  it('#clicked() should set #<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> to \"is on\"', () => {\n    const comp = new LightswitchComponent();\n    expect(comp.message).toMatch(/is off/i, 'off at first');\n    comp.clicked();\n    expect(comp.message).toMatch(/is on/i, 'on after clicked');\n  });\n});\n\n</code-example>\n<!--\nHere is the `DashboardHeroComponent` from the _Tour of Heroes_ tutorial.\n-->\n<p><em>히어로들의 여행</em> 튜토리얼에서 다룬 <code>DashboardHeroComponent</code>의 클래스 코드는 이렇게 정의되어 있습니다.</p>\n<!--\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.ts\" region=\"class\" header=\"app/dashboard/dashboard-hero.component.ts (component)\" linenums=\"false\">\nexport class DashboardHeroComponent {\n  @Input() hero: Hero;\n  @Output() selected = new EventEmitter&lt;Hero&gt;();\n  click() { this.selected.emit(this.hero); }\n}\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.ts\" region=\"class\" header=\"app/dashboard/dashboard-hero.component.ts (컴포넌트 코드)\" linenums=\"false\">\nexport class DashboardHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() selected = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Hero>();\n  click() { this.selected.emit(this.hero); }\n}\n\n</code-example>\n<!--\nIt appears within the template of a parent component,\nwhich binds a _hero_ to the `@Input` property and\nlistens for an event raised through the _selected_ `@Output` property.\n\nYou can test that the class code works without creating the `DashboardHeroComponent`\nor its parent component.\n-->\n<p>이 컴포넌트에는 부모 컴포넌트의 템플릿에서 받는 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> <em>hero</em> 프로퍼티가 존재하고, 부모 컴포넌트로 이벤트를 보내는 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> <em>selected</em> 프로퍼티도 존재합니다.</p>\n<p>이 컴포넌트는 부모 컴포넌트를 생성하지 않아도 직접 테스트할 수 있습니다.</p>\n<!--\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"class-only\" header=\"app/dashboard/dashboard-hero.component.spec.ts (class tests)\" linenums=\"false\">\nit(&#39;raises the selected event when clicked&#39;, () =&gt; {\n  const comp = new DashboardHeroComponent();\n  const hero: Hero = { id: 42, name: &#39;Test&#39; };\n  comp.hero = hero;\n\n  comp.selected.subscribe(selectedHero =&gt; expect(selectedHero).toBe(hero));\n  comp.click();\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"class-only\" header=\"app/dashboard/dashboard-hero.component.spec.ts (class 테스트하기)\" linenums=\"false\">\nit('raises the selected event when clicked', () => {\n  const comp = new DashboardHeroComponent();\n  const hero: Hero = { id: 42, name: 'Test' };\n  comp.hero = hero;\n\n  comp.selected.subscribe(selectedHero => expect(selectedHero).toBe(hero));\n  comp.click();\n});\n\n</code-example>\n<!--\nWhen a component has dependencies, you may wish to use the `TestBed` to both\ncreate the component and its dependencies.\n\nThe following `WelcomeComponent` depends on the `UserService` to know the name of the user to greet.\n-->\n<p>그리고 컴포넌트에 주입되어야 하는 의존성이 있다면, <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>를 사용해서 이 컴포넌트의 인스턴스를 생성할 수 있습니다.</p>\n<p>아래 예제로 다루는 <code>WelcomeComponent</code>는 사용자의 이름을 참조하기 위해 <code>UserService</code>가 의존성으로 주입되어야 합니다.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.ts\" region=\"class\" header=\"app/welcome/welcome.component.ts\" linenums=\"false\">\nexport class WelcomeComponent  implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  welcome: string;\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.welcome = this.userService.isLoggedIn ?\n      'Welcome, ' + this.userService.user.name : 'Please <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in.';\n  }\n}\n\n</code-example>\n<!--\nYou might start by creating a mock of the `UserService` that meets the minimum needs of this component.\n-->\n<p>이 경우에는 먼저 <code>UserService</code> 코드 중 컴포넌트에 필요한 메소드만 최소한으로 구현한 목 클래스를 만드는 것부터 시작합니다.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"mock-user-service\" header=\"app/welcome/welcome.component.spec.ts (MockUserService)\" linenums=\"false\">\nclass MockUserService {\n  isLoggedIn = true;\n  user = { name: 'Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>'};\n};\n\n</code-example>\n<!--\nThen provide and inject _both the_ **component** _and the service_ in the `TestBed` configuration.\n-->\n<p>그리고 이렇게 정의한 컴포넌트를 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 환경에 등록합니다. 이 때 <em><strong>컴포넌트</strong>도</em> 함께 등록합니다.</p>\n<!--\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"class-only-before-each\" header=\"app/welcome/welcome.component.spec.ts (class-only setup)\" linenums=\"false\">\nbeforeEach(() =&gt; {\n  TestBed.configureTestingModule({\n    // 테스트할 컴포넌트와 의존성으로 주입될 서비스를 프로바이더에 등록합니다.\n    providers: [\n      WelcomeComponent,\n      { provide: UserService, useClass: MockUserService }\n    ]\n  });\n  // TestBed를 사용해서 컴포넌트 인스턴스와 서비스 인스턴스를 참조합니다.\n  comp = TestBed.get(WelcomeComponent);\n  userService = TestBed.get(UserService);\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"class-only-before-each\" header=\"app/welcome/welcome.component.spec.ts (TestBed 설정)\" linenums=\"false\">\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    // 테스트할 컴포넌트와 의존성으로 주입될 서비스를 프로바이더에 등록합니다.\n    providers: [\n      WelcomeComponent,\n      { provide: UserService, useClass: MockUserService }\n    ]\n  });\n  // <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>를 사용해서 컴포넌트 인스턴스와 서비스 인스턴스를 참조합니다.\n  comp = TestBed.get(WelcomeComponent);\n  userService = TestBed.get(UserService);\n});\n\n</code-example>\n<!--\nThen exercise the component class, remembering to call the [lifecycle hook methods](guide/lifecycle-hooks) as Angular does when running the app.\n-->\n<p>그러면 테스트 스펙을 정의할 때 Angular 앱이 실행되는 것처럼 <a href=\"guide/lifecycle-hooks\">라이프싸이클 후킹 함수</a>를 활용할 수 있습니다.</p>\n<!--\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"class-only-tests\" header=\"app/welcome/welcome.component.spec.ts (class-only tests)\" linenums=\"false\">\nit(&#39;should not have welcome message after construction&#39;, () =&gt; {\n  expect(comp.welcome).toBeUndefined();\n});\n\nit(&#39;should welcome logged in user after Angular calls ngOnInit&#39;, () =&gt; {\n  comp.ngOnInit();\n  expect(comp.welcome).toContain(userService.user.name);\n});\n\nit(&#39;should ask user to log in if not logged in after ngOnInit&#39;, () =&gt; {\n  userService.isLoggedIn = false;\n  comp.ngOnInit();\n  expect(comp.welcome).not.toContain(userService.user.name);\n  expect(comp.welcome).toContain(&#39;log in&#39;);\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"class-only-tests\" header=\"app/welcome/welcome.component.spec.ts (컴포넌트 클래스 테스트하기)\" linenums=\"false\">\nit('should not have welcome <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> after construction', () => {\n  expect(comp.welcome).toBeUndefined();\n});\n\nit('should welcome logged in user after Angular calls ngOnInit', () => {\n  comp.ngOnInit();\n  expect(comp.welcome).toContain(userService.user.name);\n});\n\nit('should ask user to <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in if not logged in after ngOnInit', () => {\n  userService.isLoggedIn = false;\n  comp.ngOnInit();\n  expect(comp.welcome).not.toContain(userService.user.name);\n  expect(comp.welcome).toContain('<a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in');\n});\n\n</code-example>\n<!--\n### Component DOM testing\n-->\n<h3 id=\"컴포넌트-dom-테스트\">컴포넌트 DOM 테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#컴포넌트-dom-테스트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTesting the component _class_ is as easy as testing a service.\n\nBut a component is more than just its class.\nA component interacts with the DOM and with other components.\nThe _class-only_ tests can tell you about class behavior.\nThey cannot tell you if the component is going to render properly,\nrespond to user input and gestures, or integrate with its parent and child components.\n\nNone of the _class-only_ tests above can answer key questions about how the\ncomponents actually behave on screen.\n\n- Is `Lightswitch.clicked()` bound to anything such that the user can invoke it?\n- Is the `Lightswitch.message` displayed?\n- Can the user actually select the hero displayed by `DashboardHeroComponent`?\n- Is the hero name displayed as expected (i.e, in uppercase)?\n- Is the welcome message displayed by the template of `WelcomeComponent`?\n\nThese may not be troubling questions for the simple components illustrated above.\nBut many components have complex interactions with the DOM elements\ndescribed in their templates, causing HTML to appear and disappear as\nthe component state changes.\n\nTo answer these kinds of questions, you have to create the DOM elements associated\nwith the components, you must examine the DOM to confirm that component state\ndisplays properly at the appropriate times, and you must simulate user interaction\nwith the screen to determine whether those interactions cause the component to\nbehave as expected.\n\nTo write these kinds of test, you'll use additional features of the `TestBed`\nas well as other testing helpers.\n-->\n<p>컴포넌트 <em>클래스</em> 를 테스트하는 것은 서비스를 테스트하는 것만큼이나 쉽습니다.</p>\n<p>하지만 컴포넌트는 클래스로만 구성되는 것이 아닙니다.\n컴포넌트는 DOM에 존재하며 DOM에서 다른 컴포넌트와 상호작용할 수도 있습니다.\n그래서 <em>컴포넌트 클래스만</em> 테스트하면 이 클래스의 행동은 테스트할 수 있지만, 이 컴포넌트가 제대로 렌더링 되었는지, 사용자의 입력이나 제스처에 잘 반응하는지, 부모 컴포넌트나 자식 컴포넌트와 상호작용을 제대로 하는지는 확인할 수 없습니다.</p>\n<p>결국 컴포넌트의 클래스만 테스트하면 다음 물음에 대해 답할 수 없습니다.</p>\n<ul>\n<li>사용자가 컴포넌트에 있는 버튼을 클릭하면 <code>Lightswitch.clicked()</code> 함수는 제대로 실행될까?</li>\n<li><code>Lightswitch.message</code>는 화면에 제대로 표시될까?</li>\n<li>사용자가 <code>DashboardHeroComponent</code>에서 선택한 히어로 정보가 이 컴포넌트에도 표시될까?</li>\n<li>히어로의 이름은 정해둔 방식으로 표시될까?</li>\n<li><code>WelcomeComponent</code> 템플릿에는 환영 메시지가 제대로 표시될까?</li>\n</ul>\n<p>컴포넌트가 간단하다면 이런 내용을 신경쓰지 않아도 됩니다.\n하지만 일반적으로 컴포넌트 템플릿은 클래스 코드와 복잡한 과정으로 상호작용하기도 하고, 컴포넌트의 상태에 따라 일부 HTML 조각을 표시하지 않는 경우도 많습니다.</p>\n<p>그래서 컴포넌트를 제대로 테스트하려면 해당 컴포넌트와 관련된 DOM 엘리먼트를 구성해야 하며, 지정된 로직에 따라 DOM도 제대로 연동되는지 확인해야 합니다. 그리고 사용자가 화면에서 발생시키는 이벤트에 컴포넌트가 제대로 반응하는지도 확인해야 합니다.</p>\n<p>이 요구사항들은 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>가 제공하는 기능으로 모두 처리할 수 있습니다.</p>\n<!--\n#### CLI-generated tests\n-->\n<h4 id=\"angular-cli가-생성한-테스트-코드\">Angular CLI가 생성한 테스트 코드<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#angular-cli가-생성한-테스트-코드\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe CLI creates an initial test file for you by default when you ask it to\ngenerate a new component.\n\nFor example, the following CLI command generates a `BannerComponent` in the `app/banner` folder (with inline template and styles):\n-->\n<p>Angular CLI를 사용해서 컴포넌트를 생성하면 이 컴포넌트를 테스트하는 파일이 함께 생성됩니다.</p>\n<p>예를 들어 다음 명령을 실행하면 <code>app/banner</code> 폴더에 <code>BannerComponent</code> 컴포넌트 파일이 생성되는데, 옵션을 지정했기 때문에 템플릿과 스타일은 인라인으로 구성됩니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component banner --inline-template --inline-style --module app\n</code-example>\n<!--\nIt also generates an initial test file for the component, `banner-external.component.spec.ts`, that looks like this:\n-->\n<p>Angular CLI는 이 컴포넌트를 생성하면서 다음 내용으로 <code>banner-external.component.spec.ts</code> 파일을 함께 생성합니다:</p>\n<!--\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v1\" header=\"app/banner/banner-external.component.spec.ts (initial)\" linenums=\"false\">\nimport { async, ComponentFixture, TestBed } from &#39;@angular/core/testing&#39;;\nimport { BannerComponent } from &#39;./banner.component&#39;;\n\ndescribe(&#39;BannerComponent&#39;, () =&gt; {\n  let component: BannerComponent;\n  let fixture: ComponentFixture&lt;BannerComponent&gt;;\n\n  beforeEach(async(() =&gt; {\n    TestBed.configureTestingModule({\n      declarations: [ BannerComponent ]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() =&gt; {\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it(&#39;should create&#39;, () =&gt; {\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v1\" header=\"app/banner/banner-external.component.spec.ts (기본 코드)\" linenums=\"false\">\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { BannerComponent } from './banner.component';\n\ndescribe('BannerComponent', () => {\n  let component: BannerComponent;\n  let fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n<!--\n#### Reduce the setup\n-->\n<h4 id=\"간단하게-줄이기\">간단하게 줄이기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#간단하게-줄이기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nOnly the last three lines of this file actually test the component\nand all they do is assert that Angular can create the component.\n\nThe rest of the file is boilerplate setup code anticipating more advanced tests that _might_ become necessary if the component evolves into something substantial.\n\nYou'll learn about these advanced test features below.\nFor now, you can radically reduce this test file to a more manageable size:\n-->\n<p>그런데 컴포넌트가 제대로 생성되는지 확인하려면 이 테스트 코드 중에서 마지막 3줄만 필요합니다.</p>\n<p>그밖의 코드는 이후에 이 컴포넌트에 추가되는 기능을 테스트하기 위해 미리 준비해 둔 코드들입니다.</p>\n<p>컴포넌트를 테스트할 때 필요한 내용은 아래에서 자세하게 살펴볼 것입니다.\n지금은 지금 단계에서 꼭 필요한 내용만 남도록 간단하게 줄여봅시다:</p>\n<!--\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v2\" header=\"app/banner/banner-initial.component.spec.ts (minimal)\" linenums=\"false\">\ndescribe(&#39;BannerComponent (minimal)&#39;, () =&gt; {\n  it(&#39;should create&#39;, () =&gt; {\n    TestBed.configureTestingModule({\n      declarations: [ BannerComponent ]\n    });\n    const fixture = TestBed.createComponent(BannerComponent);\n    const component = fixture.componentInstance;\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v2\" header=\"app/banner/banner-initial.component.spec.ts (최소 코드)\" linenums=\"false\">\ndescribe('BannerComponent (minimal)', () => {\n  it('should create', () => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n    });\n    const fixture = TestBed.createComponent(BannerComponent);\n    const component = fixture.componentInstance;\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n<!--\nIn this example, the metadata object passed to `TestBed.configureTestingModule`\nsimply declares `BannerComponent`, the component to test.\n-->\n<p>이 예제에서 <code>TestBed.configureTestingModule</code>로 전달하는 메타데이터 객체에는 단순하게 <code>BannerComponent</code>를 선언하는 내용만 담겨 있습니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"configureTestingModule\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\nThere's no need to declare or import anything else.\nThe default test module is pre-configured with\nsomething like the `BrowserModule` from `@angular/platform-browser`.\n\nLater you'll call `TestBed.configureTestingModule()` with\nimports, providers, and more declarations to suit your testing needs.\nOptional `override` methods can further fine-tune aspects of the configuration.\n-->\n<p>컴포넌트가 제대로 생성되는지 확인하는 코드는 이것으로 충분합니다.\n테스트 모듈은 <code>@angular/platform-browser</code> 패키지가 제공하는 <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code>을 활용하도록 자동으로 구성되어 있기 때문에, 테스트는 이대로도 실행할 수 있습니다.</p>\n<p>나중에 테스트할 내용이 많아지면 <code>TestBed.configureTestingModule()</code> 메타데이터의 imports, providers, declarations 프로퍼티를 수정해서 사용하면 됩니다.\n그리고 테스트 환경을 좀 더 튜닝하려면 오버라이드 메소드를 활용할 수도 있습니다.</p>\n</div>\n<a id=\"create-component\"></a>\n<h4 id=\"createcomponent\"><em>createComponent()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#createcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nAfter configuring `TestBed`, you call its `createComponent()` method.\n-->\n<p><code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>를 설정한 뒤에는 <code>createComponent()</code> 메소드를 실행합니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"createComponent\">\nconst fixture = TestBed.createComponent(BannerComponent);\n\n</code-example>\n<!--\n`TestBed.createComponent()` creates an instance of the `BannerComponent`,\nadds a corresponding element to the test-runner DOM,\nand returns a [`ComponentFixture`](#component-fixture).\n-->\n<p><code>TestBed.createComponent()</code>를 실행하면 <code>BannerComponent</code>의 인스턴스를 생성하면서 이 컴포넌트의 템플릿을 테스트 러너의 DOM에 추가하고 <a href=\"guide/testing#component-fixture\"><code>ComponentFixture</code></a>를 반환합니다.</p>\n<div class=\"alert is-important\">\n<!--\nDo not re-configure `TestBed` after calling `createComponent`.\n\nThe `createComponent` method freezes the current `TestBed` definition,\nclosing it to further configuration.\n\nYou cannot call any more `TestBed` configuration methods, not `configureTestingModule()`,\nnor `get()`, nor any of the `override...` methods.\nIf you try, `TestBed` throws an error.\n-->\n<p><code>createComponent</code>를 실행한 뒤에 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 설정을 바꾸지 마세요.</p>\n<p><code>createComponent</code> 메소드는 이 메소드가 실행되는 시점에 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>에 설정된 내용으로 생성되며, 이후에 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> 설정을 변경해도 변경된 내용이 반영되지 않습니다.</p>\n<p>그래서 <code>createComponent</code> 메소드를 실행한 후에는 <code>configureTestingModule()</code> 메소드를 다시 실행할 수 없으며, 반대로 <code>configureTestingModule()</code>를 실행하기 전에는 <code>get()</code>이나 <code>override...</code> 메소드를 실행할 수 없습니다.\n이렇게 실행하면 에러가 발생합니다.</p>\n</div>\n<a id=\"component-fixture\"></a>\n<h4 id=\"componentfixture\"><em>ComponentFixture</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#componentfixture\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe [ComponentFixture](api/core/testing/ComponentFixture) is a test harness for interacting with the created component and its corresponding element.\n\nAccess the component instance through the fixture and confirm it exists with a Jasmine expectation:\n-->\n<p><a href=\"api/core/testing/ComponentFixture\">ComponentFixture</a>는 컴포넌트와 이 컴포넌트의 엘리먼트를 테스트할 때 사용하는 객체입니다.</p>\n<p>이 객체를 참조하면 컴포넌트 인스턴스에 직접 접근할 수 있기 때문에, 다음과 같은 Jasmine 검증식을 작성할 수 있습니다:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"componentInstance\">\nconst component = fixture.componentInstance;\nexpect(component).toBeDefined();\n\n</code-example>\n<h4 id=\"beforeeach\"><em>beforeEach()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou will add more tests as this component evolves.\nRather than duplicate the `TestBed` configuration for each test,\nyou refactor to pull the setup into a Jasmine `beforeEach()` and some supporting variables:\n-->\n<p>컴포넌트에 기능이 추가될수록 컴포넌트를 테스트하는 코드도 점점 많아질 것입니다.\n그렇다면 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>를 설정하는 로직을 모든 테스트 스펙에 반복할 필요 없이, 이 내용을 Jasmine <code>beforeEach()</code>에 작성하는 것이 더 효율적입니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v3\" linenums=\"false\">\ndescribe('BannerComponent (with beforeEach)', () => {\n  let component: BannerComponent;\n  let fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n    });\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should create', () => {\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n<!--\nNow add a test that gets the component's element from `fixture.nativeElement` and\nlooks for the expected text.\n-->\n<p>그러면 테스트 스펙을 작성할 때 공통 로직을 생략하고 테스트에 꼭 필요한 내용만 작성할 수 있습니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-2\">\nit('should contain \"banner works!\"', () => {\n  const bannerElement: HTMLElement = fixture.nativeElement;\n  expect(bannerElement.textContent).toContain('banner works!');\n});\n\n</code-example>\n<a id=\"native-element\"></a>\n<h4 id=\"nativeelement\"><em>nativeElement</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#nativeelement\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe value of `ComponentFixture.nativeElement` has the `any` type.\nLater you'll encounter the `DebugElement.nativeElement` and it too has the `any` type.\n\nAngular can't know at compile time what kind of HTML element the `nativeElement` is or\nif it even is an HTML element.\nThe app might be running on a _non-browser platform_, such as the server or a\n[Web Worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API),\nwhere the element may have a diminished API or not exist at all.\n\nThe tests in this guide are designed to run in a browser so a\n`nativeElement` value will always be an `HTMLElement` or\none of its derived classes.\n\nKnowing that it is an `HTMLElement` of some sort, you can use\nthe standard HTML `querySelector` to dive deeper into the element tree.\n\nHere's another test that calls `HTMLElement.querySelector` to get the paragraph element and look for the banner text:\n-->\n<p><code><a href=\"api/core/testing/ComponentFixture#nativeElement\" class=\"code-anchor\">ComponentFixture.nativeElement</a></code>에 할당되는 객체는 <code>any</code> 타입입니다.\n그리고 나중에 살펴볼 <code><a href=\"api/core/DebugElement#nativeElement\" class=\"code-anchor\">DebugElement.nativeElement</a></code>에 할당되는 객체도 <code>any</code> 타입입니다.</p>\n<p>Angular 코드가 컴파일되는 시점에는 <code>nativeElement</code>에 할당되는 객체가 어떤 HTML 엘리먼트인지 알 수 없으며, 심지어 HTML 엘리먼트가 정말 할당되는지도 알 수 없습니다.\n그리고 Angular 애플리케이션이 <em>서버가 아닌 환경</em>, 예를 들면 서버에서 실행되거나 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Worker</a>로 실행된다면 엘리먼트와 관련된 API가 일부 존재하지 않거나 전부 없을 수도 있습니다.</p>\n<p>하지만 이 문서에서 다루는 예제는 모두 브라우저에서 실행되는 것을 전제로 작성되었기 때문에 <code>nativeElement</code>에 할당되는 객체는 언제나 <code>HTMLElement</code>이거나 이 엘리먼트의 자식 클래스입니다.</p>\n<p>그래서 테스트 코드에서는 <code>HTMLElement</code>에서 제공하는 프로퍼티나 메소드를 활용할 수 있으며, HTML <code>querySelector</code>를 사용해서 엘리먼트 트리 안쪽을 참조할 수 있습니다.</p>\n<p><code>HTMLElement.querySelector</code> 메소드를 사용해서 <code>&#x3C;p></code> 엘리먼트를 참조하고, 이 엘리먼트의 텍스트를 검사하는 로직은 다음과 같이 작성할 수 있습니다:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-3\">\nit('should have &#x3C;p> with \"banner works!\"', () => {\n  const bannerElement: HTMLElement = fixture.nativeElement;\n  const p = bannerElement.querySelector('p');\n  expect(p.textContent).toEqual('banner works!');\n});\n\n</code-example>\n<a id=\"debug-element\"></a>\n<h4 id=\"debugelement\"><em>DebugElement</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#debugelement\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe Angular _fixture_ provides the component's element directly through the `fixture.nativeElement`.\n-->\n<p>Angular 픽스쳐(fixture)가 제공하는 API를 활용하면 컴포넌트 엘리먼트에 직접 접근할 수 있습니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"nativeElement\">\nconst bannerElement: HTMLElement = fixture.nativeElement;\n\n</code-example>\n<!--\nThis is actually a convenience method, implemented as `fixture.debugElement.nativeElement`.\n-->\n<p>이 프로퍼티는 사실 <code>fixture.debugElement.nativeElement</code>를 사용하기 쉽게 메소드로 정의한 것입니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"debugElement-nativeElement\">\nconst bannerDe: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> = fixture.debugElement;\nconst bannerEl: HTMLElement = bannerDe.nativeElement;\n\n</code-example>\n<!--\nThere's a good reason for this circuitous path to the element.\n\nThe properties of the `nativeElement` depend upon the runtime environment.\nYou could be running these tests on a _non-browser_ platform that doesn't have a DOM or\nwhose DOM-emulation doesn't support the full `HTMLElement` API.\n\nAngular relies on the `DebugElement` abstraction to work safely across _all supported platforms_.\nInstead of creating an HTML element tree, Angular creates a `DebugElement` tree that wraps the _native elements_ for the runtime platform.\nThe `nativeElement` property unwraps the `DebugElement` and returns the platform-specific element object.\n\nBecause the sample tests for this guide are designed to run only in a browser,\na `nativeElement` in these tests is always an `HTMLElement`\nwhose familiar methods and properties you can explore within a test.\n\nHere's the previous test, re-implemented with `fixture.debugElement.nativeElement`:\n-->\n<p>이렇게 우회하는 이유가 있습니다.</p>\n<p><code>nativeElement</code>에 할당되는 객체는 이 컴포넌트가 어떤 환경에서 실행되는지에 따라 달라집니다.\n<em>브라우저가 아닌</em> 환경에서 애플리케이션을 실행한다면 DOM이 존재하지 않을 수도 있고, DOM을 에뮬레이트한 환경에서는 <code>HTMLelement</code>가 제공하는 API를 온전히 제공하지 않을 수도 있습니다.</p>\n<p>그래서 Angular는 <em>어떠한 플랫폼에서도</em> 이 코드를 문제없이 실행할 수 없도록 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>를 추상화했습니다.\nAngular는 실제로 HTML 엘리먼트 트리를 구성하는 대신, 실행되는 플랫폼에 맞게 랩핑된 <em>네이티브 엘리먼트</em> 로 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 트리를 구성합니다.\n결국 <code>nativeElement</code> 프로퍼티에 접근하는 것은 Angular가 생성한 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>에 접근하는 것이며, 이 방식 덕분에 플랫폼에서 제공하는 엘리먼트 객체에 안전하게 접근할 수 있습니다.</p>\n<p>이 문서에서 다루는 예제는 모두 브라우저에서 실행되는 것을 전제로 작성되었기 때문에 이 문서에서 사용하는 모든 <code>nativeElement</code>는 <code>HTMLElement</code> 객체가 할당됩니다.\n그래서 기존에 DOM에서 사용하던 프로퍼티와 메소드는 그대로 활용할 수 있습니다.</p>\n<p>위에서 살펴본 테스트 코드를 풀어서 쓰면 다음과 같이 작성할 수 있습니다:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-4\">\nit('should find the &#x3C;p> with fixture.debugElement.nativeElement)', () => {\n  const bannerDe: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> = fixture.debugElement;\n  const bannerEl: HTMLElement = bannerDe.nativeElement;\n  const p = bannerEl.querySelector('p');\n  expect(p.textContent).toEqual('banner works!');\n});\n\n</code-example>\n<!--\nThe `DebugElement` has other methods and properties that\nare useful in tests, as you'll see elsewhere in this guide.\n\nYou import the `DebugElement` symbol from the Angular core library.\n-->\n<p><code>@angular/core</code> 패키지에서 제공하는 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>에는 테스트에 활용할만한 메소드나 프로퍼티들이 더 정의되어 있습니다.\n이 내용은 이후 내용에서 더 알아봅시다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"import-debug-element\">\nimport { <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> } from '@angular/core';\n\n</code-example>\n<a id=\"by-css\"></a>\n<h4 id=\"bycss\"><em>By.css()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#bycss\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nAlthough the tests in this guide all run in the browser,\nsome apps might run on a different platform at least some of the time.\n\nFor example, the component might render first on the server as part of a strategy to make the application launch faster on poorly connected devices. The server-side renderer might not support the full HTML element API.\nIf it doesn't support `querySelector`, the previous test could fail.\n\nThe `DebugElement` offers query methods that work for all supported platforms.\nThese query methods take a _predicate_ function that returns `true` when a node in the `DebugElement` tree matches the selection criteria.\n\nYou create a _predicate_ with the help of a `By` class imported from a\nlibrary for the runtime platform. Here's the `By` import for the browser platform:\n-->\n<p>이 문서에서 다루는 모든 테스트 코드는 브라우저에서 실행되는 것을 전제로 작성되었지만, Angular 애플리케이션은 브라우저가 아닌 환경에서도 실행될 수 있습니다.</p>\n<p>예를 들어보면, 접속 환경이 좋지 않은 디바이스를 위해 애플리케이션은 서버에서 미리 렌더링한 뒤에 제공될 수도 있는데, 서버사이드 렌더링 시점에는 HTML 엘리먼트가 제공하는 API를 제대로 사용할 수 없습니다.\n위에서 다뤘던 <code>querySelector</code>도 사용할 수 없기 때문에 테스트는 실패할 것입니다.</p>\n<p>하지만 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>가 제공하는 쿼리 메소드는 모든 플랫폼에서 동작합니다.\n그래서 <code>querySelector</code> 대신 <code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> 클래스로 제공되는 쿼리 메소드를 활용하면 모든 플랫폼에서 원하는 엘리먼트를 참조할 수 있습니다.</p>\n<p><code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> 클래스는 애플리케이션이 실행되는 플랫폼에 따라 다르게 제공됩니다.\n그래서 브라우저 환경에서 동작하는 <code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> 클래스는 다음과 같이 제공됩니다:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"import-by\">\nimport { <a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a> } from '@angular/platform-browser';\n\n</code-example>\n<!--\nThe following example re-implements the previous test with\n`DebugElement.query()` and the browser's `By.css` method.\n-->\n<p>위에서 살펴본 쿼리 예제는 <code>DebugElement.query()</code> 메소드와 <code>By.css</code> 메소드를 사용해서 다음과 같이 작성할 수 있습니다.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-5\">\nit('should find the &#x3C;p> with fixture.debugElement.query(By.css)', () => {\n  const bannerDe: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> = fixture.debugElement;\n  const paragraphDe = bannerDe.query(By.css('p'));\n  const p: HTMLElement = paragraphDe.nativeElement;\n  expect(p.textContent).toEqual('banner works!');\n});\n\n</code-example>\n<!--\nSome noteworthy observations:\n\n- The `By.css()` static method selects `DebugElement` nodes\n  with a [standard CSS selector](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors 'CSS selectors').\n- The query returns a `DebugElement` for the paragraph.\n- You must unwrap that result to get the paragraph element.\n\nWhen you're filtering by CSS selector and only testing properties of a browser's _native element_, the `By.css` approach may be overkill.\n\nIt's often easier and more clear to filter with a standard `HTMLElement` method\nsuch as `querySelector()` or `querySelectorAll()`,\nas you'll see in the next set of tests.\n-->\n<p>몇가지 알아둬야 할 내용이 있습니다:</p>\n<ul>\n<li><code><a href=\"api/platform-browser/By#css\" class=\"code-anchor\">By.css()</a></code> 정적 메소드는 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors\" title=\"CSS selectors\">표준 CSS 셀렉터</a> 문법으로 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 노드를 탐색합니다.</li>\n<li>이 메소드를 실행하면 <code>&#x3C;p></code> 타입의 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>를 반환합니다.</li>\n<li>반환값으로 받은 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>는 <code>nativeElement</code> 프로퍼티를 사용해서 <code>HTMLElement</code>로 참조할 수 있습니다.</li>\n</ul>\n<p>그래서 브라우저 환경에서 <em>네이티브 엘리먼트</em> 를 테스트한다면 CSS 셀렉터와 <code>By.css</code> 메소드를 사용하는 것으로 충분합니다.</p>\n<p>하지만 <code>querySelector()</code>나 <code>querySelectorAll()</code>을 사용해서 표준 <code>HTMLElement</code>를 참조하는 것이 더 나을 때도 있습니다. 이 내용은 다음 섹션부터 자세하게 알아봅시다.</p>\n<hr>\n<!--\n## Component Test Scenarios\n-->\n<h2 id=\"컴포넌트-테스트-시나리오\">컴포넌트 테스트 시나리오<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#컴포넌트-테스트-시나리오\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe following sections, comprising most of this guide, explore common\ncomponent testing scenarios\n-->\n<p>이제부터는 컴포넌트를 테스트하는 다양한 시나리오에 대해 알아봅시다.</p>\n<!--\n### Component binding\n-->\n<h3 id=\"바인딩\">바인딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#바인딩\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe current `BannerComponent` presents static title text in the HTML template.\n\nAfter a few changes, the `BannerComponent` presents a dynamic title by binding to\nthe component's `title` property like this.\n-->\n<p>지금까지 작성한 <code>BannerComponent</code>를 보면, HTML 템플릿에 표시되는 <code>title</code> 프로퍼티는 정적(static) 변수였습니다.</p>\n<p>그런데 이제 이 프로퍼티의 값은 동적으로 변경될 수 있으며, 그 때마다 변경된 값이 화면에 바인딩되어 표시된다고 합시다.</p>\n<code-example path=\"testing/src/app/banner/banner.component.ts\" region=\"component\" header=\"app/banner/banner.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: '&#x3C;h1>{{title}}&#x3C;/h1>',\n  styles: ['h1 { color: green; font-size: 350%}']\n})\nexport class BannerComponent {\n  title = 'Test Tour of Heroes';\n}\n\n</code-example>\n<!--\nSimple as this is, you decide to add a test to confirm that component\nactually displays the right content where you think it should.\n-->\n<p>그러면 <code>title</code> 프로퍼티의 값이 변경되었을 때 이 문자열이 화면에 제대로 표시되는지 검사하는 테스트 코드를 작성할 수 있습니다.</p>\n<!--\n#### Query for the _&lt;h1&gt;_\n-->\n<h4 id=\"h1-쿼리하기\"><em>&#x3C;h1></em> 쿼리하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#h1-쿼리하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou'll write a sequence of tests that inspect the value of the `<h1>` element\nthat wraps the _title_ property interpolation binding.\n\nYou update the `beforeEach` to find that element with a standard HTML `querySelector`\nand assign it to the `h1` variable.\n-->\n<p>가장 먼저, <em>title</em> 프로퍼티가 바인딩되는 <code>&#x3C;h1></code> 엘리먼트에 실제로는 어떤 값이 들어가는지 확인해야 합니다.</p>\n<p>그래서 <code>beforeEach</code> 로직 안에서 HTML <code>querySelector</code> 메소드를 실행해서 <code>&#x3C;h1></code> 엘리먼트를 참조하고, 이 엘리먼트를 변수 <code>h1</code>에 할당합니다.</p>\n<!--\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"setup\" header=\"app/banner/banner.component.spec.ts (setup)\" linenums=\"false\">\nlet component: BannerComponent;\nlet fixture:   ComponentFixture&lt;BannerComponent&gt;;\nlet h1:        HTMLElement;\n\nbeforeEach(() =&gt; {\n  TestBed.configureTestingModule({\n    declarations: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance; // BannerComponent 인스턴스\n  h1 = fixture.nativeElement.querySelector(&#39;h1&#39;);\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"setup\" header=\"app/banner/banner.component.spec.ts (테스트환경 설정)\" linenums=\"false\">\nlet component: BannerComponent;\nlet fixture:   <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\nlet h1:        HTMLElement;\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance; // BannerComponent 인스턴스\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<a id=\"detect-changes\"></a>\n<!--\n#### _createComponent()_ does not bind data\n-->\n<h4 id=\"createcomponent-는-데이터를-바인딩하지-않습니다\"><em>createComponent()</em> 는 데이터를 바인딩하지 않습니다.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#createcomponent-는-데이터를-바인딩하지-않습니다\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nFor your first test you'd like to see that the screen displays the default `title`.\nYour instinct is to write a test that immediately inspects the `<h1>` like this:\n-->\n<p>그러면 이렇게 참조한 <code>&#x3C;h1></code> 엘리먼트의 텍스트가 <code>title</code> 프로퍼티의 기본값과 같다고 테스트 코드를 작성할 수도 있습니다.\n<code>title</code> 프로퍼티는 <code>&#x3C;h1></code> 엘리먼트에 바인딩되기 때문입니다:</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"expect-h1-default-v1\">\nit('should display original title', () => {\n  expect(h1.textContent).toContain(component.title);\n});\n\n</code-example>\n<!--\n_That test fails_ with the message:\n-->\n<p>하지만 이 테스트는 실패합니다:</p>\n<code-example language=\"javascript\">\nexpected '' to contain 'Test Tour of Heroes'.\n</code-example>\n<!--\nBinding happens when Angular performs **change detection**.\n\nIn production, change detection kicks in automatically\nwhen Angular creates a component or the user enters a keystroke or\nan asynchronous activity (e.g., AJAX) completes.\n\nThe `TestBed.createComponent` does _not_ trigger change detection.\na fact confirmed in the revised test:\n-->\n<p>프로퍼티 바인딩은 Angular가 <strong>변화감지 동작</strong>을 실행할 때 발생합니다.</p>\n<p>그리고 실제 운영용 환경에서는 Angular가 컴포넌트 인스턴스를 생성하거나 사용자가 키를 입력했을 때, AJAX와 같은 비동기 작업이 완료되었을 때 자동으로 변화감지 동작이 실행됩니다.</p>\n<p><code>TestBed.createComponent</code>는 변화감지 동작을 <em>실행하지 않습니다</em>.\n그래서 사실 이 테스트 코드는 다음과 같은 의미로 실행되었습니다:</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"test-w-o-detect-changes\" linenums=\"false\">\nit('no title in the DOM after createComponent()', () => {\n  expect(h1.textContent).toEqual('');\n});\n\n</code-example>\n<h4 id=\"detectchanges\"><em>detectChanges()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#detectchanges\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou must tell the `TestBed` to perform data binding by calling `fixture.detectChanges()`.\nOnly then does the `<h1>` have the expected title.\n-->\n<p><code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>로 구성한 컴포넌트에 데이터를 바인딩하려면 <code>fixture.detectChanges()</code> 함수를 실행하면 됩니다.\n이 함수를 실행하면 <code>title</code> 프로퍼티의 값이 <code>&#x3C;h1></code>에 바인딩 됩니다.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"expect-h1-default\">\nit('should display original title after detectChanges()', () => {\n  fixture.detectChanges();\n  expect(h1.textContent).toContain(component.title);\n});\n\n</code-example>\n<!--\nDelayed change detection is intentional and useful.\nIt gives the tester an opportunity to inspect and change the state of\nthe component _before Angular initiates data binding and calls [lifecycle hooks](guide/lifecycle-hooks)_.\n\nHere's another test that changes the component's `title` property _before_ calling `fixture.detectChanges()`.\n-->\n<p>변화감지 동작이 자동으로 실행되지 않는 것은 Angular가 의도한 것이며, 이렇게 동작해야 테스트 코드를 작성하기 더 편합니다.\n왜냐하면 변화감지 동작을 수동으로 실행할 수 있어야 Angular가 데이터 바인딩을 초기화하하기 전에 컴포넌트의 상태를 검사할 수 있으며, <a href=\"guide/lifecycle-hooks\">라이프싸이클 후킹 함수</a>가 동작하기 전에도 컴포넌트를 체크할 수 있기 때문입니다.</p>\n<p>그래서 컴포넌트의 <code>title</code> 프로퍼티를 직접 변경한 후에 <code>fixture.detectChanges()</code> 함수를 실행하는 방식으로 테스트 코드를 작성할 수도 있습니다.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"after-change\">\nit('should display <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> different test title', () => {\n  component.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  fixture.detectChanges();\n  expect(h1.textContent).toContain('Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>');\n});\n\n</code-example>\n<a id=\"auto-detect-changes\"></a>\n<!--\n#### Automatic change detection\n-->\n<h4 id=\"변화감지-자동으로-실행하기\">변화감지 자동으로 실행하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#변화감지-자동으로-실행하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `BannerComponent` tests frequently call `detectChanges`.\nSome testers prefer that the Angular test environment run change detection automatically.\n\nThat's possible by configuring the `TestBed` with the `ComponentFixtureAutoDetect` provider.\nFirst import it from the testing utility library:\n-->\n<p><code>BannerComponent</code>를 테스트할 때는 변화감지 동작을 실행해야 하는 경우가 그리 많지 않기 때문에 <code>detectChanges</code>를 수동으로 실행해도 크게 번거롭지 않습니다.\n하지만 Angular 테스트 환경에서도 변화감지 로직이 자동으로 동작해야 편한 경우가 있습니다.</p>\n<p>그러면 변화감지 로직을 자동으로 실행하도록 <code>TtestBed</code>를 구성할 수 있습니다.\n먼저, 테스트 라이브러리에서 <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> 프로바이더를 로드합니다:</p>\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"import-ComponentFixtureAutoDetect\" header=\"app/banner/banner.component.detect-changes.spec.ts (import)\" linenums=\"false\">\nimport { <a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a> } from '@angular/core/testing';\n\n</code-example>\n<!--\nThen add it to the `providers` array of the testing module configuration:\n-->\n<p>그리고 이 프로바이더를 <code>providers</code> 배열에 추가합니다:</p>\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"auto-detect\" header=\"app/banner/banner.component.detect-changes.spec.ts (AutoDetect)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  providers: [\n    { provide: <a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a>, useValue: true }\n  ]\n});\n\n</code-example>\n<!--\nHere are three tests that illustrate how automatic change detection works.\n-->\n<p>이 프로바이더가 동작하는지 확인해 봅시다. 테스트 스펙 3개를 다음과 같이 정의합니다.</p>\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"auto-detect-tests\" header=\"app/banner/banner.component.detect-changes.spec.ts (AutoDetect Tests)\" linenums=\"false\">\nit('should display original title', () => {\n  // 만세! `fixture.detectChanges()`는 더이상 필요 없습니다.\n  expect(h1.textContent).toContain(comp.title);\n});\n\nit('should still see original title after comp.title change', () => {\n  const oldTitle = comp.title;\n  comp.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  // 화면에 표시되는 문자열은 갱신되지 않습니다. 이 경우에는 변화감지 로직이 실행되지 않았습니다 :(\n  expect(h1.textContent).toContain(oldTitle);\n});\n\nit('should display updated title after detectChanges', () => {\n  comp.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  fixture.detectChanges(); // 명시적으로 변화감지 로직을 실행합니다.\n  expect(h1.textContent).toContain(comp.title);\n});\n\n</code-example>\n<!--\nThe first test shows the benefit of automatic change detection.\n\nThe second and third test reveal an important limitation.\nThe Angular testing environment does _not_ know that the test changed the component's `title`.\nThe `ComponentFixtureAutoDetect` service responds to _asynchronous activities_ such as promise resolution, timers, and DOM events.\nBut a direct, synchronous update of the component property is invisible.\nThe test must call `fixture.detectChanges()` manually to trigger another cycle of change detection.\n-->\n<p>변화감지 로직이 자동으로 실행되는 것은 첫번째 테스트 스펙에만 적용되었습니다.</p>\n<p>두번째 스펙과 세번째 스펙에 대해 자세하게 알아봅시다.\nAngular 테스트 환경은 컴포넌트의 <code>title</code> 프로퍼티 값이 변경되는지 확인하지 않습니다.\n<code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> 서비스는 Promise가 완료되었을 때, 타이머가 완료되었을 때, DOM 이벤트가 발생했을 때와 같이 <em>비동기로 일어나는 동작</em> 에만 반응합니다.\n그래서 비동기로 컴포넌트 프로퍼티 값을 변경하면 이 값은 화면에 반영되지 않습니다.\n변화감지 동작을 실행하려면 <code>fixture.detectChanges()</code>를 수동으로 호출해야 합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nRather than wonder when the test fixture will or won't perform change detection,\nthe samples in this guide _always call_ `detectChanges()` _explicitly_.\nThere is no harm in calling `detectChanges()` more often than is strictly necessary.\n-->\n<p>이 문서에서 다루는 예제에서는 테스트 코드가 실행되는 환경에 변화감지 동작이 필요할 때 <code><a href=\"api/core/testing/ComponentFixture#detectChanges\" class=\"code-anchor\">detectChanges()</a></code>를 <em>명시적으로 실행</em> 했습니다.\n<code><a href=\"api/core/testing/ComponentFixture#detectChanges\" class=\"code-anchor\">detectChanges()</a></code> 함수는 꼭 필요한 경우 외에 더 실행되더라도 문제되지 않습니다.</p>\n</div>\n<hr>\n<a id=\"dispatch-event\"></a>\n<!--\n#### Change an input value with _dispatchEvent()_\n-->\n<h4 id=\"dispatchevent-입력값-변경하기\"><em>dispatchEvent()</em>: 입력값 변경하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#dispatchevent-입력값-변경하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nTo simulate user input, you can find the input element and set its `value` property.\n\nYou will call `fixture.detectChanges()` to trigger Angular's change detection.\nBut there is an essential, intermediate step.\n\nAngular doesn't know that you set the input element's `value` property.\nIt won't read that property until you raise the element's `input` event by calling `dispatchEvent()`.\n_Then_ you call `detectChanges()`.\n\nThe following example demonstrates the proper sequence.\n-->\n<p>테스트 코드에서 사용자의 입력을 흉내내려면 <code>&#x3C;input></code> 엘리먼트를 찾아서 이 엘리먼트이 <code>value</code> 프로퍼티를 변경해야 합니다.</p>\n<p>그리고 <code>fixture.detectChanges()</code>를 실행하면 Angular의 변화감지 로직을 실행할 수 있지만, 이 메소드를 실행하기 전에 꼭 해야하는 작업이 있습니다.</p>\n<p>Angular는 개발자가 <code>&#x3C;input></code> 엘리먼트의 <code>value</code> 프로퍼티를 변경했다는 것을 알지 못합니다.\n그래서 엘리먼트에서 <code>input</code> 이벤트가 발생했다는 것을 알리기 위해 <code>dispatchEvent()</code> 함수를 실행해야 이 엘리먼트의 변경된 프로퍼티를 참조할 수 있습니다.\n<code><a href=\"api/core/testing/ComponentFixture#detectChanges\" class=\"code-anchor\">detectChanges()</a></code>는 <em>그 다음에</em> 실행해야 합니다.</p>\n<p>이 순서대로 테스트 코드를 작성해 봅시다.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (pipe test)\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // 이름에 해당하는 input 엘리먼트와 이 이름을 화면에 표시하는 span 엘리먼트를 DOM에서 참조합니다.\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // 사용자가 입력한 것처럼 입력 필드의 내용을 변경합니다.\n  nameInput.value = 'quick BROWN  fOx';\n\n  // 엘리먼트의 값이 변경되었다는 것을 Angular에게 알리기 위해 DOM 이벤트를 생성합니다.\n  nameInput.dispatchEvent(newEvent('input'));\n\n  // Angular가 화면을 갱신하도록 detectChanges() 함수를 실행합니다.\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<hr>\n<!--\n### Component with external files\n-->\n<h3 id=\"외부-파일로-구성된-컴포넌트\">외부 파일로 구성된 컴포넌트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#외부-파일로-구성된-컴포넌트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `BannerComponent` above is defined with an _inline template_ and _inline css_, specified in the `@Component.template` and `@Component.styles` properties respectively.\n\nMany components specify _external templates_ and _external css_ with the\n`@Component.templateUrl` and `@Component.styleUrls` properties respectively,\nas the following variant of `BannerComponent` does.\n-->\n<p>위에서 살펴본 <code>BannerComponent</code>는 메타데이터에 <code>@<a href=\"api/core/Component#template\" class=\"code-anchor\">Component.template</a></code>과 <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> 프로퍼티를 사용해서 <em>인라인 템플릿</em> 과 <em>인라인 CSS</em> 로 작성되었습니다.</p>\n<p>하지만 이런 경우보다는 <code>@<a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">Component.templateUrl</a></code>과 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 프로퍼티를 사용해서 <em>외부 템플릿 파일</em> 과 <em>외부 CSS 파일</em> 로 구성하는 경우가 더 많습니다.\n이런 경우에 컴포넌트 메타데이터는 다음과 같이 구성됩니다.</p>\n<!--\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" region=\"metadata\" header=\"app/banner/banner-external.component.ts (metadata)\" linenums=\"false\">\n@Component({\n  selector: &#39;app-banner&#39;,\n  templateUrl: &#39;./banner-external.component.html&#39;,\n  styleUrls:  [&#39;./banner-external.component.css&#39;]\n})\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" region=\"metadata\" header=\"app/banner/banner-external.component.ts (메타데이터)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  templateUrl: './banner-external.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>:  ['./banner-external.component.css']\n})\n\n</code-example>\n<!--\nThis syntax tells the Angular compiler to read the external files during component compilation.\n\nThat's not a problem when you run the CLI `ng test` command because it\n_compiles the app before running the tests_.\n\nHowever, if you run the tests in a **non-CLI environment**,\ntests of this component may fail.\nFor example, if you run the `BannerComponent` tests in a web coding environment such as [plunker](https://plnkr.co/), you'll see a message like this one:\n-->\n<p>이 방식을 사용하면 Angular 컴파일러가 컴포넌트를 컴파일할 때 별개 파일로 정의된 템플릿 파일과 스타일 파일을 로드합니다.</p>\n<p>Angular CLI 명령 <code>ng test</code>를 실행한다면 이 방식은 딱히 문제가 되지 않습니다.\n애플리케이션은 <em>테스트가 실행되기 전에 먼저 컴파일됩니다</em>.</p>\n<p>그런데 <strong>Angular CLI를 사용하지 않는 환경</strong>에서 테스트를 실행할 때는 문제가 될 수 있습니다.\n<a href=\"https://plnkr.co/\">plunker</a>와 같은 웹 코딩 환경에서 <code>BannerComponent</code> 테스트를 실행하면 다음과 같은 에러가 발생할 수 있습니다:</p>\n<code-example language=\"sh\" class=\"code-shell\" hidecopy=\"\">\nError: This test module uses the component BannerComponent\nwhich is using <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> \"templateUrl\" or \"<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>\", but they were never compiled.\nPlease call \"TestBed.compileComponents\" before your test.\n</code-example>\n<!--\nYou get this test failure message when the runtime environment\ncompiles the source code _during the tests themselves_.\n\nTo correct the problem, call `compileComponents()` as explained [below](#compile-components).\n-->\n<p>이 에러는 테스트할 컴포넌트를 실행 시점에 컴파일 하기 때문에 발생하는 에러입니다.</p>\n<p>이 문제를 해결하려면 <code>compileComponents()</code>를 명시적으로 실행해줘야 합니다.\n이 내용은 <a href=\"guide/testing#compile-components\">아래</a>에서 자세하게 알아봅니다.</p>\n<a id=\"component-with-dependency\"></a>\n<!--\n### Component with a dependency\n-->\n<h3 id=\"의존성-주입이-필요한-컴포넌트\">의존성 주입이 필요한 컴포넌트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#의존성-주입이-필요한-컴포넌트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nComponents often have service dependencies.\n\nThe `WelcomeComponent` displays a welcome message to the logged in user.\nIt knows who the user is based on a property of the injected `UserService`:\n-->\n<p>컴포넌트는 서비스 클래스를 의존성으로 주입받을 수 있습니다.</p>\n<p><code>WelcomeComponent</code>는 로그인한 사용자에게 환영 메시지를 출력하는 컴포넌트입니다.\n그리고 이 컴포넌트는 어떤 사용자가 로그인했는지 확인하기 위해 <code>UserService</code>를 의존성으로 주입받습니다:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.ts\" header=\"app/welcome/welcome.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { UserService }       from '../<a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a>/user.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-welcome',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: '&#x3C;h3 class=\"welcome\">&#x3C;i>{{welcome}}&#x3C;/i>&#x3C;/h3>'\n})\nexport class WelcomeComponent  implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  welcome: string;\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.welcome = this.userService.isLoggedIn ?\n      'Welcome, ' + this.userService.user.name : 'Please <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in.';\n  }\n}\n\n\n</code-example>\n<!--\nThe `WelcomeComponent` has decision logic that interacts with the service, logic that makes this component worth testing.\nHere's the testing module configuration for the spec file, `app/welcome/welcome.component.spec.ts`:\n-->\n<p><code>WelcomeComponent</code>가 동작할때 실행되는 로직은 의존성으로 주입받은 서비스를 사용하지만, 컴포넌트를 테스트하면서 서비스까지 테스트할 필요는 없습니다.\n그래서 이런 경우에는 테스트 모듈을 다음과 같이 구성합니다:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"config-test-module\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nTestBed.configureTestingModule({\n   <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ WelcomeComponent ],\n// providers:    [ UserService ]  // NO! 프로바이더에 실제 서비스 클래스를 등록하면 안됩니다!\n                                  // 목 서비스를 등록하세요.\n   providers:    [ {provide: UserService, useValue: userServiceStub } ]\n});\n\n</code-example>\n<!--\nThis time, in addition to declaring the _component-under-test_,\nthe configuration adds a `UserService` provider to the `providers` list.\nBut not the real `UserService`.\n-->\n<p>이 코드에는 테스트하려는 컴포넌트 외에도 <code>providers</code> 목록에 <code>UserService</code> 타입의 객체를 등록했습니다.\n하지만 실제 <code>UserService</code>가 사용되는 것은 아닙니다.</p>\n<a id=\"service-test-doubles\"></a>\n<!--\n#### Provide service test doubles\n-->\n<h4 id=\"목-서비스-사용하기\">목 서비스 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#목-서비스-사용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nA _component-under-test_ doesn't have to be injected with real services.\nIn fact, it is usually better if they are test doubles (stubs, fakes, spies, or mocks).\nThe purpose of the spec is to test the component, not the service,\nand real services can be trouble.\n\nInjecting the real `UserService` could be a nightmare.\nThe real service might ask the user for login credentials and\nattempt to reach an authentication server.\nThese behaviors can be hard to intercept.\nIt is far easier and safer to create and register a test double in place of the real `UserService`.\n\nThis particular test suite supplies a minimal mock of the `UserService` that satisfies the needs of the `WelcomeComponent`\nand its tests:\n-->\n<p>컴포넌트를 테스트하기 위해 실제 서비스를 의존성으로 등록할 필요는 없습니다.\n이런 경우에는 보통 목(mocks, doubles, stubs, fakes, spies) 서비스를 사용하는 것이 더 좋습니다.\n컴포넌트를 테스트하는 스펙의 목적은 컴포넌트를 테스트하는 것이지 서비스를 테스트하는 것이 아닙니다.\n실제로 사용하는 서비스를 주입한다면 컴포넌트를 테스트하는 로직이 더 복잡해지기만 할 뿐입니다.</p>\n<p>만약 실제 <code>UserService</code>를 주입해야 한다면 아주 괴로운 경험을 겪게될 수도 있습니다.\n실제 서비스는 사용자에게 로그인 인증정보를 제공하라고 할 수도, 있고 인증 서버에 HTTP 요청을 보낼지도 모릅니다.\n이런 동작은 인터셉트하기도 힘듭니다.\n그렇다면 실제 <code>UserService</code>를 대신해서 컴포넌트 동작에 꼭 필요한 로직만 제공하는 무언가를 만드는 것이 훨씬 간단합니다.</p>\n<p><code>UserService</code>의 로직 중 <code>WelcomeComponent</code>의 요구사항에 맞는 기능만 최소한으로 정의하면 다음과 같이 구현할 수 있습니다:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"user-service-stub\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nlet userServiceStub: Partial&#x3C;UserService>;\n\nuserServiceStub = {\n  isLoggedIn: true,\n  user: { name: 'Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>'}\n};\n\n</code-example>\n<a id=\"get-injected-service\"></a>\n<!--\n#### Get injected services\n-->\n<h4 id=\"의존성으로-주입한-서비스-가져오기\">의존성으로 주입한 서비스 가져오기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#의존성으로-주입한-서비스-가져오기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe tests need access to the (stub) `UserService` injected into the `WelcomeComponent`.\n\nAngular has a hierarchical injection system.\nThere can be injectors at multiple levels, from the root injector created by the `TestBed`\ndown through the component tree.\n\nThe safest way to get the injected service, the way that **_always works_**,\nis to **get it from the injector of the _component-under-test_**.\nThe component injector is a property of the fixture's `DebugElement`.\n-->\n<p>테스트 스펙을 작성하려면 <code>WelcomeComponent</code>에 주입된 <code>UserService</code> 타입의 목 클래스에 접근해야 합니다.</p>\n<p>Angular는 의존성 주입 시스템을 계층 구조로 제공합니다.\n그래서 인젝터는 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>가 생성한 최상위 인젝터부터 컴포넌트 트리 전체에 걸쳐 여러 계층에 존재할 수 있습니다.</p>\n<p>의존성으로 주입된 서비스를 가져오는 방법 중 가장 안전한 방법은 <strong>테스트하는 컴포넌트</strong>에 있는 인젝터에서 서비스 인스턴스를 가져오는 것입니다.\n이 방법은 <strong><em>언제나 동작합니다</em></strong>.\n컴포넌트 인젝터는 픽스쳐의 <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> 클래스 프로퍼티로 참조할 수 있습니다.</p>\n<!--\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"injected-service\" header=\"WelcomeComponent's injector\">\n// 컴포넌트에 주입된 UserService를 가져옵니다.\nuserService = fixture.debugElement.injector.get(UserService);\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"injected-service\" header=\"WelcomeComponent의 인젝터\">\n// 컴포넌트에 주입된 UserService를 가져옵니다.\nuserService = fixture.debugElement.injector.get(UserService);\n\n</code-example>\n<a id=\"testbed-get\"></a>\n<h4 id=\"testbedget\"><em>TestBed.get()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testbedget\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou _may_ also be able to get the service from the root injector via `TestBed.get()`.\nThis is easier to remember and less verbose.\nBut it only works when Angular injects the component with the service instance in the test's root injector.\n\nIn this test suite, the _only_ provider of `UserService` is the root testing module,\nso it is safe to call `TestBed.get()` as follows:\n-->\n<p>서비스의 인스턴스는 <code>TestBed.get()</code>을 사용해서 최상위 인젝터에서 참조할 <em>수도</em> 있습니다.\n이렇게 작성하는 것이 더 간단하고 외우기도 쉽습니다.\n하지만 이 방식은 컴포넌트와 서비스 클래스가 테스트 모듈의 최상위 인젝터로 등록되었을 때만 제대로 동작합니다.</p>\n<p>다행히 지금 다루는 예제에서는 <code>UserService</code>가 최상위 테스트 모듈에만 등록되었기 때문에 <code>TestBed.get()</code>을 써서 다음과 같이 작성할 수 있습니다:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"inject-from-testbed\" header=\"TestBed injector\">\n// 최상위 인젝터에서 UserService를 가져옵니다.\nuserService = TestBed.get(UserService);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\nFor a use case in which `TestBed.get()` does not work,\nsee the [_Override component providers_](#component-override) section that\nexplains when and why you must get the service from the component's injector instead.\n-->\n<p><code>TestBed.get()</code>로 의존성으로 주입된 서비스의 인스턴스를 가져올 수 없으면, <a href=\"guide/testing#component-override\"><em>컴포넌트 프로바이더 오버라이드</em></a> 섹션을 참고하세요.\n서비스 인스턴스는 컴포넌트의 인젝터에서 가져와야 할 수도 있습니다.</p>\n</div>\n<a id=\"service-from-injector\"></a>\n<!--\n#### Always get the service from an injector\n-->\n<h4 id=\"서비스-인스턴스는-반드시-인젝터에서-가져오세요\">서비스 인스턴스는 반드시 인젝터에서 가져오세요.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#서비스-인스턴스는-반드시-인젝터에서-가져오세요\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nDo _not_ reference the `userServiceStub` object\nthat's provided to the testing module in the body of your test.\n**It does not work!**\nThe `userService` instance injected into the component is a completely _different_ object,\na clone of the provided `userServiceStub`.\n-->\n<p>테스트 스펙을 작성할 때 모듈에 등록한 <code>userServiceStub</code> 객체를 직접 <em>참조하지 마세요</em>.\n<strong>이렇게 하면 동작하지 않습니다!</strong>\n<code>userServiceStub</code>은 모듈에 등록될 때 복제되기 때문에 컴포넌트에 주입된 <code>userService</code> 인스턴스와는 <em>다른</em> 객체입니다.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"stub-not-injected\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nit('stub object and injected UserService should not be the same', () => {\n  expect(userServiceStub === userService).toBe(false);\n\n  // 목 객체의 프로퍼티 값을 변경해도 의존성으로 주입된 서비스에는 반영되지 않습니다.\n  userServiceStub.isLoggedIn = false;\n  expect(userService.isLoggedIn).toBe(true);\n});\n\n</code-example>\n<a id=\"welcome-spec-setup\"></a>\n<!--\n#### Final setup and tests\n-->\n<h4 id=\"마지막-환경설정-테스트\">마지막 환경설정, 테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#마지막-환경설정-테스트\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nHere's the complete `beforeEach()`, using `TestBed.get()`:\n-->\n<p><code>TestBed.get()</code>을 사용하면 <code>beforeEach()</code> 코드를 다음과 같이 작성할 수 있습니다:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"setup\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\n  let userServiceStub: Partial&#x3C;UserService>;\n\nbeforeEach(() => {\n  // 테스트하기 위해 만든 목 UserService\n  userServiceStub = {\n    isLoggedIn: true,\n    user: { name: 'Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>'}\n  };\n\n  TestBed.configureTestingModule({\n     <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ WelcomeComponent ],\n     providers:    [ {provide: UserService, useValue: userServiceStub } ]\n  });\n\n  fixture = TestBed.createComponent(WelcomeComponent);\n  comp    = fixture.componentInstance;\n\n  // 최상위 인젝터에서 UserService를 가져옵니다.\n  userService = TestBed.get(UserService);\n\n  // 클래스 이름으로 CSS 셀렉터를 사용해서 \"welcome\" 엘리먼트를 가져옵니다.\n  el = fixture.nativeElement.querySelector('.welcome');\n});\n\n</code-example>\n<!--\nAnd here are some tests:\n-->\n<p>그리고 테스트 코드는 이렇게 작성합니다:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"tests\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nit('should welcome the user', () => {\n  fixture.detectChanges();\n  const content = el.textContent;\n  expect(content).toContain('Welcome', '\"Welcome ...\"');\n  expect(content).toContain('Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>', 'expected name');\n});\n\nit('should welcome \"Bubba\"', () => {\n  userService.user.name = 'Bubba'; // 환영 메시지는 아직 표시되지 않습니다.\n  fixture.detectChanges();\n  expect(el.textContent).toContain('Bubba');\n});\n\nit('should request login if not logged in', () => {\n  userService.isLoggedIn = false; // 환영 메시지는 아직 표시되지 않습니다.\n  fixture.detectChanges();\n  const content = el.textContent;\n  expect(content).not.toContain('Welcome', 'not welcomed');\n  expect(content).toMatch(/<a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in/i, '\"<a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in\"');\n});\n\n</code-example>\n<!--\nThe first is a sanity test; it confirms that the stubbed `UserService` is called and working.\n-->\n<p>첫번째 테스트 스펙은 서비스가 제대로 주입되었는지 확인하는 스펙입니다.\n이 테스트가 성공하면 목으로 만든 <code>UserService</code> 객체가 제대로 실행된 것으로 판단할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe second parameter to the Jasmine matcher (e.g., `'expected name'`) is an optional failure label.\nIf the expectation fails, Jasmine displays appends this label to the expectation failure message.\nIn a spec with multiple expectations, it can help clarify what went wrong and which expectation failed.\n-->\n<p>Jasmine 매처의 두번째 인자는 테스트가 실패했을 때 표시할 라벨을 지정하는 옵션 인자입니다.\n이 인자가 지정된 검증식이 실패하면 Jasmine은 에러 메시지 뒤에 이 라벨을 붙여서 화면에 표시합니다.\n그래서 한 테스트 스펙 안에서 여러 검증식을 사용하는 경우에 이 인자를 지정하면 어떤 검증식이 잘못되었는지 빠르게 확인할 수 있습니다.</p>\n</div>\n<!--\nThe remaining tests confirm the logic of the component when the service returns different values.\nThe second test validates the effect of changing the user name.\nThe third test checks that the component displays the proper message when there is no logged-in user.\n-->\n<p>두번째와 세번째 테스트 스펙은 서비스가 다른 값을 반환했을 때 컴포넌트의 로직이 제대로 동작하는지 확인하는 스펙입니다.\n두번째 스펙은 사용자의 이름을 변경한 것이 제대로 반영되는지 확인하는 것이고, 세번째 스펙은 사용자가 로그인하지 않았을 때 올바른 메시지를 표시하는지 확인하는 것입니다.</p>\n<hr>\n<a id=\"component-with-async-service\"></a>\n<!--\n### Component with async service\n-->\n<h3 id=\"비동기-서비스를-사용하는-컴포넌트\">비동기 서비스를 사용하는 컴포넌트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#비동기-서비스를-사용하는-컴포넌트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn this sample, the `AboutComponent` template hosts a `TwainComponent`.\nThe `TwainComponent` displays Mark Twain quotes.\n-->\n<p>이번 예제에서는 <code>AboutComponent</code> 템플릿 안에 <code>TwainComponent</code>가 존재합니다.\n그리고 <code>TwainComponent</code>는 Mark Twain의 명언을 표시할 것입니다.</p>\n<!--\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"template\" header=\"app/twain/twain.component.ts (template)\" linenums=\"false\">\ntemplate: `\n  &lt;p class=&quot;twain&quot;&gt;&lt;i&gt;{{quote | async}}&lt;/i&gt;&lt;/p&gt;\n  &lt;button (click)=&quot;getQuote()&quot;&gt;Next quote&lt;/button&gt;\n  &lt;p class=&quot;error&quot; *ngIf=&quot;errorMessage&quot;&gt;{{ errorMessage }}&lt;/p&gt;`,\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"template\" header=\"app/twain/twain.component.ts (템플릿)\" linenums=\"false\">\n<a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n  &#x3C;p class=\"twain\">&#x3C;i>{{quote | async}}&#x3C;/i>&#x3C;/p>\n  &#x3C;button (click)=\"getQuote()\">Next quote&#x3C;/button>\n  &#x3C;p class=\"error\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"errorMessage\">{{ errorMessage }}&#x3C;/p>`,\n\n</code-example>\n<!--\nNote that value of the component's `quote` property passes through an `AsyncPipe`.\nThat means the property returns either a `Promise` or an `Observable`.\n\nIn this example, the `TwainComponent.getQuote()` method tells you that\nthe `quote` property returns an `Observable`.\n-->\n<p>이 때 컴포넌트의 <code>quote</code> 프로퍼티는 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>로 처리됩니다.\n이 말은 프로퍼티에 <code>Promise</code>이나 <code>Observable</code> 타입의 값이 할당된다는 의미입니다.</p>\n<p>그리고 <code>TwainComponent.getQuote()</code> 메소드에서 확인할 수 있듯이, <code>quote</code> 프로퍼티가 반환하는 값은 <code>Observable</code> 타입입니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"get-quote\" header=\"app/twain/twain.component.ts (getQuote)\" linenums=\"false\">\ngetQuote() {\n  this.errorMessage = '';\n  this.quote = this.twainService.getQuote().pipe(\n    startWith('...'),\n    catchError( (err: any) => {\n      // 이번 싸이클에서 errorMessage가 한 번 할당되었기 때문에 한 싸이클 기다립니다.\n      setTimeout(() => this.errorMessage = err.message || err.toString());\n      return of('...'); // quote 프로퍼티의 값을 '...'로 재설정합니다.\n    })\n  );\n\n</code-example>\n<!--\nThe `TwainComponent` gets quotes from an injected `TwainService`.\nThe component starts the returned `Observable` with a placeholder value (`'...'`),\nbefore the service can returns its first quote.\n\nThe `catchError` intercepts service errors, prepares an error message,\nand returns the placeholder value on the success channel.\nIt must wait a tick to set the `errorMessage`\nin order to avoid updating that message twice in the same change detection cycle.\n\nThese are all features you'll want to test.\n-->\n<p><code>TwainComponent</code>의 <code>quote</code> 프로퍼티는 기본 문자열 <code>'...'</code>을 <code>Observable</code> 타입으로 제공하며, 컴포넌트가 초기화된 이후에는 의존성으로 주입된 <code>TwainService</code>에서 명언을 가져옵니다.</p>\n<p>서비스에서 에러가 발생하면 <code>catchError</code> 인터셉트 함수가 실행됩니다.\n이 함수는 화면에 표시할 에러 메시지를 준비하며, 서비스를 실행했을 때와 마찬가지로 기본 문자열을 반환합니다.\n그런데 이 때 같은 변화감지 싸이클에서 프로퍼티의 값이 두 번 변경되면 안되기 때문에 <code>errorMessage</code>에 값을 할당할 때는 한 싸이클 기다려야 합니다.</p>\n<!--\n#### Testing with a spy\n-->\n<h4 id=\"스파이로-테스트하기\">스파이로 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#스파이로-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nWhen testing a component, only the service's public API should matter.\nIn general, tests themselves should not make calls to remote servers.\nThey should emulate such calls. The setup in this `app/twain/twain.component.spec.ts` shows one way to do that:\n-->\n<p>컴포넌트를 테스트할 때는 서비스가 제공하는 public API만 신경쓰면 됩니다.\n그리고 일반적으로 테스트 코드는 리모트 서버로 보내는 HTTP 요청을 생략하고 테스트 환경 안에서 완료되었다고 처리하는 것이 좋습니다.\n<code>app/twain/twain.component.spec.ts</code> 파일에 작성된 테스트 환경 설정 코드를 봅시다:</p>\n<!--\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"setup\" header=\"app/twain/twain.component.spec.ts (setup)\" linenums=\"false\">\nbeforeEach(() =&gt; {\n  testQuote = &#39;Test Quote&#39;;\n\n  // `getQuote()` 스파이 메소드가 선언된 가짜 TwainService 객체를 정의합니다.\n  const twainService = jasmine.createSpyObj(&#39;TwainService&#39;, [&#39;getQuote&#39;]);\n  // `getQuote()` 메소드는 테스트 데이터를 Observable 형태로 즉시 반환합니다.\n  getQuoteSpy = twainService.getQuote.and.returnValue( of(testQuote) );\n\n  TestBed.configureTestingModule({\n    declarations: [ TwainComponent ],\n    providers:    [\n      { provide: TwainService, useValue: twainService }\n    ]\n  });\n\n  fixture = TestBed.createComponent(TwainComponent);\n  component = fixture.componentInstance;\n  quoteEl = fixture.nativeElement.querySelector(&#39;.twain&#39;);\n});\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"setup\" header=\"app/twain/twain.component.spec.ts (테스트 모듈 설정)\" linenums=\"false\">\nbeforeEach(() => {\n  testQuote = 'Test Quote';\n\n  // `getQuote()` 스파이 메소드가 선언된 가짜 TwainService 객체를 정의합니다.\n  const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n  // `getQuote()` 메소드는 테스트 데이터를 Observable 형태로 즉시 반환합니다.\n  getQuoteSpy = twainService.getQuote.and.returnValue( of(testQuote) );\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ TwainComponent ],\n    providers:    [\n      { provide: TwainService, useValue: twainService }\n    ]\n  });\n\n  fixture = TestBed.createComponent(TwainComponent);\n  component = fixture.componentInstance;\n  quoteEl = fixture.nativeElement.querySelector('.twain');\n});\n\n</code-example>\n<a id=\"service-spy\"></a>\n<!--\nFocus on the spy.\n-->\n<p>스파이 메소드를 정의하는 부분을 봅시다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"spy\">\n// `getQuote()` 스파이 메소드가 선언된 가짜 TwainService 객체를 정의합니다.\nconst twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n// `getQuote()` 메소드는 테스트 데이터를 Observable 형태로 즉시 반환합니다.\ngetQuoteSpy = twainService.getQuote.and.returnValue( of(testQuote) );\n\n</code-example>\n<!--\nThe spy is designed such that any call to `getQuote` receives an observable with a test quote.\nUnlike the real `getQuote()` method, this spy bypasses the server\nand returns a synchronous observable whose value is available immediately.\n\nYou can write many useful tests with this spy, even though its `Observable` is synchronous.\n-->\n<p>이 스파이 함수는 <code>getQuote</code>가 실행되었을 때 테스트 문자열을 Observable 타입으로 반환하도록 선언되었습니다.\n그리고 실제 <code>getQuote()</code> 메소드와 다르게, 이 스파이 함수는 서버로 보내는 요청을 생략하고 문자열을 즉시 반환합니다.</p>\n<p>스파이는 이것과 비슷한 상황에서도 얼마든지 활용할 수 있습니다.\n반환하는 타입이 <code>Observable</code>이며, 이 Observable이 동기로 실행되어도 문제될 것은 전혀 없습니다.</p>\n<a id=\"sync-tests\"></a>\n<!--\n#### Synchronous tests\n-->\n<h4 id=\"동기-테스트\">동기 테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#동기-테스트\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nA key advantage of a synchronous `Observable` is that\nyou can often turn asynchronous processes into synchronous tests.\n-->\n<p><code>Observable</code>을 동기 방식으로 실행하면 비동기 로직 흐름을 동기 로직 흐름 안으로 자연스럽게 합칠 수 있습니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"sync-test\">\nit('should show quote after component initialized', () => {\n  fixture.detectChanges(); // onInit()\n\n  // 스파이 메소드가 반환한 결과는 컴포넌트가 초기화된 이후에 바로 표시됩니다.\n  expect(quoteEl.textContent).toBe(testQuote);\n  expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n});\n\n</code-example>\n<!--\nBecause the spy result returns synchronously, the `getQuote()` method updates\nthe message on screen immediately _after_\nthe first change detection cycle during which Angular calls `ngOnInit`.\n\nYou're not so lucky when testing the error path.\nAlthough the service spy will return an error synchronously,\nthe component method calls `setTimeout()`.\nThe test must wait at least one full turn of the JavaScript engine before the\nvalue becomes available. The test must become _asynchronous_.\n-->\n<p>스파이 함수로 정의한 <code>getQuote()</code> 메소드는 반환값을 즉시 동기 방식으로 반환하기 때문에, Angular가 <code>ngOnInit</code>을 실행하면서 함께 실행된 첫번째 변화 감지 싸이클이 <em>끝나면</em> 이 메소드가 반환한 값을 화면에서 바로 확인할 수 있습니다.</p>\n<p>하지만 에러를 처리하려면 조금 더 신경써야 할 부분이 있습니다.\n서비스 스파이가 에러를 동기 흐름으로 반환하면 컴포넌트 메소드가 <code>setTimeout()</code>을 실행하는데, 그러면 이 테스트 스펙은 완료되기 전에 JavaScript 엔진이 한 싸이클 도는 것을 기다려야 합니다.\n결국 테스트 로직은 <em>비동기</em> 로 실행되어야 합니다.</p>\n<a id=\"fake-async\"></a>\n<!--\n#### Async test with _fakeAsync()_\n-->\n<h4 id=\"비동기로-테스트하기-fakeasync\">비동기로 테스트하기: <em>fakeAsync()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#비동기로-테스트하기-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nTo use `fakeAsync()` functionality, you need to import `zone-testing`, for details, please read [setup guide](guide/setup#appendix-test-using-fakeasyncasync).\n\nThe following test confirms the expected behavior when the service returns an `ErrorObservable`.\n-->\n<p><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>를 사용하려면 <code>zone-testing</code> 패키지들을 로드해야 합니다.\n자세한 내용은 <a href=\"guide/setup#%EB%B6%80%EB%A1%9D-fakeasyncasync-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">환경설정 가이드</a>를 참고하세요.</p>\n<p>아래 코드는 서비스가 <code>ErrorObservable</code>을 반환했을 때 정해진 로직을 제대로 실행하는지 검증하는 테스트 코드입니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"error-test\">\nit('should display error when TwainService fails', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  // 스파이 메소드가 에러를 Observable 타입으로 반환합니다.\n  getQuoteSpy.and.returnValue(\n    throwError('TwainService test failure'));\n\n  fixture.detectChanges(); // onInit()\n  // 스파이가 보내는 에러는 init이 실행된 직후에 받습니다.\n\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // 컴포넌트가 실행한 setTimeout()을 끝냅니다.\n\n  fixture.detectChanges(); // setTimeout() 안에서 변경한 errorMessage를 반영합니다.\n\n  expect(errorMessage()).toMatch(/test failure/, 'should display error');\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n}));\n\n</code-example>\n<!--\nNote that the `it()` function receives an argument of the following form.\n-->\n<p><code>it()</code> 함수에 전달하는 인자는 이런 형태입니다.</p>\n<!--\n```javascript\nfakeAsync(() => { /* test body */ })`\n```\n-->\n<code-example language=\"javascript\">\n<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => { /* 테스트 코드 */ })`\n</code-example>\n<!--\nThe `fakeAsync()` function enables a linear coding style by running the test body in a special `fakeAsync test zone`.\nThe test body appears to be synchronous.\nThere is no nested syntax (like a `Promise.then()`) to disrupt the flow of control.\n-->\n<p><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 함수를 사용하면 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> test zone</code>이 구성되기 때문에, 이 테스트 존 안에서는 코드를 콜백 스타일로 작성하지 않고 일렬로 작성해도 비동기 흐름을 처리할 수 있습니다.\n테스트 코드를 보면 동기 흐름인 것처럼 보입니다.\n더이상 코드 흐름을 제어하기 위해 <code>Promise.then()</code>과 같은 복잡한 문법을 사용할 필요가 없습니다.</p>\n<a id=\"tick\"></a>\n<!--\n#### The _tick()_ function\n-->\n<h4 id=\"tick-함수\"><em>tick()</em> 함수<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#tick-함수\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou do have to call `tick()` to advance the (virtual) clock.\n\nCalling `tick()` simulates the passage of time until all pending asynchronous activities finish.\nIn this case, it waits for the error handler's `setTimeout()`;\n\nThe `tick()` function accepts milliseconds as parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a `setTimeout(fn, 100)` in a `fakeAsync()` test, you need to use tick(100) to trigger the fn callback.\n-->\n<p><code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> 함수는 테스트환경에서 동작하는 가상의 시계를 빠르게 돌리기 위해 사용합니다.</p>\n<p><code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> 함수를 실행하면 그동안 대기중이던 비동기 작업들이 종료되는 시점까지 시간을 빠르게 돌립니다.\n그래서 이 함수를 사용하면 <code>TwainComponent.getQuote()</code> 메소드 안에 있는 <code>setTimeout()</code>이 종료된 이후에 실행되는 로직을 테스트하는 코드도 작성할 수 있습니다.</p>\n<p><code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> 함수에 인자를 전달하면 밀리초 단위로 시간을 빠르게 돌릴 수 있으며, 이 인자의 기본값은 0입니다.\n그래서 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 테스트 존 안에서 <code>setTimeout(fn, 100)</code>이라는 타이머를 정의하고 <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100)</code>을 실행하면 이 타이머를 실행할 수 있습니다.</p>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-tick\">\nit('should run timeout callback with delay after call <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> with millis', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     let called = false;\n     setTimeout(() => { called = true; }, 100);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100);\n     expect(called).toBe(true);\n   }));\n\n</code-example>\n<!--\nThe `tick()` function is one of the Angular testing utilities that you import with `TestBed`.\nIt's a companion to `fakeAsync()` and you can only call it within a `fakeAsync()` body.\n-->\n<p><code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> 함수는 Angular가 제공하는 테스트 유틸리티 중 하나이며 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>가 제공되는 <code>@angular/core/testing</code> 패키지로 제공됩니다.\n그리고 <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> 함수는 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 함수와 함께 사용해야 제대로 동작하며, <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 테스트 존 안에서 필요할 때마다 한번씩 실행해주기만 하면 됩니다.</p>\n<!--\n#### Comparing dates inside fakeAsync()\n-->\n<h4 id=\"fakeasync-안에서-날짜-비교하기\">fakeAsync() 안에서 날짜 비교하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#fakeasync-안에서-날짜-비교하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\n`fakeAsync()` simulates passage of time, which allows you to calculate the difference between dates inside `fakeAsync()`.\n-->\n<p><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 안에서는 시간이 지난 것을 조작할 수 있기 때문에 서로 다른 날짜를 비교하는 것도 가능합니다.</p>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-date\">\nit('should get Date diff correctly in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     const start = Date.now();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100);\n     const end = Date.now();\n     expect(end - start).toBe(100);\n   }));\n\n</code-example>\n<!--\n#### jasmine.clock with fakeAsync()\n-->\n<h4 id=\"fakeasync-안에서-jasmineclock-사용하기\">fakeAsync() 안에서 jasmine.clock 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#fakeasync-안에서-jasmineclock-사용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nJasmine also provides a `clock` feature to mock dates. Angular automatically runs tests that are run after\n`jasmine.clock().install()` is called inside a `fakeAsync()` method until `jasmine.clock().uninstall()` is called. `fakeAsync()` is not needed and throws an error if nested.\n\nBy default, this feature is disabled. To enable it, set a global flag before import `zone-testing`.\n\nIf you use the Angular CLI, configure this flag in `src/test.ts`.\n-->\n<p>시간을 빠르게 감는 것은 Jasmine이 제공하는 <code>clock</code>을 사용해도 됩니다.\nAngular는 <code>jasmine.clock().install()</code>이 실행되고 <code>jasmine.clock().uninstall()</code>이 실행될 때까지 실행되는 테스트 스펙을 자동으로 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 메소드 안에서 처리합니다.\n그래서 이 경우에는 따로 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 함수를 사용하지 않아도 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 함수를 사용한 것과 똑같은 효과를 낼 수 있으며, <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 함수를 사용하면 오히려 에러가 발생합니다.</p>\n<p>기본적으로 이 기능은 비활성화되어 있습니다.\n그래서 이 기능을 사용하려면 <code>zone-testing</code> 패키지를 로드하기 전에 전역 변수로 이 기능을 활성화해야 합니다.</p>\n<p>Angular CLI를 사용한다면 이 기능은 <code>src/test.ts</code>에서 활성화할 수도 있습니다.</p>\n<code-example>\n(window as any)['__zone_symbol__fakeAsyncPatchLock'] = true;\nimport 'zone.js/dist/zone-testing';\n</code-example>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-clock\">\ndescribe('use jasmine.clock()', () => {\n  // zone.js/dist/zone-testing 패키지를 로드하기 전에 __zone_symbol_fakeAsyncPatchLock 플래그 설정이 필요합니다.\n  beforeEach(() => { jasmine.clock().install(); });\n  afterEach(() => { jasmine.clock().uninstall(); });\n  it('should auto enter <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', () => {\n    // 이 코드는 <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> 테스트 존 안에서 실행됩니다.\n    // 이 때 <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()를 명시적으로 실행할 필요는 없습니다.\n    let called = false;\n    setTimeout(() => { called = true; }, 100);\n    jasmine.clock().tick(100);\n    expect(called).toBe(true);\n  });\n});\n\n</code-example>\n<!--\n#### Using the RxJS scheduler inside fakeAsync()\n-->\n<h4 id=\"fakeasync-안에서-rxjs-스케쥴러-사용하기\">fakeAsync() 안에서 RxJS 스케쥴러 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#fakeasync-안에서-rxjs-스케쥴러-사용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou can also use RxJS scheduler in `fakeAsync()` just like using `setTimeout()` or `setInterval()`, but you need to import `zone.js/dist/zone-patch-rxjs-fake-async` to patch RxJS scheduler.\n-->\n<p><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 안에서는 <code>setTimeout()</code>이나 <code>setInterval()</code>을 사용하는 것처럼 RxJS 스케쥴러를 사용할 수도 있습니다.\n하지만 이 경우에는 RxJS 스케쥴러에 패치를 적용하기 위해 <code>zone.js/dist/zone-patch-rxjs-fake-async</code> 패키지를 로드해야 합니다.</p>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-rxjs\">\nit('should get Date diff correctly in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> with rxjs scheduler', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     // rxjs 스케쥴러를 사용하기 위해 `import 'zone.js/dist/zone-patch-rxjs-fake-async'를 추가해야 합니다.\n     let result = null;\n     of ('hello').pipe(delay(1000)).subscribe(v => { result = v; });\n     expect(result).toBeNull();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(result).toBe('hello');\n\n     const start = new Date().getTime();\n     let dateDiff = 0;\n     interval(1000).pipe(take(2)).subscribe(() => dateDiff = (new Date().getTime() - start));\n\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(dateDiff).toBe(1000);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(dateDiff).toBe(2000);\n   }));\n\n</code-example>\n<!--\n#### Support more macroTasks\n-->\n<h4 id=\"매크로태스크macrotasks-활용하기\">매크로태스크(macroTasks) 활용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#매크로태스크macrotasks-활용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nBy default `fakeAsync()` supports the following `macroTasks`.\n\n- setTimeout\n- setInterval\n- requestAnimationFrame\n- webkitRequestAnimationFrame\n- mozRequestAnimationFrame\n\nIf you run other `macroTask` such as `HTMLCanvasElement.toBlob()`, `Unknown macroTask scheduled in fake async test` error will be thrown.\n-->\n<p>기본적으로 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>는 다음과 같은 매크로태스크를 지원합니다.</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>requestAnimationFrame</li>\n<li>webkitRequestAnimationFrame</li>\n<li>mozRequestAnimationFrame</li>\n</ul>\n<p>이 목록 외에 <code>HTMLCanvasElement.toBlob()</code>과 같은 매크로태스크를 사용하면 <code>Unknown macroTask scheduled in fake <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> test</code> 에러가 발생합니다.</p>\n<code-tabs>\n  <code-pane path=\"testing/src/app/shared/canvas.component.spec.ts\" header=\"src/app/shared/canvas.component.spec.ts\" linenums=\"false\">\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>, <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>, <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> } from '@angular/core/testing';\nimport { CanvasComponent } from './canvas.component';\ndescribe('CanvasComponent', () => {\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n        CanvasComponent\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    window['__zone_symbol__FakeAsyncTestMacroTask'] = [\n      {\n        source: 'HTMLCanvasElement.toBlob',\n        callbackArgs: [{ size: 200 }]\n      }\n    ];\n  });\n  it('should be able to generate blob data from canvas', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n    const fixture = TestBed.createComponent(CanvasComponent);\n    fixture.detectChanges();\n    <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n    const app = fixture.debugElement.componentInstance;\n    expect(app.blobSize).toBeGreaterThan(0);\n  }));\n});\n\n\n\n</code-pane>\n  <code-pane path=\"testing/src/app/shared/canvas.component.ts\" header=\"src/app/shared/canvas.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>, <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'sample-canvas',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: '&#x3C;canvas #sampleCanvas width=\"200\" height=\"200\">&#x3C;/canvas>'\n})\nexport class CanvasComponent implements <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n  blobSize: number;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('sampleCanvas') sampleCanvas;\n\n  constructor() { }\n\n  ngAfterViewInit() {\n    const canvas = this.sampleCanvas.nativeElement;\n    const context = canvas.getContext('2d');\n    if (context) {\n      context.clearRect(0, 0, 200, 200);\n      context.fillStyle = '#FF1122';\n      context.fillRect(0, 0, 200, 200);\n      canvas.toBlob((blob: any) => {\n        this.blobSize = blob.size;\n      });\n    }\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<!--\nIf you want to support such case, you need to define the `macroTask` you want to support in `beforeEach()`.\nFor example:\n-->\n<p>그래서 Angular가 기본으로 지원하지 않는 매크로태스크를 사용하려면 <code>beforeEach()</code> 안에 해당 매크로태스크를 직접 정의해야 합니다.</p>\n<code-example language=\"javascript\">\nbeforeEach(() => {\n  window['__zone_symbol__FakeAsyncTestMacroTask'] = [\n    {\n      source: 'HTMLCanvasElement.toBlob',\n      callbackArgs: [{ size: 200 }]\n    }\n  ];\n});\n\nit('toBlob should be able to run in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n    const canvas: HTMLCanvasElement = document.getElementById('canvas') as HTMLCanvasElement;\n    let blob = null;\n    canvas.toBlob(function(b) {\n      blob = b;\n    });\n    <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n    expect(blob.size).toBe(200);\n  })\n);\n</code-example>\n<!--\n#### Async observables\n-->\n<h4 id=\"비동기-옵저버블\">비동기 옵저버블<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#비동기-옵저버블\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou might be satisfied with the test coverage of these tests.\n\nBut you might be troubled by the fact that the real service doesn't quite behave this way.\nThe real service sends requests to a remote server.\nA server takes time to respond and the response certainly won't be available immediately\nas in the previous two tests.\n\nYour tests will reflect the real world more faithfully if you return an _asynchronous_ observable\nfrom the `getQuote()` spy like this.\n-->\n<p>지금까지 다룬 내용만으로도 테스트 코드를 작성하는 데에는 큰 문제가 없습니다.</p>\n<p>하지만 실제 서비스 클래스를 사용하다보면 지금까지 다루지 않았던 부분에서 에러가 발생할 수 있습니다.\n그리고 실제 서비스가 리모트 서버로 HTTP 요청을 보낸다면 이런 에러가 발생할 가능성이 더 높습니다.\n서버는 요청을 받고 응답을 보낼때까지 시간이 걸리기 때문에 지금까지 살펴봤던 것처럼 즉시 처리되는 로직으로는 이 응답을 처리할 수 없습니다.</p>\n<p>그래서 실제 운영 환경을 좀 더 충실하게 반영하고 싶다면, <code>getQuote()</code> 스파이 함수를 다음과 같이 정의해야 합니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"async-setup\">\n// `asyncData()` 헬퍼 함수를 사용해서 옵저버블을 비동기로 처리합니다.\ngetQuoteSpy.and.returnValue(asyncData(testQuote));\n\n</code-example>\n<!--\n#### Async observable helpers\n-->\n<h4 id=\"비동기-옵저버블-헬퍼\">비동기 옵저버블 헬퍼<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#비동기-옵저버블-헬퍼\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe async observable was produced by an `asyncData` helper\nThe `asyncData` helper is a utility function that you'll have to write yourself.\nOr you can copy this one from the sample code.\n-->\n<p>위 코드에서는 옵저버블을 비동기로 생성하기 위해 <code>asyncData</code> 헬퍼 함수를 사용했습니다.\n이 때 <code>asyncData</code>는 유틸리티 함수인데, 필요한 용도에 맞게 직접 정의하거나 예제 코드를 복사해서 사용하면 됩니다.</p>\n<code-example path=\"testing/src/testing/async-observable-helpers.ts\" region=\"async-data\" header=\"testing/async-observable-helpers.ts\">\n/** JS 실행 싸이클이 한 번 지난 뒤에 Observable을 보내고 바로 종료합니다. */\nexport function asyncData&#x3C;T>(data: T) {\n  return defer(() => Promise.resolve(data));\n}\n\n</code-example>\n<!--\nThis helper's observable emits the `data` value in the next turn of the JavaScript engine.\n\nThe [RxJS `defer()` operator](http://reactivex.io/documentation/operators/defer.html) returns an observable.\nIt takes a factory function that returns either a promise or an observable.\nWhen something subscribes to _defer_'s observable,\nit adds the subscriber to a new observable created with that factory.\n\nThe `defer()` operator transforms the `Promise.resolve()` into a new observable that,\nlike `HttpClient`, emits once and completes.\nSubscribers are unsubscribed after they receive the data value.\n\nThere's a similar helper for producing an async error.\n-->\n<p>이 헬퍼 함수는 JavaScript 실행 싸이클이 한 번 지난 뒤에 <code>data</code>로 받은 값을 옵저버블로 보내는 함수입니다.</p>\n<p>그리고 이 때 <a href=\"http://reactivex.io/documentation/operators/defer.html\">RxJS <code>defer()</code> 연산자</a>가 사용되었는데, 이 연산자는 Promise나 Observable이 종료되는 것을 기다리는 연산자입니다.\n이제 <em>defer</em> 옵저버블을 누군가가 구독하면 새로운 옵저버블이 생성되면서 팩토리 함수가 실행됩니다.</p>\n<p>이 코드에서 <code>defer()</code> 연산자는 <code>Promise.resolve()</code>를 옵저버블로 변환하는데, 이 동작은 Angular <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>와 비슷하게 한 번 데이터를 보낸 뒤에 바로 종료됩니다.\n그래서 <code>asyncData()</code>를 구독한 쪽에서는 데이터를 받은 후에 바로 옵저버블 구독을 해지해도 됩니다.</p>\n<p>비동기 에러 옵저버블도 비슷하게 처리할 수 있습니다.</p>\n<code-example path=\"testing/src/testing/async-observable-helpers.ts\" region=\"async-error\">\n/** JS 실행 싸이클이 한 번 지난 뒤에 에러 Observable을 보내고 바로 종료합니다. */\nexport function asyncError&#x3C;T>(errorObject: any) {\n  return defer(() => Promise.reject(errorObject));\n}\n\n</code-example>\n<!--\n#### More async tests\n-->\n<h4 id=\"비동기-테스트-활용-예제\">비동기 테스트 활용 예제<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#비동기-테스트-활용-예제\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nNow that the `getQuote()` spy is returning async observables,\nmost of your tests will have to be async as well.\n\nHere's a `fakeAsync()` test that demonstrates the data flow you'd expect\nin the real world.\n-->\n<p>이제 <code>getQuote()</code> 스파이 함수가 실행되면 옵저버블을 비동기로 반환하기 때문에 테스트하는 코드가 비동기로 동작해도 잘 실행됩니다.</p>\n<p>그리고 실제 동작 환경을 좀 더 반영해서 데이터 흐름을 테스트하려면 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>를 다음과 같이 활용할 수도 있습니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"fake-async-test\">\nit('should show quote after getQuote (<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>)', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // 옵저버블을 실행합니다.\n  fixture.detectChanges(); // 화면을 갱신합니다.\n\n  expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n  expect(errorMessage()).toBeNull('should not show error');\n}));\n\n</code-example>\n<!--\nNotice that the quote element displays the placeholder value (`'...'`) after `ngOnInit()`.\nThe first quote hasn't arrived yet.\n\nTo flush the first quote from the observable, you call `tick()`.\nThen call `detectChanges()` to tell Angular to update the screen.\n\nThen you can assert that the quote element displays the expected text.\n-->\n<p><code>ngOnInit()</code>이 실행된 직후에 화면에 표시되는 문자열은 <code>'...'</code>입니다.\n왜냐하면 첫번째 요청이 아직 처리되지 않았기 때문입니다.</p>\n<p><code>ngOnInit()</code>에서 보낸 요청을 처리하려면 <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>을 실행하면 됩니다.\n그리고 화면을 갱신하기 위해 <code><a href=\"api/core/testing/ComponentFixture#detectChanges\" class=\"code-anchor\">detectChanges()</a></code> 함수도 실행했습니다.</p>\n<p>이제 옵저버블로 받은 데이터가 화면에 제대로 표시되었는지 확인하기만 하면 됩니다.</p>\n<a id=\"async\"></a>\n<!--\n#### Async test with _async()_\n-->\n<h4 id=\"async-로-비동기-테스트하기\"><em>async()</em> 로 비동기 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#async-로-비동기-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nTo use `async()` functionality, you need to import `zone-testing`, for details, please read [setup guide](guide/setup#appendix-test-using-fakeasyncasync).\n\nThe `fakeAsync()` utility function has a few limitations.\nIn particular, it won't work if the test body makes an `XHR` call.\n\n`XHR` calls within a test are rare so you can generally stick with `fakeAsync()`.\nBut if you ever do need to call `XHR`, you'll want to know about `async()`.\n-->\n<p><code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 기능을 사용하려면 <code>zone-testing</code> 패키지를 로드해야 합니다.\n자세한 내용은 <a href=\"guide/setup#%EB%B6%80%EB%A1%9D-fakeasyncasync-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">환경설정 가이드</a>를 참고하세요.</p>\n<p><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 유틸리티 함수는 몇가지 제약이 있습니다.\n예를 들어, 테스트 코드에서 <code>XHR</code> 요청을 보낸다면 이 테스트 스펙은 제대로 실행되지 않습니다.</p>\n<p>테스트 코드에서 <code>XHR</code> 요청을 보내는 경우는 거의 없기 때문에 웬만하면 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>만 사용해도 테스트 코드를 작성할 수 있습니다.\n하지만 실제로 <code>XHR</code> 요청을 보내야 한다면 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>를 사용해야 합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe `TestBed.compileComponents()` method (see [below](#compile-components)) calls `XHR`\nto read external template and css files during \"just-in-time\" compilation.\nWrite tests that call `compileComponents()` with the `async()` utility.\n-->\n<p><a href=\"guide/testing#compile-components\">아래</a>에서 다루는 <code>TestBed.compileComponents()</code> 메소드는 JiT 컴파일러로 처리되기 때문에 외부 템플릿 파일과 외부 CSS 파일을 읽기 위해 <code>XHR</code> 요청을 보냅니다.\n그래서 테스트 코드에서 <code>compileComponents()</code>를 사용한다면 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>를 꼭 사용해야 합니다.</p>\n</div>\n<!--\nHere's the previous `fakeAsync()` test, re-written with the `async()` utility.\n-->\n<p>이전에 작성했던 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 예제를 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 방식으로 작성하면 이렇습니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"async-test\">\nit('should show quote after getQuote (<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>)', <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  fixture.whenStable().then(() => { // 비동기 getQuote를 기다립니다.\n    fixture.detectChanges();        // 화면을 갱신합니다.\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n  });\n}));\n\n</code-example>\n<!--\nThe `async()` utility hides some asynchronous boilerplate by arranging for the tester's code\nto run in a special _async test zone_.\nYou don't need to pass Jasmine's `done()` into the test and call `done()` because it is `undefined` in promise or observable callbacks.\n\nBut the test's asynchronous nature is revealed by the call to `fixture.whenStable()`,\nwhich breaks the linear flow of control.\n\nWhen using an `intervalTimer()` such as `setInterval()` in `async()`, remember to cancel the timer with `clearInterval()` after the test, otherwise the `async()` never ends.\n-->\n<p><code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 함수를 사용하면 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>를 사용하면서 <em>비동기 테스트 존(async test zone)</em> 에 사용했던 비동기 처리 관련 함수들을 일부 생략할 수 있습니다.\n그리고 Jasmine이 제공하는 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code> 함수를 실행할 필요도 없습니다.</p>\n<p>대신 테스트를 정상적으로 종료할 수 있도록 <code>fixture.whenStable()</code>이 비동기 흐름을 처리합니다.</p>\n<p>다만, <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 안에서 <code>intervalTimer()</code>나 <code>setInterval()</code>을 사용한다면 이 타이머를 종료하거나 <code>clearInterval()</code>을 실행해야 합니다.\n타이머를 종료하지 않으면 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>도 종료되지 않습니다.</p>\n<a id=\"when-stable\"></a>\n<h4 id=\"whenstable\"><em>whenStable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#whenstable\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe test must wait for the `getQuote()` observable to emit the next quote.\nInstead of calling `tick()`, it calls `fixture.whenStable()`.\n\nThe `fixture.whenStable()` returns a promise that resolves when the JavaScript engine's\ntask queue becomes empty.\nIn this example, the task queue becomes empty when the observable emits the first quote.\n\nThe test resumes within the promise callback, which calls `detectChanges()` to\nupdate the quote element with the expected text.\n-->\n<p>이 테스트 스펙은 <code>getQuote()</code>로 받은 옵저버블이 다음 스트림을 전달할 때까지 기다려야 합니다.\n그리고 이 코드에서는 <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>을 실행하는 대신 <code>fixture.whenStable()</code>을 실행했습니다.</p>\n<p><code>fixture.whenStable()</code>은 JavaScript 엔진의 태스크 큐가 비어있을 때 Promise를 반환합니다.\n그래서 이 예제에서는 옵저버블이 첫번째 문장을 전달한 뒤에 태스크 큐가 비어있게 됩니다.</p>\n<p>그러면 Promise 콜백으로 테스트가 이어집니다.\n이 콜백에서는 화면을 갱신하기 위해 <code><a href=\"api/core/testing/ComponentFixture#detectChanges\" class=\"code-anchor\">detectChanges()</a></code>를 실행하고, 그 이후에 화면에 표시된 메시지가 예상한 값이 맞는지 확인합니다.</p>\n<a id=\"jasmine-done\"></a>\n<h4 id=\"jasmine-done\">Jasmine <em>done()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#jasmine-done\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nWhile the `async()` and `fakeAsync()` functions greatly\nsimplify Angular asynchronous testing,\nyou can still fall back to the traditional technique\nand pass `it` a function that takes a\n[`done` callback](https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support).\n\nYou can't call `done()` in `async()` or `fakeAsync()` functions, because the `done parameter`\nis `undefined`.\n\nNow you are responsible for chaining promises, handling errors, and calling `done()` at the appropriate moments.\n\nWriting test functions with `done()`, is more cumbersome than `async()`and `fakeAsync()`.\nBut it is occasionally necessary when code involves the `intervalTimer()` like `setInterval`.\n\nHere are two more versions of the previous test, written with `done()`.\nThe first one subscribes to the `Observable` exposed to the template by the component's `quote` property.\n-->\n<p>Angular가 제공하는 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>와 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>를 활용하면 비동기 로직을 아주 간단하게 테스트할 수 있습니다.\n하지만 이 함수들을 사용해도 실패하는 로직이 있다면 <code>it</code> 함수를 <a href=\"https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\"><code>done</code> 콜백</a>과 함께 사용하면 됩니다.</p>\n<p>다만, <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>와 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> 기능을 사용하면서 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>를 함께 사용할 수는 없습니다.\n두 함수를 사용하면 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a></code> 이 <code>undefined</code>로 전달됩니다.</p>\n<p>이제 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>을 사용하면 직접 Promise를 체이닝하거나 에러를 처리해야하고, 적절한 시점에 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>을 실행해야 합니다.</p>\n<p>그래서 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>을 사용해서 테스트하는 것은 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>나 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>를 사용했던 것보다 조금 더 번거롭습니다.\n하지만 <code>setInterval</code>이나 <code>intervalTimer()</code>을 활용하는 로직은 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>을 사용해야만 합니다.</p>\n<p>위에서 작성했던 테스트를 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>을 사용하는 방식으로 변경하면 다음과 같이 작성할 수 있습니다.\n이 코드에서는 <code>Observable</code>을 구독한 뒤에 실행되는 콜백에서 컴포넌트를 테스트하고 <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>을 실행합니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"quote-done-test\" linenums=\"false\">\nit('should show last quote (quote <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>)', (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n  fixture.detectChanges();\n\n  component.quote.pipe( last() ).subscribe(() => {\n    fixture.detectChanges(); // 화면을 갱신합니다.\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n    <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n  });\n});\n\n</code-example>\n<!--\nThe RxJS `last()` operator emits the observable's last value before completing, which will be the test quote.\nThe `subscribe` callback calls `detectChanges()` to\nupdate the quote element with the test quote, in the same manner as the earlier tests.\n\nIn some tests, you're more interested in how an injected service method was called and what values it returned,\nthan what appears on screen.\n\nA service spy, such as the `qetQuote()` spy of the fake `TwainService`,\ncan give you that information and make assertions about the state of the view.\n-->\n<p>RxJS <code>last()</code> 연산자는 옵저버블이 종료되는 시점에 마지막으로 전달된 데이터를 반환하기 때문에 옵저버블 콜백은 테스트 문장을 받아온 이후에 실행됩니다.\n그리고 <code>subscribe</code> 콜백에서는 <code><a href=\"api/core/testing/ComponentFixture#detectChanges\" class=\"code-anchor\">detectChanges()</a></code>를 실행해서 이 문장으로 화면을 갱신합니다.\n이 내용은 이전에 작성했던 내용과 같습니다.</p>\n<p>조금 더 자세히 들어가면 컴포넌트로 주입되는 서비스가 어떻게 실행되는지, 어떤 값을 반환해서 이 내용이 화면에 반영되는지 궁금해질 수도 있습니다.</p>\n<p><code>TwainService</code>에 만든 <code>getQuote()</code> 함수는 스파이로 만든 함수입니다.\n그래서 이 스파이를 직접 활용하면 다음과 같은 테스트 코드를 작성할 수도 있습니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"spy-done-test\" linenums=\"false\">\nit('should show quote after getQuote (spy <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>)', (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n  fixture.detectChanges();\n\n  // 컴포넌트가 받는 문자열은 스파이가 마지막으로 실행되었을 때 반환하는 값으로 참조할 수도 있습니다.\n  getQuoteSpy.calls.mostRecent().returnValue.subscribe(() => {\n    fixture.detectChanges(); // 화면을 갱신합니다.\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n    <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n  });\n});\n\n</code-example>\n<hr>\n<a id=\"marble-testing\"></a>\n<!--\n### Component marble tests\n-->\n<h3 id=\"컴포넌트-마블marble-테스트\">컴포넌트 마블(marble) 테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#컴포넌트-마블marble-테스트\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe previous `TwainComponent` tests simulated an asynchronous observable response\nfrom the `TwainService` with the `asyncData` and `asyncError` utilities.\n\nThese are short, simple functions that you can write yourself.\nUnfortunately, they're too simple for many common scenarios.\nAn observable often emits multiple times, perhaps after a significant delay.\nA component may coordinate multiple observables\nwith overlapping sequences of values and errors.\n\n**RxJS marble testing** is a great way to test observable scenarios,\nboth simple and complex.\nYou've likely seen the [marble diagrams](http://rxmarbles.com/)\nthat illustrate how observables work.\nMarble testing uses a similar marble language to\nspecify the observable streams and expectations in your tests.\n\nThe following examples revisit two of the `TwainComponent` tests\nwith marble testing.\n\nStart by installing the `jasmine-marbles` npm package.\nThen import the symbols you need.\n-->\n<p>위에서 살펴본 <code>TwainComponent</code> 테스트 코드는 <code>TwainService</code>가 전달하는 옵저버블을 처리하기 위해 <code>asyncData</code>와 <code>asyncError</code> 기능을 활용했습니다.</p>\n<p>이 코드는 아주 간단하기 때문에 조금만 익숙해지면 금방 작성할 수 있습니다.\n하지만 이런 방식으로 모든 시나리오를 처리할 수는 없습니다.\n옵저버블은 여러번 데이터를 보내기도 하는데, 이 때 약간 딜레이가 있을 수도 있습니다.\n그리고 컴포넌트가 옵저버블 여러개를 복잡한 순서로 조작하면서 이 옵저버블들이 전달하는 값과 에러를 처리해야 할 수도 있습니다.</p>\n<p><strong>RxJS 마블 테스트는</strong> 옵저버블을 시나리오 방식으로 테스트하는 방법입니다.\n옵저버블이 복잡하거나 단순한 것과는 관계없이, 일관된 방법으로 옵저버블이 실행되는 시나리오를 검증할 수 있습니다.\n<a href=\"http://rxmarbles.com/\">마블 다이어그램</a>도 RxJS 마블 테스트 방법 중 하나입니다.\n마블 테스트 로직은 기존에 옵저버블 스트림을 처리하고 검사했던 로직과 비슷합니다.</p>\n<p>이제부터는 <code>TwainComponent</code>에 마블 테스트를 적용하는 방법에 대해 알아봅시다.</p>\n<p>마블 테스트 로직을 작성하려면 <code>jasmine-marbles</code> npm 패키지를 설치해야 합니다.\n그리고 이 패키지에서 다음 심볼들을 로드합니다.</p>\n<!--\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"import-marbles\" header=\"app/twain/twain.component.marbles.spec.ts (import marbles)\" linenums=\"false\">\nimport { cold, getTestScheduler } from &#39;jasmine-marbles&#39;;\n\n</code-example>\n-->\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"import-marbles\" header=\"app/twain/twain.component.marbles.spec.ts (심볼 로드하기)\" linenums=\"false\">\nimport { cold, getTestScheduler } from 'jasmine-marbles';\n\n</code-example>\n<!--\nHere's the complete test for getting a quote:\n-->\n<p>그리고 테스트 코드는 이렇게 작성합니다:</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"get-quote-test\" linenums=\"false\">\nit('should show quote after getQuote (marbles)', () => {\n  // 옵저버블은 약간 지연된 후 테스트 문장을 전달하고 종료됩니다.\n  const q$ = cold('---x|', { x: testQuote });\n  getQuoteSpy.and.returnValue( q$ );\n\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  getTestScheduler().flush(); // 옵저버블을 실행합니다.\n\n  fixture.detectChanges(); // 화면을 갱신합니다.\n\n  expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n  expect(errorMessage()).toBeNull('should not show error');\n});\n\n</code-example>\n<!--\nNotice that the Jasmine test is synchronous. There's no `fakeAsync()`.\nMarble testing uses a test scheduler to simulate the passage of time\nin a synchronous test.\n\nThe beauty of marble testing is in the visual definition of the observable streams.\nThis test defines a [_cold_ observable](#cold-observable) that waits\nthree [frames](#marble-frame) (`---`),\nemits a value (`x`), and completes (`|`).\nIn the second argument you map the value marker (`x`) to the emitted value (`testQuote`).\n-->\n<p>Jasmine 테스트 로직은 동기 방식으로 실행됩니다.\n<code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>와 같은 것은 없습니다.\n대신 마블 테스트는 비동기 로직을 실행하기 위해 시간을 조작할 때 테스트 스케쥴러(test scheduler)를 사용합니다.</p>\n<p>마블 테스트는 옵저버블 스트림을 시각적으로 정의할 수 있다는 점이 가장 좋습니다.\n이 테스트에서는 <a href=\"guide/testing#cold-observable\"><em>콜드(cold)</em> 옵저버블</a>을 사용하며, 이 옵저버블은 3 <a href=\"guide/testing#marble-frame\">프레임</a>을 기다린 후에(<code>---</code>) 데이터를 보내고(<code>x</code>) 종료합니다(<code>|</code>).\n이 때 <code>cold</code> 옵저버블의 두 번째로 전달하는 인자는 실제 값(<code>testQuote</code>)과 데이터 스트림을 연결하는 값 마커(value marker, <code>x</code>)입니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"test-quote-marbles\" linenums=\"false\">\nconst q$ = cold('---x|', { x: testQuote });\n\n</code-example>\n<!--\nThe marble library constructs the corresponding observable, which the\ntest sets as the `getQuote` spy's return value.\n\nWhen you're ready to activate the marble observables,\nyou tell the `TestScheduler` to _flush_ its queue of prepared tasks like this.\n-->\n<p>그 다음에는 이 옵저버블이 <code>getQuote</code> 스파이와 연결되어 값을 반환할 수 있도록 설정합니다.</p>\n<p>마블 옵저버블을 준비한 후에 <code>TestScheduler</code>의 <code><a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a></code>를 실행하면 미리 정의한 대로 옵저버블이 실행됩니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"test-scheduler-flush\" linenums=\"false\">\ngetTestScheduler().flush(); // 옵저버블을 실행합니다.\n\n</code-example>\n<!--\nThis step serves a purpose analogous to `tick()` and `whenStable()` in the\nearlier `fakeAsync()` and `async()` examples.\nThe balance of the test is the same as those examples.\n-->\n<p>이 코드는 이전에 다뤘던 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>와 <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> 예제에서 <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>과 <code>whenStable()</code>을 사용했던 것과 비슷하게 동작합니다.</p>\n<p>나머지 코드는 이전에 살펴봤던 내용과 같습니다.</p>\n<!--\n#### Marble error testing\n-->\n<h4 id=\"마블-테스트에서-에러-처리하기\">마블 테스트에서 에러 처리하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#마블-테스트에서-에러-처리하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nHere's the marble testing version of the `getQuote()` error test.\n-->\n<p>아래 코드는 <code>getQuote</code> 에러 테스트 코드를 마블 테스트 방식으로 작성한 코드입니다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"error-test\" linenums=\"false\">\nit('should display error when TwainService fails', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  // 옵저버블은 약간 지연된 후 에러를 전달하고 종료됩니다.\n  const q$ = cold('---#|', null, new Error('TwainService test failure'));\n  getQuoteSpy.and.returnValue( q$ );\n\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  getTestScheduler().flush(); // 옵저버블을 실행합니다.\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();                     // 컴포넌트가 사용하는 setTimeout()을 처리합니다.\n  fixture.detectChanges();    // 화면을 갱신합니다.\n\n  expect(errorMessage()).toMatch(/test failure/, 'should display error');\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n}));\n\n</code-example>\n<!--\nIt's still an async test, calling `fakeAsync()` and `tick()`, because the component itself\ncalls `setTimeout()` when processing errors.\n\nLook at the marble observable definition.\n-->\n<p>컴포넌트는 에러를 처리할 때 <code>setTimeout()</code>을 사용하기 때문에 이 코드는 <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>와 <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>를 사용해서 비동기로 처리되어야 합니다.</p>\n<p>이 때 마블 옵저버블을 어떻게 선언하는지 봅시다.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"error-marbles\" linenums=\"false\">\nconst q$ = cold('---#|', null, new Error('TwainService test failure'));\n\n</code-example>\n<!--\nThis is a _cold_ observable that waits three frames and then emits an error,\nThe hash (`#`) indicates the timing of the error that is specified in the third argument.\nThe second argument is null because the observable never emits a value.\n-->\n<p>이 코드에서 정의하는 <em>콜드</em> 옵저버블은 3 프레임을 기다린 후 에러를 보내는데, 에러는 세번째 인자로 전달하며, 이 에러는 해시(<code>#</code>)가 사용된 시점에 전달됩니다.\n그리고 이 옵저버블은 데이터를 전달하지 않기 때문에 두번째 인자는 null로 지정했습니다.</p>\n<!--\n#### Learn about marble testing\n-->\n<h4 id=\"마블-테스트-더-알아보기\">마블 테스트 더 알아보기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#마블-테스트-더-알아보기\"><i class=\"material-icons\">link</i></a></h4>\n<a id=\"marble-frame\"></a>\n<!--\nA _marble frame_ is a virtual unit of testing time.\nEach symbol (`-`, `x`, `|`, `#`) marks the passing of one frame.\n-->\n<p>마블 테스트에서 시간을 표현하는 단위를 <em>마블 프레임(marble frame)</em> 이라고 하며, 각 심볼(<code>-</code>, <code>x</code>, <code>|</code>, <code>#</code>) 하나는 한 프레임을 의미합니다.</p>\n<a id=\"cold-observable\"></a>\n<!--\nA _cold_ observable doesn't produce values until you subscribe to it.\nMost of your application observables are cold.\nAll [_HttpClient_](guide/http) methods return cold observables.\n\nA _hot_ observable is already producing values _before_ you subscribe to it.\nThe [_Router.events_](api/router/Router#events) observable,\nwhich reports router activity, is a _hot_ observable.\n\nRxJS marble testing is a rich subject, beyond the scope of this guide.\nLearn about it on the web, starting with the\n[official documentation](https://github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md).\n-->\n<p><em>콜드(cold)</em> 옵저버블은 누군가가 구독하기 전까지는 데이터를 생성하지 않습니다.\n일반적으로 사용하는 옵저버블이 콜드 옵저버블이며, <a href=\"guide/http\"><em>HttpClient</em></a> 메소드가 반환하는 옵저버블도 모두 콜드 옵저버블입니다.</p>\n<p>반면에, <em>핫(hot)</em> 옵저버블은 누군가가 구독하지 <em>않아도</em> 데이터를 생성합니다.\n라우터의 동작을 확인할 때 사용하는 <a href=\"api/router/Router#events\"><em>Router 이벤트</em></a>가 <em>핫</em> 옵저버블입니다.</p>\n<p>RxJS 마블 테스트는 더 다양하게 활용할 수 있지만, 이 내용은 이 가이드 문서가 다루는 범위를 넘어서는 내용입니다.\nRxJS 마블 테스트에 대해 더 자세하게 알아보려면 <a href=\"https://github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md\">공식 문서</a>를 참고하세요.</p>\n<hr>\n<a id=\"component-with-input-output\"></a>\n<h3 id=\"component-with-inputs-and-outputs\">Component with inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-with-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3>\n<p>A component with inputs and outputs typically appears inside the view template of a host component.\nThe host uses a property binding to set the input property and an event binding to\nlisten to events raised by the output property.</p>\n<p>The testing goal is to verify that such bindings work as expected.\nThe tests should set input values and listen for output events.</p>\n<p>The <code>DashboardHeroComponent</code> is a tiny example of a component in this role.\nIt displays an individual hero provided by the <code>DashboardComponent</code>.\nClicking that hero tells the <code>DashboardComponent</code> that the user has selected the hero.</p>\n<p>The <code>DashboardHeroComponent</code> is embedded in the <code>DashboardComponent</code> template like this:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.html\" region=\"dashboard-hero\" header=\"app/dashboard/dashboard.component.html (excerpt)\" linenums=\"false\">\n&#x3C;dashboard-hero *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"  class=\"col-1-4\"\n  [hero]=hero  (selected)=\"gotoDetail($event)\" >\n&#x3C;/dashboard-hero>\n\n</code-example>\n<p>The <code>DashboardHeroComponent</code> appears in an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater, which sets each component's <code>hero</code> input property\nto the looping value and listens for the component's <code>selected</code> event.</p>\n<p>Here's the component's full definition:</p>\n<a id=\"dashboard-hero-component\"></a>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.ts\" region=\"component\" header=\"app/dashboard/dashboard-hero.component.ts (component)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'dashboard-hero',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;div (click)=\"click()\" class=\"hero\">\n      {{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n    &#x3C;/div>`,\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: [ './dashboard-hero.component.css' ]\n})\nexport class DashboardHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() selected = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Hero>();\n  click() { this.selected.emit(this.hero); }\n}\n\n</code-example>\n<p>While testing a component this simple has little intrinsic value, it's worth knowing how.\nYou can use one of these approaches:</p>\n<ul>\n<li>Test it as used by <code>DashboardComponent</code>.</li>\n<li>Test it as a stand-alone component.</li>\n<li>Test it as used by a substitute for <code>DashboardComponent</code>.</li>\n</ul>\n<p>A quick look at the <code>DashboardComponent</code> constructor discourages the first approach:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"ctor\" header=\"app/dashboard/dashboard.component.ts (constructor)\" linenums=\"false\">\nconstructor(\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private heroService: HeroService) {\n}\n\n</code-example>\n<p>The <code>DashboardComponent</code> depends on the Angular router and the <code>HeroService</code>.\nYou'd probably have to replace them both with test doubles, which is a lot of work.\nThe router seems particularly challenging.</p>\n<div class=\"alert is-helpful\">\n<p>The <a href=\"guide/testing#routing-component\">discussion below</a> covers testing components that require the router.</p>\n</div>\n<p>The immediate goal is to test the <code>DashboardHeroComponent</code>, not the <code>DashboardComponent</code>,\nso, try the second and third options.</p>\n<a id=\"dashboard-standalone\"></a>\n<h4 id=\"test-dashboardherocomponent-stand-alone\">Test <em>DashboardHeroComponent</em> stand-alone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-dashboardherocomponent-stand-alone\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here's the meat of the spec file setup.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"setup\" header=\"app/dashboard/dashboard-hero.component.spec.ts (setup)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ DashboardHeroComponent ]\n})\nfixture = TestBed.createComponent(DashboardHeroComponent);\ncomp    = fixture.componentInstance;\n\n// find the hero's <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> and element\nheroDe  = fixture.debugElement.query(By.css('.hero'));\nheroEl = heroDe.nativeElement;\n\n// mock the hero supplied by the parent component\nexpectedHero = { id: 42, name: 'Test Name' };\n\n// simulate the parent setting the input property with that hero\ncomp.hero = expectedHero;\n\n// <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\nfixture.detectChanges();\n\n</code-example>\n<p>Note how the setup code assigns a test hero (<code>expectedHero</code>) to the component's <code>hero</code> property,\nemulating the way the <code>DashboardComponent</code> would set it\nvia the property binding in its repeater.</p>\n<p>The following test verifies that the hero name is propagated to the template via a binding.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"name-test\">\nit('should display hero name in uppercase', () => {\n  const expectedPipedName = expectedHero.name.toUpperCase();\n  expect(heroEl.textContent).toContain(expectedPipedName);\n});\n\n</code-example>\n<p>Because the <a href=\"guide/testing#dashboard-hero-component\">template</a> passes the hero name through the Angular <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code>,\nthe test must match the element value with the upper-cased name.</p>\n<div class=\"alert is-helpful\">\n<!--\nThis small test demonstrates how Angular tests can verify a component's visual\nrepresentation&mdash;something not possible with\n[component class tests](#component-class-testing)&mdash;at\nlow cost and without resorting to much slower and more complicated end-to-end tests.\n-->\n<p>This small test demonstrates how Angular tests can verify a component's visual\nrepresentation—something not possible with\n<a href=\"guide/testing#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\">component class tests</a>—at\nlow cost and without resorting to much slower and more complicated end-to-end tests.</p>\n</div>\n<h4 id=\"clicking\">Clicking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#clicking\"><i class=\"material-icons\">link</i></a></h4>\n<p>Clicking the hero should raise a <code>selected</code> event that\nthe host component (<code>DashboardComponent</code> presumably) can hear:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test\">\nit('should raise selected event when clicked (triggerEventHandler)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  heroDe.triggerEventHandler('click', null);\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<p>The component's <code>selected</code> property returns an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich looks like an RxJS synchronous <code>Observable</code> to consumers.\nThe test subscribes to it <em>explicitly</em> just as the host component does <em>implicitly</em>.</p>\n<p>If the component behaves as expected, clicking the hero's element\nshould tell the component's <code>selected</code> property to emit the <code>hero</code> object.</p>\n<p>The test detects that event through its subscription to <code>selected</code>.</p>\n<a id=\"trigger-event-handler\"></a>\n<h4 id=\"triggereventhandler\"><em>triggerEventHandler</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#triggereventhandler\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>heroDe</code> in the previous test is a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> that represents the hero <code>&#x3C;div></code>.</p>\n<p>It has Angular properties and methods that abstract interaction with the native element.\nThis test calls the <code>DebugElement.triggerEventHandler</code> with the \"click\" event name.\nThe \"click\" event binding responds by calling <code>DashboardHeroComponent.click()</code>.</p>\n<p>The Angular <code>DebugElement.triggerEventHandler</code> can raise <em>any data-bound event</em> by its <em>event name</em>.\nThe second parameter is the event object passed to the handler.</p>\n<p>The test triggered a \"click\" event with a <code>null</code> event object.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"trigger-event-handler\">\nheroDe.triggerEventHandler('click', null);\n\n</code-example>\n<p>The test assumes (correctly in this case) that the runtime\nevent handler—the component's <code>click()</code> method—doesn't\ncare about the event object.</p>\n<div class=\"alert is-helpful\">\n<p>Other handlers are less forgiving. For example, the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>\ndirective expects an object with a <code>button</code> property\nthat identifies which mouse button (if any) was pressed during the click.\nThe <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive throws an error if the event object is missing.</p>\n</div>\n<h4 id=\"click-the-element\">Click the element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#click-the-element\"><i class=\"material-icons\">link</i></a></h4>\n<p>The following test alternative calls the native element's own <code>click()</code> method,\nwhich is perfectly fine for <em>this component</em>.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test-2\">\nit('should raise selected event when clicked (element.click)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  heroEl.click();\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<a id=\"click-helper\"></a>\n<h4 id=\"click-helper\"><em>click()</em> helper<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#click-helper\"><i class=\"material-icons\">link</i></a></h4>\n<p>Clicking a button, an anchor, or an arbitrary HTML element is a common test task.</p>\n<p>Make that consistent and easy by encapsulating the <em>click-triggering</em> process\nin a helper such as the <code>click()</code> function below:</p>\n<code-example path=\"testing/src/testing/index.ts\" region=\"click-event\" header=\"testing/index.ts (click helper)\" linenums=\"false\">\n/** Button events to pass to `DebugElement.triggerEventHandler` for <a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a> event handler */\nexport const ButtonClickEvents = {\n   left:  { button: 0 },\n   right: { button: 2 }\n};\n\n/** Simulate element click. Defaults to mouse left-button click event. */\nexport function click(el: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> | HTMLElement, eventObj: any = ButtonClickEvents.left): void {\n  if (el instanceof HTMLElement) {\n    el.click();\n  } else {\n    el.triggerEventHandler('click', eventObj);\n  }\n}\n\n</code-example>\n<p>The first parameter is the <em>element-to-click</em>. If you wish, you can pass a\ncustom event object as the second parameter. The default is a (partial)\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\">left-button mouse event object</a>\naccepted by many handlers including the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive.</p>\n<div class=\"alert is-important\">\n<p>The <code>click()</code> helper function is <strong>not</strong> one of the Angular testing utilities.\nIt's a function defined in <em>this guide's sample code</em>.\nAll of the sample tests use it.\nIf you like it, add it to your own collection of helpers.</p>\n</div>\n<p>Here's the previous test, rewritten using the click helper.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test-3\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test with click helper)\">\nit('should raise selected event when clicked (click helper)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe(hero => selectedHero = hero);\n\n  click(heroDe); // click helper with <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>\n  click(heroEl); // click helper with native element\n\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<hr>\n<a id=\"component-inside-test-host\"></a>\n<h3 id=\"component-inside-a-test-host\">Component inside a test host<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-inside-a-test-host\"><i class=\"material-icons\">link</i></a></h3>\n<p>The previous tests played the role of the host <code>DashboardComponent</code> themselves.\nBut does the <code>DashboardHeroComponent</code> work correctly when properly data-bound to a host component?</p>\n<p>You could test with the actual <code>DashboardComponent</code>.\nBut doing so could require a lot of setup,\nespecially when its template features an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater,\nother components, layout HTML, additional bindings,\na constructor that injects multiple services,\nand it starts interacting with those services right away.</p>\n<p>Imagine the effort to disable these distractions, just to prove a point\nthat can be made satisfactorily with a <em>test host</em> like this one:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test host)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;dashboard-hero\n      [hero]=\"hero\" (selected)=\"onSelected($event)\">\n    &#x3C;/dashboard-hero>`\n})\nclass TestHostComponent {\n  hero: Hero = {id: 42, name: 'Test Name' };\n  selectedHero: Hero;\n  onSelected(hero: Hero) { this.selectedHero = hero; }\n}\n\n</code-example>\n<p>This test host binds to <code>DashboardHeroComponent</code> as the <code>DashboardComponent</code> would\nbut without the noise of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>, the <code>HeroService</code>, or the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater.</p>\n<p>The test host sets the component's <code>hero</code> input property with its test hero.\nIt binds the component's <code>selected</code> event with its <code>onSelected</code> handler,\nwhich records the emitted hero in its <code>selectedHero</code> property.</p>\n<p>Later, the tests will be able to easily check <code>selectedHero</code> to verify that the\n<code>DashboardHeroComponent.selected</code> event emitted the expected hero.</p>\n<p>The setup for the <em>test-host</em> tests is similar to the setup for the stand-alone tests:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host-setup\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test host setup)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ DashboardHeroComponent, TestHostComponent ]\n})\n// create TestHostComponent instead of DashboardHeroComponent\nfixture  = TestBed.createComponent(TestHostComponent);\ntestHost = fixture.componentInstance;\nheroEl   = fixture.nativeElement.querySelector('.hero');\nfixture.detectChanges(); // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\n\n</code-example>\n<p>This testing module configuration shows three important differences:</p>\n<ol>\n<li>It <em>declares</em> both the <code>DashboardHeroComponent</code> and the <code>TestHostComponent</code>.</li>\n<li>It <em>creates</em> the <code>TestHostComponent</code> instead of the <code>DashboardHeroComponent</code>.</li>\n<li>The <code>TestHostComponent</code> sets the <code>DashboardHeroComponent.hero</code> with a binding.</li>\n</ol>\n<p>The <code>createComponent</code> returns a <code>fixture</code> that holds an instance of <code>TestHostComponent</code> instead of an instance of <code>DashboardHeroComponent</code>.</p>\n<p>Creating the <code>TestHostComponent</code> has the side-effect of creating a <code>DashboardHeroComponent</code>\nbecause the latter appears within the template of the former.\nThe query for the hero element (<code>heroEl</code>) still finds it in the test DOM,\nalbeit at greater depth in the element tree than before.</p>\n<p>The tests themselves are almost identical to the stand-alone version:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host-tests\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test-host)\" linenums=\"false\">\nit('should display hero name', () => {\n  const expectedPipedName = testHost.hero.name.toUpperCase();\n  expect(heroEl.textContent).toContain(expectedPipedName);\n});\n\nit('should raise selected event when clicked', () => {\n  click(heroEl);\n  // selected hero should be the same data bound hero\n  expect(testHost.selectedHero).toBe(testHost.hero);\n});\n\n</code-example>\n<p>Only the selected event test differs. It confirms that the selected <code>DashboardHeroComponent</code> hero\nreally does find its way up through the event binding to the host component.</p>\n<hr>\n<a id=\"routing-component\"></a>\n<h3 id=\"routing-component\">Routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#routing-component\"><i class=\"material-icons\">link</i></a></h3>\n<p>A <em>routing component</em> is a component that tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to navigate to another component.\nThe <code>DashboardComponent</code> is a <em>routing component</em> because the user can\nnavigate to the <code>HeroDetailComponent</code> by clicking on one of the <em>hero buttons</em> on the dashboard.</p>\n<p>Routing is pretty complicated.\nTesting the <code>DashboardComponent</code> seemed daunting in part because it involves the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>,\nwhich it injects together with the <code>HeroService</code>.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"ctor\" header=\"app/dashboard/dashboard.component.ts (constructor)\" linenums=\"false\">\nconstructor(\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private heroService: HeroService) {\n}\n\n</code-example>\n<p>Mocking the <code>HeroService</code> with a spy is a <a href=\"guide/testing#component-with-async-service\">familiar story</a>.\nBut the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> has a complicated API and is entwined with other services and application preconditions. Might it be difficult to mock?</p>\n<p>Fortunately, not in this case because the <code>DashboardComponent</code> isn't doing much with the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"goto-detail\" header=\"app/dashboard/dashboard.component.ts (goToDetail)\">\ngotoDetail(hero: Hero) {\n  let url = `/heroes/${hero.id}`;\n  this.router.navigateByUrl(url);\n}\n\n</code-example>\n<p>This is often the case with <em>routing components</em>.\nAs a rule you test the component, not the router,\nand care only if the component navigates with the right address under the given conditions.</p>\n<p>Providing a router spy for <em>this component</em> test suite happens to be as easy\nas providing a <code>HeroService</code> spy.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.spec.ts\" region=\"router-spy\" header=\"app/dashboard/dashboard.component.spec.ts (spies)\" linenums=\"false\">\nconst routerSpy = jasmine.createSpyObj('<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>', ['navigateByUrl']);\nconst heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n\nTestBed.configureTestingModule({\n  providers: [\n    { provide: HeroService, useValue: heroServiceSpy },\n    { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,      useValue: routerSpy }\n  ]\n})\n\n</code-example>\n<p>The following test clicks the displayed hero and confirms that\n<code>Router.navigateByUrl</code> is called with the expected url.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.spec.ts\" region=\"navigate-test\" header=\"app/dashboard/dashboard.component.spec.ts (navigate test)\" linenums=\"false\">\nit('should tell ROUTER to navigate when hero clicked', () => {\n\n  heroClick(); // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> click on first inner &#x3C;div class=\"hero\">\n\n  // args passed to router.navigateByUrl() spy\n  const spy = router.navigateByUrl as jasmine.Spy;\n  const navArgs = spy.calls.first().args[0];\n\n  // expecting to navigate to id of the component's first hero\n  const id = comp.heroes[0].id;\n  expect(navArgs).toBe('/heroes/' + id,\n    'should nav to HeroDetail for first hero');\n});\n\n</code-example>\n<a id=\"routed-component-w-param\"></a>\n<h3 id=\"routed-components\">Routed components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#routed-components\"><i class=\"material-icons\">link</i></a></h3>\n<p>A <em>routed component</em> is the destination of a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> navigation.\nIt can be trickier to test, especially when the route to the component <em>includes parameters</em>.\nThe <code>HeroDetailComponent</code> is a <em>routed component</em> that is the destination of such a route.</p>\n<p>When a user clicks a <em>Dashboard</em> hero, the <code>DashboardComponent</code> tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>\nto navigate to <code>heroes/:id</code>.\nThe <code>:id</code> is a route parameter whose value is the <code>id</code> of the hero to edit.</p>\n<p>The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> matches that URL to a route to the <code>HeroDetailComponent</code>.\nIt creates an <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> object with the routing information and\ninjects it into a new instance of the <code>HeroDetailComponent</code>.</p>\n<p>Here's the <code>HeroDetailComponent</code> constructor:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"ctor\" header=\"app/hero/hero-detail.component.ts (constructor)\" linenums=\"false\">\nconstructor(\n  private heroDetailService: HeroDetailService,\n  private route:  <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n}\n\n</code-example>\n<p>The <code>HeroDetail</code> component needs the <code>id</code> parameter so it can fetch\nthe corresponding hero via the <code>HeroDetailService</code>.\nThe component has to get the <code>id</code> from the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> property\nwhich is an <code>Observable</code>.</p>\n<p>It can't just reference the <code>id</code> property of the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code>.\nThe component has to <em>subscribe</em> to the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> observable and be prepared\nfor the <code>id</code> to change during its lifetime.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"ng-on-init\" header=\"app/hero/hero-detail.component.ts (ngOnInit)\" linenums=\"false\">\nngOnInit(): void {\n  // get hero when `id` param <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>\n  this.route.paramMap.subscribe(pmap => this.getHero(pmap.get('id')));\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <a href=\"guide/router#route-parameters\">Router</a> guide covers <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> in more detail.</p>\n</div>\n<p>Tests can explore how the <code>HeroDetailComponent</code> responds to different <code>id</code> parameter values\nby manipulating the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> injected into the component's constructor.</p>\n<p>You know how to spy on the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> and a data service.</p>\n<p>You'll take a different approach with <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> because</p>\n<ul>\n<li><code>paramMap</code> returns an <code>Observable</code> that can emit more than one value\nduring a test.</li>\n<li>You need the router helper function, <code><a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>()</code>, to create a <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code>.</li>\n<li>Other <em>routed components</em> tests need a test double for <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</li>\n</ul>\n<p>These differences argue for a re-usable stub class.</p>\n<h4 id=\"activatedroutestub\"><em>ActivatedRouteStub</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#activatedroutestub\"><i class=\"material-icons\">link</i></a></h4>\n<p>The following <code>ActivatedRouteStub</code> class serves as a test double for <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</p>\n<code-example path=\"testing/src/testing/activated-route-stub.ts\" region=\"activated-route-stub\" header=\"testing/activated-route-stub.ts (ActivatedRouteStub)\" linenums=\"false\">\nimport { <a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>, <a href=\"api/router/Params\" class=\"code-anchor\">Params</a> } from '@angular/router';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * An ActivateRoute test double with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> `paramMap` observable.\n * Use the `setParamMap()` method to add the next `paramMap` value.\n */\nexport class ActivatedRouteStub {\n  // Use <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ReplaySubject to share <a href=\"api/service-worker/UpdateActivatedEvent#previous\" class=\"code-anchor\">previous</a> values with subscribers\n  // and pump new values into the `paramMap` observable\n  private subject = new ReplaySubject&#x3C;<a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>>();\n\n  constructor(initialParams?: <a href=\"api/router/Params\" class=\"code-anchor\">Params</a>) {\n    this.setParamMap(initialParams);\n  }\n\n  /** The mock paramMap observable */\n  readonly paramMap = this.subject.asObservable();\n\n  /** Set the paramMap observables's next value */\n  setParamMap(params?: <a href=\"api/router/Params\" class=\"code-anchor\">Params</a>) {\n    this.subject.next(<a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>(params));\n  };\n}\n\n</code-example>\n<p>Consider placing such helpers in a <code>testing</code> folder sibling to the <code>app</code> folder.\nThis sample puts <code>ActivatedRouteStub</code> in <code>testing/activated-route-stub.ts</code>.</p>\n<div class=\"alert is-helpful\">\n<p>Consider writing a more capable version of this stub class with\nthe <a href=\"guide/testing#marble-testing\"><em>marble testing library</em></a>.</p>\n</div>\n<a id=\"tests-w-test-double\"></a>\n<h4 id=\"testing-with-activatedroutestub\">Testing with <em>ActivatedRouteStub</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-with-activatedroutestub\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here's a test demonstrating the component's behavior when the observed <code>id</code> refers to an existing hero:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-good-id\" header=\"app/hero/hero-detail.component.spec.ts (existing id)\" linenums=\"false\">\ndescribe('when navigate to existing hero', () => {\n  let expectedHero: Hero;\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    expectedHero = firstHero;\n    activatedRoute.setParamMap({ id: expectedHero.id });\n    createComponent();\n  }));\n\n  it('should display that hero\\'s name', () => {\n    expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n  });\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <code>createComponent()</code> method and <code>page</code> object are discussed <a href=\"guide/testing#page-object\">below</a>.\nRely on your intuition for now.</p>\n</div>\n<p>When the <code>id</code> cannot be found, the component should re-route to the <code>HeroListComponent</code>.</p>\n<p>The test suite setup provided the same router spy <a href=\"guide/testing#routing-component\">described above</a> which spies on the router without actually navigating.</p>\n<p>This test expects the component to try to navigate to the <code>HeroListComponent</code>.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-bad-id\" header=\"app/hero/hero-detail.component.spec.ts (bad id)\" linenums=\"false\">\ndescribe('when navigate to non-existent hero id', () => {\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    activatedRoute.setParamMap({ id: 99999 });\n    createComponent();\n  }));\n\n  it('should try to navigate back to hero list', () => {\n    expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n    expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n  });\n});\n\n</code-example>\n<p>While this app doesn't have a route to the <code>HeroDetailComponent</code> that omits the <code>id</code> parameter, it might add such a route someday.\nThe component should do something reasonable when there is no <code>id</code>.</p>\n<p>In this implementation, the component should create and display a new hero.\nNew heroes have <code>id=0</code> and a blank <code>name</code>. This test confirms that the component behaves as expected:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-no-id\" header=\"app/hero/hero-detail.component.spec.ts (no id)\" linenums=\"false\">\ndescribe('when navigate with no hero id', () => {\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>( createComponent ));\n\n  it('should have hero.id === 0', () => {\n    expect(component.hero.id).toBe(0);\n  });\n\n  it('should display empty hero name', () => {\n    expect(page.nameDisplay.textContent).toBe('');\n  });\n});\n\n</code-example>\n<hr>\n<h3 id=\"nested-component-tests\">Nested component tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#nested-component-tests\"><i class=\"material-icons\">link</i></a></h3>\n<p>Component templates often have nested components, whose templates\nmay contain more components.</p>\n<p>The component tree can be very deep and, most of the time, the nested components\nplay no role in testing the component at the top of the tree.</p>\n<p>The <code>AppComponent</code>, for example, displays a navigation bar with anchors and their <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives.</p>\n<code-example path=\"testing/src/app/app.component.html\" header=\"app/app.component.html\" linenums=\"false\">\n&#x3C;app-banner>&#x3C;/app-banner>\n&#x3C;app-welcome>&#x3C;/app-welcome>\n&#x3C;nav>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/about\">About&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p>While the <code>AppComponent</code> <em>class</em> is empty,\nyou may want to write unit tests to confirm that the links are wired properly\nto the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives, perhaps for the reasons <a href=\"guide/testing#why-stubbed-routerlink-tests\">explained below</a>.</p>\n<p>To validate the links, you don't need the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to navigate and you don't\nneed the <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> to mark where the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> inserts <em>routed components</em>.</p>\n<p>The <code>BannerComponent</code> and <code>WelcomeComponent</code>\n(indicated by <code>&#x3C;app-banner></code> and <code>&#x3C;app-welcome></code>) are also irrelevant.</p>\n<p>Yet any test that creates the <code>AppComponent</code> in the DOM will also create instances of\nthese three components and, if you let that happen,\nyou'll have to configure the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to create them.</p>\n<p>If you neglect to declare them, the Angular compiler won't recognize the\n<code>&#x3C;app-banner></code>, <code>&#x3C;app-welcome></code>, and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tags in the <code>AppComponent</code> template\nand will throw an error.</p>\n<p>If you declare the real components, you'll also have to declare <em>their</em> nested components\nand provide for <em>all</em> services injected in <em>any</em> component in the tree.</p>\n<p>That's too much effort just to answer a few simple questions about links.</p>\n<p>This section describes two techniques for minimizing the setup.\nUse them, alone or in combination, to stay focused on the testing the primary component.</p>\n<a id=\"stub-component\"></a>\n<h5 id=\"stubbing-unneeded-components\">Stubbing unneeded components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#stubbing-unneeded-components\"><i class=\"material-icons\">link</i></a></h5>\n<p>In the first technique, you create and declare stub versions of the components\nand directive that play little or no role in the tests.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"component-stubs\" header=\"app/app.component.spec.ts (stub declaration)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-banner', <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: ''})\nclass BannerStubComponent {}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: '<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>', <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: ''})\nclass RouterOutletStubComponent { }\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-welcome', <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: ''})\nclass WelcomeStubComponent {}\n\n</code-example>\n<p>The stub selectors match the selectors for the corresponding real components.\nBut their templates and classes are empty.</p>\n<p>Then declare them in the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration next to the\ncomponents, directives, and pipes that need to be real.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"testbed-stubs\" header=\"app/app.component.spec.ts (TestBed stubs)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    RouterLinkDirectiveStub,\n    BannerStubComponent,\n    RouterOutletStubComponent,\n    WelcomeStubComponent\n  ]\n})\n\n</code-example>\n<p>The <code>AppComponent</code> is the test subject, so of course you declare the real version.</p>\n<p>The <code>RouterLinkDirectiveStub</code>, <a href=\"guide/testing#routerlink\">described later</a>, is a test version\nof the real <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> that helps with the link tests.</p>\n<p>The rest are stubs.</p>\n<a id=\"no-errors-schema\"></a>\n<h4 id=\"no_errors_schema\"><em>NO_ERRORS_SCHEMA</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#no_errors_schema\"><i class=\"material-icons\">link</i></a></h4>\n<p>In the second approach, add <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> to the <code>TestBed.schemas</code> metadata.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"no-errors-schema\" header=\"app/app.component.spec.ts (NO_ERRORS_SCHEMA)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    RouterLinkDirectiveStub\n  ],\n  <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>: [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n})\n\n</code-example>\n<p>The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> tells the Angular compiler to ignore unrecognized elements and attributes.</p>\n<p>The compiler will recognize the <code>&#x3C;app-root></code> element and the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute\nbecause you declared a corresponding <code>AppComponent</code> and <code>RouterLinkDirectiveStub</code>\nin the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration.</p>\n<p>But the compiler won't throw an error when it encounters <code>&#x3C;app-banner></code>, <code>&#x3C;app-welcome></code>, or <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.\nIt simply renders them as empty tags and the browser ignores them.</p>\n<p>You no longer need the stub components.</p>\n<h4 id=\"use-both-techniques-together\">Use both techniques together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#use-both-techniques-together\"><i class=\"material-icons\">link</i></a></h4>\n<p>These are techniques for <em>Shallow Component Testing</em> ,\nso-named because they reduce the visual surface of the component to just those elements\nin the component's template that matter for tests.</p>\n<p>The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> approach is the easier of the two but don't overuse it.</p>\n<p>The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> also prevents the compiler from telling you about the missing\ncomponents and attributes that you omitted inadvertently or misspelled.\nYou could waste hours chasing phantom bugs that the compiler would have caught in an instant.</p>\n<p>The <em>stub component</em> approach has another advantage.\nWhile the stubs in <em>this</em> example were empty,\nyou could give them stripped-down templates and classes if your tests\nneed to interact with them in some way.</p>\n<p>In practice you will combine the two techniques in the same setup,\nas seen in this example.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"mixed-setup\" header=\"app/app.component.spec.ts (mixed setup)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    BannerStubComponent,\n    RouterLinkDirectiveStub\n  ],\n  <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>: [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n})\n\n</code-example>\n<p>The Angular compiler creates the <code>BannerComponentStub</code> for the <code>&#x3C;app-banner></code> element\nand applies the <code>RouterLinkStubDirective</code> to the anchors with the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute,\nbut it ignores the <code>&#x3C;app-welcome></code> and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tags.</p>\n<hr>\n<a id=\"routerlink\"></a>\n<h3 id=\"components-with-routerlink\">Components with <em>RouterLink</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#components-with-routerlink\"><i class=\"material-icons\">link</i></a></h3>\n<p>The real <code>RouterLinkDirective</code> is quite complicated and entangled with other components\nand directives of the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nIt requires challenging setup to mock and use in tests.</p>\n<p>The <code>RouterLinkDirectiveStub</code> in this sample code replaces the real directive\nwith an alternative version designed to validate the kind of anchor tag wiring\nseen in the <code>AppComponent</code> template.</p>\n<code-example path=\"testing/src/testing/router-link-directive-stub.ts\" region=\"router-link\" header=\"testing/router-link-directive-stub.ts (RouterLinkDirectiveStub)\" linenums=\"false\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]',\n  <a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: { '(click)': 'onClick()' }\n})\nexport class RouterLinkDirectiveStub {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>') linkParams: any;\n  navigatedTo: any = null;\n\n  onClick() {\n    this.navigatedTo = this.linkParams;\n  }\n}\n\n</code-example>\n<p>The URL bound to the <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> attribute flows in to the directive's <code>linkParams</code> property.</p>\n<p>The <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a></code> metadata property wires the click event of the host element\n(the <code>&#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>></code> anchor elements in <code>AppComponent</code>) to the stub directive's <code>onClick</code> method.</p>\n<p>Clicking the anchor should trigger the <code>onClick()</code> method,\nwhich sets the stub's telltale <code>navigatedTo</code> property.\nTests inspect <code>navigatedTo</code> to confirm that clicking the anchor\nset the expected route definition.</p>\n<div class=\"alert is-helpful\">\n<p>Whether the router is configured properly to navigate with that route definition is a\nquestion for a separate set of tests.</p>\n</div>\n<a id=\"by-directive\"></a>\n<a id=\"inject-directive\"></a>\n<h4 id=\"bydirective-and-injected-directives\"><em>By.directive</em> and injected directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#bydirective-and-injected-directives\"><i class=\"material-icons\">link</i></a></h4>\n<p>A little more setup triggers the initial data binding and gets references to the navigation links:</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"test-setup\" header=\"app/app.component.spec.ts (test setup)\" linenums=\"false\">\nbeforeEach(() => {\n  fixture.detectChanges(); // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\n\n  // find DebugElements with an attached RouterLinkStubDirective\n  linkDes = fixture.debugElement\n    .queryAll(By.directive(RouterLinkDirectiveStub));\n\n  // get attached link directive instances\n  // using each <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>'s injector\n  routerLinks = linkDes.map(de => de.injector.get(RouterLinkDirectiveStub));\n});\n\n</code-example>\n<p>Three points of special interest:</p>\n<ol>\n<li>\n<p>You can locate the anchor elements with an attached directive using <code>By.directive</code>.</p>\n</li>\n<li>\n<p>The query returns <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> wrappers around the matching elements.</p>\n</li>\n<li>\n<p>Each <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> exposes a dependency injector with the\nspecific instance of the directive attached to that element.</p>\n</li>\n</ol>\n<p>The <code>AppComponent</code> links to validate are as follows:</p>\n<code-example path=\"testing/src/app/app.component.html\" region=\"links\" header=\"app/app.component.html (navigation links)\" linenums=\"false\">\n&#x3C;nav>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/about\">About&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n\n</code-example>\n<a id=\"app-component-tests\"></a>\n<p>Here are some tests that confirm those links are wired to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directives\nas expected:</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"tests\" header=\"app/app.component.spec.ts (selected tests)\" linenums=\"false\">\nit('can get RouterLinks from <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>', () => {\n  expect(routerLinks.length).toBe(3, 'should have 3 routerLinks');\n  expect(routerLinks[0].linkParams).toBe('/dashboard');\n  expect(routerLinks[1].linkParams).toBe('/heroes');\n  expect(routerLinks[2].linkParams).toBe('/about');\n});\n\nit('can click Heroes link in <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>', () => {\n  const heroesLinkDe = linkDes[1];   // heroes link <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>\n  const heroesLink = routerLinks[1]; // heroes link directive\n\n  expect(heroesLink.navigatedTo).toBeNull('should not have <a href=\"api/router/Router#navigated\" class=\"code-anchor\">navigated</a> yet');\n\n  heroesLinkDe.triggerEventHandler('click', null);\n  fixture.detectChanges();\n\n  expect(heroesLink.navigatedTo).toBe('/heroes');\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The \"click\" test <em>in this example</em> is misleading.\nIt tests the <code>RouterLinkDirectiveStub</code> rather than the <em>component</em>.\nThis is a common failing of directive stubs.</p>\n<p>It has a legitimate purpose in this guide.\nIt demonstrates how to find a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> element, click it, and inspect a result,\nwithout engaging the full router machinery.\nThis is a skill you may need to test a more sophisticated component, one that changes the display,\nre-calculates parameters, or re-arranges navigation options when the user clicks the link.</p>\n</div>\n<a id=\"why-stubbed-routerlink-tests\"></a>\n<h4 id=\"what-good-are-these-tests\">What good are these tests?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#what-good-are-these-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>Stubbed <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> tests can confirm that a component with links and an outlet is setup properly,\nthat the component has the links it should have, and that they are all pointing in the expected direction.\nThese tests do not concern whether the app will succeed in navigating to the target component when the user clicks a link.</p>\n<p>Stubbing the RouterLink and RouterOutlet is the best option for such limited testing goals.\nRelying on the real router would make them brittle.\nThey could fail for reasons unrelated to the component.\nFor example, a navigation guard could prevent an unauthorized user from visiting the <code>HeroListComponent</code>.\nThat's not the fault of the <code>AppComponent</code> and no change to that component could cure the failed test.</p>\n<p>A <em>different</em> battery of tests can explore whether the application navigates as expected\nin the presence of conditions that influence guards such as whether the user is authenticated and authorized.</p>\n<div class=\"alert is-helpful\">\n<p>A future guide update will explain how to write such\ntests with the <code><a href=\"api/router/testing/RouterTestingModule\" class=\"code-anchor\">RouterTestingModule</a></code>.</p>\n</div>\n<hr>\n<a id=\"page-object\"></a>\n<h3 id=\"use-a-page-object\">Use a <em>page</em> object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#use-a-page-object\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroDetailComponent</code> is a simple view with a title, two hero fields, and two buttons.</p>\n<figure>\n  <img src=\"generated/images/guide/testing/hero-detail.component.png\" alt=\"HeroDetailComponent in action\" width=\"269\" height=\"170\">\n</figure>\n<p>But there's plenty of template complexity even in this simple form.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.html\" header=\"app/hero/hero-detail.component.html\" linenums=\"false\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>&#x3C;span>{{hero.name | <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">titlecase</a>}}&#x3C;/span> Details&#x3C;/h2>\n  &#x3C;div>\n    &#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"name\">name: &#x3C;/label>\n    &#x3C;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\" />\n  &#x3C;/div>\n  &#x3C;button (click)=\"save()\">Save&#x3C;/button>\n  &#x3C;button (click)=\"cancel()\">Cancel&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<p>Tests that exercise the component need ...</p>\n<ul>\n<li>to wait until a hero arrives before elements appear in the DOM.</li>\n<li>a reference to the title text.</li>\n<li>a reference to the name input box to inspect and set it.</li>\n<li>references to the two buttons so they can click them.</li>\n<li>spies for some of the component and router methods.</li>\n</ul>\n<p>Even a small form such as this one can produce a mess of tortured conditional setup and CSS element selection.</p>\n<p>Tame the complexity with a <code>Page</code> class that handles access to component properties\nand encapsulates the logic that sets them.</p>\n<p>Here is such a <code>Page</code> class for the <code>hero-detail.component.spec.ts</code></p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"page\" header=\"app/hero/hero-detail.component.spec.ts (Page)\" linenums=\"false\">\nclass Page {\n  // getter <a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">properties</a> wait to <a href=\"api/animations/query\" class=\"code-anchor\">query</a> the DOM until called.\n  get buttons()     { return this.queryAll&#x3C;HTMLButtonElement>('button'); }\n  get saveBtn()     { return this.buttons[0]; }\n  get cancelBtn()   { return this.buttons[1]; }\n  get nameDisplay() { return this.query&#x3C;HTMLElement>('span'); }\n  get nameInput()   { return this.query&#x3C;HTMLInputElement>('input'); }\n\n  gotoListSpy: jasmine.Spy;\n  navigateSpy:  jasmine.Spy;\n\n  constructor(fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;HeroDetailComponent>) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = &#x3C;any> fixture.debugElement.injector.get(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n    this.navigateSpy = routerSpy.navigate;\n\n    // spy on component's `gotoList()` method\n    const component = fixture.componentInstance;\n    this.gotoListSpy = spyOn(component, 'gotoList').and.callThrough();\n  }\n\n  //// <a href=\"api/animations/query\" class=\"code-anchor\">query</a> helpers ////\n  private <a href=\"api/animations/query\" class=\"code-anchor\">query</a>&#x3C;T>(selector: string): T {\n    return fixture.nativeElement.querySelector(selector);\n  }\n\n  private queryAll&#x3C;T>(selector: string): T[] {\n    return fixture.nativeElement.querySelectorAll(selector);\n  }\n}\n\n</code-example>\n<p>Now the important hooks for component manipulation and inspection are neatly organized and accessible from an instance of <code>Page</code>.</p>\n<p>A <code>createComponent</code> method creates a <code>page</code> object and fills in the blanks once the <code>hero</code> arrives.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"create-component\" header=\"app/hero/hero-detail.component.spec.ts (createComponent)\" linenums=\"false\">\n/** Create the HeroDetailComponent, initialize it, set test variables  */\nfunction createComponent() {\n  fixture = TestBed.createComponent(HeroDetailComponent);\n  component = fixture.componentInstance;\n  page = new Page(fixture);\n\n  // 1st change detection triggers ngOnInit which gets <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero\n  fixture.detectChanges();\n  return fixture.whenStable().then(() => {\n    // 2nd change detection displays the async-fetched hero\n    fixture.detectChanges();\n  });\n}\n\n</code-example>\n<p>The <a href=\"guide/testing#tests-w-test-double\"><em>HeroDetailComponent</em> tests</a> in an earlier section demonstrate how <code>createComponent</code> and <code>page</code>\nkeep the tests short and <em>on message</em>.\nThere are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</p>\n<p>Here are a few more <code>HeroDetailComponent</code> tests to reinforce the point.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"selected-tests\" header=\"app/hero/hero-detail.component.spec.ts (selected tests)\" linenums=\"false\">\nit('should display that hero\\'s name', () => {\n  expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n});\n\nit('should navigate when click cancel', () => {\n  click(page.cancelBtn);\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n});\n\nit('should save when click save but not navigate immediately', () => {\n  // <a href=\"api/http/RequestMethod#Get\" class=\"code-anchor\">Get</a> service injected into component and spy on its`saveHero` method.\n  // It delegates to fake `HeroService.updateHero` which delivers <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> safe test result.\n  const hds = fixture.debugElement.injector.get(HeroDetailService);\n  const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n\n  click(page.saveBtn);\n  expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n  expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n});\n\nit('should navigate when click save and save resolves', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  click(page.saveBtn);\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // wait for <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> save to complete\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n}));\n\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // 이름에 해당하는 input 엘리먼트와 이 이름을 화면에 표시하는 span 엘리먼트를 DOM에서 참조합니다.\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // 사용자가 입력한 것처럼 입력 필드의 내용을 변경합니다.\n  nameInput.value = 'quick BROWN  fOx';\n\n  // 엘리먼트의 값이 변경되었다는 것을 Angular에게 알리기 위해 DOM 이벤트를 생성합니다.\n  nameInput.dispatchEvent(newEvent('input'));\n\n  // Angular가 화면을 갱신하도록 detectChanges() 함수를 실행합니다.\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<hr>\n<a id=\"compile-components\"></a>\n<h3 id=\"calling-compilecomponents\">Calling <em>compileComponents()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#calling-compilecomponents\"><i class=\"material-icons\">link</i></a></h3>\n<div class=\"alert is-helpful\">\n<p>You can ignore this section if you <em>only</em> run tests with the CLI <code>ng test</code> command\nbecause the CLI compiles the application before running the tests.</p>\n</div>\n<p>If you run tests in a <strong>non-CLI environment</strong>, the tests may fail with a message like this one:</p>\n<code-example language=\"sh\" class=\"code-shell\" hidecopy=\"\">\nError: This test module uses the component BannerComponent\nwhich is using <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> \"templateUrl\" or \"<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>\", but they were never compiled.\nPlease call \"TestBed.compileComponents\" before your test.\n</code-example>\n<p>The root of the problem is at least one of the components involved in the test\nspecifies an external template or CSS file as\nthe following version of the <code>BannerComponent</code> does.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" header=\"app/banner/banner-external.component.ts (external template &#x26; css)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  templateUrl: './banner-external.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>:  ['./banner-external.component.css']\n})\nexport class BannerComponent {\n  title = 'Test Tour of Heroes';\n}\n\n\n</code-example>\n<p>The test fails when the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> tries to create the component.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"configure-and-create\" header=\"app/banner/banner.component.spec.ts (setup that fails)\" avoid=\"\" linenums=\"false\">\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n});\n\n</code-example>\n<p>Recall that the app hasn't been compiled.\nSo when you call <code>createComponent()</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> compiles implicitly.</p>\n<p>That's not a problem when the source code is in memory.\nBut the <code>BannerComponent</code> requires external files\nthat the compile must read from the file system,\nan inherently <em>asynchronous</em> operation.</p>\n<p>If the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> were allowed to continue, the tests would run and fail mysteriously\nbefore the compiler could finished.</p>\n<p>The preemptive error message tells you to compile explicitly with <code>compileComponents()</code>.</p>\n<h4 id=\"compilecomponents-is-async\"><em>compileComponents()</em> is async<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#compilecomponents-is-async\"><i class=\"material-icons\">link</i></a></h4>\n<p>You must call <code>compileComponents()</code> within an asynchronous test function.</p>\n<div class=\"alert is-critical\">\n<p>If you neglect to make the test function async\n(e.g., forget to use <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> as described below),\nyou'll see this error message</p>\n<code-example language=\"sh\" class=\"code-shell\" hidecopy=\"\">\nError: ViewDestroyedError: Attempt to use <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> destroyed view\n</code-example>\n</div>\n<p>A typical approach is to divide the setup logic into two separate <code>beforeEach()</code> functions:</p>\n<ol>\n<li>An async <code>beforeEach()</code> that compiles the components</li>\n<li>A synchronous <code>beforeEach()</code> that performs the remaining setup.</li>\n</ol>\n<p>To follow this pattern, import the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> helper with the other testing symbols.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"import-async\">\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\n\n</code-example>\n<h4 id=\"the-async-beforeeach\">The async <em>beforeEach</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-async-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<p>Write the first async <code>beforeEach</code> like this.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"async-before-each\" header=\"app/banner/banner-external.component.spec.ts (async beforeEach)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  })\n  .compileComponents();  // compile <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a> and css\n}));\n\n</code-example>\n<p>The <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> helper function takes a parameterless function with the body of the setup.</p>\n<p>The <code>TestBed.configureTestingModule()</code> method returns the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class so you can chain\ncalls to other <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> static methods such as <code>compileComponents()</code>.</p>\n<p>In this example, the <code>BannerComponent</code> is the only component to compile.\nOther examples configure the testing module with multiple components\nand may import application modules that hold yet more components.\nAny of them could be require external files.</p>\n<p>The <code>TestBed.compileComponents</code> method asynchronously compiles all components configured in the testing module.</p>\n<div class=\"alert is-important\">\n<p>Do not re-configure the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> after calling <code>compileComponents()</code>.</p>\n</div>\n<p>Calling <code>compileComponents()</code> closes the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance to further configuration.\nYou cannot call any more <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration methods, not <code>configureTestingModule()</code>\nnor any of the <code>override...</code> methods. The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> throws an error if you try.</p>\n<p>Make <code>compileComponents()</code> the last step\nbefore calling <code>TestBed.createComponent()</code>.</p>\n<h4 id=\"the-synchronous-beforeeach\">The synchronous <em>beforeEach</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-synchronous-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<p>The second, synchronous <code>beforeEach()</code> contains the remaining setup steps,\nwhich include creating the component and querying for elements to inspect.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"sync-before-each\" header=\"app/banner/banner-external.component.spec.ts (synchronous beforeEach)\" linenums=\"false\">\nbeforeEach(() => {\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance; // BannerComponent test instance\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<p>You can count on the test runner to wait for the first asynchronous <code>beforeEach</code> to finish before calling the second.</p>\n<h4 id=\"consolidated-setup\">Consolidated setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#consolidated-setup\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can consolidate the two <code>beforeEach()</code> functions into a single, async <code>beforeEach()</code>.</p>\n<p>The <code>compileComponents()</code> method returns a promise so you can perform the\nsynchronous setup tasks <em>after</em> compilation by moving the synchronous code\ninto a <code>then(...)</code> callback.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"one-before-each\" header=\"app/banner/banner-external.component.spec.ts (one beforeEach)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  })\n  .compileComponents()\n  .then(() => {\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n    h1 = fixture.nativeElement.querySelector('h1');\n  });\n}));\n\n</code-example>\n<h4 id=\"compilecomponents-is-harmless\"><em>compileComponents()</em> is harmless<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#compilecomponents-is-harmless\"><i class=\"material-icons\">link</i></a></h4>\n<p>There's no harm in calling <code>compileComponents()</code> when it's not required.</p>\n<p>The component test file generated by the CLI calls <code>compileComponents()</code>\neven though it is never required when running <code>ng test</code>.</p>\n<p>The tests in this guide only call <code>compileComponents</code> when necessary.</p>\n<hr>\n<a id=\"import-module\"></a>\n<h3 id=\"setup-with-module-imports\">Setup with module imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#setup-with-module-imports\"><i class=\"material-icons\">link</i></a></h3>\n<p>Earlier component tests configured the testing module with a few <code><a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a></code> like this:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"config-testbed\" header=\"app/dashboard/dashboard-hero.component.spec.ts (configure TestBed)\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ DashboardHeroComponent ]\n})\n\n</code-example>\n<p>The <code>DashboardComponent</code> is simple. It needs no help.\nBut more complex components often depend on other components, directives, pipes, and providers\nand these must be added to the testing module too.</p>\n<p>Fortunately, the <code>TestBed.configureTestingModule</code> parameter parallels\nthe metadata passed to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator\nwhich means you can also specify <code>providers</code> and <code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a></code>.</p>\n<p>The <code>HeroDetailComponent</code> requires a lot of help despite its small size and simple construction.\nIn addition to the support it receives from the default testing module <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>, it needs:</p>\n<ul>\n<li><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and friends in the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to enable two-way data binding.</li>\n<li>The <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> from the <code>shared</code> folder.</li>\n<li>Router services (which these tests are stubbing).</li>\n<li>Hero data access services (also stubbed).</li>\n</ul>\n<p>One approach is to configure the testing module from the individual pieces as in this example:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-forms-module\" header=\"app/hero/hero-detail.component.spec.ts (FormsModule setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:      [ <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> ],\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ HeroDetailComponent, <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a> ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: HeroService,    useClass: TestHeroService },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n  .compileComponents();\n}));\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Notice that the <code>beforeEach()</code> is asynchronous and calls <code>TestBed.compileComponents</code>\nbecause the <code>HeroDetailComponent</code> has an external template and css file.</p>\n<p>As explained in <a href=\"guide/testing#compile-components\"><em>Calling compileComponents()</em></a> above,\nthese tests could be run in a non-CLI environment\nwhere Angular would have to compile them in the browser.</p>\n</div>\n<h4 id=\"import-a-shared-module\">Import a shared module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#import-a-shared-module\"><i class=\"material-icons\">link</i></a></h4>\n<p>Because many app components need the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and the <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>, the developer created\na <code>SharedModule</code> to combine these and other frequently requested parts.</p>\n<p>The test configuration can use the <code>SharedModule</code> too as seen in this alternative setup:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-shared-module\" header=\"app/hero/hero-detail.component.spec.ts (SharedModule setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:      [ SharedModule ],\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ HeroDetailComponent ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: HeroService,    useClass: TestHeroService },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n  .compileComponents();\n}));\n\n</code-example>\n<p>It's a bit tighter and smaller, with fewer import statements (not shown).</p>\n<a id=\"feature-module-import\"></a>\n<h4 id=\"import-a-feature-module\">Import a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#import-a-feature-module\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>HeroDetailComponent</code> is part of the <code>HeroModule</code> <a href=\"guide/feature-modules\">Feature Module</a> that aggregates more of the interdependent pieces\nincluding the <code>SharedModule</code>.\nTry a test configuration that imports the <code>HeroModule</code> like this one:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-hero-module\" header=\"app/hero/hero-detail.component.spec.ts (HeroModule setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:   [ HeroModule ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: HeroService,    useClass: TestHeroService },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n  .compileComponents();\n}));\n\n</code-example>\n<p>That's <em>really</em> crisp. Only the <em>test doubles</em> in the <code>providers</code> remain. Even the <code>HeroDetailComponent</code> declaration is gone.</p>\n<p>In fact, if you try to declare it, Angular will throw an error because\n<code>HeroDetailComponent</code> is declared in both the <code>HeroModule</code> and the <code>DynamicTestModule</code>\ncreated by the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.</p>\n<div class=\"alert is-helpful\">\n<p>Importing the component's feature module can be the easiest way to configure tests\nwhen there are many mutual dependencies within the module and\nthe module is small, as feature modules tend to be.</p>\n</div>\n<hr>\n<a id=\"component-override\"></a>\n<h3 id=\"override-component-providers\">Override component providers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#override-component-providers\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroDetailComponent</code> provides its own <code>HeroDetailService</code>.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"prototype\" header=\"app/hero/hero-detail.component.ts (prototype)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>:  ['./hero-detail.component.css' ],\n  providers:  [ HeroDetailService ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private heroDetailService: HeroDetailService,\n    private route:  <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n  }\n}\n\n</code-example>\n<p>It's not possible to stub the component's <code>HeroDetailService</code> in the <code>providers</code> of the <code>TestBed.configureTestingModule</code>.\nThose are providers for the <em>testing module</em>, not the component. They prepare the dependency injector at the <em>fixture level</em>.</p>\n<p>Angular creates the component with its <em>own</em> injector, which is a <em>child</em> of the fixture injector.\nIt registers the component's providers (the <code>HeroDetailService</code> in this case) with the child injector.</p>\n<p>A test cannot get to child injector services from the fixture injector.\nAnd <code>TestBed.configureTestingModule</code> can't configure them either.</p>\n<p>Angular has been creating new instances of the real <code>HeroDetailService</code> all along!</p>\n<div class=\"alert is-helpful\">\n<p>These tests could fail or timeout if the <code>HeroDetailService</code> made its own XHR calls to a remote server.\nThere might not be a remote server to call.</p>\n<p>Fortunately, the <code>HeroDetailService</code> delegates responsibility for remote data access to an injected <code>HeroService</code>.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.service.ts\" region=\"prototype\" header=\"app/hero/hero-detail.service.ts (prototype)\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroDetailService {\n  constructor(private heroService: HeroService) {  }\n/* . . . */\n}\n\n</code-example>\n<p>The <a href=\"guide/testing#feature-module-import\">previous test configuration</a> replaces the real <code>HeroService</code> with a <code>TestHeroService</code>\nthat intercepts server requests and fakes their responses.</p>\n</div>\n<p>What if you aren't so lucky. What if faking the <code>HeroService</code> is hard?\nWhat if <code>HeroDetailService</code> makes its own server requests?</p>\n<p>The <code>TestBed.overrideComponent</code> method can replace the component's <code>providers</code> with easy-to-manage <em>test doubles</em>\nas seen in the following setup variation:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-override\" header=\"app/hero/hero-detail.component.spec.ts (Override setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:   [ HeroModule ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n\n  // Override component's own provider\n  .overrideComponent(HeroDetailComponent, {\n    set: {\n      providers: [\n        { provide: HeroDetailService, useClass: HeroDetailServiceSpy }\n      ]\n    }\n  })\n\n  .compileComponents();\n}));\n\n</code-example>\n<p>Notice that <code>TestBed.configureTestingModule</code> no longer provides a (fake) <code>HeroService</code> because it's <a href=\"guide/testing#spy-stub\">not needed</a>.</p>\n<a id=\"override-component-method\"></a>\n<h4 id=\"the-overridecomponent-method\">The <em>overrideComponent</em> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-overridecomponent-method\"><i class=\"material-icons\">link</i></a></h4>\n<p>Focus on the <code>overrideComponent</code> method.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"override-component-method\" header=\"app/hero/hero-detail.component.spec.ts (overrideComponent)\" linenums=\"false\">\n.overrideComponent(HeroDetailComponent, {\n  set: {\n    providers: [\n      { provide: HeroDetailService, useClass: HeroDetailServiceSpy }\n    ]\n  }\n})\n\n</code-example>\n<p>It takes two arguments: the component type to override (<code>HeroDetailComponent</code>) and an override metadata object.\nThe <a href=\"guide/testing#metadata-override-object\">override metadata object</a> is a generic defined as follows:</p>\n<code-example format=\".\" language=\"javascript\">\n  type <a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a><t> = {\n    add?: Partial<t>;\n    remove?: Partial<t>;\n    set?: Partial<t>;\n  };\n</t></t></t></t></code-example>\n<p>A metadata override object can either add-and-remove elements in metadata properties or completely reset those properties.\nThis example resets the component's <code>providers</code> metadata.</p>\n<p>The type parameter, <code>T</code>, is the kind of metadata you'd pass to the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator:</p>\n<code-example format=\".\" language=\"javascript\">\n  selector?: string;\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>?: string;\n  templateUrl?: string;\n  providers?: any[];\n  ...\n</code-example>\n<a id=\"spy-stub\"></a>\n<h4 id=\"provide-a-spy-stub-herodetailservicespy\">Provide a <em>spy stub</em> (<em>HeroDetailServiceSpy</em>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#provide-a-spy-stub-herodetailservicespy\"><i class=\"material-icons\">link</i></a></h4>\n<p>This example completely replaces the component's <code>providers</code> array with a new array containing a <code>HeroDetailServiceSpy</code>.</p>\n<p>The <code>HeroDetailServiceSpy</code> is a stubbed version of the real <code>HeroDetailService</code>\nthat fakes all necessary features of that service.\nIt neither injects nor delegates to the lower level <code>HeroService</code>\nso there's no need to provide a test double for that.</p>\n<p>The related <code>HeroDetailComponent</code> tests will assert that methods of the <code>HeroDetailService</code>\nwere called by spying on the service methods.\nAccordingly, the stub implements its methods as spies:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"hds-spy\" header=\"app/hero/hero-detail.component.spec.ts (HeroDetailServiceSpy)\" linenums=\"false\">\nclass HeroDetailServiceSpy {\n  testHero: Hero = {id: 42, name: 'Test Hero' };\n\n  /* emit cloned test hero */\n  getHero = jasmine.createSpy('getHero').and.callFake(\n    () => asyncData(Object.assign({}, this.testHero))\n  );\n\n  /* emit clone of test hero, with <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a> merged in */\n  saveHero = jasmine.createSpy('saveHero').and.callFake(\n    (hero: Hero) => asyncData(Object.assign(this.testHero, hero))\n  );\n}\n\n\n</code-example>\n<a id=\"override-tests\"></a>\n<h4 id=\"the-override-tests\">The override tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-override-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>Now the tests can control the component's hero directly by manipulating the spy-stub's <code>testHero</code>\nand confirm that service methods were called.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"override-tests\" header=\"app/hero/hero-detail.component.spec.ts (override tests)\" linenums=\"false\">\nlet hdsSpy: HeroDetailServiceSpy;\n\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  createComponent();\n  // get the component's injected HeroDetailServiceSpy\n  hdsSpy = fixture.debugElement.injector.get(HeroDetailService) as any;\n}));\n\nit('should have called `getHero`', () => {\n  expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n});\n\nit('should display stub hero\\'s name', () => {\n  expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n});\n\nit('should save stub hero change', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  const origName = hdsSpy.testHero.name;\n  const newName = 'New Name';\n\n  page.nameInput.value = newName;\n  page.nameInput.dispatchEvent(newEvent('input')); // tell Angular\n\n  expect(component.hero.name).toBe(newName, 'component hero has new name');\n  expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n\n  click(page.saveBtn);\n  expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // wait for <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> save to complete\n  expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n}));\n\n</code-example>\n<a id=\"more-overrides\"></a>\n<h4 id=\"more-overrides\">More overrides<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-overrides\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>TestBed.overrideComponent</code> method can be called multiple times for the same or different components.\nThe <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> offers similar <code>overrideDirective</code>, <code>overrideModule</code>, and <code>overridePipe</code> methods\nfor digging into and replacing parts of these other classes.</p>\n<p>Explore the options and combinations on your own.</p>\n<hr>\n<a id=\"attribute-directive\"></a>\n<h2 id=\"attribute-directive-testing\">Attribute Directive Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#attribute-directive-testing\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <em>attribute directive</em> modifies the behavior of an element, component or another directive.\nIts name reflects the way the directive is applied: as an attribute on a host element.</p>\n<p>The sample application's <code>HighlightDirective</code> sets the background color of an element\nbased on either a data bound color or a default color (lightgray).\nIt also sets a custom property of the element (<code>customProperty</code>) to <code>true</code>\nfor no reason other than to show that it can.</p>\n<code-example path=\"testing/src/app/shared/highlight.directive.ts\" header=\"app/shared/highlight.directive.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[highlight]' })\n/** Set backgroundColor for the attached element to highlight color\n *  and set the element's customProperty to true */\nexport class HighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  defaultColor =  'rgb(211, 211, 211)'; // lightgray\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('highlight') bgColor: string;\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n    el.nativeElement.style.customProperty = true;\n  }\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.bgColor || this.defaultColor;\n  }\n}\n\n\n</code-example>\n<p>It's used throughout the application, perhaps most simply in the <code>AboutComponent</code>:</p>\n<code-example path=\"testing/src/app/about/about.component.ts\" header=\"app/about/about.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n  &#x3C;h2 highlight=\"skyblue\">About&#x3C;/h2>\n  &#x3C;h3>Quote of the day:&#x3C;/h3>\n  &#x3C;twain-quote>&#x3C;/twain-quote>\n  `\n})\nexport class AboutComponent { }\n\n\n</code-example>\n<p>Testing the specific use of the <code>HighlightDirective</code> within the <code>AboutComponent</code> requires only the\ntechniques explored above (in particular the <a href=\"guide/testing#nested-component-tests\">\"Shallow test\"</a> approach).</p>\n<code-example path=\"testing/src/app/about/about.component.spec.ts\" region=\"tests\" header=\"app/about/about.component.spec.ts\" linenums=\"false\">\nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ AboutComponent, HighlightDirective],\n    <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>:      [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n  })\n  .createComponent(AboutComponent);\n  fixture.detectChanges(); // initial binding\n});\n\nit('should have skyblue &#x3C;h2>', () => {\n  const h2: HTMLElement = fixture.nativeElement.querySelector('h2');\n  const bgColor = h2.style.backgroundColor;\n  expect(bgColor).toBe('skyblue');\n});\n\n</code-example>\n<p>However, testing a single use case is unlikely to explore the full range of a directive's capabilities.\nFinding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.</p>\n<p><em>Class-only tests</em> might be helpful,\nbut attribute directives like this one tend to manipulate the DOM.\nIsolated unit tests don't touch the DOM and, therefore,\ndo not inspire confidence in the directive's efficacy.</p>\n<p>A better solution is to create an artificial test component that demonstrates all ways to apply the directive.</p>\n<code-example path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"test-component\" header=\"app/shared/highlight.directive.spec.ts (TestComponent)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n  &#x3C;h2 highlight=\"yellow\">Something Yellow&#x3C;/h2>\n  &#x3C;h2 highlight>The Default (Gray)&#x3C;/h2>\n  &#x3C;h2>No Highlight&#x3C;/h2>\n  &#x3C;input #box [highlight]=\"box.value\" value=\"cyan\"/>`\n})\nclass TestComponent { }\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/testing/highlight-directive-spec.png\" alt=\"HighlightDirective spec in action\" width=\"200\" height=\"159\">\n</figure>\n<div class=\"alert is-helpful\">\n<p>The <code>&#x3C;input></code> case binds the <code>HighlightDirective</code> to the name of a color value in the input box.\nThe initial value is the word \"cyan\" which should be the background color of the input box.</p>\n</div>\n<p>Here are some tests of this component:</p>\n<code-example path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"selected-tests\" header=\"app/shared/highlight.directive.spec.ts (selected tests)\">\nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ HighlightDirective, TestComponent ]\n  })\n  .createComponent(TestComponent);\n\n  fixture.detectChanges(); // initial binding\n\n  // all elements with an attached HighlightDirective\n  des = fixture.debugElement.queryAll(By.directive(HighlightDirective));\n\n  // the h2 without the HighlightDirective\n  bareH2 = fixture.debugElement.query(By.css('h2:not([highlight])'));\n});\n\n// color tests\nit('should have three highlighted elements', () => {\n  expect(des.length).toBe(3);\n});\n\nit('should color 1st &#x3C;h2> background \"yellow\"', () => {\n  const bgColor = des[0].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe('yellow');\n});\n\nit('should color 2nd &#x3C;h2> background w/ default color', () => {\n  const dir = des[1].injector.get(HighlightDirective) as HighlightDirective;\n  const bgColor = des[1].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe(dir.defaultColor);\n});\n\nit('should bind &#x3C;input> background to value color', () => {\n  // easier to work with nativeElement\n  const input = des[2].nativeElement as HTMLInputElement;\n  expect(input.style.backgroundColor).toBe('cyan', 'initial backgroundColor');\n\n  // dispatch <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> DOM event so that Angular responds to the input value change.\n  input.value = 'green';\n  input.dispatchEvent(newEvent('input'));\n  fixture.detectChanges();\n\n  expect(input.style.backgroundColor).toBe('green', 'changed backgroundColor');\n});\n\n\nit('bare &#x3C;h2> should not have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> customProperty', () => {\n  expect(bareH2.properties['customProperty']).toBeUndefined();\n});\n\n</code-example>\n<p>A few techniques are noteworthy:</p>\n<ul>\n<li>\n<p>The <code>By.directive</code> predicate is a great way to get the elements that have this directive <em>when their element types are unknown</em>.</p>\n</li>\n<li>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:not\"><code>:not</code> pseudo-class</a>\nin <code>By.css('h2:not([highlight])')</code> helps find <code>&#x3C;h2></code> elements that <em>do not</em> have the directive.\n<code>By.css('*:not([highlight])')</code> finds <em>any</em> element that does not have the directive.</p>\n</li>\n<li>\n<p><code><a href=\"api/core/DebugElement#styles\" class=\"code-anchor\">DebugElement.styles</a></code> affords access to element styles even in the absence of a real browser, thanks to the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> abstraction.\nBut feel free to exploit the <code>nativeElement</code> when that seems easier or more clear than the abstraction.</p>\n</li>\n<li>\n<p>Angular adds a directive to the injector of the element to which it is applied.\nThe test for the default color uses the injector of the second <code>&#x3C;h2></code> to get its <code>HighlightDirective</code> instance\nand its <code>defaultColor</code>.</p>\n</li>\n<li>\n<p><code><a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">DebugElement.properties</a></code> affords access to the artificial custom property that is set by the directive.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"pipe-testing\">Pipe Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#pipe-testing\"><i class=\"material-icons\">link</i></a></h2>\n<p>Pipes are easy to test without the Angular testing utilities.</p>\n<p>A pipe class has one method, <code>transform</code>, that manipulates the input\nvalue into a transformed output value.\nThe <code>transform</code> implementation rarely interacts with the DOM.\nMost pipes have no dependence on Angular other than the <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>\nmetadata and an interface.</p>\n<p>Consider a <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> that capitalizes the first letter of each word.\nHere's a naive implementation with a regular expression.</p>\n<code-example path=\"testing/src/app/shared/title-case.pipe.ts\" header=\"app/shared/title-case.pipe.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'titlecase', <a href=\"api/core/Pipe#pure\" class=\"code-anchor\">pure</a>: true})\n/** Transform to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case: uppercase the first letter of the words in <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> string.*/\nexport class <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a> implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(input: string): string {\n    return input.length === 0 ? '' :\n      input.replace(/\\w\\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));\n  }\n}\n\n\n</code-example>\n<p>Anything that uses a regular expression is worth testing thoroughly.\nUse simple Jasmine to explore the expected cases and the edge cases.</p>\n<code-example path=\"testing/src/app/shared/title-case.pipe.spec.ts\" region=\"excerpt\" header=\"app/shared/title-case.pipe.spec.ts\">\ndescribe('<a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>', () => {\n  // This pipe is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/core/Pipe#pure\" class=\"code-anchor\">pure</a>, stateless function so no need for BeforeEach\n  let pipe = new <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>();\n\n  it('transforms \"abc\" to \"Abc\"', () => {\n    expect(pipe.transform('abc')).toBe('Abc');\n  });\n\n  it('transforms \"abc def\" to \"Abc Def\"', () => {\n    expect(pipe.transform('abc def')).toBe('Abc Def');\n  });\n\n  // ... more tests ...\n});\n\n</code-example>\n<a id=\"write-tests\"></a>\n<h4 id=\"write-dom-tests-too\">Write DOM tests too<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#write-dom-tests-too\"><i class=\"material-icons\">link</i></a></h4>\n<p>These are tests of the pipe <em>in isolation</em>.\nThey can't tell if the <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> is working properly as applied in the application components.</p>\n<p>Consider adding component tests such as this one:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (pipe test)\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // 이름에 해당하는 input 엘리먼트와 이 이름을 화면에 표시하는 span 엘리먼트를 DOM에서 참조합니다.\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // 사용자가 입력한 것처럼 입력 필드의 내용을 변경합니다.\n  nameInput.value = 'quick BROWN  fOx';\n\n  // 엘리먼트의 값이 변경되었다는 것을 Angular에게 알리기 위해 DOM 이벤트를 생성합니다.\n  nameInput.dispatchEvent(newEvent('input'));\n\n  // Angular가 화면을 갱신하도록 detectChanges() 함수를 실행합니다.\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<hr>\n<a id=\"test-debugging\"></a>\n<h2 id=\"test-debugging\">Test debugging<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-debugging\"><i class=\"material-icons\">link</i></a></h2>\n<p>Debug specs in the browser in the same way that you debug an application.</p>\n<ol>\n<li>Reveal the karma browser window (hidden earlier).</li>\n<li>Click the <strong>DEBUG</strong> button; it opens a new browser tab and re-runs the tests.</li>\n<li>Open the browser's “Developer Tools” (<code>Ctrl-Shift-I</code> on windows; <code>Command-Option-I</code> in OSX).</li>\n<li>Pick the \"sources\" section.</li>\n<li>Open the <code>1st.spec.ts</code> test file (Control/Command-P, then start typing the name of the file).</li>\n<li>Set a breakpoint in the test.</li>\n<li>Refresh the browser, and it stops at the breakpoint.</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/testing/karma-1st-spec-debug.png\" alt=\"Karma debugging\" width=\"700\" height=\"150\">\n</figure>\n<hr>\n<a id=\"atu-apis\"></a>\n<h2 id=\"testing-utility-apis\">Testing Utility APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-utility-apis\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section takes inventory of the most useful Angular testing features and summarizes what they do.</p>\n<p>The Angular testing utilities include the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>, the <code><a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a></code>, and a handful of functions that control the test environment.\nThe <a href=\"guide/testing#testbed-api-summary\"><em>TestBed</em></a> and <a href=\"guide/testing#component-fixture-api-summary\"><em>ComponentFixture</em></a> classes are covered separately.</p>\n<p>Here's a summary of the stand-alone functions, in order of likely utility:</p>\n<table>\n  <tbody><tr>\n    <th>\n      Function\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>\n    </td>\n    <td>\n<p>      Runs the body of a test (<code>it</code>) or setup (<code>beforeEach</code>) function within a special <em>async test zone</em>.\nSee <a href=\"guide/testing#async\">discussion above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a></code>\n    </td>\n    <td>\n<p>      Runs the body of a test (<code>it</code>) within a special <em>fakeAsync test zone</em>, enabling\na linear control flow coding style. See <a href=\"guide/testing#fake-async\">discussion above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a></code>\n    </td>\n    <td>\n<p>      Simulates the passage of time and the completion of pending asynchronous activities\nby flushing both <em>timer</em> and <em>micro-task</em> queues within the <em>fakeAsync test zone</em>.</p>\n      <div class=\"alert is-helpful\">\n<p>      The curious, dedicated reader might enjoy this lengthy blog post,\n<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">\"<em>Tasks, microtasks, queues and schedules</em>\"</a>.</p>\n      </div>\n<p>      Accepts an optional argument that moves the virtual clock forward\nby the specified number of milliseconds,\nclearing asynchronous activities scheduled within that timeframe.\nSee <a href=\"guide/testing#tick\">discussion above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n       <code>inject</code>\n    </td>\n    <td>\n      <!--\n      Injects one or more services from the current `TestBed` injector into a test function.\n      It cannot inject a service provided by the component itself.\n      See discussion of the [debugElement.injector](#get-injected-services).\n      -->\n<p>      Injects one or more services from the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> injector into a test function.\nIt cannot inject a service provided by the component itself.\nSee discussion of the <a href=\"guide/testing#%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%A3%BC%EC%9E%85%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\">debugElement.injector</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/discardPeriodicTasks\" class=\"code-anchor\">discardPeriodicTasks</a></code>\n    </td>\n    <td>\n<p>      When a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test ends with pending timer event <em>tasks</em> (queued <code>setTimeOut</code> and <code>setInterval</code> callbacks),\nthe test fails with a clear error message.</p>\n<p>      In general, a test should end with no queued tasks.\nWhen pending timer tasks are expected, call <code><a href=\"api/core/testing/discardPeriodicTasks\" class=\"code-anchor\">discardPeriodicTasks</a></code> to flush the <em>task</em> queue\nand avoid the error.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/flushMicrotasks\" class=\"code-anchor\">flushMicrotasks</a></code>\n    </td>\n    <td>\n<p>      When a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test ends with pending <em>micro-tasks</em> such as unresolved promises,\nthe test fails with a clear error message.</p>\n<p>      In general, a test should wait for micro-tasks to finish.\nWhen pending microtasks are expected, call <code><a href=\"api/core/testing/flushMicrotasks\" class=\"code-anchor\">flushMicrotasks</a></code> to flush the  <em>micro-task</em> queue\nand avoid the error.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code>\n    </td>\n    <td>\n      <!--\n      A provider token for a service that turns on [automatic change detection](#automatic-change-detection).\n      -->\n<p>      A provider token for a service that turns on <a href=\"guide/testing#%EB%B3%80%ED%99%94%EA%B0%90%EC%A7%80-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\">변화감지 자동으로 실행하기</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/getTestBed\" class=\"code-anchor\">getTestBed</a></code>\n    </td>\n    <td>\n<p>      Gets the current instance of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.\nUsually unnecessary because the static class methods of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class are typically sufficient.\nThe <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance exposes a few rarely used members that are not available as\nstatic methods.</p>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<a id=\"testbed-class-summary\"></a>\n<h4 id=\"testbed-class-summary\"><em>TestBed</em> class summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testbed-class-summary\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class is one of the principal Angular testing utilities.\nIts API is quite large and can be overwhelming until you've explored it,\na little at a time. Read the early part of this guide first\nto get the basics before trying to absorb the full API.</p>\n<p>The module definition passed to <code>configureTestingModule</code>\nis a subset of the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n<code-example format=\".\" language=\"javascript\">\n  type <a href=\"api/core/testing/TestModuleMetadata\" class=\"code-anchor\">TestModuleMetadata</a> = {\n    providers?: any[];\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>?: any[];\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>?: any[];\n    <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>?: Array&#x3C;<a href=\"api/core/SchemaMetadata\" class=\"code-anchor\">SchemaMetadata</a> | any[]>;\n  };\n</code-example>\n<a id=\"metadata-override-object\"></a>\n<p>Each override method takes a <code><a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a>&#x3C;T></code> where <code>T</code> is the kind of metadata\nappropriate to the method, that is, the parameter of an <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>,\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>, <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, or <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>.</p>\n<code-example format=\".\" language=\"javascript\">\n  type <a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a><t> = {\n    add?: Partial<t>;\n    remove?: Partial<t>;\n    set?: Partial<t>;\n  };\n</t></t></t></t></code-example>\n<a id=\"testbed-methods\"></a>\n<a id=\"testbed-api-summary\"></a>\n<p>The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> API consists of static class methods that either update or reference a <em>global</em> instance of the<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.</p>\n<p>Internally, all static methods cover methods of the current runtime <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance,\nwhich is also returned by the <code><a href=\"api/core/testing/getTestBed\" class=\"code-anchor\">getTestBed</a>()</code> function.</p>\n<p>Call <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> methods <em>within</em> a <code>beforeEach()</code> to ensure a fresh start before each individual test.</p>\n<p>Here are the most important static methods, in order of likely utility.</p>\n<table>\n  <tbody><tr>\n    <th>\n      Methods\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>configureTestingModule</code>\n    </td>\n    <td>\n<p>      The testing shims (<code>karma-test-shim</code>, <code>browser-test-shim</code>)\nestablish the <a href=\"guide/testing\">initial test environment</a> and a default testing module.\nThe default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</p>\n<p>      Call <code>configureTestingModule</code> to refine the testing module configuration for a particular set of tests\nby adding and removing imports, declarations (of components, directives, and pipes), and providers.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>compileComponents</code>\n    </td>\n    <td>\n<p>      Compile the testing module asynchronously after you've finished configuring it.\nYou <strong>must</strong> call this method if <em>any</em> of the testing module components have a <code>templateUrl</code>\nor <code><a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a></code> because fetching component template and style files is necessarily asynchronous.\nSee <a href=\"guide/testing#compile-components\">above</a>.</p>\n<p>      After calling <code>compileComponents</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration is frozen for the duration of the current spec.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>createComponent<t></t></code>\n    </td>\n    <td>\n<p>      Create an instance of a component of type <code>T</code> based on the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration.\nAfter calling <code>compileComponent</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration is frozen for the duration of the current spec.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overrideModule</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>. Recall that modules can import other modules.\nThe <code>overrideModule</code> method can reach deeply into the current testing module to\nmodify one of these inner modules.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overrideComponent</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given component class, which could be nested deeply\nwithin an inner module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overrideDirective</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given directive class, which could be nested deeply\nwithin an inner module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overridePipe</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given pipe class, which could be nested deeply\nwithin an inner module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <a id=\"testbed-get\"></a>\n      <code>get</code>\n    </td>\n    <td>\n<p>      Retrieve a service from the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> injector.</p>\n<p>      The <code>inject</code> function is often adequate for this purpose.\nBut <code>inject</code> throws an error if it can't provide the service.</p>\n<p>      What if the service is optional?</p>\n<p>      The <code>TestBed.get()</code> method takes an optional second parameter,\nthe object to return if Angular can't find the provider\n(<code>null</code> in this example):</p>\n<p>      <code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"testbed-get-w-null\" header=\"app/demo/demo.testbed.spec.ts\" linenums=\"false\">\nservice = TestBed.get(NotProvided, null); // service is null\n\n</code-example></p>\n<p>      After calling <code>get</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration is frozen for the duration of the current spec.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <a id=\"testbed-initTestEnvironment\"></a>\n      <code>initTestEnvironment</code>\n    </td>\n    <td>\n<p>      Initialize the testing environment for the entire test run.</p>\n<p>      The testing shims (<code>karma-test-shim</code>, <code>browser-test-shim</code>) call it for you\nso there is rarely a reason for you to call it yourself.</p>\n<p>      You may call this method <em>exactly once</em>. If you must change\nthis default in the middle of your test run, call <code>resetTestEnvironment</code> first.</p>\n<p>      Specify the Angular compiler factory, a <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code>, and a default Angular testing module.\nAlternatives for non-browser platforms are available in the general form\n<code>@angular/platform-&#x3C;platform_name>/testing/&#x3C;platform_name></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>resetTestEnvironment</code>\n    </td>\n    <td>\n<p>      Reset the initial test environment, including the default testing module.</p>\n    </td>\n  </tr>\n</tbody></table>A few of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance methods are not covered by static <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> <em>class</em> methods.\nThese are rarely needed.<p></p>\n<a id=\"component-fixture-api-summary\"></a>\n<h4 id=\"the-componentfixture\">The <em>ComponentFixture</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-componentfixture\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>TestBed.createComponent&#x3C;T></code>\ncreates an instance of the component <code>T</code>\nand returns a strongly typed <code><a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a></code> for that component.</p>\n<p>The <code><a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a></code> properties and methods provide access to the component,\nits DOM representation, and aspects of its Angular environment.</p>\n<a id=\"component-fixture-properties\"></a>\n<h4 id=\"componentfixture-properties\"><em>ComponentFixture</em> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#componentfixture-properties\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here are the most important properties for testers, in order of likely utility.</p>\n<table>\n  <tbody><tr>\n    <th>\n      Properties\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>componentInstance</code>\n    </td>\n    <td>\n<p>      The instance of the component class created by <code>TestBed.createComponent</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/ComponentFixture#debugElement\" class=\"code-anchor\">debugElement</a></code>\n    </td>\n    <td>\n<p>      The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> associated with the root element of the component.</p>\n<p>      The <code><a href=\"api/core/testing/ComponentFixture#debugElement\" class=\"code-anchor\">debugElement</a></code> provides insight into the component and its DOM element during test and debugging.\nIt's a critical property for testers. The most interesting members are covered <a href=\"guide/testing#debug-element-details\">below</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>nativeElement</code>\n    </td>\n    <td>\n<p>      The native DOM element at the root of the component.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>changeDetectorRef</code>\n    </td>\n    <td>\n<p>      The <code><a href=\"api/core/ChangeDetectorRef\" class=\"code-anchor\">ChangeDetectorRef</a></code> for the component.</p>\n<p>      The <code><a href=\"api/core/ChangeDetectorRef\" class=\"code-anchor\">ChangeDetectorRef</a></code> is most valuable when testing a\ncomponent that has the <code><a href=\"api/core/ChangeDetectionStrategy#OnPush\" class=\"code-anchor\">ChangeDetectionStrategy.OnPush</a></code> method\nor the component's change detection is under your programmatic control.</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"component-fixture-methods\"></a>\n<h4 id=\"componentfixture-methods\"><em>ComponentFixture</em> methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#componentfixture-methods\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <em>fixture</em> methods cause Angular to perform certain tasks on the component tree.\nCall these method to trigger Angular behavior in response to simulated user action.</p>\n<p>Here are the most useful methods for testers.</p>\n<table>\n  <tbody><tr>\n    <th>\n      Methods\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>detectChanges</code>\n    </td>\n    <td>\n<p>      Trigger a change detection cycle for the component.</p>\n<p>      Call it to initialize the component (it calls <code>ngOnInit</code>) and after your\ntest code, change the component's data bound property values.\nAngular can't see that you've changed <code>personComponent.name</code> and won't update the <code>name</code>\nbinding until you call <code>detectChanges</code>.</p>\n<p>      Runs <code>checkNoChanges</code>afterwards to confirm that there are no circular updates unless\ncalled as <code>detectChanges(false)</code>;</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>autoDetectChanges</code>\n    </td>\n    <td>\n<p>      Set this to <code>true</code> when you want the fixture to detect changes automatically.</p>\n<p>      When autodetect is <code>true</code>, the test fixture calls <code>detectChanges</code> immediately\nafter creating the component. Then it listens for pertinent zone events\nand calls <code>detectChanges</code> accordingly.\nWhen your test code modifies component property values directly,\nyou probably still have to call <code>fixture.detectChanges</code> to trigger data binding updates.</p>\n<p>      The default is <code>false</code>. Testers who prefer fine control over test behavior\ntend to keep it <code>false</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>checkNoChanges</code>\n    </td>\n    <td>\n<p>      Do a change detection run to make sure there are no pending changes.\nThrows an exceptions if there are.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>isStable</code>\n    </td>\n    <td>\n<p>      If the fixture is currently <em>stable</em>, returns <code>true</code>.\nIf there are async tasks that have not completed, returns <code>false</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>whenStable</code>\n    </td>\n    <td>\n<p>      Returns a promise that resolves when the fixture is stable.</p>\n<p>      To resume testing after completion of asynchronous activity or\nasynchronous change detection, hook that promise.\nSee <a href=\"guide/testing#when-stable\">above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>destroy</code>\n    </td>\n    <td>\n<p>      Trigger component destruction.</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"debug-element-details\"></a>\n<h4 id=\"debugelement-1\"><em>DebugElement</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#debugelement-1\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> provides crucial insights into the component's DOM representation.</p>\n<p>From the test root component's <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> returned by <code>fixture.debugElement</code>,\nyou can walk (and query) the fixture's entire element and component subtrees.</p>\n<p>Here are the most useful <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> members for testers, in approximate order of utility:</p>\n<table>\n  <tbody><tr>\n    <th>\n      Member\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>nativeElement</code>\n    </td>\n    <td>\n<p>      The corresponding DOM element in the browser (null for WebWorkers).</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a></code>\n    </td>\n    <td>\n<p>      Calling <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(predicate: <a href=\"api/core/Predicate\" class=\"code-anchor\">Predicate</a>&#x3C;<a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>>)</code> returns the first <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>\nthat matches the <a href=\"guide/testing#query-predicate\">predicate</a> at any depth in the subtree.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>queryAll</code>\n    </td>\n    <td>\n<p>      Calling <code>queryAll(predicate: <a href=\"api/core/Predicate\" class=\"code-anchor\">Predicate</a>&#x3C;<a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>>)</code> returns all <code>DebugElements</code>\nthat matches the <a href=\"guide/testing#query-predicate\">predicate</a> at any depth in subtree.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>injector</code>\n    </td>\n    <td>\n<p>      The host dependency injector.\nFor example, the root element's component instance injector.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>componentInstance</code>\n    </td>\n    <td>\n<p>      The element's own component instance, if it has one.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>context</code>\n    </td>\n    <td>\n<p>      An object that provides parent context for this element.\nOften an ancestor component instance that governs this element.</p>\n<p>      When an element is repeated within <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, the context is an <code>NgForRow</code> whose <code>$implicit</code>\nproperty is the value of the row instance value.\nFor example, the <code>hero</code> in <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>children</code>\n    </td>\n    <td>\n<p>      The immediate <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> children. Walk the tree by descending through <code>children</code>.</p>\n      <div class=\"alert is-helpful\">\n<p>      <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> also has <code><a href=\"api/core/DebugElement#childNodes\" class=\"code-anchor\">childNodes</a></code>, a list of <code><a href=\"api/core/DebugNode\" class=\"code-anchor\">DebugNode</a></code> objects.\n<code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> derives from <code><a href=\"api/core/DebugNode\" class=\"code-anchor\">DebugNode</a></code> objects and there are often\nmore nodes than elements. Testers can usually ignore plain nodes.</p>\n      </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>parent</code>\n    </td>\n    <td>\n<p>      The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> parent. Null if this is the root element.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>name</code>\n    </td>\n    <td>\n<p>      The element tag name, if it is an element.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>triggerEventHandler</code>\n    </td>\n    <td>\n<p>      Triggers the event by its name if there is a corresponding listener\nin the element's <code><a href=\"api/core/DebugNode#listeners\" class=\"code-anchor\">listeners</a></code> collection.\nThe second parameter is the <em>event object</em> expected by the handler.\nSee <a href=\"guide/testing#trigger-event-handler\">above</a>.</p>\n<p>      If the event lacks a listener or there's some other problem,\nconsider calling <code>nativeElement.dispatchEvent(eventObject)</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/DebugNode#listeners\" class=\"code-anchor\">listeners</a></code>\n    </td>\n    <td>\n<p>      The callbacks attached to the component's <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> properties and/or the element's event properties.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/DebugNode#providerTokens\" class=\"code-anchor\">providerTokens</a></code>\n    </td>\n    <td>\n<p>      This component's injector lookup tokens.\nIncludes the component itself plus the tokens that the component lists in its <code>providers</code> metadata.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>source</code>\n    </td>\n    <td>\n<p>      Where to find this element in the source component template.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/DebugNode#references\" class=\"code-anchor\">references</a></code>\n    </td>\n    <td>\n<p>      Dictionary of objects associated with template local variables (e.g. <code>#foo</code>),\nkeyed by the local variable name.</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"query-predicate\"></a>\n<p>The <code>DebugElement.query(predicate)</code> and <code>DebugElement.queryAll(predicate)</code> methods take a\npredicate that filters the source element's subtree for matching <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>.</p>\n<p>The predicate is any method that takes a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> and returns a <em>truthy</em> value.\nThe following example finds all <code>DebugElements</code> with a reference to a template local variable named \"content\":</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"custom-predicate\" header=\"app/demo/demo.testbed.spec.ts\" linenums=\"false\">\n// Filter for DebugElements with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> #content reference\nconst contentRefs = el.queryAll( de => de.references['content']);\n\n</code-example>\n<p>The Angular <code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> class has three static methods for common predicates:</p>\n<ul>\n<li><code>By.all</code> - return all elements.</li>\n<li><code>By.css(selector)</code> - return elements with matching CSS selectors.</li>\n<li><code>By.directive(directive)</code> - return elements that Angular matched to an instance of the directive class.</li>\n</ul>\n<code-example path=\"testing/src/app/hero/hero-list.component.spec.ts\" region=\"by\" header=\"app/hero/hero-list.component.spec.ts\" linenums=\"false\">\n// Can find <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> either by css selector or by directive\nconst h2        = fixture.debugElement.query(By.css('h2'));\nconst directive = fixture.debugElement.query(By.directive(HighlightDirective));\n\n</code-example>\n<hr>\n<a id=\"faq\"></a>\n<h2 id=\"frequently-asked-questions\">Frequently Asked Questions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#frequently-asked-questions\"><i class=\"material-icons\">link</i></a></h2>\n<a id=\"q-spec-file-location\"></a>\n<h4 id=\"why-put-spec-file-next-to-the-file-it-tests\">Why put spec file next to the file it tests?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#why-put-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>It's a good idea to put unit test spec files in the same folder\nas the application source code files that they test:</p>\n<ul>\n<li>Such tests are easy to find.</li>\n<li>You see at a glance if a part of your application lacks tests.</li>\n<li>Nearby tests can reveal how a part works in context.</li>\n<li>When you move the source (inevitable), you remember to move the test.</li>\n<li>When you rename the source file (inevitable), you remember to rename the test file.</li>\n</ul>\n<hr>\n<a id=\"q-specs-in-test-folder\"></a>\n<h4 id=\"when-would-i-put-specs-in-a-test-folder\">When would I put specs in a test folder?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#when-would-i-put-specs-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4>\n<p>Application integration specs can test the interactions of multiple parts\nspread across folders and modules.\nThey don't really belong to any part in particular, so they don't have a\nnatural home next to any one file.</p>\n<p>It's often better to create an appropriate folder for them in the <code>tests</code> directory.</p>\n<p>Of course specs that test the test helpers belong in the <code>test</code> folder,\nnext to their corresponding helper files.</p>\n<a id=\"q-e2e\"></a>\n<h4 id=\"why-not-rely-on-e2e-tests-of-dom-integration\">Why not rely on E2E tests of DOM integration?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#why-not-rely-on-e2e-tests-of-dom-integration\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe component DOM tests described in this guide often require extensive setup and\nadvanced techniques whereas the [unit tests](#component-class-testing)\nare comparatively simple.\n-->\n<p>The component DOM tests described in this guide often require extensive setup and\nadvanced techniques whereas the <a href=\"guide/testing#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\">unit tests</a>\nare comparatively simple.</p>\n<h4 id=\"why-not-defer-dom-integration-tests-to-end-to-end-e2e-testing\">Why not defer DOM integration tests to end-to-end (E2E) testing?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#why-not-defer-dom-integration-tests-to-end-to-end-e2e-testing\"><i class=\"material-icons\">link</i></a></h4>\n<p>E2E tests are great for high-level validation of the entire system.\nBut they can't give you the comprehensive test coverage that you'd expect from unit tests.</p>\n<p>E2E tests are difficult to write and perform poorly compared to unit tests.\nThey break easily, often due to changes or misbehavior far removed from the site of breakage.</p>\n<p>E2E tests can't easily reveal how your components behave when things go wrong,\nsuch as missing or bad data, lost connectivity, and remote service failures.</p>\n<p>E2E tests for apps that update a database,\nsend an invoice, or charge a credit card require special tricks and back-doors to prevent\naccidental corruption of remote resources.\nIt can even be hard to navigate to the component you want to test.</p>\n<p>Because of these many obstacles, you should test DOM interaction\nwith unit testing techniques as much as possible.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/dependency-injection\n - guide/setup\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/animations/browser/testing/MockAnimationDriver#log\n - api/animations/query\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/TitleCasePipe\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpErrorResponse\n - api/common/http/HttpErrorResponse#message\n - api/common/http/HttpEventType#User\n - api/common/http/testing/HttpClientTestingModule\n - api/core/AfterViewInit\n - api/core/ApplicationInitStatus#done\n - api/core/ApplicationRef#tick\n - api/core/ChangeDetectionStrategy#OnPush\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/Component#template\n - api/core/Component#templateUrl\n - api/core/DebugElement\n - api/core/DebugElement#childNodes\n - api/core/DebugElement#nativeElement\n - api/core/DebugElement#properties\n - api/core/DebugElement#styles\n - api/core/DebugNode\n - api/core/DebugNode#listeners\n - api/core/DebugNode#providerTokens\n - api/core/DebugNode#references\n - api/core/Directive\n - api/core/Directive#host\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/Injectable\n - api/core/Input\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/NgModule#imports\n - api/core/NgModule#schemas\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Pipe#pure\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/Predicate\n - api/core/QueryList#changes\n - api/core/SchemaMetadata\n - api/core/ViewChild\n - api/core/testing/ComponentFixture\n - api/core/testing/ComponentFixture#debugElement\n - api/core/testing/ComponentFixture#detectChanges\n - api/core/testing/ComponentFixture#nativeElement\n - api/core/testing/ComponentFixtureAutoDetect\n - api/core/testing/MetadataOverride\n - api/core/testing/TestBed\n - api/core/testing/TestModuleMetadata\n - api/core/testing/async\n - api/core/testing/discardPeriodicTasks\n - api/core/testing/fakeAsync\n - api/core/testing/flush\n - api/core/testing/flushMicrotasks\n - api/core/testing/getTestBed\n - api/core/testing/tick\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/forms/NgModel#model\n - api/http/HttpModule\n - api/http/RequestMethod#Get\n - api/platform-browser/BrowserModule\n - api/platform-browser/By\n - api/platform-browser/By#css\n - api/platform-browser/Title\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/ParamMap\n - api/router/Params\n - api/router/Router\n - api/router/Router#config\n - api/router/Router#events\n - api/router/Router#navigated\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterOutlet#activatedRoute\n - api/router/convertToParamMap\n - api/router/testing/RouterTestingModule\n - api/service-worker/UpdateActivatedEvent#previous\n - cli\n - cli/test\n - guide/dependency-injection\n - guide/feature-modules\n - guide/http\n - guide/http#http-%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/router#route-parameters\n - guide/setup#%EB%B6%80%EB%A1%9D-fakeasyncasync-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\n - guide/testing#%EB%B3%80%ED%99%94%EA%B0%90%EC%A7%80-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\n - guide/testing#%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9C%BC%EB%A1%9C-%EC%A3%BC%EC%9E%85%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\n - guide/testing#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\n - guide/testing#activatedroutestub\n - guide/testing#angular-cli가-생성한-테스트-코드\n - guide/testing#angular-testbed\n - guide/testing#async\n - guide/testing#async-로-비동기-테스트하기\n - guide/testing#attribute-directive-testing\n - guide/testing#beforeeach\n - guide/testing#beforeeach-없이-테스트하기\n - guide/testing#bycss\n - guide/testing#bydirective-and-injected-directives\n - guide/testing#calling-compilecomponents\n - guide/testing#ci-환경에서-chrome으로-테스트하기\n - guide/testing#circle-ci-환경-설정하기\n - guide/testing#click-helper\n - guide/testing#click-the-element\n - guide/testing#clicking\n - guide/testing#cold-observable\n - guide/testing#compile-components\n - guide/testing#compilecomponents-is-async\n - guide/testing#compilecomponents-is-harmless\n - guide/testing#component-fixture\n - guide/testing#component-fixture-api-summary\n - guide/testing#component-inside-a-test-host\n - guide/testing#component-override\n - guide/testing#component-with-async-service\n - guide/testing#component-with-inputs-and-outputs\n - guide/testing#componentfixture\n - guide/testing#componentfixture-methods\n - guide/testing#componentfixture-properties\n - guide/testing#components-with-routerlink\n - guide/testing#consolidated-setup\n - guide/testing#createcomponent\n - guide/testing#createcomponent-는-데이터를-바인딩하지-않습니다\n - guide/testing#dashboard-hero-component\n - guide/testing#debug-element-details\n - guide/testing#debugelement\n - guide/testing#debugelement-1\n - guide/testing#detectchanges\n - guide/testing#dispatchevent-입력값-변경하기\n - guide/testing#fake-async\n - guide/testing#fakeasync-안에서-jasmineclock-사용하기\n - guide/testing#fakeasync-안에서-rxjs-스케쥴러-사용하기\n - guide/testing#fakeasync-안에서-날짜-비교하기\n - guide/testing#feature-module-import\n - guide/testing#frequently-asked-questions\n - guide/testing#h1-쿼리하기\n - guide/testing#http-서비스-테스트하기\n - guide/testing#httpclienttestingmodule\n - guide/testing#import-a-feature-module\n - guide/testing#import-a-shared-module\n - guide/testing#jasmine-done\n - guide/testing#marble-frame\n - guide/testing#marble-testing\n - guide/testing#metadata-override-object\n - guide/testing#more-overrides\n - guide/testing#nativeelement\n - guide/testing#nested-component-tests\n - guide/testing#no_errors_schema\n - guide/testing#override-component-providers\n - guide/testing#page-object\n - guide/testing#pipe-testing\n - guide/testing#provide-a-spy-stub-herodetailservicespy\n - guide/testing#query-predicate\n - guide/testing#routed-components\n - guide/testing#routerlink\n - guide/testing#routing-component\n - guide/testing#setup-with-module-imports\n - guide/testing#spy-stub\n - guide/testing#stubbing-unneeded-components\n - guide/testing#test-dashboardherocomponent-stand-alone\n - guide/testing#test-debugging\n - guide/testing#testbed-api-summary\n - guide/testing#testbed-class-summary\n - guide/testing#testbed-로-서비스-테스트하기\n - guide/testing#testbedget\n - guide/testing#testing-utility-apis\n - guide/testing#testing-with-activatedroutestub\n - guide/testing#tests-w-test-double\n - guide/testing#the-async-beforeeach\n - guide/testing#the-componentfixture\n - guide/testing#the-override-tests\n - guide/testing#the-overridecomponent-method\n - guide/testing#the-synchronous-beforeeach\n - guide/testing#tick\n - guide/testing#tick-함수\n - guide/testing#travis-ci-환경-설정하기\n - guide/testing#trigger-event-handler\n - guide/testing#triggereventhandler\n - guide/testing#use-a-page-object\n - guide/testing#use-both-techniques-together\n - guide/testing#what-good-are-these-tests\n - guide/testing#when-stable\n - guide/testing#when-would-i-put-specs-in-a-test-folder\n - guide/testing#whenstable\n - guide/testing#why-not-defer-dom-integration-tests-to-end-to-end-e2e-testing\n - guide/testing#why-not-rely-on-e2e-tests-of-dom-integration\n - guide/testing#why-put-spec-file-next-to-the-file-it-tests\n - guide/testing#why-stubbed-routerlink-tests\n - guide/testing#write-dom-tests-too\n - guide/testing#간단하게-줄이기\n - guide/testing#다른-테스트-프레임워크\n - guide/testing#동기-테스트\n - guide/testing#마블-테스트-더-알아보기\n - guide/testing#마블-테스트에서-에러-처리하기\n - guide/testing#마지막-환경설정-테스트\n - guide/testing#매크로태스크macrotasks-활용하기\n - guide/testing#목-서비스-사용하기\n - guide/testing#바인딩\n - guide/testing#변화감지-자동으로-실행하기\n - guide/testing#비동기-서비스를-사용하는-컴포넌트\n - guide/testing#비동기-옵저버블\n - guide/testing#비동기-옵저버블-헬퍼\n - guide/testing#비동기-테스트-활용-예제\n - guide/testing#비동기로-테스트하기-fakeasync\n - guide/testing#서비스-인스턴스는-반드시-인젝터에서-가져오세요\n - guide/testing#서비스-테스트하기\n - guide/testing#스파이로-테스트하기\n - guide/testing#외부-파일로-구성된-컴포넌트\n - guide/testing#의존성-객체가-존재하는-서비스\n - guide/testing#의존성-주입이-필요한-컴포넌트\n - guide/testing#의존성으로-주입한-서비스-가져오기\n - guide/testing#지속적인-통합환경-구성하기\n - guide/testing#컴포넌트-dom-테스트\n - guide/testing#컴포넌트-마블marble-테스트\n - guide/testing#컴포넌트-클래스-테스트\n - guide/testing#컴포넌트-테스트\n - guide/testing#컴포넌트-테스트-시나리오\n - guide/testing#코드-커버리지-강제하기\n - guide/testing#코드-커버리지-리포트-활성화하기\n - guide/testing#테스트\n - guide/testing#테스트-설정\n - guide/testing#테스트-파일의-이름과-위치\n - guide/testing#환경-설정\n - tutorial\n - http://reactivex.io/documentation/operators/defer.html\n - http://rxmarbles.com/\n - https://circleci.com/add-projects\n - https://circleci.com/docs/2.0/\n - https://circleci.com/docs/2.0/first-steps/\n - https://crbug.com/737678\n - https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n - https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\n - https://developer.mozilla.org/en-US/docs/Web/CSS/:not\n - https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n - https://developers.google.com/web/updates/2017/04/headless-chrome#cli\n - https://docs.npmjs.com/cli/run-script\n - https://docs.travis-ci.com/\n - https://github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md\n - https://github.com/angular/angular-cli\n - https://github.com/angular/angular/edit/master/aio/content/guide/testing.md?message=docs%3A%20describe%20your%20change...\n - https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n - https://jasmine.github.io/\n - https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\n - https://jasmine.github.io/2.0/introduction.html#section-Spies\n - https://karma-runner.github.io\n - https://karma-runner.github.io/latest/config/configuration-file.html\n - https://plnkr.co/\n - https://travis-ci.org/auth\n - https://www.protractortest.org/#/api-overview\n-->"
}