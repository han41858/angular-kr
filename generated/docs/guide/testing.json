{
  "id": "guide/testing",
  "title": "Testing",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<a id=\"top\"></a>\n<h1 id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n<p>This guide offers tips and techniques for unit and integration testing Angular applications.</p>\n<p>The guide presents tests of a sample application created with the <a href=\"cli\">Angular CLI</a>. This sample application is much like the one created in the <a href=\"tutorial\"><em>Tour of Heroes</em> tutorial</a>.\nThe sample application and all tests in this guide are available for inspection and experimentation:</p>\n<ul>\n<li><live-example embedded-style=\"\">Sample app</live-example></li>\n<li><live-example stackblitz=\"specs\">Tests</live-example></li>\n</ul>\n<hr>\n<h2 id=\"setup\">Setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#setup\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular CLI downloads and install everything you need to test an Angular application with the <a href=\"https://jasmine.github.io/\">Jasmine test framework</a>.</p>\n<p>The project you create with the CLI is immediately ready to test.\nJust run the <a href=\"cli/test\"><code>ng test</code></a> CLI command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test\n</code-example>\n<p>The <code>ng test</code> command builds the app in <em>watch mode</em>,\nand launches the <a href=\"https://karma-runner.github.io\">karma test runner</a>.</p>\n<p>The console output looks a bit like this:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n10% building modules 1/1 modules 0 active\n...INFO [karma]: Karma v1.7.1 server started at <a href=\"api/common/http\" class=\"code-anchor\">http</a>://0.0.0.0:9876/\n...INFO [launcher]: Launching <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> Chrome ...\n...INFO [launcher]: Starting <a href=\"api/animations/browser\" class=\"code-anchor\">browser</a> Chrome\n...INFO [Chrome ...]: Connected on socket ...\nChrome ...: Executed 3 of 3 SUCCESS (0.135 secs / 0.205 secs)\n</code-example>\n<p>The last line of the log is the most important.\nIt shows that Karma ran three tests that all passed.</p>\n<p>A chrome browser also opens and displays the test output in the \"Jasmine HTML Reporter\" like this.</p>\n<figure>\n  <img src=\"generated/images/guide/testing/initial-jasmine-html-reporter.png\" alt=\"Jasmine HTML Reporter in the browser\" width=\"502\" height=\"306\">\n</figure>\n<p>Most people find this browser output easier to read than the console log.\nYou can click on a test row to re-run just that test or click on a description to re-run the tests in the selected test group (\"test suite\").</p>\n<p>Meanwhile, the <code>ng test</code> command is watching for changes.</p>\n<p>To see this in action, make a small change to <code>app.component.ts</code> and save.\nThe tests run again, the browser refreshes, and the new test results appear.</p>\n<h4 id=\"configuration\">Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configuration\"><i class=\"material-icons\">link</i></a></h4>\n<p>The CLI takes care of Jasmine and karma configuration for you.</p>\n<p>You can fine-tune many options by editing the <code>karma.conf.js</code> and\nthe <code>test.ts</code> files in the <code>src/</code> folder.</p>\n<p>The <code>karma.conf.js</code> file is a partial karma configuration file.\nThe CLI constructs the full runtime configuration in memory,based on application structure specified in the <code>angular.json</code> file, supplemented by <code>karma.conf.js</code>.</p>\n<p>Search the web for more details about Jasmine and karma configuration.</p>\n<h4 id=\"other-test-frameworks\">Other test frameworks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#other-test-frameworks\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can also unit test an Angular app with other testing libraries and test runners.\nEach library and runner has its own distinctive installation procedures, configuration, and syntax.</p>\n<p>Search the web to learn more.</p>\n<h4 id=\"test-file-name-and-location\">Test file name and location<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-file-name-and-location\"><i class=\"material-icons\">link</i></a></h4>\n<p>Look inside the <code>src/app</code> folder.</p>\n<p>The CLI generated a test file for the <code>AppComponent</code> named <code>app.component.spec.ts</code>.</p>\n<div class=\"alert is-important\">\n<p>The test file extension <strong>must be <code>.spec.ts</code></strong> so that tooling can identify it as a file with tests (AKA, a <em>spec</em> file).</p>\n</div>\n<p>The <code>app.component.ts</code> and <code>app.component.spec.ts</code> files are siblings in the same folder.\nThe root file names (<code>app.component</code>) are the same for both files.</p>\n<p>Adopt these two conventions in your own projects for <em>every kind</em> of test file.</p>\n<a id=\"ci\"></a>\n<h2 id=\"set-up-continuous-integration\">Set up continuous integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-continuous-integration\"><i class=\"material-icons\">link</i></a></h2>\n<p>One of the best ways to keep your project bug free is through a test suite, but it's easy to forget to run tests all the time.\nContinuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request.</p>\n<p>There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others.\nAlthough Circle CI and Travis CI are paid services, they are provided free for open source projects.\nYou can create a public project on GitHub and add these services without paying.\nContributions to the Angular repo are automatically run through a whole suite of Circle CI and Travis CI tests.</p>\n<p>This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</p>\n<h3 id=\"configure-project-for-circle-ci\">Configure project for Circle CI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-circle-ci\"><i class=\"material-icons\">link</i></a></h3>\n<p>Step 1: Create a folder called <code>.circleci</code> at the project root.</p>\n<p>Step 2: In the new folder, create a file called <code>config.yml</code> with the following content:</p>\n<code-example>\nversion: 2\njobs:\n  build:\n    working_directory: ~/my-project\n    docker:\n      - image: circleci/node:8-browsers\n    steps:\n      - checkout\n      - restore_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n      - run: npm install\n      - save_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n          paths:\n            - \"node_modules\"\n      - run: npm run test -- --single-run --no-progress --browser=ChromeHeadlessCI\n      - run: npm run e2e -- --no-progress --config=protractor-ci.conf.js\n</code-example>\n<p>This configuration caches <code>node_modules/</code> and uses <a href=\"https://docs.npmjs.com/cli/run-script\"><code>npm run</code></a> to run CLI commands, because <code>@angular/cli</code> is not installed globally.\nThe double dash (<code>--</code>) is needed to pass arguments into the <code>npm</code> script.</p>\n<p>Step 3: Commit your changes and push them to your repository.</p>\n<p>Step 4: <a href=\"https://circleci.com/docs/2.0/first-steps/\">Sign up for Circle CI</a> and <a href=\"https://circleci.com/add-projects\">add your project</a>.\nYour project should start building.</p>\n<ul>\n<li>Learn more about Circle CI from <a href=\"https://circleci.com/docs/2.0/\">Circle CI documentation</a>.</li>\n</ul>\n<h3 id=\"configure-project-for-travis-ci\">Configure project for Travis CI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-travis-ci\"><i class=\"material-icons\">link</i></a></h3>\n<p>Step 1: Create a file called <code>.travis.yml</code> at the project root, with the following content:</p>\n<code-example>\ndist: trusty\nsudo: false\n\nlanguage: node_js\nnode_js:\n  - \"8\"\n  \naddons:\n  apt:\n    sources:\n      - google-chrome\n    packages:\n      - google-chrome-stable\n\ncache:\n  directories:\n     - ./node_modules\n\ninstall:\n  - npm install\n\nscript:\n  - npm run test -- --single-run --no-progress --browser=ChromeHeadlessCI\n  - npm run e2e -- --no-progress --config=protractor-ci.conf.js\n</code-example>\n<p>This does the same things as the Circle CI configuration, except that Travis doesn't come with Chrome, so we use Chromium instead.</p>\n<p>Step 2: Commit your changes and push them to your repository.</p>\n<p>Step 3: <a href=\"https://travis-ci.org/auth\">Sign up for Travis CI</a> and <a href=\"https://travis-ci.org/profile\">add your project</a>.\nYou'll need to push a new commit to trigger a build.</p>\n<ul>\n<li>Learn more about Travis CI testing from <a href=\"https://docs.travis-ci.com/\">Travis CI documentation</a>.</li>\n</ul>\n<h3 id=\"configure-cli-for-ci-testing-in-chrome\">Configure CLI for CI testing in Chrome<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-cli-for-ci-testing-in-chrome\"><i class=\"material-icons\">link</i></a></h3>\n<p>When the CLI commands <code>ng test</code> and <code>ng e2e</code> are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests.</p>\n<p>There are configuration files for both the <a href=\"https://karma-runner.github.io/latest/config/configuration-file.html\">Karma JavaScript test runner</a>\nand <a href=\"https://www.protractortest.org/#/api-overview\">Protractor</a> end-to-end testing tool,\nwhich  you must adjust to start Chrome without sandboxing.</p>\n<p>We'll be using <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome#cli\">Headless Chrome</a> in these examples.</p>\n<ul>\n<li>In the Karma configuration file, <code>karma.conf.js</code>, add a custom launcher called ChromeNoSandbox below browsers:</li>\n</ul>\n<code-example>\nbrowsers: ['Chrome'],\ncustomLaunchers: {\n  ChromeHeadlessCI: {\n    base: 'ChromeHeadless',\n    flags: ['--no-sandbox']\n  }\n},\n</code-example>\n<ul>\n<li>Create a new file, <code>protractor-ci.conf.js</code>, in the root folder of your project, which extends the original <code>protractor.conf.js</code>:</li>\n</ul>\n<code-example>\nconst <a href=\"api/router/Router#config\" class=\"code-anchor\">config</a> = require('./protractor.conf').config;\n\nconfig.capabilities = {\n  browserName: 'chrome',\n  chromeOptions: {\n    args: ['--headless', '--no-sandbox']\n  }\n};\n\nexports.config = <a href=\"api/router/Router#config\" class=\"code-anchor\">config</a>;\n</code-example>\n<p>Now you can run the following commands to use the <code>--no-sandbox</code> flag:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test --single-run --no-progress --browser=ChromeHeadlessCI\n  ng e2e --no-progress --config=protractor-ci.conf.js\n</code-example>\n<div class=\"alert is-helpful\">\n<p>   <strong>Note:</strong> Right now, you'll also want to include the <code>--disable-gpu</code> flag if you're running on Windows. See <a href=\"https://crbug.com/737678\">crbug.com/737678</a>.</p>\n</div>\n<a id=\"code-coverage\"></a>\n<h2 id=\"enable-code-coverage-reports\">Enable code coverage reports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#enable-code-coverage-reports\"><i class=\"material-icons\">link</i></a></h2>\n<p>The CLI can run unit tests and create code coverage reports.\nCode coverage reports show you  any parts of our code base that may not be properly tested by your unit tests.</p>\n<p>To generate a coverage report run the following command in the root of your project.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test --watch=false --code-coverage\n</code-example>\n<p>When  the tests are complete, the command creates a new <code>/coverage</code> folder in the project. Open the <code>index.html</code> file to see a report with your source code and code coverage values.</p>\n<p>If you want to create code-coverage reports every time you test, you can set the following option in the CLI configuration file, <code>angular.json</code>:</p>\n<code-example>\n  \"test\": {\n    \"options\": {\n      \"codeCoverage\": true\n    }\n  }\n</code-example>\n<h3 id=\"code-coverage-enforcement\">Code coverage enforcement<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#code-coverage-enforcement\"><i class=\"material-icons\">link</i></a></h3>\n<p>The code coverage percentages let you estimate how much of your code is tested.<br>\nIf your team decides on a set minimum amount to be unit tested, you can enforce this minimum with the Angular CLI. </p>\n<p>For example, suppose you want the code base to have a minimum of 80% code coverage.\nTo enable this, open the <a href=\"https://karma-runner.github.io\">Karma</a> test platform configuration file, <code>karma.conf.js</code>, and add the following in the <code>coverageIstanbulReporter:</code> key.</p>\n<code-example>\ncoverageIstanbulReporter: {\n  reports: [ 'html', 'lcovonly' ],\n  fixWebpackSourcePaths: true,\n  thresholds: {\n    statements: 80,\n    lines: 80,\n    branches: 80,\n    functions: 80\n  }\n}\n</code-example>\n<p>The <code>thresholds</code> property causes the tool to enforce a minimum of 80% code coverage when the unit tests are run in the project.</p>\n<h2 id=\"service-tests\">Service Tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#service-tests\"><i class=\"material-icons\">link</i></a></h2>\n<p>Services are often the easiest files to unit test.\nHere are some synchronous and asynchronous unit tests of the <code>ValueService</code>\nwritten without assistance from Angular testing utilities.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"ValueService\" header=\"app/demo/demo.spec.ts\">\n// Straight Jasmine testing without Angular's testing support\ndescribe('ValueService', () => {\n  let service: ValueService;\n  beforeEach(() => { service = new ValueService(); });\n\n  it('#getValue should return real value', () => {\n    expect(service.getValue()).toBe('real value');\n  });\n\n  it('#getObservableValue should return value from observable',\n    (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n    service.getObservableValue().subscribe(value => {\n      expect(value).toBe('observable value');\n      <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n    });\n  });\n\n  it('#getPromiseValue should return value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> promise',\n    (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n    service.getPromiseValue().then(value => {\n      expect(value).toBe('promise value');\n      <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n    });\n  });\n});\n\n</code-example>\n<a id=\"services-with-dependencies\"></a>\n<h4 id=\"services-with-dependencies\">Services with dependencies<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#services-with-dependencies\"><i class=\"material-icons\">link</i></a></h4>\n<p>Services often depend on other services that Angular injects into the constructor.\nIn many cases, it easy to create and <em>inject</em> these dependencies by hand while\ncalling the service's constructor.</p>\n<p>The <code>MasterService</code> is a simple example:</p>\n<code-example path=\"testing/src/app/demo/demo.ts\" region=\"MasterService\" header=\"app/demo/demo.ts\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class MasterService {\n  constructor(private valueService: ValueService) { }\n  getValue() { return this.valueService.getValue(); }\n}\n\n</code-example>\n<p><code>MasterService</code> delegates its only method, <code>getValue</code>, to the injected <code>ValueService</code>.</p>\n<p>Here are several ways to test it.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"MasterService\" header=\"app/demo/demo.spec.ts\">\ndescribe('MasterService without Angular testing support', () => {\n  let masterService: MasterService;\n\n  it('#getValue should return real value from the real service', () => {\n    masterService = new MasterService(new ValueService());\n    expect(masterService.getValue()).toBe('real value');\n  });\n\n  it('#getValue should return faked value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> fakeService', () => {\n    masterService = new MasterService(new FakeValueService());\n    expect(masterService.getValue()).toBe('faked service value');\n  });\n\n  it('#getValue should return faked value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> fake object', () => {\n    const fake =  { getValue: () => 'fake value' };\n    masterService = new MasterService(fake as ValueService);\n    expect(masterService.getValue()).toBe('fake value');\n  });\n\n  it('#getValue should return stubbed value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> spy', () => {\n    // create `getValue` spy on an object representing the ValueService\n    const valueServiceSpy =\n      jasmine.createSpyObj('ValueService', ['getValue']);\n\n    // set the value to return when the `getValue` spy is called.\n    const stubValue = 'stub value';\n    valueServiceSpy.getValue.and.returnValue(stubValue);\n\n    masterService = new MasterService(valueServiceSpy);\n\n    expect(masterService.getValue())\n      .toBe(stubValue, 'service returned stub value');\n    expect(valueServiceSpy.getValue.calls.count())\n      .toBe(1, 'spy method was called once');\n    expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n      .toBe(stubValue);\n  });\n});\n\n</code-example>\n<p>The first test creates a <code>ValueService</code> with <code>new</code> and passes it to the <code>MasterService</code> constructor.</p>\n<p>However, injecting the real service rarely works well as most dependent services are difficult to create and control.</p>\n<p>Instead you can mock the dependency, use a dummy value, or create a\n<a href=\"https://jasmine.github.io/2.0/introduction.html#section-Spies\">spy</a>\non the pertinent service method.</p>\n<div class=\"alert is-helpful\">\n<p>Prefer spies as they are usually the easiest way to mock services.</p>\n</div>\n<p>These standard testing techniques are great for unit testing services in isolation.</p>\n<p>However, you almost always inject service into application classes using Angular\ndependency injection and you should have tests that reflect that usage pattern.\nAngular testing utilities make it easy to investigate how injected services behave.</p>\n<h4 id=\"testing-services-with-the-testbed\">Testing services with the <em>TestBed</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-services-with-the-testbed\"><i class=\"material-icons\">link</i></a></h4>\n<p>Your app relies on Angular <a href=\"guide/dependency-injection\">dependency injection (DI)</a>\nto create services.\nWhen a service has a dependent service, DI finds or creates that dependent service.\nAnd if that dependent service has its own dependencies, DI finds-or-creates them as well.</p>\n<p>As service <em>consumer</em>, you don't worry about any of this.\nYou don't worry about the order of constructor arguments or how they're created.</p>\n<p>As a service <em>tester</em>, you must at least think about the first level of service dependencies\nbut you <em>can</em> let Angular DI do the service creation and deal with constructor argument order\nwhen you use the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> testing utility to provide and create services.</p>\n<a id=\"testbed\"></a>\n<h4 id=\"angular-testbed\">Angular <em>TestBed</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#angular-testbed\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> is the most important of the Angular testing utilities.\nThe <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> creates a dynamically-constructed Angular <em>test</em> module that emulates\nan Angular <a href=\"guide/ngmodules\">@NgModule</a>.</p>\n<p>The <code><a href=\"api/core/testing/TestBed#configureTestingModule\" class=\"code-anchor\">TestBed.configureTestingModule()</a></code> method takes a metadata object that can have most of the properties of an <a href=\"guide/ngmodules\">@NgModule</a>.</p>\n<p>To test a service, you set the <code>providers</code> metadata property with an\narray of the services that you'll test or mock.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-before-each\" header=\"app/demo/demo.testbed.spec.ts (provide ValueService in beforeEach\">\nlet service: ValueService;\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({ providers: [ValueService] });\n});\n\n</code-example>\n<p>Then inject it inside a test by calling <code><a href=\"api/core/testing/TestBed#get\" class=\"code-anchor\">TestBed.get()</a></code> with the service class as the argument.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-inject-it\">\nit('should use ValueService', () => {\n  service = TestBed.get(ValueService);\n  expect(service.getValue()).toBe('real value');\n});\n\n</code-example>\n<p>Or inside the <code>beforeEach()</code> if you prefer to inject the service as part of your setup.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"value-service-inject-before-each\">\nbeforeEach(() => {\n  TestBed.configureTestingModule({ providers: [ValueService] });\n  service = TestBed.get(ValueService);\n});\n\n</code-example>\n<p>When testing a service with a dependency, provide the mock in the <code>providers</code> array.</p>\n<p>In the following example, the mock is a spy object.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"master-service-before-each\" linenums=\"false\">\nlet masterService: MasterService;\nlet valueServiceSpy: jasmine.SpyObj&#x3C;ValueService>;\n\nbeforeEach(() => {\n  const spy = jasmine.createSpyObj('ValueService', ['getValue']);\n\n  TestBed.configureTestingModule({\n    // Provide both the service-to-test and its (spy) dependency\n    providers: [\n      MasterService,\n      { provide: ValueService, useValue: spy }\n    ]\n  });\n  // <a href=\"api/core/Inject\" class=\"code-anchor\">Inject</a> both the service-to-test and its (spy) dependency\n  masterService = TestBed.get(MasterService);\n  valueServiceSpy = TestBed.get(ValueService);\n});\n\n</code-example>\n<p>The test consumes that spy in the same way it did earlier.</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"master-service-it\">\nit('#getValue should return stubbed value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> spy', () => {\n  const stubValue = 'stub value';\n  valueServiceSpy.getValue.and.returnValue(stubValue);\n\n  expect(masterService.getValue())\n    .toBe(stubValue, 'service returned stub value');\n  expect(valueServiceSpy.getValue.calls.count())\n    .toBe(1, 'spy method was called once');\n  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n    .toBe(stubValue);\n});\n\n</code-example>\n<a id=\"no-before-each\"></a>\n<h4 id=\"testing-without-beforeeach\">Testing without <em>beforeEach()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-without-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<p>Most test suites in this guide call <code>beforeEach()</code> to set the preconditions for each <code>it()</code> test\nand rely on the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to create classes and inject services.</p>\n<p>There's another school of testing that never calls <code>beforeEach()</code> and prefers to create classes explicitly rather than use the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.</p>\n<p>Here's how you might rewrite one of the <code>MasterService</code> tests in that style.</p>\n<p>Begin by putting re-usable, preparatory code in a <em>setup</em> function instead of <code>beforeEach()</code>.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"no-before-each-setup\" header=\"app/demo/demo.spec.ts (setup)\" linenums=\"false\">\nfunction setup() {\n  const valueServiceSpy =\n    jasmine.createSpyObj('ValueService', ['getValue']);\n  const stubValue = 'stub value';\n  const masterService = new MasterService(valueServiceSpy);\n\n  valueServiceSpy.getValue.and.returnValue(stubValue);\n  return { masterService, stubValue, valueServiceSpy };\n}\n\n</code-example>\n<p>The <code>setup()</code> function returns an object literal\nwith the variables, such as <code>masterService</code>, that a test might reference.\nYou don't define <em>semi-global</em> variables (e.g., <code>let masterService: MasterService</code>)\nin the body of the <code>describe()</code>.</p>\n<p>Then each test invokes <code>setup()</code> in its first line, before continuing\nwith steps that manipulate the test subject and assert expectations.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"no-before-each-test\" linenums=\"false\">\nit('#getValue should return stubbed value from <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> spy', () => {\n  const { masterService, stubValue, valueServiceSpy } = setup();\n  expect(masterService.getValue())\n    .toBe(stubValue, 'service returned stub value');\n  expect(valueServiceSpy.getValue.calls.count())\n    .toBe(1, 'spy method was called once');\n  expect(valueServiceSpy.getValue.calls.mostRecent().returnValue)\n    .toBe(stubValue);\n});\n\n</code-example>\n<p>Notice how the test uses\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\"><em>destructuring assignment</em></a>\nto extract the setup variables that it needs.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"no-before-each-setup-call\">\nconst { masterService, stubValue, valueServiceSpy } = setup();\n\n</code-example>\n<p>Many developers feel this approach is cleaner and more explicit than the\ntraditional <code>beforeEach()</code> style.</p>\n<p>Although this testing guide follows the tradition style and\nthe default <a href=\"https://github.com/angular/angular-cli\">CLI schematics</a>\ngenerate test files with <code>beforeEach()</code> and <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>,\nfeel free to adopt <em>this alternative approach</em> in your own projects.</p>\n<h4 id=\"testing-http-services\">Testing HTTP services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-http-services\"><i class=\"material-icons\">link</i></a></h4>\n<p>Data services that make HTTP calls to remote servers typically inject and delegate\nto the Angular <a href=\"guide/http\"><code>HttpClient</code></a> service for XHR calls.</p>\n<p>You can test a data service with an injected <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> spy as you would\ntest any service with a dependency.\n<code-example path=\"testing/src/app/model/hero.service.spec.ts\" region=\"test-with-spies\" header=\"app/model/hero.service.spec.ts (tests with spies)\">\nlet httpClientSpy: { get: jasmine.Spy };\nlet heroService: HeroService;\n\nbeforeEach(() => {\n  // TODO: spy on other methods too\n  httpClientSpy = jasmine.createSpyObj('<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>', ['get']);\n  heroService = new HeroService(&#x3C;any> httpClientSpy);\n});\n\nit('should return expected heroes (<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> called once)', () => {\n  const expectedHeroes: Hero[] =\n    [{ id: 1, name: 'A' }, { id: 2, name: 'B' }];\n\n  httpClientSpy.get.and.returnValue(asyncData(expectedHeroes));\n\n  heroService.getHeroes().subscribe(\n    heroes => expect(heroes).toEqual(expectedHeroes, 'expected heroes'),\n    fail\n  );\n  expect(httpClientSpy.get.calls.count()).toBe(1, 'one call');\n});\n\nit('should return an error when the server returns <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> 404', () => {\n  const errorResponse = new <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>({\n    error: 'test 404 error',\n    status: 404, statusText: 'Not Found'\n  });\n\n  httpClientSpy.get.and.returnValue(asyncError(errorResponse));\n\n  heroService.getHeroes().subscribe(\n    heroes => fail('expected an error, not heroes'),\n    error  => expect(error.message).toContain('test 404 error')\n  );\n});\n\n</code-example></p>\n<div class=\"alert is-important\">\n<p>The <code>HeroService</code> methods return <code>Observables</code>. You must\n<em>subscribe</em> to an observable to (a) cause it to execute and (b)\nassert that the method succeeds or fails.</p>\n<p>The <code>subscribe()</code> method takes a success (<code>next</code>) and fail (<code>error</code>) callback.\nMake sure you provide <em>both</em> callbacks so that you capture errors.\nNeglecting to do so produces an asynchronous uncaught observable error that\nthe test runner will likely attribute to a completely different test.</p>\n</div>\n<h4 id=\"httpclienttestingmodule\"><em>HttpClientTestingModule</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#httpclienttestingmodule\"><i class=\"material-icons\">link</i></a></h4>\n<p>Extended interactions between a data service and the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> can be complex\nand difficult to mock with spies.</p>\n<p>The <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> can make these testing scenarios more manageable.</p>\n<!--\nWhile the _code sample_ accompanying this guide demonstrates `HttpClientTestingModule`,\nthis page defers to the [Http guide](guide/http#testing-http-requests),\nwhich covers testing with the `HttpClientTestingModule` in detail.\n-->\n<p>While the <em>code sample</em> accompanying this guide demonstrates <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>,\nthis page defers to the <a href=\"guide/http#http-%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\">Http guide</a>,\nwhich covers testing with the <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code> in detail.</p>\n<div class=\"alert is-helpful\">\n<p>This guide's sample code also demonstrates testing of the <em>legacy</em> <code><a href=\"api/http/HttpModule\" class=\"code-anchor\">HttpModule</a></code>\nin <code>app/<a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a>/http-hero.service.spec.ts</code>.</p>\n</div>\n<h2 id=\"component-test-basics\">Component Test Basics<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-test-basics\"><i class=\"material-icons\">link</i></a></h2>\n<p>A component, unlike all other parts of an Angular application,\ncombines an HTML template and a TypeScript class.\nThe component truly is the template and the class <em>working together</em>.\nand to adequately test a component, you should test that they work together\nas intended.</p>\n<p>Such tests require creating the component's host element in the browser DOM,\nas Angular does, and investigating the component class's interaction with\nthe DOM as described by its template.</p>\n<p>The Angular <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> facilitates this kind of testing as you'll see in the sections below.\nBut in many cases, <em>testing the component class alone</em>, without DOM involvement,\ncan validate much of the component's behavior in an easier, more obvious way.</p>\n<h3 id=\"component-class-testing\">Component class testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-class-testing\"><i class=\"material-icons\">link</i></a></h3>\n<p>Test a component class on its own as you would test a service class.</p>\n<p>Consider this <code>LightswitchComponent</code> which toggles a light on and off\n(represented by an on-screen message) when the user clicks the button.</p>\n<code-example path=\"testing/src/app/demo/demo.ts\" region=\"LightswitchComp\" header=\"app/demo/demo.ts (LightswitchComp)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'lightswitch-comp',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;button (click)=\"clicked()\">Click me!&#x3C;/button>\n    &#x3C;span>{{<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>}}&#x3C;/span>`\n})\nexport class LightswitchComponent {\n  isOn = false;\n  clicked() { this.isOn = !this.isOn; }\n  get <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>() { return `The light is ${this.isOn ? 'On' : 'Off'}`; }\n}\n\n</code-example>\n<p>You might decide only to test that the <code>clicked()</code> method\ntoggles the light's <em>on/off</em> state and sets the message appropriately.</p>\n<p>This component class has no dependencies.\nTo test a service with no dependencies, you create it with <code>new</code>, poke at its API,\nand assert expectations on its public state.\nDo the same with the component class.</p>\n<code-example path=\"testing/src/app/demo/demo.spec.ts\" region=\"Lightswitch\" header=\"app/demo/demo.spec.ts (Lightswitch tests)\" linenums=\"false\">\ndescribe('LightswitchComp', () => {\n  it('#clicked() should toggle #isOn', () => {\n    const comp = new LightswitchComponent();\n    expect(comp.isOn).toBe(false, 'off at first');\n    comp.clicked();\n    expect(comp.isOn).toBe(true, 'on after click');\n    comp.clicked();\n    expect(comp.isOn).toBe(false, 'off after second click');\n  });\n\n  it('#clicked() should set #<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> to \"is on\"', () => {\n    const comp = new LightswitchComponent();\n    expect(comp.message).toMatch(/is off/i, 'off at first');\n    comp.clicked();\n    expect(comp.message).toMatch(/is on/i, 'on after clicked');\n  });\n});\n\n</code-example>\n<p>Here is the <code>DashboardHeroComponent</code> from the <em>Tour of Heroes</em> tutorial.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.ts\" region=\"class\" header=\"app/dashboard/dashboard-hero.component.ts (component)\" linenums=\"false\">\nexport class DashboardHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() selected = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Hero>();\n  click() { this.selected.emit(this.hero); }\n}\n\n</code-example>\n<p>It appears within the template of a parent component,\nwhich binds a <em>hero</em> to the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> property and\nlistens for an event raised through the <em>selected</em> <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> property.</p>\n<p>You can test that the class code works without creating the <code>DashboardHeroComponent</code>\nor its parent component.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"class-only\" header=\"app/dashboard/dashboard-hero.component.spec.ts (class tests)\" linenums=\"false\">\nit('raises the selected event when clicked', () => {\n  const comp = new DashboardHeroComponent();\n  const hero: Hero = { id: 42, name: 'Test' };\n  comp.hero = hero;\n\n  comp.selected.subscribe(selectedHero => expect(selectedHero).toBe(hero));\n  comp.click();\n});\n\n</code-example>\n<p>When a component has dependencies, you may wish to use the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to both\ncreate the component and its dependencies.</p>\n<p>The following <code>WelcomeComponent</code> depends on the <code>UserService</code> to know the name of the user to greet.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.ts\" region=\"class\" header=\"app/welcome/welcome.component.ts\" linenums=\"false\">\nexport class WelcomeComponent  implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  welcome: string;\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.welcome = this.userService.isLoggedIn ?\n      'Welcome, ' + this.userService.user.name : 'Please <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in.';\n  }\n}\n\n</code-example>\n<p>You might start by creating a mock of the <code>UserService</code> that meets the minimum needs of this component.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"mock-user-service\" header=\"app/welcome/welcome.component.spec.ts (MockUserService)\" linenums=\"false\">\nclass MockUserService {\n  isLoggedIn = true;\n  user = { name: 'Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>'};\n};\n\n</code-example>\n<p>Then provide and inject <em>both the</em> <strong>component</strong> <em>and the service</em> in the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"class-only-before-each\" header=\"app/welcome/welcome.component.spec.ts (class-only setup)\" linenums=\"false\">\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    // provide the component-under-test and dependent service\n    providers: [\n      WelcomeComponent,\n      { provide: UserService, useClass: MockUserService }\n    ]\n  });\n  // inject both the component and the dependent service.\n  comp = TestBed.get(WelcomeComponent);\n  userService = TestBed.get(UserService);\n});\n\n</code-example>\n<p>Then exercise the component class, remembering to call the <a href=\"guide/lifecycle-hooks\">lifecycle hook methods</a> as Angular does when running the app.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"class-only-tests\" header=\"app/welcome/welcome.component.spec.ts (class-only tests)\" linenums=\"false\">\nit('should not have welcome <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> after construction', () => {\n  expect(comp.welcome).toBeUndefined();\n});\n\nit('should welcome logged in user after Angular calls ngOnInit', () => {\n  comp.ngOnInit();\n  expect(comp.welcome).toContain(userService.user.name);\n});\n\nit('should ask user to <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in if not logged in after ngOnInit', () => {\n  userService.isLoggedIn = false;\n  comp.ngOnInit();\n  expect(comp.welcome).not.toContain(userService.user.name);\n  expect(comp.welcome).toContain('<a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in');\n});\n\n</code-example>\n<h3 id=\"component-dom-testing\">Component DOM testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-dom-testing\"><i class=\"material-icons\">link</i></a></h3>\n<p>Testing the component <em>class</em> is as easy as testing a service.</p>\n<p>But a component is more than just its class.\nA component interacts with the DOM and with other components.\nThe <em>class-only</em> tests can tell you about class behavior.\nThey cannot tell you if the component is going to render properly,\nrespond to user input and gestures, or integrate with its parent and child components.</p>\n<p>None of the <em>class-only</em> tests above can answer key questions about how the\ncomponents actually behave on screen.</p>\n<ul>\n<li>Is <code>Lightswitch.clicked()</code> bound to anything such that the user can invoke it?</li>\n<li>Is the <code>Lightswitch.message</code> displayed?</li>\n<li>Can the user actually select the hero displayed by <code>DashboardHeroComponent</code>?</li>\n<li>Is the hero name displayed as expected (i.e, in uppercase)?</li>\n<li>Is the welcome message displayed by the template of <code>WelcomeComponent</code>?</li>\n</ul>\n<p>These may not be troubling questions for the simple components illustrated above.\nBut many components have complex interactions with the DOM elements\ndescribed in their templates, causing HTML to appear and disappear as\nthe component state changes.</p>\n<p>To answer these kinds of questions, you have to create the DOM elements associated\nwith the components, you must examine the DOM to confirm that component state\ndisplays properly at the appropriate times, and you must simulate user interaction\nwith the screen to determine whether those interactions cause the component to\nbehave as expected.</p>\n<p>To write these kinds of test, you'll use additional features of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>\nas well as other testing helpers.</p>\n<h4 id=\"cli-generated-tests\">CLI-generated tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#cli-generated-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>The CLI creates an initial test file for you by default when you ask it to\ngenerate a new component.</p>\n<p>For example, the following CLI command generates a <code>BannerComponent</code> in the <code>app/banner</code> folder (with inline template and styles):</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component banner --inline-template --inline-style --module app\n</code-example>\n<p>It also generates an initial test file for the component, <code>banner-external.component.spec.ts</code>, that looks like this:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v1\" header=\"app/banner/banner-external.component.spec.ts (initial)\" linenums=\"false\">\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { BannerComponent } from './banner.component';\n\ndescribe('BannerComponent', () => {\n  let component: BannerComponent;\n  let fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n    })\n    .compileComponents();\n  }));\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n<h4 id=\"reduce-the-setup\">Reduce the setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#reduce-the-setup\"><i class=\"material-icons\">link</i></a></h4>\n<p>Only the last three lines of this file actually test the component\nand all they do is assert that Angular can create the component.</p>\n<p>The rest of the file is boilerplate setup code anticipating more advanced tests that <em>might</em> become necessary if the component evolves into something substantial.</p>\n<p>You'll learn about these advanced test features below.\nFor now, you can radically reduce this test file to a more manageable size:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v2\" header=\"app/banner/banner-initial.component.spec.ts (minimal)\" linenums=\"false\">\ndescribe('BannerComponent (minimal)', () => {\n  it('should create', () => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n    });\n    const fixture = TestBed.createComponent(BannerComponent);\n    const component = fixture.componentInstance;\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n<p>In this example, the metadata object passed to <code>TestBed.configureTestingModule</code>\nsimply declares <code>BannerComponent</code>, the component to test.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"configureTestingModule\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>There's no need to declare or import anything else.\nThe default test module is pre-configured with\nsomething like the <code><a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a></code> from <code>@angular/platform-browser</code>.</p>\n<p>Later you'll call <code><a href=\"api/core/testing/TestBed#configureTestingModule\" class=\"code-anchor\">TestBed.configureTestingModule()</a></code> with\nimports, providers, and more declarations to suit your testing needs.\nOptional <code>override</code> methods can further fine-tune aspects of the configuration.</p>\n</div>\n<a id=\"create-component\"></a>\n<h4 id=\"createcomponent\"><em>createComponent()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#createcomponent\"><i class=\"material-icons\">link</i></a></h4>\n<p>After configuring <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>, you call its <code>createComponent()</code> method.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"createComponent\">\nconst fixture = TestBed.createComponent(BannerComponent);\n\n</code-example>\n<p><code><a href=\"api/core/testing/TestBed#createComponent\" class=\"code-anchor\">TestBed.createComponent()</a></code> creates an instance of the <code>BannerComponent</code>,\nadds a corresponding element to the test-runner DOM,\nand returns a <a href=\"guide/testing#component-fixture\"><code>ComponentFixture</code></a>.</p>\n<div class=\"alert is-important\">\n<p>Do not re-configure <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> after calling <code>createComponent</code>.</p>\n<p>The <code>createComponent</code> method freezes the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>definition,\nclosing it to further configuration.</p>\n<p>You cannot call any more <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration methods, not <code>configureTestingModule()</code>,\nnor <code>get()</code>, nor any of the <code>override...</code> methods.\nIf you try, <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> throws an error.</p>\n</div>\n<a id=\"component-fixture\"></a>\n<h4 id=\"componentfixture\"><em>ComponentFixture</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#componentfixture\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <a href=\"api/core/testing/ComponentFixture\">ComponentFixture</a> is a test harness for interacting with the created component and its corresponding element.</p>\n<p>Access the component instance through the fixture and confirm it exists with a Jasmine expectation:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"componentInstance\">\nconst component = fixture.componentInstance;\nexpect(component).toBeDefined();\n\n</code-example>\n<h4 id=\"beforeeach\"><em>beforeEach()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<p>You will add more tests as this component evolves.\nRather than duplicate the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration for each test,\nyou refactor to pull the setup into a Jasmine <code>beforeEach()</code> and some supporting variables:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v3\" linenums=\"false\">\ndescribe('BannerComponent (with beforeEach)', () => {\n  let component: BannerComponent;\n  let fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ]\n    });\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should create', () => {\n    expect(component).toBeDefined();\n  });\n});\n\n</code-example>\n<p>Now add a test that gets the component's element from <code>fixture.nativeElement</code> and\nlooks for the expected text.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-2\">\nit('should contain \"banner works!\"', () => {\n  const bannerElement: HTMLElement = fixture.nativeElement;\n  expect(bannerElement.textContent).toContain('banner works!');\n});\n\n</code-example>\n<a id=\"native-element\"></a>\n<h4 id=\"nativeelement\"><em>nativeElement</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#nativeelement\"><i class=\"material-icons\">link</i></a></h4>\n<p>The value of <code><a href=\"api/core/testing/ComponentFixture#nativeElement\" class=\"code-anchor\">ComponentFixture.nativeElement</a></code> has the <code>any</code> type.\nLater you'll encounter the <code><a href=\"api/core/DebugElement#nativeElement\" class=\"code-anchor\">DebugElement.nativeElement</a></code> and it too has the <code>any</code> type.</p>\n<p>Angular can't know at compile time what kind of HTML element the <code>nativeElement</code> is or\nif it even is an HTML element.\nThe app might be running on a <em>non-browser platform</em>, such as the server or a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">Web Worker</a>,\nwhere the element may have a diminished API or not exist at all.</p>\n<p>The tests in this guide are designed to run in a browser so a\n<code>nativeElement</code> value will always be an <code>HTMLElement</code> or\none of its derived classes.</p>\n<p>Knowing that it is an <code>HTMLElement</code> of some sort, you can use\nthe standard HTML <code>querySelector</code> to dive deeper into the element tree.</p>\n<p>Here's another test that calls <code>HTMLElement.querySelector</code> to get the paragraph element and look for the banner text:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-3\">\nit('should have &#x3C;p> with \"banner works!\"', () => {\n  const bannerElement: HTMLElement = fixture.nativeElement;\n  const p = bannerElement.querySelector('p');\n  expect(p.textContent).toEqual('banner works!');\n});\n\n</code-example>\n<a id=\"debug-element\"></a>\n<h4 id=\"debugelement\"><em>DebugElement</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#debugelement\"><i class=\"material-icons\">link</i></a></h4>\n<p>The Angular <em>fixture</em> provides the component's element directly through the <code>fixture.nativeElement</code>.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"nativeElement\">\nconst bannerElement: HTMLElement = fixture.nativeElement;\n\n</code-example>\n<p>This is actually a convenience method, implemented as <code>fixture.debugElement.nativeElement</code>.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"debugElement-nativeElement\">\nconst bannerDe: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> = fixture.debugElement;\nconst bannerEl: HTMLElement = bannerDe.nativeElement;\n\n</code-example>\n<p>There's a good reason for this circuitous path to the element.</p>\n<p>The properties of the <code>nativeElement</code> depend upon the runtime environment.\nYou could be running these tests on a <em>non-browser</em> platform that doesn't have a DOM or\nwhose DOM-emulation doesn't support the full <code>HTMLElement</code> API.</p>\n<p>Angular relies on the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> abstraction to work safely across <em>all supported platforms</em>.\nInstead of creating an HTML element tree, Angular creates a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> tree that wraps the <em>native elements</em> for the runtime platform.\nThe <code>nativeElement</code> property unwraps the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> and returns the platform-specific element object.</p>\n<p>Because the sample tests for this guide are designed to run only in a browser,\na <code>nativeElement</code> in these tests is always an <code>HTMLElement</code>\nwhose familiar methods and properties you can explore within a test.</p>\n<p>Here's the previous test, re-implemented with <code>fixture.debugElement.nativeElement</code>:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-4\">\nit('should find the &#x3C;p> with fixture.debugElement.nativeElement)', () => {\n  const bannerDe: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> = fixture.debugElement;\n  const bannerEl: HTMLElement = bannerDe.nativeElement;\n  const p = bannerEl.querySelector('p');\n  expect(p.textContent).toEqual('banner works!');\n});\n\n</code-example>\n<p>The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> has other methods and properties that\nare useful in tests, as you'll see elsewhere in this guide.</p>\n<p>You import the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> symbol from the Angular core library.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"import-debug-element\">\nimport { <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> } from '@angular/core';\n\n</code-example>\n<a id=\"by-css\"></a>\n<h4 id=\"bycss\"><em>By.css()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#bycss\"><i class=\"material-icons\">link</i></a></h4>\n<p>Although the tests in this guide all run in the browser,\nsome apps might run on a different platform at least some of the time.</p>\n<p>For example, the component might render first on the server as part of a strategy to make the application launch faster on poorly connected devices. The server-side renderer might not support the full HTML element API.\nIf it doesn't support <code>querySelector</code>, the previous test could fail.</p>\n<p>The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> offers query methods that work for all supported platforms.\nThese query methods take a <em>predicate</em> function that returns <code>true</code> when a node in the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> tree matches the selection criteria.</p>\n<p>You create a <em>predicate</em> with the help of a <code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> class imported from a\nlibrary for the runtime platform. Here's the <code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> import for the browser platform:</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"import-by\">\nimport { <a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a> } from '@angular/platform-browser';\n\n</code-example>\n<p>The following example re-implements the previous test with\n<code><a href=\"api/core/DebugElement#query\" class=\"code-anchor\">DebugElement.query()</a></code> and the browser's <code>By.css</code> method.</p>\n<code-example path=\"testing/src/app/banner/banner-initial.component.spec.ts\" region=\"v4-test-5\">\nit('should find the &#x3C;p> with fixture.debugElement.query(By.css)', () => {\n  const bannerDe: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> = fixture.debugElement;\n  const paragraphDe = bannerDe.query(By.css('p'));\n  const p: HTMLElement = paragraphDe.nativeElement;\n  expect(p.textContent).toEqual('banner works!');\n});\n\n</code-example>\n<p>Some noteworthy observations:</p>\n<ul>\n<li>The <code><a href=\"api/platform-browser/By#css\" class=\"code-anchor\">By.css()</a></code> static method selects <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> nodes\nwith a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors\" title=\"CSS selectors\">standard CSS selector</a>.</li>\n<li>The query returns a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> for the paragraph.</li>\n<li>You must unwrap that result to get the paragraph element.</li>\n</ul>\n<p>When you're filtering by CSS selector and only testing properties of a browser's <em>native element</em>, the <code>By.css</code> approach may be overkill.</p>\n<p>It's often easier and more clear to filter with a standard <code>HTMLElement</code> method\nsuch as <code>querySelector()</code> or <code>querySelectorAll()</code>,\nas you'll see in the next set of tests.</p>\n<hr>\n<h2 id=\"component-test-scenarios\">Component Test Scenarios<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-test-scenarios\"><i class=\"material-icons\">link</i></a></h2>\n<p>The following sections, comprising most of this guide, explore common\ncomponent testing scenarios</p>\n<h3 id=\"component-binding\">Component binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-binding\"><i class=\"material-icons\">link</i></a></h3>\n<p>The current <code>BannerComponent</code> presents static title text in the HTML template.</p>\n<p>After a few changes, the <code>BannerComponent</code> presents a dynamic title by binding to\nthe component's <code>title</code> property like this.</p>\n<code-example path=\"testing/src/app/banner/banner.component.ts\" region=\"component\" header=\"app/banner/banner.component.ts\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: '&#x3C;h1>{{title}}&#x3C;/h1>',\n  styles: ['h1 { color: green; font-size: 350%}']\n})\nexport class BannerComponent {\n  title = 'Test Tour of Heroes';\n}\n\n</code-example>\n<p>Simple as this is, you decide to add a test to confirm that component\nactually displays the right content where you think it should.</p>\n<h4 id=\"query-for-the-h1\">Query for the <em>&#x3C;h1></em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#query-for-the-h1\"><i class=\"material-icons\">link</i></a></h4>\n<p>You'll write a sequence of tests that inspect the value of the <code>&#x3C;h1></code> element\nthat wraps the <em>title</em> property interpolation binding.</p>\n<p>You update the <code>beforeEach</code> to find that element with a standard HTML <code>querySelector</code>\nand assign it to the <code>h1</code> variable.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"setup\" header=\"app/banner/banner.component.spec.ts (setup)\" linenums=\"false\">\nlet component: BannerComponent;\nlet fixture:   <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;BannerComponent>;\nlet h1:        HTMLElement;\n\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance; // BannerComponent test instance\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<a id=\"detect-changes\"></a>\n<h4 id=\"createcomponent-does-not-bind-data\"><em>createComponent()</em> does not bind data<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#createcomponent-does-not-bind-data\"><i class=\"material-icons\">link</i></a></h4>\n<p>For your first test you'd like to see that the screen displays the default <code>title</code>.\nYour instinct is to write a test that immediately inspects the <code>&#x3C;h1></code> like this:</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"expect-h1-default-v1\">\nit('should display original title', () => {\n  expect(h1.textContent).toContain(component.title);\n});\n\n</code-example>\n<p><em>That test fails</em> with the message:</p>\n<code-example language=\"javascript\">\nexpected '' to contain 'Test Tour of Heroes'.\n</code-example>\n<p>Binding happens when Angular performs <strong>change detection</strong>.</p>\n<p>In production, change detection kicks in automatically\nwhen Angular creates a component or the user enters a keystroke or\nan asynchronous activity (e.g., AJAX) completes.</p>\n<p>The <code>TestBed.createComponent</code> does <em>not</em> trigger change detection.\na fact confirmed in the revised test:</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"test-w-o-detect-changes\" linenums=\"false\">\nit('no title in the DOM after createComponent()', () => {\n  expect(h1.textContent).toEqual('');\n});\n\n</code-example>\n<h4 id=\"detectchanges\"><em>detectChanges()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#detectchanges\"><i class=\"material-icons\">link</i></a></h4>\n<p>You must tell the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to perform data binding by calling <code>fixture.detectChanges()</code>.\nOnly then does the <code>&#x3C;h1></code> have the expected title.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"expect-h1-default\">\nit('should display original title after detectChanges()', () => {\n  fixture.detectChanges();\n  expect(h1.textContent).toContain(component.title);\n});\n\n</code-example>\n<p>Delayed change detection is intentional and useful.\nIt gives the tester an opportunity to inspect and change the state of\nthe component <em>before Angular initiates data binding and calls <a href=\"guide/lifecycle-hooks\">lifecycle hooks</a></em>.</p>\n<p>Here's another test that changes the component's <code>title</code> property <em>before</em> calling <code>fixture.detectChanges()</code>.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"after-change\">\nit('should display <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> different test title', () => {\n  component.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  fixture.detectChanges();\n  expect(h1.textContent).toContain('Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>');\n});\n\n</code-example>\n<a id=\"auto-detect-changes\"></a>\n<h4 id=\"automatic-change-detection\">Automatic change detection<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#automatic-change-detection\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>BannerComponent</code> tests frequently call <code>detectChanges</code>.\nSome testers prefer that the Angular test environment run change detection automatically.</p>\n<p>That's possible by configuring the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> with the <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> provider.\nFirst import it from the testing utility library:</p>\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"import-ComponentFixtureAutoDetect\" header=\"app/banner/banner.component.detect-changes.spec.ts (import)\" linenums=\"false\">\nimport { <a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a> } from '@angular/core/testing';\n\n</code-example>\n<p>Then add it to the <code>providers</code> array of the testing module configuration:</p>\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"auto-detect\" header=\"app/banner/banner.component.detect-changes.spec.ts (AutoDetect)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  providers: [\n    { provide: <a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a>, useValue: true }\n  ]\n});\n\n</code-example>\n<p>Here are three tests that illustrate how automatic change detection works.</p>\n<code-example path=\"testing/src/app/banner/banner.component.detect-changes.spec.ts\" region=\"auto-detect-tests\" header=\"app/banner/banner.component.detect-changes.spec.ts (AutoDetect Tests)\" linenums=\"false\">\nit('should display original title', () => {\n  // Hooray! No `fixture.detectChanges()` needed\n  expect(h1.textContent).toContain(comp.title);\n});\n\nit('should still see original title after comp.title change', () => {\n  const oldTitle = comp.title;\n  comp.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  // Displayed title is old because Angular didn't hear the change :(\n  expect(h1.textContent).toContain(oldTitle);\n});\n\nit('should display updated title after detectChanges', () => {\n  comp.title = 'Test <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a>';\n  fixture.detectChanges(); // detect <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a> explicitly\n  expect(h1.textContent).toContain(comp.title);\n});\n\n</code-example>\n<p>The first test shows the benefit of automatic change detection.</p>\n<p>The second and third test reveal an important limitation.\nThe Angular testing environment does <em>not</em> know that the test changed the component's <code>title</code>.\nThe <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code> service responds to <em>asynchronous activities</em> such as promise resolution, timers, and DOM events.\nBut a direct, synchronous update of the component property is invisible.\nThe test must call <code>fixture.detectChanges()</code> manually to trigger another cycle of change detection.</p>\n<div class=\"alert is-helpful\">\n<p>Rather than wonder when the test fixture will or won't perform change detection,\nthe samples in this guide <em>always call</em> <code>detectChanges()</code> <em>explicitly</em>.\nThere is no harm in calling <code>detectChanges()</code> more often than is strictly necessary.</p>\n</div>\n<hr>\n<a id=\"dispatch-event\"></a>\n<h4 id=\"change-an-input-value-with-dispatchevent\">Change an input value with <em>dispatchEvent()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#change-an-input-value-with-dispatchevent\"><i class=\"material-icons\">link</i></a></h4>\n<p>To simulate user input, you can find the input element and set its <code>value</code> property.</p>\n<p>You will call <code>fixture.detectChanges()</code> to trigger Angular's change detection.\nBut there is an essential, intermediate step.</p>\n<p>Angular doesn't know that you set the input element's <code>value</code> property.\nIt won't read that property until you raise the element's <code>input</code> event by calling <code>dispatchEvent()</code>.\n<em>Then</em> you call <code>detectChanges()</code>.</p>\n<p>The following example demonstrates the proper sequence.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (pipe test)\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // get the name's input and display elements from the DOM\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // simulate user entering <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // dispatch <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> DOM event so that Angular learns of input value change.\n  nameInput.dispatchEvent(newEvent('input'));\n\n  // Tell Angular to <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> the display binding through the title pipe\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<hr>\n<h3 id=\"component-with-external-files\">Component with external files<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-with-external-files\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>BannerComponent</code> above is defined with an <em>inline template</em> and <em>inline css</em>, specified in the <code>@<a href=\"api/core/Component#template\" class=\"code-anchor\">Component.template</a></code> and <code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code> properties respectively.</p>\n<p>Many components specify <em>external templates</em> and <em>external css</em> with the\n<code>@<a href=\"api/core/Component#templateUrl\" class=\"code-anchor\">Component.templateUrl</a></code> and <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> properties respectively,\nas the following variant of <code>BannerComponent</code> does.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" region=\"metadata\" header=\"app/banner/banner-external.component.ts (metadata)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  templateUrl: './banner-external.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>:  ['./banner-external.component.css']\n})\n\n</code-example>\n<p>This syntax tells the Angular compiler to read the external files during component compilation.</p>\n<p>That's not a problem when you run the CLI <code>ng test</code> command because it\n<em>compiles the app before running the tests</em>.</p>\n<p>However, if you run the tests in a <strong>non-CLI environment</strong>,\ntests of this component may fail.\nFor example, if you run the <code>BannerComponent</code> tests in a web coding environment such as <a href=\"https://plnkr.co/\">plunker</a>, you'll see a message like this one:</p>\n<code-example language=\"sh\" class=\"code-shell\" hidecopy=\"\">\nError: This test module uses the component BannerComponent\nwhich is using <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> \"templateUrl\" or \"<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>\", but they were never compiled.\nPlease call \"TestBed.compileComponents\" before your test.\n</code-example>\n<p>You get this test failure message when the runtime environment\ncompiles the source code <em>during the tests themselves</em>.</p>\n<p>To correct the problem, call <code>compileComponents()</code> as explained <a href=\"guide/testing#compile-components\">below</a>.</p>\n<a id=\"component-with-dependency\"></a>\n<h3 id=\"component-with-a-dependency\">Component with a dependency<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-with-a-dependency\"><i class=\"material-icons\">link</i></a></h3>\n<p>Components often have service dependencies.</p>\n<p>The <code>WelcomeComponent</code> displays a welcome message to the logged in user.\nIt knows who the user is based on a property of the injected <code>UserService</code>:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.ts\" header=\"app/welcome/welcome.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> } from '@angular/core';\nimport { UserService }       from '../<a href=\"api/forms/NgModel#model\" class=\"code-anchor\">model</a>/user.service';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-welcome',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: '&#x3C;h3 class=\"welcome\">&#x3C;i>{{welcome}}&#x3C;/i>&#x3C;/h3>'\n})\nexport class WelcomeComponent  implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  welcome: string;\n  constructor(private userService: UserService) { }\n\n  ngOnInit(): void {\n    this.welcome = this.userService.isLoggedIn ?\n      'Welcome, ' + this.userService.user.name : 'Please <a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in.';\n  }\n}\n\n\n</code-example>\n<p>The <code>WelcomeComponent</code> has decision logic that interacts with the service, logic that makes this component worth testing.\nHere's the testing module configuration for the spec file, <code>app/welcome/welcome.component.spec.ts</code>:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"config-test-module\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nTestBed.configureTestingModule({\n   <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ WelcomeComponent ],\n// providers:    [ UserService ]  // NO! Don't provide the real service!\n                                  // Provide <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> test-double instead\n   providers:    [ {provide: UserService, useValue: userServiceStub } ]\n});\n\n</code-example>\n<p>This time, in addition to declaring the <em>component-under-test</em>,\nthe configuration adds a <code>UserService</code> provider to the <code>providers</code> list.\nBut not the real <code>UserService</code>.</p>\n<a id=\"service-test-doubles\"></a>\n<h4 id=\"provide-service-test-doubles\">Provide service test doubles<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#provide-service-test-doubles\"><i class=\"material-icons\">link</i></a></h4>\n<p>A <em>component-under-test</em> doesn't have to be injected with real services.\nIn fact, it is usually better if they are test doubles (stubs, fakes, spies, or mocks).\nThe purpose of the spec is to test the component, not the service,\nand real services can be trouble.</p>\n<p>Injecting the real <code>UserService</code> could be a nightmare.\nThe real service might ask the user for login credentials and\nattempt to reach an authentication server.\nThese behaviors can be hard to intercept.\nIt is far easier and safer to create and register a test double in place of the real <code>UserService</code>.</p>\n<p>This particular test suite supplies a minimal mock of the <code>UserService</code> that satisfies the needs of the <code>WelcomeComponent</code>\nand its tests:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"user-service-stub\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nlet userServiceStub: Partial&#x3C;UserService>;\n\nuserServiceStub = {\n  isLoggedIn: true,\n  user: { name: 'Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>'}\n};\n\n</code-example>\n<a id=\"get-injected-service\"></a>\n<h4 id=\"get-injected-services\">Get injected services<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#get-injected-services\"><i class=\"material-icons\">link</i></a></h4>\n<p>The tests need access to the (stub) <code>UserService</code> injected into the <code>WelcomeComponent</code>.</p>\n<p>Angular has a hierarchical injection system.\nThere can be injectors at multiple levels, from the root injector created by the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>\ndown through the component tree.</p>\n<p>The safest way to get the injected service, the way that <strong><em>always works</em></strong>,\nis to <strong>get it from the injector of the <em>component-under-test</em></strong>.\nThe component injector is a property of the fixture's <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"injected-service\" header=\"WelcomeComponent&#x27;s injector\">\n// UserService actually injected into the component\nuserService = fixture.debugElement.injector.get(UserService);\n\n</code-example>\n<a id=\"testbed-get\"></a>\n<h4 id=\"testbedget\"><em>TestBed.get()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testbedget\"><i class=\"material-icons\">link</i></a></h4>\n<p>You <em>may</em> also be able to get the service from the root injector via <code><a href=\"api/core/testing/TestBed#get\" class=\"code-anchor\">TestBed.get()</a></code>.\nThis is easier to remember and less verbose.\nBut it only works when Angular injects the component with the service instance in the test's root injector.</p>\n<p>In this test suite, the <em>only</em> provider of <code>UserService</code> is the root testing module,\nso it is safe to call <code><a href=\"api/core/testing/TestBed#get\" class=\"code-anchor\">TestBed.get()</a></code> as follows:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"inject-from-testbed\" header=\"TestBed injector\">\n// UserService from the root injector\nuserService = TestBed.get(UserService);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>For a use case in which <code><a href=\"api/core/testing/TestBed#get\" class=\"code-anchor\">TestBed.get()</a></code> does not work,\nsee the <a href=\"guide/testing#component-override\"><em>Override component providers</em></a> section that\nexplains when and why you must get the service from the component's injector instead.</p>\n</div>\n<a id=\"service-from-injector\"></a>\n<h4 id=\"always-get-the-service-from-an-injector\">Always get the service from an injector<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#always-get-the-service-from-an-injector\"><i class=\"material-icons\">link</i></a></h4>\n<p>Do <em>not</em> reference the <code>userServiceStub</code> object\nthat's provided to the testing module in the body of your test.\n<strong>It does not work!</strong>\nThe <code>userService</code> instance injected into the component is a completely <em>different</em> object,\na clone of the provided <code>userServiceStub</code>.</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"stub-not-injected\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nit('stub object and injected UserService should not be the same', () => {\n  expect(userServiceStub === userService).toBe(false);\n\n  // Changing the stub object has no effect on the injected service\n  userServiceStub.isLoggedIn = false;\n  expect(userService.isLoggedIn).toBe(true);\n});\n\n</code-example>\n<a id=\"welcome-spec-setup\"></a>\n<h4 id=\"final-setup-and-tests\">Final setup and tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#final-setup-and-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here's the complete <code>beforeEach()</code>, using <code><a href=\"api/core/testing/TestBed#get\" class=\"code-anchor\">TestBed.get()</a></code>:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"setup\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\n  let userServiceStub: Partial&#x3C;UserService>;\n\nbeforeEach(() => {\n  // stub UserService for test purposes\n  userServiceStub = {\n    isLoggedIn: true,\n    user: { name: 'Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>'}\n  };\n\n  TestBed.configureTestingModule({\n     <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ WelcomeComponent ],\n     providers:    [ {provide: UserService, useValue: userServiceStub } ]\n  });\n\n  fixture = TestBed.createComponent(WelcomeComponent);\n  comp    = fixture.componentInstance;\n\n  // UserService from the root injector\n  userService = TestBed.get(UserService);\n\n  //  get the \"welcome\" element by CSS selector (e.g., by class name)\n  el = fixture.nativeElement.querySelector('.welcome');\n});\n\n</code-example>\n<p>And here are some tests:</p>\n<code-example path=\"testing/src/app/welcome/welcome.component.spec.ts\" region=\"tests\" header=\"app/welcome/welcome.component.spec.ts\" linenums=\"false\">\nit('should welcome the user', () => {\n  fixture.detectChanges();\n  const content = el.textContent;\n  expect(content).toContain('Welcome', '\"Welcome ...\"');\n  expect(content).toContain('Test <a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a>', 'expected name');\n});\n\nit('should welcome \"Bubba\"', () => {\n  userService.user.name = 'Bubba'; // welcome <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> hasn't been shown yet\n  fixture.detectChanges();\n  expect(el.textContent).toContain('Bubba');\n});\n\nit('should request login if not logged in', () => {\n  userService.isLoggedIn = false; // welcome <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> hasn't been shown yet\n  fixture.detectChanges();\n  const content = el.textContent;\n  expect(content).not.toContain('Welcome', 'not welcomed');\n  expect(content).toMatch(/<a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in/i, '\"<a href=\"api/animations/browser/testing/MockAnimationDriver#log\" class=\"code-anchor\">log</a> in\"');\n});\n\n</code-example>\n<p>The first is a sanity test; it confirms that the stubbed <code>UserService</code> is called and working.</p>\n<div class=\"alert is-helpful\">\n<p>The second parameter to the Jasmine matcher (e.g., <code>'expected name'</code>) is an optional failure label.\nIf the expectation fails, Jasmine displays appends this label to the expectation failure message.\nIn a spec with multiple expectations, it can help clarify what went wrong and which expectation failed.</p>\n</div>\n<p>The remaining tests confirm the logic of the component when the service returns different values.\nThe second test validates the effect of changing the user name.\nThe third test checks that the component displays the proper message when there is no logged-in user.</p>\n<hr>\n<a id=\"component-with-async-service\"></a>\n<h3 id=\"component-with-async-service\">Component with async service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-with-async-service\"><i class=\"material-icons\">link</i></a></h3>\n<p>In this sample, the <code>AboutComponent</code> template hosts a <code>TwainComponent</code>.\nThe <code>TwainComponent</code> displays Mark Twain quotes.</p>\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"template\" header=\"app/twain/twain.component.ts (template)\" linenums=\"false\">\n<a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n  &#x3C;p class=\"twain\">&#x3C;i>{{quote | async}}&#x3C;/i>&#x3C;/p>\n  &#x3C;button (click)=\"getQuote()\">Next quote&#x3C;/button>\n  &#x3C;p class=\"error\" *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"errorMessage\">{{ errorMessage }}&#x3C;/p>`,\n\n</code-example>\n<p>Note that value of the component's <code>quote</code> property passes through an <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>.\nThat means the property returns either a <code>Promise</code> or an <code>Observable</code>.</p>\n<p>In this example, the <code>TwainComponent.getQuote()</code> method tells you that\nthe <code>quote</code> property returns an <code>Observable</code>.</p>\n<code-example path=\"testing/src/app/twain/twain.component.ts\" region=\"get-quote\" header=\"app/twain/twain.component.ts (getQuote)\" linenums=\"false\">\ngetQuote() {\n  this.errorMessage = '';\n  this.quote = this.twainService.getQuote().pipe(\n    startWith('...'),\n    catchError( (err: any) => {\n      // Wait <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> turn because errorMessage already set once this turn\n      setTimeout(() => this.errorMessage = err.message || err.toString());\n      return of('...'); // reset <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> to placeholder\n    })\n  );\n\n</code-example>\n<p>The <code>TwainComponent</code> gets quotes from an injected <code>TwainService</code>.\nThe component starts the returned <code>Observable</code> with a placeholder value (<code>'...'</code>),\nbefore the service can returns its first quote.</p>\n<p>The <code>catchError</code> intercepts service errors, prepares an error message,\nand returns the placeholder value on the success channel.\nIt must wait a tick to set the <code>errorMessage</code>\nin order to avoid updating that message twice in the same change detection cycle.</p>\n<p>These are all features you'll want to test.</p>\n<h4 id=\"testing-with-a-spy\">Testing with a spy<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-with-a-spy\"><i class=\"material-icons\">link</i></a></h4>\n<p>When testing a component, only the service's public API should matter.\nIn general, tests themselves should not make calls to remote servers.\nThey should emulate such calls. The setup in this <code>app/twain/twain.component.spec.ts</code> shows one way to do that:</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"setup\" header=\"app/twain/twain.component.spec.ts (setup)\" linenums=\"false\">\nbeforeEach(() => {\n  testQuote = 'Test Quote';\n\n  // Create <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> fake TwainService object with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> `getQuote()` spy\n  const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n  // Make the spy return <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> synchronous Observable with the test data\n  getQuoteSpy = twainService.getQuote.and.returnValue( of(testQuote) );\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ TwainComponent ],\n    providers:    [\n      { provide: TwainService, useValue: twainService }\n    ]\n  });\n\n  fixture = TestBed.createComponent(TwainComponent);\n  component = fixture.componentInstance;\n  quoteEl = fixture.nativeElement.querySelector('.twain');\n});\n\n</code-example>\n<a id=\"service-spy\"></a>\n<p>Focus on the spy.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"spy\">\n// Create <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> fake TwainService object with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> `getQuote()` spy\nconst twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n// Make the spy return <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> synchronous Observable with the test data\ngetQuoteSpy = twainService.getQuote.and.returnValue( of(testQuote) );\n\n</code-example>\n<p>The spy is designed such that any call to <code>getQuote</code> receives an observable with a test quote.\nUnlike the real <code>getQuote()</code> method, this spy bypasses the server\nand returns a synchronous observable whose value is available immediately.</p>\n<p>You can write many useful tests with this spy, even though its <code>Observable</code> is synchronous.</p>\n<a id=\"sync-tests\"></a>\n<h4 id=\"synchronous-tests\">Synchronous tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#synchronous-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>A key advantage of a synchronous <code>Observable</code> is that\nyou can often turn asynchronous processes into synchronous tests.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"sync-test\">\nit('should show quote after component initialized', () => {\n  fixture.detectChanges(); // onInit()\n\n  // sync spy result shows testQuote immediately after init\n  expect(quoteEl.textContent).toBe(testQuote);\n  expect(getQuoteSpy.calls.any()).toBe(true, 'getQuote called');\n});\n\n</code-example>\n<p>Because the spy result returns synchronously, the <code>getQuote()</code> method updates\nthe message on screen immediately <em>after</em>\nthe first change detection cycle during which Angular calls <code>ngOnInit</code>.</p>\n<p>You're not so lucky when testing the error path.\nAlthough the service spy will return an error synchronously,\nthe component method calls <code>setTimeout()</code>.\nThe test must wait at least one full turn of the JavaScript engine before the\nvalue becomes available. The test must become <em>asynchronous</em>.</p>\n<a id=\"fake-async\"></a>\n<h4 id=\"async-test-with-fakeasync\">Async test with <em>fakeAsync()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#async-test-with-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n<p>To use <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> functionality, you need to import <code>zone-testing</code>, for details, please read <a href=\"guide/setup#appendix-test-using-fakeasyncasync\">setup guide</a>.</p>\n<p>The following test confirms the expected behavior when the service returns an <code>ErrorObservable</code>.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"error-test\">\nit('should display error when TwainService fails', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  // tell spy to return an error observable\n  getQuoteSpy.and.returnValue(\n    throwError('TwainService test failure'));\n\n  fixture.detectChanges(); // onInit()\n  // sync spy errors immediately after init\n\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the component's setTimeout()\n\n  fixture.detectChanges(); // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> errorMessage within setTimeout()\n\n  expect(errorMessage()).toMatch(/test failure/, 'should display error');\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n}));\n\n</code-example>\n<p>Note that the <code>it()</code> function receives an argument of the following form.</p>\n<code-example language=\"javascript\">\n<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => { /* test body */ })`\n</code-example>\n<p>The <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> function enables a linear coding style by running the test body in a special <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> test zone</code>.\nThe test body appears to be synchronous.\nThere is no nested syntax (like a <code>Promise.then()</code>) to disrupt the flow of control.</p>\n<a id=\"tick\"></a>\n<h4 id=\"the-tick-function\">The <em>tick()</em> function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-tick-function\"><i class=\"material-icons\">link</i></a></h4>\n<p>You do have to call <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> to advance the (virtual) clock.</p>\n<p>Calling <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> simulates the passage of time until all pending asynchronous activities finish.\nIn this case, it waits for the error handler's <code>setTimeout()</code>;</p>\n<p>The <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> function accepts milliseconds as parameter (defaults to 0 if not provided). The parameter represents how much the virtual clock advances. For example, if you have a <code>setTimeout(fn, 100)</code> in a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test, you need to use tick(100) to trigger the fn callback.</p>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-tick\">\nit('should run timeout callback with delay after call <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a> with millis', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     let called = false;\n     setTimeout(() => { called = true; }, 100);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100);\n     expect(called).toBe(true);\n   }));\n\n</code-example>\n<p>The <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> function is one of the Angular testing utilities that you import with <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.\nIt's a companion to <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> and you can only call it within a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> body.</p>\n<h4 id=\"comparing-dates-inside-fakeasync\">Comparing dates inside fakeAsync()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#comparing-dates-inside-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n<p><code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> simulates passage of time, which allows you to calculate the difference between dates inside <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>.</p>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-date\">\nit('should get Date diff correctly in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     const start = Date.now();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(100);\n     const end = Date.now();\n     expect(end - start).toBe(100);\n   }));\n\n</code-example>\n<h4 id=\"jasmineclock-with-fakeasync\">jasmine.clock with fakeAsync()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#jasmineclock-with-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n<p>Jasmine also provides a <code>clock</code> feature to mock dates. Angular automatically runs tests that are run after\n<code>jasmine.clock().install()</code> is called inside a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> method until <code>jasmine.clock().uninstall()</code> is called. <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> is not needed and throws an error if nested.</p>\n<p>By default, this feature is disabled. To enable it, set a global flag before import <code>zone-testing</code>.</p>\n<p>If you use the Angular CLI, configure this flag in <code>src/test.ts</code>.</p>\n<code-example>\n(window as any)['__zone_symbol__fakeAsyncPatchLock'] = true;\nimport 'zone.js/dist/zone-testing';\n</code-example>\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-clock\">\ndescribe('use jasmine.clock()', () => {\n  // need to <a href=\"api/router/Router#config\" class=\"code-anchor\">config</a> __zone_symbol__fakeAsyncPatchLock flag\n  // before loading zone.js/dist/zone-testing\n  beforeEach(() => { jasmine.clock().install(); });\n  afterEach(() => { jasmine.clock().uninstall(); });\n  it('should auto enter <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', () => {\n    // is in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> now, don't need to call <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(testFn)\n    let called = false;\n    setTimeout(() => { called = true; }, 100);\n    jasmine.clock().tick(100);\n    expect(called).toBe(true);\n  });\n});\n\n</code-example>\n<h4 id=\"using-the-rxjs-scheduler-inside-fakeasync\">Using the RxJS scheduler inside fakeAsync()<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#using-the-rxjs-scheduler-inside-fakeasync\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can also use RxJS scheduler in <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> just like using <code>setTimeout()</code> or <code>setInterval()</code>, but you need to import <code>zone.js/dist/zone-patch-rxjs-fake-async</code> to patch RxJS scheduler.\n<code-example path=\"testing/src/app/demo/async-helper.spec.ts\" region=\"fake-async-test-rxjs\">\nit('should get Date diff correctly in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> with rxjs scheduler', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n     // need to add `import 'zone.js/dist/zone-patch-rxjs-fake-async'\n     // to <a href=\"api/core/Version#patch\" class=\"code-anchor\">patch</a> rxjs scheduler\n     let result = null;\n     of ('hello').pipe(delay(1000)).subscribe(v => { result = v; });\n     expect(result).toBeNull();\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(result).toBe('hello');\n\n     const start = new Date().getTime();\n     let dateDiff = 0;\n     interval(1000).pipe(take(2)).subscribe(() => dateDiff = (new Date().getTime() - start));\n\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(dateDiff).toBe(1000);\n     <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(1000);\n     expect(dateDiff).toBe(2000);\n   }));\n\n</code-example></p>\n<h4 id=\"support-more-macrotasks\">Support more macroTasks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#support-more-macrotasks\"><i class=\"material-icons\">link</i></a></h4>\n<p>By default <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> supports the following <code>macroTasks</code>.</p>\n<ul>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>requestAnimationFrame</li>\n<li>webkitRequestAnimationFrame</li>\n<li>mozRequestAnimationFrame</li>\n</ul>\n<p>If you run other <code>macroTask</code> such as <code>HTMLCanvasElement.toBlob()</code>, <code>Unknown macroTask scheduled in fake <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> test</code> error will be thrown.</p>\n<code-tabs>\n  <code-pane path=\"testing/src/app/shared/canvas.component.spec.ts\" header=\"src/app/shared/canvas.component.spec.ts\" linenums=\"false\">\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a>, <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>, <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a> } from '@angular/core/testing';\nimport { CanvasComponent } from './canvas.component';\ndescribe('CanvasComponent', () => {\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    TestBed.configureTestingModule({\n      <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n        CanvasComponent\n      ],\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    window['__zone_symbol__FakeAsyncTestMacroTask'] = [\n      {\n        source: 'HTMLCanvasElement.toBlob',\n        callbackArgs: [{ size: 200 }]\n      }\n    ];\n  });\n  it('should be able to generate blob data from canvas', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n    const fixture = TestBed.createComponent(CanvasComponent);\n    fixture.detectChanges();\n    <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n    const app = fixture.debugElement.componentInstance;\n    expect(app.blobSize).toBeGreaterThan(0);\n  }));\n});\n\n\n\n</code-pane>\n  <code-pane path=\"testing/src/app/shared/canvas.component.ts\" header=\"src/app/shared/canvas.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a>, <a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'sample-canvas',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: '&#x3C;canvas #sampleCanvas width=\"200\" height=\"200\">&#x3C;/canvas>'\n})\nexport class CanvasComponent implements <a href=\"api/core/AfterViewInit\" class=\"code-anchor\">AfterViewInit</a> {\n  blobSize: number;\n  @<a href=\"api/core/ViewChild\" class=\"code-anchor\">ViewChild</a>('sampleCanvas') sampleCanvas;\n\n  constructor() { }\n\n  ngAfterViewInit() {\n    const canvas = this.sampleCanvas.nativeElement;\n    const context = canvas.getContext('2d');\n    if (context) {\n      context.clearRect(0, 0, 200, 200);\n      context.fillStyle = '#FF1122';\n      context.fillRect(0, 0, 200, 200);\n      canvas.toBlob((blob: any) => {\n        this.blobSize = blob.size;\n      });\n    }\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>If you want to support such case, you need to define the <code>macroTask</code> you want to support in <code>beforeEach()</code>.\nFor example:</p>\n<code-example language=\"javascript\">\nbeforeEach(() => {\n  window['__zone_symbol__FakeAsyncTestMacroTask'] = [\n    {\n      source: 'HTMLCanvasElement.toBlob',\n      callbackArgs: [{ size: 200 }]\n    }\n  ];\n});\n\nit('toBlob should be able to run in <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n    const canvas: HTMLCanvasElement = document.getElementById('canvas') as HTMLCanvasElement;\n    let blob = null;\n    canvas.toBlob(function(b) {\n      blob = b;\n    });\n    <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();\n    expect(blob.size).toBe(200);\n  })\n);\n</code-example>\n<h4 id=\"async-observables\">Async observables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#async-observables\"><i class=\"material-icons\">link</i></a></h4>\n<p>You might be satisfied with the test coverage of these tests.</p>\n<p>But you might be troubled by the fact that the real service doesn't quite behave this way.\nThe real service sends requests to a remote server.\nA server takes time to respond and the response certainly won't be available immediately\nas in the previous two tests.</p>\n<p>Your tests will reflect the real world more faithfully if you return an <em>asynchronous</em> observable\nfrom the <code>getQuote()</code> spy like this.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"async-setup\">\n// Simulate delayed observable values with the `asyncData()` helper\ngetQuoteSpy.and.returnValue(asyncData(testQuote));\n\n</code-example>\n<h4 id=\"async-observable-helpers\">Async observable helpers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#async-observable-helpers\"><i class=\"material-icons\">link</i></a></h4>\n<p>The async observable was produced by an <code>asyncData</code> helper\nThe <code>asyncData</code> helper is a utility function that you'll have to write yourself.\nOr you can copy this one from the sample code.</p>\n<code-example path=\"testing/src/testing/async-observable-helpers.ts\" region=\"async-data\" header=\"testing/async-observable-helpers.ts\">\n/** Create <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> observable that emits-once and completes\n *  after <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> JS engine turn */\nexport function asyncData&#x3C;T>(data: T) {\n  return defer(() => Promise.resolve(data));\n}\n\n</code-example>\n<p>This helper's observable emits the <code>data</code> value in the next turn of the JavaScript engine.</p>\n<p>The <a href=\"http://reactivex.io/documentation/operators/defer.html\">RxJS <code>defer()</code> operator</a> returns an observable.\nIt takes a factory function that returns either a promise or an observable.\nWhen something subscribes to <em>defer</em>'s observable,\nit adds the subscriber to a new observable created with that factory.</p>\n<p>The <code>defer()</code> operator transforms the <code>Promise.resolve()</code> into a new observable that,\nlike <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, emits once and completes.\nSubscribers are unsubscribed after they receive the data value.</p>\n<p>There's a similar helper for producing an async error.</p>\n<code-example path=\"testing/src/testing/async-observable-helpers.ts\" region=\"async-error\">\n/** Create <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> observable error that errors\n *  after <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> JS engine turn */\nexport function asyncError&#x3C;T>(errorObject: any) {\n  return defer(() => Promise.reject(errorObject));\n}\n\n</code-example>\n<h4 id=\"more-async-tests\">More async tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-async-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>Now that the <code>getQuote()</code> spy is returning async observables,\nmost of your tests will have to be async as well.</p>\n<p>Here's a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test that demonstrates the data flow you'd expect\nin the real world.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"fake-async-test\">\nit('should show quote after getQuote (<a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>)', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observable to get the quote\n  fixture.detectChanges(); // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> view\n\n  expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n  expect(errorMessage()).toBeNull('should not show error');\n}));\n\n</code-example>\n<p>Notice that the quote element displays the placeholder value (<code>'...'</code>) after <code>ngOnInit()</code>.\nThe first quote hasn't arrived yet.</p>\n<p>To flush the first quote from the observable, you call <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>.\nThen call <code>detectChanges()</code> to tell Angular to update the screen.</p>\n<p>Then you can assert that the quote element displays the expected text.</p>\n<a id=\"async\"></a>\n<h4 id=\"async-test-with-async\">Async test with <em>async()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#async-test-with-async\"><i class=\"material-icons\">link</i></a></h4>\n<p>To use <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> functionality, you need to import <code>zone-testing</code>, for details, please read <a href=\"guide/setup#appendix-test-using-fakeasyncasync\">setup guide</a>.</p>\n<p>The <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> utility function has a few limitations.\nIn particular, it won't work if the test body makes an <code>XHR</code> call.</p>\n<p><code>XHR</code> calls within a test are rare so you can generally stick with <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>.\nBut if you ever do need to call <code>XHR</code>, you'll want to know about <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>.</p>\n<div class=\"alert is-helpful\">\n<p>The <code><a href=\"api/core/testing/TestBed#compileComponents\" class=\"code-anchor\">TestBed.compileComponents()</a></code> method (see <a href=\"guide/testing#compile-components\">below</a>) calls <code>XHR</code>\nto read external template and css files during \"just-in-time\" compilation.\nWrite tests that call <code>compileComponents()</code> with the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> utility.</p>\n</div>\n<p>Here's the previous <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test, re-written with the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> utility.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"async-test\">\nit('should show quote after getQuote (<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>)', <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  fixture.whenStable().then(() => { // wait for <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> getQuote\n    fixture.detectChanges();        // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> view with quote\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n  });\n}));\n\n</code-example>\n<p>The <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> utility hides some asynchronous boilerplate by arranging for the tester's code\nto run in a special <em>async test zone</em>.\nYou don't need to pass Jasmine's <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code> into the test and call <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code> because it is <code>undefined</code> in promise or observable callbacks.</p>\n<p>But the test's asynchronous nature is revealed by the call to <code>fixture.whenStable()</code>,\nwhich breaks the linear flow of control.</p>\n<p>When using an <code>intervalTimer()</code> such as <code>setInterval()</code> in <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>, remember to cancel the timer with <code>clearInterval()</code> after the test, otherwise the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> never ends.</p>\n<a id=\"when-stable\"></a>\n<h4 id=\"whenstable\"><em>whenStable</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#whenstable\"><i class=\"material-icons\">link</i></a></h4>\n<p>The test must wait for the <code>getQuote()</code> observable to emit the next quote.\nInstead of calling <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>, it calls <code>fixture.whenStable()</code>.</p>\n<p>The <code>fixture.whenStable()</code> returns a promise that resolves when the JavaScript engine's\ntask queue becomes empty.\nIn this example, the task queue becomes empty when the observable emits the first quote.</p>\n<p>The test resumes within the promise callback, which calls <code>detectChanges()</code> to\nupdate the quote element with the expected text.</p>\n<a id=\"jasmine-done\"></a>\n<h4 id=\"jasmine-done\">Jasmine <em>done()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#jasmine-done\"><i class=\"material-icons\">link</i></a></h4>\n<p>While the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> and <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> functions greatly\nsimplify Angular asynchronous testing,\nyou can still fall back to the traditional technique\nand pass <code>it</code> a function that takes a\n<a href=\"https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\"><code>done</code> callback</a>.</p>\n<p>You can't call <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code> in <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> or <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> functions, because the <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a> parameter</code>\nis <code>undefined</code>.</p>\n<p>Now you are responsible for chaining promises, handling errors, and calling <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code> at the appropriate moments.</p>\n<p>Writing test functions with <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>, is more cumbersome than <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code>and <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>.\nBut it is occasionally necessary when code involves the <code>intervalTimer()</code> like <code>setInterval</code>.</p>\n<p>Here are two more versions of the previous test, written with <code><a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>()</code>.\nThe first one subscribes to the <code>Observable</code> exposed to the template by the component's <code>quote</code> property.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"quote-done-test\" linenums=\"false\">\nit('should show last quote (quote <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>)', (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n  fixture.detectChanges();\n\n  component.quote.pipe( last() ).subscribe(() => {\n    fixture.detectChanges(); // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> view with quote\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n    <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n  });\n});\n\n</code-example>\n<p>The RxJS <code>last()</code> operator emits the observable's last value before completing, which will be the test quote.\nThe <code>subscribe</code> callback calls <code>detectChanges()</code> to\nupdate the quote element with the test quote, in the same manner as the earlier tests.</p>\n<p>In some tests, you're more interested in how an injected service method was called and what values it returned,\nthan what appears on screen.</p>\n<p>A service spy, such as the <code>qetQuote()</code> spy of the fake <code>TwainService</code>,\ncan give you that information and make assertions about the state of the view.</p>\n<code-example path=\"testing/src/app/twain/twain.component.spec.ts\" region=\"spy-done-test\" linenums=\"false\">\nit('should show quote after getQuote (spy <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>)', (<a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>: DoneFn) => {\n  fixture.detectChanges();\n\n  // the spy's most recent call returns the observable with the test quote\n  getQuoteSpy.calls.mostRecent().returnValue.subscribe(() => {\n    fixture.detectChanges(); // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> view with quote\n    expect(quoteEl.textContent).toBe(testQuote);\n    expect(errorMessage()).toBeNull('should not show error');\n    <a href=\"api/core/ApplicationInitStatus#done\" class=\"code-anchor\">done</a>();\n  });\n});\n\n</code-example>\n<hr>\n<a id=\"marble-testing\"></a>\n<h3 id=\"component-marble-tests\">Component marble tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-marble-tests\"><i class=\"material-icons\">link</i></a></h3>\n<p>The previous <code>TwainComponent</code> tests simulated an asynchronous observable response\nfrom the <code>TwainService</code> with the <code>asyncData</code> and <code>asyncError</code> utilities.</p>\n<p>These are short, simple functions that you can write yourself.\nUnfortunately, they're too simple for many common scenarios.\nAn observable often emits multiple times, perhaps after a significant delay.\nA component may coordinate multiple observables\nwith overlapping sequences of values and errors.</p>\n<p><strong>RxJS marble testing</strong> is a great way to test observable scenarios,\nboth simple and complex.\nYou've likely seen the <a href=\"http://rxmarbles.com/\">marble diagrams</a>\nthat illustrate how observables work.\nMarble testing uses a similar marble language to\nspecify the observable streams and expectations in your tests.</p>\n<p>The following examples revisit two of the <code>TwainComponent</code> tests\nwith marble testing.</p>\n<p>Start by installing the <code>jasmine-marbles</code> npm package.\nThen import the symbols you need.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"import-marbles\" header=\"app/twain/twain.component.marbles.spec.ts (import marbles)\" linenums=\"false\">\nimport { cold, getTestScheduler } from 'jasmine-marbles';\n\n</code-example>\n<p>Here's the complete test for getting a quote:</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"get-quote-test\" linenums=\"false\">\nit('should show quote after getQuote (marbles)', () => {\n  // observable test quote value and complete(), after delay\n  const q$ = cold('---x|', { x: testQuote });\n  getQuoteSpy.and.returnValue( q$ );\n\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  getTestScheduler().flush(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observables\n\n  fixture.detectChanges(); // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> view\n\n  expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n  expect(errorMessage()).toBeNull('should not show error');\n});\n\n</code-example>\n<p>Notice that the Jasmine test is synchronous. There's no <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code>.\nMarble testing uses a test scheduler to simulate the passage of time\nin a synchronous test.</p>\n<p>The beauty of marble testing is in the visual definition of the observable streams.\nThis test defines a <a href=\"guide/testing#cold-observable\"><em>cold</em> observable</a> that waits\nthree <a href=\"guide/testing#marble-frame\">frames</a> (<code>---</code>),\nemits a value (<code>x</code>), and completes (<code>|</code>).\nIn the second argument you map the value marker (<code>x</code>) to the emitted value (<code>testQuote</code>).</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"test-quote-marbles\" linenums=\"false\">\nconst q$ = cold('---x|', { x: testQuote });\n\n</code-example>\n<p>The marble library constructs the corresponding observable, which the\ntest sets as the <code>getQuote</code> spy's return value.</p>\n<p>When you're ready to activate the marble observables,\nyou tell the <code>TestScheduler</code> to <em>flush</em> its queue of prepared tasks like this.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"test-scheduler-flush\" linenums=\"false\">\ngetTestScheduler().flush(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observables\n\n</code-example>\n<p>This step serves a purpose analogous to <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code> and <code>whenStable()</code> in the\nearlier <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> and <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> examples.\nThe balance of the test is the same as those examples.</p>\n<h4 id=\"marble-error-testing\">Marble error testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#marble-error-testing\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here's the marble testing version of the <code>getQuote()</code> error test.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"error-test\" linenums=\"false\">\nit('should display error when TwainService fails', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  // observable error after delay\n  const q$ = cold('---#|', null, new Error('TwainService test failure'));\n  getQuoteSpy.and.returnValue( q$ );\n\n  fixture.detectChanges(); // ngOnInit()\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n\n  getTestScheduler().flush(); // <a href=\"api/core/testing/flush\" class=\"code-anchor\">flush</a> the observables\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>();                     // component shows error after <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> setTimeout()\n  fixture.detectChanges();    // <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> error <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>\n\n  expect(errorMessage()).toMatch(/test failure/, 'should display error');\n  expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n}));\n\n</code-example>\n<p>It's still an async test, calling <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> and <code><a href=\"api/core/ApplicationRef#tick\" class=\"code-anchor\">tick()</a></code>, because the component itself\ncalls <code>setTimeout()</code> when processing errors.</p>\n<p>Look at the marble observable definition.</p>\n<code-example path=\"testing/src/app/twain/twain.component.marbles.spec.ts\" region=\"error-marbles\" linenums=\"false\">\nconst q$ = cold('---#|', null, new Error('TwainService test failure'));\n\n</code-example>\n<p>This is a <em>cold</em> observable that waits three frames and then emits an error,\nThe hash (<code>#</code>) indicates the timing of the error that is specified in the third argument.\nThe second argument is null because the observable never emits a value.</p>\n<h4 id=\"learn-about-marble-testing\">Learn about marble testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#learn-about-marble-testing\"><i class=\"material-icons\">link</i></a></h4>\n<a id=\"marble-frame\"></a>\n<p>A <em>marble frame</em> is a virtual unit of testing time.\nEach symbol (<code>-</code>, <code>x</code>, <code>|</code>, <code>#</code>) marks the passing of one frame.</p>\n<a id=\"cold-observable\"></a>\n<p>A <em>cold</em> observable doesn't produce values until you subscribe to it.\nMost of your application observables are cold.\nAll <a href=\"guide/http\"><em>HttpClient</em></a> methods return cold observables.</p>\n<p>A <em>hot</em> observable is already producing values <em>before</em> you subscribe to it.\nThe <a href=\"api/router/Router#events\"><em>Router.events</em></a> observable,\nwhich reports router activity, is a <em>hot</em> observable.</p>\n<p>RxJS marble testing is a rich subject, beyond the scope of this guide.\nLearn about it on the web, starting with the\n<a href=\"https://github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md\">official documentation</a>.</p>\n<hr>\n<a id=\"component-with-input-output\"></a>\n<h3 id=\"component-with-inputs-and-outputs\">Component with inputs and outputs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-with-inputs-and-outputs\"><i class=\"material-icons\">link</i></a></h3>\n<p>A component with inputs and outputs typically appears inside the view template of a host component.\nThe host uses a property binding to set the input property and an event binding to\nlisten to events raised by the output property.</p>\n<p>The testing goal is to verify that such bindings work as expected.\nThe tests should set input values and listen for output events.</p>\n<p>The <code>DashboardHeroComponent</code> is a tiny example of a component in this role.\nIt displays an individual hero provided by the <code>DashboardComponent</code>.\nClicking that hero tells the <code>DashboardComponent</code> that the user has selected the hero.</p>\n<p>The <code>DashboardHeroComponent</code> is embedded in the <code>DashboardComponent</code> template like this:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.html\" region=\"dashboard-hero\" header=\"app/dashboard/dashboard.component.html (excerpt)\" linenums=\"false\">\n&#x3C;dashboard-hero *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"  class=\"col-1-4\"\n  [hero]=hero  (selected)=\"gotoDetail($event)\" >\n&#x3C;/dashboard-hero>\n\n</code-example>\n<p>The <code>DashboardHeroComponent</code> appears in an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater, which sets each component's <code>hero</code> input property\nto the looping value and listens for the component's <code>selected</code> event.</p>\n<p>Here's the component's full definition:</p>\n<a id=\"dashboard-hero-component\"></a>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.ts\" region=\"component\" header=\"app/dashboard/dashboard-hero.component.ts (component)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'dashboard-hero',\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;div (click)=\"click()\" class=\"hero\">\n      {{hero.name | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n    &#x3C;/div>`,\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>: [ './dashboard-hero.component.css' ]\n})\nexport class DashboardHeroComponent {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() hero: Hero;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() selected = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;Hero>();\n  click() { this.selected.emit(this.hero); }\n}\n\n</code-example>\n<p>While testing a component this simple has little intrinsic value, it's worth knowing how.\nYou can use one of these approaches:</p>\n<ul>\n<li>Test it as used by <code>DashboardComponent</code>.</li>\n<li>Test it as a stand-alone component.</li>\n<li>Test it as used by a substitute for <code>DashboardComponent</code>.</li>\n</ul>\n<p>A quick look at the <code>DashboardComponent</code> constructor discourages the first approach:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"ctor\" header=\"app/dashboard/dashboard.component.ts (constructor)\" linenums=\"false\">\nconstructor(\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private heroService: HeroService) {\n}\n\n</code-example>\n<p>The <code>DashboardComponent</code> depends on the Angular router and the <code>HeroService</code>.\nYou'd probably have to replace them both with test doubles, which is a lot of work.\nThe router seems particularly challenging.</p>\n<div class=\"alert is-helpful\">\n<p>The <a href=\"guide/testing#routing-component\">discussion below</a> covers testing components that require the router.</p>\n</div>\n<p>The immediate goal is to test the <code>DashboardHeroComponent</code>, not the <code>DashboardComponent</code>,\nso, try the second and third options.</p>\n<a id=\"dashboard-standalone\"></a>\n<h4 id=\"test-dashboardherocomponent-stand-alone\">Test <em>DashboardHeroComponent</em> stand-alone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-dashboardherocomponent-stand-alone\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here's the meat of the spec file setup.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"setup\" header=\"app/dashboard/dashboard-hero.component.spec.ts (setup)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ DashboardHeroComponent ]\n})\nfixture = TestBed.createComponent(DashboardHeroComponent);\ncomp    = fixture.componentInstance;\n\n// find the hero's <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> and element\nheroDe  = fixture.debugElement.query(By.css('.hero'));\nheroEl = heroDe.nativeElement;\n\n// mock the hero supplied by the parent component\nexpectedHero = { id: 42, name: 'Test Name' };\n\n// simulate the parent setting the input property with that hero\ncomp.hero = expectedHero;\n\n// <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\nfixture.detectChanges();\n\n</code-example>\n<p>Note how the setup code assigns a test hero (<code>expectedHero</code>) to the component's <code>hero</code> property,\nemulating the way the <code>DashboardComponent</code> would set it\nvia the property binding in its repeater.</p>\n<p>The following test verifies that the hero name is propagated to the template via a binding.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"name-test\">\nit('should display hero name in uppercase', () => {\n  const expectedPipedName = expectedHero.name.toUpperCase();\n  expect(heroEl.textContent).toContain(expectedPipedName);\n});\n\n</code-example>\n<p>Because the <a href=\"guide/testing#dashboard-hero-component\">template</a> passes the hero name through the Angular <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code>,\nthe test must match the element value with the upper-cased name.</p>\n<div class=\"alert is-helpful\">\n<p>This small test demonstrates how Angular tests can verify a component's visual\nrepresentation—something not possible with\n<a href=\"guide/testing#component-class-testing\">component class tests</a>—at\nlow cost and without resorting to much slower and more complicated end-to-end tests.</p>\n</div>\n<h4 id=\"clicking\">Clicking<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#clicking\"><i class=\"material-icons\">link</i></a></h4>\n<p>Clicking the hero should raise a <code>selected</code> event that\nthe host component (<code>DashboardComponent</code> presumably) can hear:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test\">\nit('should raise selected event when clicked (triggerEventHandler)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  heroDe.triggerEventHandler('click', null);\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<p>The component's <code>selected</code> property returns an <code><a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a></code>,\nwhich looks like an RxJS synchronous <code>Observable</code> to consumers.\nThe test subscribes to it <em>explicitly</em> just as the host component does <em>implicitly</em>.</p>\n<p>If the component behaves as expected, clicking the hero's element\nshould tell the component's <code>selected</code> property to emit the <code>hero</code> object.</p>\n<p>The test detects that event through its subscription to <code>selected</code>.</p>\n<a id=\"trigger-event-handler\"></a>\n<h4 id=\"triggereventhandler\"><em>triggerEventHandler</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#triggereventhandler\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>heroDe</code> in the previous test is a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> that represents the hero <code>&#x3C;div></code>.</p>\n<p>It has Angular properties and methods that abstract interaction with the native element.\nThis test calls the <code>DebugElement.triggerEventHandler</code> with the \"click\" event name.\nThe \"click\" event binding responds by calling <code>DashboardHeroComponent.click()</code>.</p>\n<p>The Angular <code>DebugElement.triggerEventHandler</code> can raise <em>any data-bound event</em> by its <em>event name</em>.\nThe second parameter is the event object passed to the handler.</p>\n<p>The test triggered a \"click\" event with a <code>null</code> event object.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"trigger-event-handler\">\nheroDe.triggerEventHandler('click', null);\n\n</code-example>\n<p>The test assumes (correctly in this case) that the runtime\nevent handler—the component's <code>click()</code> method—doesn't\ncare about the event object.</p>\n<div class=\"alert is-helpful\">\n<p>Other handlers are less forgiving. For example, the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code>\ndirective expects an object with a <code>button</code> property\nthat identifies which mouse button (if any) was pressed during the click.\nThe <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive throws an error if the event object is missing.</p>\n</div>\n<h4 id=\"click-the-element\">Click the element<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#click-the-element\"><i class=\"material-icons\">link</i></a></h4>\n<p>The following test alternative calls the native element's own <code>click()</code> method,\nwhich is perfectly fine for <em>this component</em>.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test-2\">\nit('should raise selected event when clicked (element.click)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe((hero: Hero) => selectedHero = hero);\n\n  heroEl.click();\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<a id=\"click-helper\"></a>\n<h4 id=\"click-helper\"><em>click()</em> helper<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#click-helper\"><i class=\"material-icons\">link</i></a></h4>\n<p>Clicking a button, an anchor, or an arbitrary HTML element is a common test task.</p>\n<p>Make that consistent and easy by encapsulating the <em>click-triggering</em> process\nin a helper such as the <code>click()</code> function below:</p>\n<code-example path=\"testing/src/testing/index.ts\" region=\"click-event\" header=\"testing/index.ts (click helper)\" linenums=\"false\">\n/** Button events to pass to `DebugElement.triggerEventHandler` for <a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a> event handler */\nexport const ButtonClickEvents = {\n   left:  { button: 0 },\n   right: { button: 2 }\n};\n\n/** Simulate element click. Defaults to mouse left-button click event. */\nexport function click(el: <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> | HTMLElement, eventObj: any = ButtonClickEvents.left): void {\n  if (el instanceof HTMLElement) {\n    el.click();\n  } else {\n    el.triggerEventHandler('click', eventObj);\n  }\n}\n\n</code-example>\n<p>The first parameter is the <em>element-to-click</em>. If you wish, you can pass a\ncustom event object as the second parameter. The default is a (partial)\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\">left-button mouse event object</a>\naccepted by many handlers including the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directive.</p>\n<div class=\"alert is-important\">\n<p>The <code>click()</code> helper function is <strong>not</strong> one of the Angular testing utilities.\nIt's a function defined in <em>this guide's sample code</em>.\nAll of the sample tests use it.\nIf you like it, add it to your own collection of helpers.</p>\n</div>\n<p>Here's the previous test, rewritten using the click helper.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"click-test-3\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test with click helper)\">\nit('should raise selected event when clicked (click helper)', () => {\n  let selectedHero: Hero;\n  comp.selected.subscribe(hero => selectedHero = hero);\n\n  click(heroDe); // click helper with <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>\n  click(heroEl); // click helper with native element\n\n  expect(selectedHero).toBe(expectedHero);\n});\n\n</code-example>\n<hr>\n<a id=\"component-inside-test-host\"></a>\n<h3 id=\"component-inside-a-test-host\">Component inside a test host<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#component-inside-a-test-host\"><i class=\"material-icons\">link</i></a></h3>\n<p>The previous tests played the role of the host <code>DashboardComponent</code> themselves.\nBut does the <code>DashboardHeroComponent</code> work correctly when properly data-bound to a host component?</p>\n<p>You could test with the actual <code>DashboardComponent</code>.\nBut doing so could require a lot of setup,\nespecially when its template features an <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater,\nother components, layout HTML, additional bindings,\na constructor that injects multiple services,\nand it starts interacting with those services right away.</p>\n<p>Imagine the effort to disable these distractions, just to prove a point\nthat can be made satisfactorily with a <em>test host</em> like this one:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test host)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n    &#x3C;dashboard-hero\n      [hero]=\"hero\" (selected)=\"onSelected($event)\">\n    &#x3C;/dashboard-hero>`\n})\nclass TestHostComponent {\n  hero: Hero = {id: 42, name: 'Test Name' };\n  selectedHero: Hero;\n  onSelected(hero: Hero) { this.selectedHero = hero; }\n}\n\n</code-example>\n<p>This test host binds to <code>DashboardHeroComponent</code> as the <code>DashboardComponent</code> would\nbut without the noise of the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>, the <code>HeroService</code>, or the <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> repeater.</p>\n<p>The test host sets the component's <code>hero</code> input property with its test hero.\nIt binds the component's <code>selected</code> event with its <code>onSelected</code> handler,\nwhich records the emitted hero in its <code>selectedHero</code> property.</p>\n<p>Later, the tests will be able to easily check <code>selectedHero</code> to verify that the\n<code>DashboardHeroComponent.selected</code> event emitted the expected hero.</p>\n<p>The setup for the <em>test-host</em> tests is similar to the setup for the stand-alone tests:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host-setup\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test host setup)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ DashboardHeroComponent, TestHostComponent ]\n})\n// create TestHostComponent instead of DashboardHeroComponent\nfixture  = TestBed.createComponent(TestHostComponent);\ntestHost = fixture.componentInstance;\nheroEl   = fixture.nativeElement.querySelector('.hero');\nfixture.detectChanges(); // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\n\n</code-example>\n<p>This testing module configuration shows three important differences:</p>\n<ol>\n<li>It <em>declares</em> both the <code>DashboardHeroComponent</code> and the <code>TestHostComponent</code>.</li>\n<li>It <em>creates</em> the <code>TestHostComponent</code> instead of the <code>DashboardHeroComponent</code>.</li>\n<li>The <code>TestHostComponent</code> sets the <code>DashboardHeroComponent.hero</code> with a binding.</li>\n</ol>\n<p>The <code>createComponent</code> returns a <code>fixture</code> that holds an instance of <code>TestHostComponent</code> instead of an instance of <code>DashboardHeroComponent</code>.</p>\n<p>Creating the <code>TestHostComponent</code> has the side-effect of creating a <code>DashboardHeroComponent</code>\nbecause the latter appears within the template of the former.\nThe query for the hero element (<code>heroEl</code>) still finds it in the test DOM,\nalbeit at greater depth in the element tree than before.</p>\n<p>The tests themselves are almost identical to the stand-alone version:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"test-host-tests\" header=\"app/dashboard/dashboard-hero.component.spec.ts (test-host)\" linenums=\"false\">\nit('should display hero name', () => {\n  const expectedPipedName = testHost.hero.name.toUpperCase();\n  expect(heroEl.textContent).toContain(expectedPipedName);\n});\n\nit('should raise selected event when clicked', () => {\n  click(heroEl);\n  // selected hero should be the same data bound hero\n  expect(testHost.selectedHero).toBe(testHost.hero);\n});\n\n</code-example>\n<p>Only the selected event test differs. It confirms that the selected <code>DashboardHeroComponent</code> hero\nreally does find its way up through the event binding to the host component.</p>\n<hr>\n<a id=\"routing-component\"></a>\n<h3 id=\"routing-component\">Routing component<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#routing-component\"><i class=\"material-icons\">link</i></a></h3>\n<p>A <em>routing component</em> is a component that tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to navigate to another component.\nThe <code>DashboardComponent</code> is a <em>routing component</em> because the user can\nnavigate to the <code>HeroDetailComponent</code> by clicking on one of the <em>hero buttons</em> on the dashboard.</p>\n<p>Routing is pretty complicated.\nTesting the <code>DashboardComponent</code> seemed daunting in part because it involves the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>,\nwhich it injects together with the <code>HeroService</code>.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"ctor\" header=\"app/dashboard/dashboard.component.ts (constructor)\" linenums=\"false\">\nconstructor(\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,\n  private heroService: HeroService) {\n}\n\n</code-example>\n<p>Mocking the <code>HeroService</code> with a spy is a <a href=\"guide/testing#component-with-async-service\">familiar story</a>.\nBut the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> has a complicated API and is entwined with other services and application preconditions. Might it be difficult to mock?</p>\n<p>Fortunately, not in this case because the <code>DashboardComponent</code> isn't doing much with the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code></p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.ts\" region=\"goto-detail\" header=\"app/dashboard/dashboard.component.ts (goToDetail)\">\ngotoDetail(hero: Hero) {\n  let url = `/heroes/${hero.id}`;\n  this.router.navigateByUrl(url);\n}\n\n</code-example>\n<p>This is often the case with <em>routing components</em>.\nAs a rule you test the component, not the router,\nand care only if the component navigates with the right address under the given conditions.</p>\n<p>Providing a router spy for <em>this component</em> test suite happens to be as easy\nas providing a <code>HeroService</code> spy.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.spec.ts\" region=\"router-spy\" header=\"app/dashboard/dashboard.component.spec.ts (spies)\" linenums=\"false\">\nconst routerSpy = jasmine.createSpyObj('<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>', ['navigateByUrl']);\nconst heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n\nTestBed.configureTestingModule({\n  providers: [\n    { provide: HeroService, useValue: heroServiceSpy },\n    { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,      useValue: routerSpy }\n  ]\n})\n\n</code-example>\n<p>The following test clicks the displayed hero and confirms that\n<code>Router.navigateByUrl</code> is called with the expected url.</p>\n<code-example path=\"testing/src/app/dashboard/dashboard.component.spec.ts\" region=\"navigate-test\" header=\"app/dashboard/dashboard.component.spec.ts (navigate test)\" linenums=\"false\">\nit('should tell ROUTER to navigate when hero clicked', () => {\n\n  heroClick(); // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> click on first inner &#x3C;div class=\"hero\">\n\n  // args passed to router.navigateByUrl() spy\n  const spy = router.navigateByUrl as jasmine.Spy;\n  const navArgs = spy.calls.first().args[0];\n\n  // expecting to navigate to id of the component's first hero\n  const id = comp.heroes[0].id;\n  expect(navArgs).toBe('/heroes/' + id,\n    'should nav to HeroDetail for first hero');\n});\n\n</code-example>\n<a id=\"routed-component-w-param\"></a>\n<h3 id=\"routed-components\">Routed components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#routed-components\"><i class=\"material-icons\">link</i></a></h3>\n<p>A <em>routed component</em> is the destination of a <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> navigation.\nIt can be trickier to test, especially when the route to the component <em>includes parameters</em>.\nThe <code>HeroDetailComponent</code> is a <em>routed component</em> that is the destination of such a route.</p>\n<p>When a user clicks a <em>Dashboard</em> hero, the <code>DashboardComponent</code> tells the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code>\nto navigate to <code>heroes/:id</code>.\nThe <code>:id</code> is a route parameter whose value is the <code>id</code> of the hero to edit.</p>\n<p>The <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> matches that URL to a route to the <code>HeroDetailComponent</code>.\nIt creates an <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> object with the routing information and\ninjects it into a new instance of the <code>HeroDetailComponent</code>.</p>\n<p>Here's the <code>HeroDetailComponent</code> constructor:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"ctor\" header=\"app/hero/hero-detail.component.ts (constructor)\" linenums=\"false\">\nconstructor(\n  private heroDetailService: HeroDetailService,\n  private route:  <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n  private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n}\n\n</code-example>\n<p>The <code>HeroDetail</code> component needs the <code>id</code> parameter so it can fetch\nthe corresponding hero via the <code>HeroDetailService</code>.\nThe component has to get the <code>id</code> from the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> property\nwhich is an <code>Observable</code>.</p>\n<p>It can't just reference the <code>id</code> property of the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code>.\nThe component has to <em>subscribe</em> to the <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> observable and be prepared\nfor the <code>id</code> to change during its lifetime.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"ng-on-init\" header=\"app/hero/hero-detail.component.ts (ngOnInit)\" linenums=\"false\">\nngOnInit(): void {\n  // get hero when `id` param <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a>\n  this.route.paramMap.subscribe(pmap => this.getHero(pmap.get('id')));\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <a href=\"guide/router#route-parameters\">Router</a> guide covers <code><a href=\"api/router/ActivatedRoute#paramMap\" class=\"code-anchor\">ActivatedRoute.paramMap</a></code> in more detail.</p>\n</div>\n<p>Tests can explore how the <code>HeroDetailComponent</code> responds to different <code>id</code> parameter values\nby manipulating the <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> injected into the component's constructor.</p>\n<p>You know how to spy on the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> and a data service.</p>\n<p>You'll take a different approach with <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code> because</p>\n<ul>\n<li><code>paramMap</code> returns an <code>Observable</code> that can emit more than one value\nduring a test.</li>\n<li>You need the router helper function, <code><a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>()</code>, to create a <code><a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a></code>.</li>\n<li>Other <em>routed components</em> tests need a test double for <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</li>\n</ul>\n<p>These differences argue for a re-usable stub class.</p>\n<h4 id=\"activatedroutestub\"><em>ActivatedRouteStub</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#activatedroutestub\"><i class=\"material-icons\">link</i></a></h4>\n<p>The following <code>ActivatedRouteStub</code> class serves as a test double for <code><a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a></code>.</p>\n<code-example path=\"testing/src/testing/activated-route-stub.ts\" region=\"activated-route-stub\" header=\"testing/activated-route-stub.ts (ActivatedRouteStub)\" linenums=\"false\">\nimport { <a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>, <a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>, <a href=\"api/router/Params\" class=\"code-anchor\">Params</a> } from '@angular/router';\nimport { ReplaySubject } from 'rxjs';\n\n/**\n * An ActivateRoute test double with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> `paramMap` observable.\n * Use the `setParamMap()` method to add the next `paramMap` value.\n */\nexport class ActivatedRouteStub {\n  // Use <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> ReplaySubject to share <a href=\"api/service-worker/UpdateActivatedEvent#previous\" class=\"code-anchor\">previous</a> values with subscribers\n  // and pump new values into the `paramMap` observable\n  private subject = new ReplaySubject&#x3C;<a href=\"api/router/ParamMap\" class=\"code-anchor\">ParamMap</a>>();\n\n  constructor(initialParams?: <a href=\"api/router/Params\" class=\"code-anchor\">Params</a>) {\n    this.setParamMap(initialParams);\n  }\n\n  /** The mock paramMap observable */\n  readonly paramMap = this.subject.asObservable();\n\n  /** Set the paramMap observables's next value */\n  setParamMap(params?: <a href=\"api/router/Params\" class=\"code-anchor\">Params</a>) {\n    this.subject.next(<a href=\"api/router/convertToParamMap\" class=\"code-anchor\">convertToParamMap</a>(params));\n  };\n}\n\n</code-example>\n<p>Consider placing such helpers in a <code>testing</code> folder sibling to the <code>app</code> folder.\nThis sample puts <code>ActivatedRouteStub</code> in <code>testing/activated-route-stub.ts</code>.</p>\n<div class=\"alert is-helpful\">\n<p>Consider writing a more capable version of this stub class with\nthe <a href=\"guide/testing#marble-testing\"><em>marble testing library</em></a>.</p>\n</div>\n<a id=\"tests-w-test-double\"></a>\n<h4 id=\"testing-with-activatedroutestub\">Testing with <em>ActivatedRouteStub</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-with-activatedroutestub\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here's a test demonstrating the component's behavior when the observed <code>id</code> refers to an existing hero:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-good-id\" header=\"app/hero/hero-detail.component.spec.ts (existing id)\" linenums=\"false\">\ndescribe('when navigate to existing hero', () => {\n  let expectedHero: Hero;\n\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    expectedHero = firstHero;\n    activatedRoute.setParamMap({ id: expectedHero.id });\n    createComponent();\n  }));\n\n  it('should display that hero\\'s name', () => {\n    expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n  });\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <code>createComponent()</code> method and <code>page</code> object are discussed <a href=\"guide/testing#page-object\">below</a>.\nRely on your intuition for now.</p>\n</div>\n<p>When the <code>id</code> cannot be found, the component should re-route to the <code>HeroListComponent</code>.</p>\n<p>The test suite setup provided the same router spy <a href=\"guide/testing#routing-component\">described above</a> which spies on the router without actually navigating.</p>\n<p>This test expects the component to try to navigate to the <code>HeroListComponent</code>.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-bad-id\" header=\"app/hero/hero-detail.component.spec.ts (bad id)\" linenums=\"false\">\ndescribe('when navigate to non-existent hero id', () => {\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n    activatedRoute.setParamMap({ id: 99999 });\n    createComponent();\n  }));\n\n  it('should try to navigate back to hero list', () => {\n    expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n    expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n  });\n});\n\n</code-example>\n<p>While this app doesn't have a route to the <code>HeroDetailComponent</code> that omits the <code>id</code> parameter, it might add such a route someday.\nThe component should do something reasonable when there is no <code>id</code>.</p>\n<p>In this implementation, the component should create and display a new hero.\nNew heroes have <code>id=0</code> and a blank <code>name</code>. This test confirms that the component behaves as expected:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"route-no-id\" header=\"app/hero/hero-detail.component.spec.ts (no id)\" linenums=\"false\">\ndescribe('when navigate with no hero id', () => {\n  beforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>( createComponent ));\n\n  it('should have hero.id === 0', () => {\n    expect(component.hero.id).toBe(0);\n  });\n\n  it('should display empty hero name', () => {\n    expect(page.nameDisplay.textContent).toBe('');\n  });\n});\n\n</code-example>\n<hr>\n<h3 id=\"nested-component-tests\">Nested component tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#nested-component-tests\"><i class=\"material-icons\">link</i></a></h3>\n<p>Component templates often have nested components, whose templates\nmay contain more components.</p>\n<p>The component tree can be very deep and, most of the time, the nested components\nplay no role in testing the component at the top of the tree.</p>\n<p>The <code>AppComponent</code>, for example, displays a navigation bar with anchors and their <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives.</p>\n<code-example path=\"testing/src/app/app.component.html\" header=\"app/app.component.html\" linenums=\"false\">\n&#x3C;app-banner>&#x3C;/app-banner>\n&#x3C;app-welcome>&#x3C;/app-welcome>\n&#x3C;nav>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/about\">About&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n\n</code-example>\n<p>While the <code>AppComponent</code> <em>class</em> is empty,\nyou may want to write unit tests to confirm that the links are wired properly\nto the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> directives, perhaps for the reasons <a href=\"guide/testing#why-stubbed-routerlink-tests\">explained below</a>.</p>\n<p>To validate the links, you don't need the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> to navigate and you don't\nneed the <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> to mark where the <code><a href=\"api/router/Router\" class=\"code-anchor\">Router</a></code> inserts <em>routed components</em>.</p>\n<p>The <code>BannerComponent</code> and <code>WelcomeComponent</code>\n(indicated by <code>&#x3C;app-banner></code> and <code>&#x3C;app-welcome></code>) are also irrelevant.</p>\n<p>Yet any test that creates the <code>AppComponent</code> in the DOM will also create instances of\nthese three components and, if you let that happen,\nyou'll have to configure the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> to create them.</p>\n<p>If you neglect to declare them, the Angular compiler won't recognize the\n<code>&#x3C;app-banner></code>, <code>&#x3C;app-welcome></code>, and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tags in the <code>AppComponent</code> template\nand will throw an error.</p>\n<p>If you declare the real components, you'll also have to declare <em>their</em> nested components\nand provide for <em>all</em> services injected in <em>any</em> component in the tree.</p>\n<p>That's too much effort just to answer a few simple questions about links.</p>\n<p>This section describes two techniques for minimizing the setup.\nUse them, alone or in combination, to stay focused on the testing the primary component.</p>\n<a id=\"stub-component\"></a>\n<h5 id=\"stubbing-unneeded-components\">Stubbing unneeded components<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#stubbing-unneeded-components\"><i class=\"material-icons\">link</i></a></h5>\n<p>In the first technique, you create and declare stub versions of the components\nand directive that play little or no role in the tests.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"component-stubs\" header=\"app/app.component.spec.ts (stub declaration)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-banner', <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: ''})\nclass BannerStubComponent {}\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: '<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>', <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: ''})\nclass RouterOutletStubComponent { }\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({selector: 'app-welcome', <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: ''})\nclass WelcomeStubComponent {}\n\n</code-example>\n<p>The stub selectors match the selectors for the corresponding real components.\nBut their templates and classes are empty.</p>\n<p>Then declare them in the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration next to the\ncomponents, directives, and pipes that need to be real.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"testbed-stubs\" header=\"app/app.component.spec.ts (TestBed stubs)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    RouterLinkDirectiveStub,\n    BannerStubComponent,\n    RouterOutletStubComponent,\n    WelcomeStubComponent\n  ]\n})\n\n</code-example>\n<p>The <code>AppComponent</code> is the test subject, so of course you declare the real version.</p>\n<p>The <code>RouterLinkDirectiveStub</code>, <a href=\"guide/testing#routerlink\">described later</a>, is a test version\nof the real <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> that helps with the link tests.</p>\n<p>The rest are stubs.</p>\n<a id=\"no-errors-schema\"></a>\n<h4 id=\"no_errors_schema\"><em>NO_ERRORS_SCHEMA</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#no_errors_schema\"><i class=\"material-icons\">link</i></a></h4>\n<p>In the second approach, add <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> to the <code>TestBed.schemas</code> metadata.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"no-errors-schema\" header=\"app/app.component.spec.ts (NO_ERRORS_SCHEMA)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    RouterLinkDirectiveStub\n  ],\n  <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>: [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n})\n\n</code-example>\n<p>The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> tells the Angular compiler to ignore unrecognized elements and attributes.</p>\n<p>The compiler will recognize the <code>&#x3C;app-root></code> element and the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute\nbecause you declared a corresponding <code>AppComponent</code> and <code>RouterLinkDirectiveStub</code>\nin the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration.</p>\n<p>But the compiler won't throw an error when it encounters <code>&#x3C;app-banner></code>, <code>&#x3C;app-welcome></code>, or <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code>.\nIt simply renders them as empty tags and the browser ignores them.</p>\n<p>You no longer need the stub components.</p>\n<h4 id=\"use-both-techniques-together\">Use both techniques together<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#use-both-techniques-together\"><i class=\"material-icons\">link</i></a></h4>\n<p>These are techniques for <em>Shallow Component Testing</em> ,\nso-named because they reduce the visual surface of the component to just those elements\nin the component's template that matter for tests.</p>\n<p>The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> approach is the easier of the two but don't overuse it.</p>\n<p>The <code><a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a></code> also prevents the compiler from telling you about the missing\ncomponents and attributes that you omitted inadvertently or misspelled.\nYou could waste hours chasing phantom bugs that the compiler would have caught in an instant.</p>\n<p>The <em>stub component</em> approach has another advantage.\nWhile the stubs in <em>this</em> example were empty,\nyou could give them stripped-down templates and classes if your tests\nneed to interact with them in some way.</p>\n<p>In practice you will combine the two techniques in the same setup,\nas seen in this example.</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"mixed-setup\" header=\"app/app.component.spec.ts (mixed setup)\" linenums=\"false\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [\n    AppComponent,\n    BannerStubComponent,\n    RouterLinkDirectiveStub\n  ],\n  <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>: [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n})\n\n</code-example>\n<p>The Angular compiler creates the <code>BannerComponentStub</code> for the <code>&#x3C;app-banner></code> element\nand applies the <code>RouterLinkStubDirective</code> to the anchors with the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> attribute,\nbut it ignores the <code>&#x3C;app-welcome></code> and <code>&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>></code> tags.</p>\n<hr>\n<a id=\"routerlink\"></a>\n<h3 id=\"components-with-routerlink\">Components with <em>RouterLink</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#components-with-routerlink\"><i class=\"material-icons\">link</i></a></h3>\n<p>The real <code>RouterLinkDirective</code> is quite complicated and entangled with other components\nand directives of the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nIt requires challenging setup to mock and use in tests.</p>\n<p>The <code>RouterLinkDirectiveStub</code> in this sample code replaces the real directive\nwith an alternative version designed to validate the kind of anchor tag wiring\nseen in the <code>AppComponent</code> template.</p>\n<code-example path=\"testing/src/testing/router-link-directive-stub.ts\" region=\"router-link\" header=\"testing/router-link-directive-stub.ts (RouterLinkDirectiveStub)\" linenums=\"false\">\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({\n  selector: '[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]',\n  <a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a>: { '(click)': 'onClick()' }\n})\nexport class RouterLinkDirectiveStub {\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>') linkParams: any;\n  navigatedTo: any = null;\n\n  onClick() {\n    this.navigatedTo = this.linkParams;\n  }\n}\n\n</code-example>\n<p>The URL bound to the <code>[<a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>]</code> attribute flows in to the directive's <code>linkParams</code> property.</p>\n<p>The <code><a href=\"api/core/Directive#host\" class=\"code-anchor\">host</a></code> metadata property wires the click event of the host element\n(the <code>&#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>></code> anchor elements in <code>AppComponent</code>) to the stub directive's <code>onClick</code> method.</p>\n<p>Clicking the anchor should trigger the <code>onClick()</code> method,\nwhich sets the stub's telltale <code>navigatedTo</code> property.\nTests inspect <code>navigatedTo</code> to confirm that clicking the anchor\nset the expected route definition.</p>\n<div class=\"alert is-helpful\">\n<p>Whether the router is configured properly to navigate with that route definition is a\nquestion for a separate set of tests.</p>\n</div>\n<a id=\"by-directive\"></a>\n<a id=\"inject-directive\"></a>\n<h4 id=\"bydirective-and-injected-directives\"><em>By.directive</em> and injected directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#bydirective-and-injected-directives\"><i class=\"material-icons\">link</i></a></h4>\n<p>A little more setup triggers the initial data binding and gets references to the navigation links:</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"test-setup\" header=\"app/app.component.spec.ts (test setup)\" linenums=\"false\">\nbeforeEach(() => {\n  fixture.detectChanges(); // <a href=\"api/animations/trigger\" class=\"code-anchor\">trigger</a> initial data binding\n\n  // find DebugElements with an attached RouterLinkStubDirective\n  linkDes = fixture.debugElement\n    .queryAll(By.directive(RouterLinkDirectiveStub));\n\n  // get attached link directive instances\n  // using each <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>'s injector\n  routerLinks = linkDes.map(de => de.injector.get(RouterLinkDirectiveStub));\n});\n\n</code-example>\n<p>Three points of special interest:</p>\n<ol>\n<li>\n<p>You can locate the anchor elements with an attached directive using <code>By.directive</code>.</p>\n</li>\n<li>\n<p>The query returns <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> wrappers around the matching elements.</p>\n</li>\n<li>\n<p>Each <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> exposes a dependency injector with the\nspecific instance of the directive attached to that element.</p>\n</li>\n</ol>\n<p>The <code>AppComponent</code> links to validate are as follows:</p>\n<code-example path=\"testing/src/app/app.component.html\" region=\"links\" header=\"app/app.component.html (navigation links)\" linenums=\"false\">\n&#x3C;nav>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/dashboard\">Dashboard&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes\">Heroes&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/about\">About&#x3C;/<a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a>>\n&#x3C;/nav>\n\n</code-example>\n<a id=\"app-component-tests\"></a>\n<p>Here are some tests that confirm those links are wired to the <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code> directives\nas expected:</p>\n<code-example path=\"testing/src/app/app.component.spec.ts\" region=\"tests\" header=\"app/app.component.spec.ts (selected tests)\" linenums=\"false\">\nit('can get RouterLinks from <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>', () => {\n  expect(routerLinks.length).toBe(3, 'should have 3 routerLinks');\n  expect(routerLinks[0].linkParams).toBe('/dashboard');\n  expect(routerLinks[1].linkParams).toBe('/heroes');\n  expect(routerLinks[2].linkParams).toBe('/about');\n});\n\nit('can click Heroes link in <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>', () => {\n  const heroesLinkDe = linkDes[1];   // heroes link <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>\n  const heroesLink = routerLinks[1]; // heroes link directive\n\n  expect(heroesLink.navigatedTo).toBeNull('should not have <a href=\"api/router/Router#navigated\" class=\"code-anchor\">navigated</a> yet');\n\n  heroesLinkDe.triggerEventHandler('click', null);\n  fixture.detectChanges();\n\n  expect(heroesLink.navigatedTo).toBe('/heroes');\n});\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The \"click\" test <em>in this example</em> is misleading.\nIt tests the <code>RouterLinkDirectiveStub</code> rather than the <em>component</em>.\nThis is a common failing of directive stubs.</p>\n<p>It has a legitimate purpose in this guide.\nIt demonstrates how to find a <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> element, click it, and inspect a result,\nwithout engaging the full router machinery.\nThis is a skill you may need to test a more sophisticated component, one that changes the display,\nre-calculates parameters, or re-arranges navigation options when the user clicks the link.</p>\n</div>\n<a id=\"why-stubbed-routerlink-tests\"></a>\n<h4 id=\"what-good-are-these-tests\">What good are these tests?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#what-good-are-these-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>Stubbed <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">RouterLink</a></code> tests can confirm that a component with links and an outlet is setup properly,\nthat the component has the links it should have, and that they are all pointing in the expected direction.\nThese tests do not concern whether the app will succeed in navigating to the target component when the user clicks a link.</p>\n<p>Stubbing the RouterLink and RouterOutlet is the best option for such limited testing goals.\nRelying on the real router would make them brittle.\nThey could fail for reasons unrelated to the component.\nFor example, a navigation guard could prevent an unauthorized user from visiting the <code>HeroListComponent</code>.\nThat's not the fault of the <code>AppComponent</code> and no change to that component could cure the failed test.</p>\n<p>A <em>different</em> battery of tests can explore whether the application navigates as expected\nin the presence of conditions that influence guards such as whether the user is authenticated and authorized.</p>\n<div class=\"alert is-helpful\">\n<p>A future guide update will explain how to write such\ntests with the <code><a href=\"api/router/testing/RouterTestingModule\" class=\"code-anchor\">RouterTestingModule</a></code>.</p>\n</div>\n<hr>\n<a id=\"page-object\"></a>\n<h3 id=\"use-a-page-object\">Use a <em>page</em> object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#use-a-page-object\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroDetailComponent</code> is a simple view with a title, two hero fields, and two buttons.</p>\n<figure>\n  <img src=\"generated/images/guide/testing/hero-detail.component.png\" alt=\"HeroDetailComponent in action\" width=\"269\" height=\"170\">\n</figure>\n<p>But there's plenty of template complexity even in this simple form.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.html\" header=\"app/hero/hero-detail.component.html\" linenums=\"false\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"hero\">\n  &#x3C;h2>&#x3C;span>{{hero.name | <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">titlecase</a>}}&#x3C;/span> Details&#x3C;/h2>\n  &#x3C;div>\n    &#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label for=\"name\">name: &#x3C;/label>\n    &#x3C;input id=\"name\" [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"hero.name\" placeholder=\"name\" />\n  &#x3C;/div>\n  &#x3C;button (click)=\"save()\">Save&#x3C;/button>\n  &#x3C;button (click)=\"cancel()\">Cancel&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<p>Tests that exercise the component need ...</p>\n<ul>\n<li>to wait until a hero arrives before elements appear in the DOM.</li>\n<li>a reference to the title text.</li>\n<li>a reference to the name input box to inspect and set it.</li>\n<li>references to the two buttons so they can click them.</li>\n<li>spies for some of the component and router methods.</li>\n</ul>\n<p>Even a small form such as this one can produce a mess of tortured conditional setup and CSS element selection.</p>\n<p>Tame the complexity with a <code>Page</code> class that handles access to component properties\nand encapsulates the logic that sets them.</p>\n<p>Here is such a <code>Page</code> class for the <code>hero-detail.component.spec.ts</code></p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"page\" header=\"app/hero/hero-detail.component.spec.ts (Page)\" linenums=\"false\">\nclass Page {\n  // getter <a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">properties</a> wait to <a href=\"api/animations/query\" class=\"code-anchor\">query</a> the DOM until called.\n  get buttons()     { return this.queryAll&#x3C;HTMLButtonElement>('button'); }\n  get saveBtn()     { return this.buttons[0]; }\n  get cancelBtn()   { return this.buttons[1]; }\n  get nameDisplay() { return this.query&#x3C;HTMLElement>('span'); }\n  get nameInput()   { return this.query&#x3C;HTMLInputElement>('input'); }\n\n  gotoListSpy: jasmine.Spy;\n  navigateSpy:  jasmine.Spy;\n\n  constructor(fixture: <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>&#x3C;HeroDetailComponent>) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = &#x3C;any> fixture.debugElement.injector.get(<a href=\"api/router/Router\" class=\"code-anchor\">Router</a>);\n    this.navigateSpy = routerSpy.navigate;\n\n    // spy on component's `gotoList()` method\n    const component = fixture.componentInstance;\n    this.gotoListSpy = spyOn(component, 'gotoList').and.callThrough();\n  }\n\n  //// <a href=\"api/animations/query\" class=\"code-anchor\">query</a> helpers ////\n  private <a href=\"api/animations/query\" class=\"code-anchor\">query</a>&#x3C;T>(selector: string): T {\n    return fixture.nativeElement.querySelector(selector);\n  }\n\n  private queryAll&#x3C;T>(selector: string): T[] {\n    return fixture.nativeElement.querySelectorAll(selector);\n  }\n}\n\n</code-example>\n<p>Now the important hooks for component manipulation and inspection are neatly organized and accessible from an instance of <code>Page</code>.</p>\n<p>A <code>createComponent</code> method creates a <code>page</code> object and fills in the blanks once the <code>hero</code> arrives.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"create-component\" header=\"app/hero/hero-detail.component.spec.ts (createComponent)\" linenums=\"false\">\n/** Create the HeroDetailComponent, initialize it, set test variables  */\nfunction createComponent() {\n  fixture = TestBed.createComponent(HeroDetailComponent);\n  component = fixture.componentInstance;\n  page = new Page(fixture);\n\n  // 1st change detection triggers ngOnInit which gets <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> hero\n  fixture.detectChanges();\n  return fixture.whenStable().then(() => {\n    // 2nd change detection displays the async-fetched hero\n    fixture.detectChanges();\n  });\n}\n\n</code-example>\n<p>The <a href=\"guide/testing#tests-w-test-double\"><em>HeroDetailComponent</em> tests</a> in an earlier section demonstrate how <code>createComponent</code> and <code>page</code>\nkeep the tests short and <em>on message</em>.\nThere are no distractions: no waiting for promises to resolve and no searching the DOM for element values to compare.</p>\n<p>Here are a few more <code>HeroDetailComponent</code> tests to reinforce the point.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"selected-tests\" header=\"app/hero/hero-detail.component.spec.ts (selected tests)\" linenums=\"false\">\nit('should display that hero\\'s name', () => {\n  expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n});\n\nit('should navigate when click cancel', () => {\n  click(page.cancelBtn);\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n});\n\nit('should save when click save but not navigate immediately', () => {\n  // <a href=\"api/http/RequestMethod#Get\" class=\"code-anchor\">Get</a> service injected into component and spy on its`saveHero` method.\n  // It delegates to fake `HeroService.updateHero` which delivers <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> safe test result.\n  const hds = fixture.debugElement.injector.get(HeroDetailService);\n  const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n\n  click(page.saveBtn);\n  expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n  expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n});\n\nit('should navigate when click save and save resolves', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  click(page.saveBtn);\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // wait for <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> save to complete\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n}));\n\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // get the name's input and display elements from the DOM\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // simulate user entering <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // dispatch <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> DOM event so that Angular learns of input value change.\n  nameInput.dispatchEvent(newEvent('input'));\n\n  // Tell Angular to <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> the display binding through the title pipe\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<hr>\n<a id=\"compile-components\"></a>\n<h3 id=\"calling-compilecomponents\">Calling <em>compileComponents()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#calling-compilecomponents\"><i class=\"material-icons\">link</i></a></h3>\n<div class=\"alert is-helpful\">\n<p>You can ignore this section if you <em>only</em> run tests with the CLI <code>ng test</code> command\nbecause the CLI compiles the application before running the tests.</p>\n</div>\n<p>If you run tests in a <strong>non-CLI environment</strong>, the tests may fail with a message like this one:</p>\n<code-example language=\"sh\" class=\"code-shell\" hidecopy=\"\">\nError: This test module uses the component BannerComponent\nwhich is using <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> \"templateUrl\" or \"<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>\", but they were never compiled.\nPlease call \"TestBed.compileComponents\" before your test.\n</code-example>\n<p>The root of the problem is at least one of the components involved in the test\nspecifies an external template or CSS file as\nthe following version of the <code>BannerComponent</code> does.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.ts\" header=\"app/banner/banner-external.component.ts (external template &#x26; css)\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-banner',\n  templateUrl: './banner-external.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>:  ['./banner-external.component.css']\n})\nexport class BannerComponent {\n  title = 'Test Tour of Heroes';\n}\n\n\n</code-example>\n<p>The test fails when the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> tries to create the component.</p>\n<code-example path=\"testing/src/app/banner/banner.component.spec.ts\" region=\"configure-and-create\" header=\"app/banner/banner.component.spec.ts (setup that fails)\" avoid=\"\" linenums=\"false\">\nbeforeEach(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  });\n  fixture = TestBed.createComponent(BannerComponent);\n});\n\n</code-example>\n<p>Recall that the app hasn't been compiled.\nSo when you call <code>createComponent()</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> compiles implicitly.</p>\n<p>That's not a problem when the source code is in memory.\nBut the <code>BannerComponent</code> requires external files\nthat the compile must read from the file system,\nan inherently <em>asynchronous</em> operation.</p>\n<p>If the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> were allowed to continue, the tests would run and fail mysteriously\nbefore the compiler could finished.</p>\n<p>The preemptive error message tells you to compile explicitly with <code>compileComponents()</code>.</p>\n<h4 id=\"compilecomponents-is-async\"><em>compileComponents()</em> is async<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#compilecomponents-is-async\"><i class=\"material-icons\">link</i></a></h4>\n<p>You must call <code>compileComponents()</code> within an asynchronous test function.</p>\n<div class=\"alert is-critical\">\n<p>If you neglect to make the test function async\n(e.g., forget to use <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> as described below),\nyou'll see this error message</p>\n<code-example language=\"sh\" class=\"code-shell\" hidecopy=\"\">\nError: ViewDestroyedError: Attempt to use <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> destroyed view\n</code-example>\n</div>\n<p>A typical approach is to divide the setup logic into two separate <code>beforeEach()</code> functions:</p>\n<ol>\n<li>An async <code>beforeEach()</code> that compiles the components</li>\n<li>A synchronous <code>beforeEach()</code> that performs the remaining setup.</li>\n</ol>\n<p>To follow this pattern, import the <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> helper with the other testing symbols.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"import-async\">\nimport { <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>, <a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a>, <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\n\n</code-example>\n<h4 id=\"the-async-beforeeach\">The async <em>beforeEach</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-async-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<p>Write the first async <code>beforeEach</code> like this.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"async-before-each\" header=\"app/banner/banner-external.component.spec.ts (async beforeEach)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  })\n  .compileComponents();  // compile <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a> and css\n}));\n\n</code-example>\n<p>The <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>()</code> helper function takes a parameterless function with the body of the setup.</p>\n<p>The <code><a href=\"api/core/testing/TestBed#configureTestingModule\" class=\"code-anchor\">TestBed.configureTestingModule()</a></code> method returns the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class so you can chain\ncalls to other <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> static methods such as <code>compileComponents()</code>.</p>\n<p>In this example, the <code>BannerComponent</code> is the only component to compile.\nOther examples configure the testing module with multiple components\nand may import application modules that hold yet more components.\nAny of them could be require external files.</p>\n<p>The <code>TestBed.compileComponents</code> method asynchronously compiles all components configured in the testing module.</p>\n<div class=\"alert is-important\">\n<p>Do not re-configure the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> after calling <code>compileComponents()</code>.</p>\n</div>\n<p>Calling <code>compileComponents()</code> closes the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance to further configuration.\nYou cannot call any more <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration methods, not <code>configureTestingModule()</code>\nnor any of the <code>override...</code> methods. The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> throws an error if you try.</p>\n<p>Make <code>compileComponents()</code> the last step\nbefore calling <code><a href=\"api/core/testing/TestBed#createComponent\" class=\"code-anchor\">TestBed.createComponent()</a></code>.</p>\n<h4 id=\"the-synchronous-beforeeach\">The synchronous <em>beforeEach</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-synchronous-beforeeach\"><i class=\"material-icons\">link</i></a></h4>\n<p>The second, synchronous <code>beforeEach()</code> contains the remaining setup steps,\nwhich include creating the component and querying for elements to inspect.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"sync-before-each\" header=\"app/banner/banner-external.component.spec.ts (synchronous beforeEach)\" linenums=\"false\">\nbeforeEach(() => {\n  fixture = TestBed.createComponent(BannerComponent);\n  component = fixture.componentInstance; // BannerComponent test instance\n  h1 = fixture.nativeElement.querySelector('h1');\n});\n\n</code-example>\n<p>You can count on the test runner to wait for the first asynchronous <code>beforeEach</code> to finish before calling the second.</p>\n<h4 id=\"consolidated-setup\">Consolidated setup<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#consolidated-setup\"><i class=\"material-icons\">link</i></a></h4>\n<p>You can consolidate the two <code>beforeEach()</code> functions into a single, async <code>beforeEach()</code>.</p>\n<p>The <code>compileComponents()</code> method returns a promise so you can perform the\nsynchronous setup tasks <em>after</em> compilation by moving the synchronous code\ninto a <code>then(...)</code> callback.</p>\n<code-example path=\"testing/src/app/banner/banner-external.component.spec.ts\" region=\"one-before-each\" header=\"app/banner/banner-external.component.spec.ts (one beforeEach)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ BannerComponent ],\n  })\n  .compileComponents()\n  .then(() => {\n    fixture = TestBed.createComponent(BannerComponent);\n    component = fixture.componentInstance;\n    h1 = fixture.nativeElement.querySelector('h1');\n  });\n}));\n\n</code-example>\n<h4 id=\"compilecomponents-is-harmless\"><em>compileComponents()</em> is harmless<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#compilecomponents-is-harmless\"><i class=\"material-icons\">link</i></a></h4>\n<p>There's no harm in calling <code>compileComponents()</code> when it's not required.</p>\n<p>The component test file generated by the CLI calls <code>compileComponents()</code>\neven though it is never required when running <code>ng test</code>.</p>\n<p>The tests in this guide only call <code>compileComponents</code> when necessary.</p>\n<hr>\n<a id=\"import-module\"></a>\n<h3 id=\"setup-with-module-imports\">Setup with module imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#setup-with-module-imports\"><i class=\"material-icons\">link</i></a></h3>\n<p>Earlier component tests configured the testing module with a few <code><a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a></code> like this:</p>\n<code-example path=\"testing/src/app/dashboard/dashboard-hero.component.spec.ts\" region=\"config-testbed\" header=\"app/dashboard/dashboard-hero.component.spec.ts (configure TestBed)\">\nTestBed.configureTestingModule({\n  <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ DashboardHeroComponent ]\n})\n\n</code-example>\n<p>The <code>DashboardComponent</code> is simple. It needs no help.\nBut more complex components often depend on other components, directives, pipes, and providers\nand these must be added to the testing module too.</p>\n<p>Fortunately, the <code>TestBed.configureTestingModule</code> parameter parallels\nthe metadata passed to the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> decorator\nwhich means you can also specify <code>providers</code> and <code><a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a></code>.</p>\n<p>The <code>HeroDetailComponent</code> requires a lot of help despite its small size and simple construction.\nIn addition to the support it receives from the default testing module <code><a href=\"api/common/CommonModule\" class=\"code-anchor\">CommonModule</a></code>, it needs:</p>\n<ul>\n<li><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and friends in the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to enable two-way data binding.</li>\n<li>The <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> from the <code>shared</code> folder.</li>\n<li>Router services (which these tests are stubbing).</li>\n<li>Hero data access services (also stubbed).</li>\n</ul>\n<p>One approach is to configure the testing module from the individual pieces as in this example:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-forms-module\" header=\"app/hero/hero-detail.component.spec.ts (FormsModule setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:      [ <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> ],\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ HeroDetailComponent, <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a> ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: HeroService,    useClass: TestHeroService },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n  .compileComponents();\n}));\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Notice that the <code>beforeEach()</code> is asynchronous and calls <code>TestBed.compileComponents</code>\nbecause the <code>HeroDetailComponent</code> has an external template and css file.</p>\n<p>As explained in <a href=\"guide/testing#compile-components\"><em>Calling compileComponents()</em></a> above,\nthese tests could be run in a non-CLI environment\nwhere Angular would have to compile them in the browser.</p>\n</div>\n<h4 id=\"import-a-shared-module\">Import a shared module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#import-a-shared-module\"><i class=\"material-icons\">link</i></a></h4>\n<p>Because many app components need the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and the <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>, the developer created\na <code>SharedModule</code> to combine these and other frequently requested parts.</p>\n<p>The test configuration can use the <code>SharedModule</code> too as seen in this alternative setup:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-shared-module\" header=\"app/hero/hero-detail.component.spec.ts (SharedModule setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:      [ SharedModule ],\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ HeroDetailComponent ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: HeroService,    useClass: TestHeroService },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n  .compileComponents();\n}));\n\n</code-example>\n<p>It's a bit tighter and smaller, with fewer import statements (not shown).</p>\n<a id=\"feature-module-import\"></a>\n<h4 id=\"import-a-feature-module\">Import a feature module<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#import-a-feature-module\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>HeroDetailComponent</code> is part of the <code>HeroModule</code> <a href=\"guide/feature-modules\">Feature Module</a> that aggregates more of the interdependent pieces\nincluding the <code>SharedModule</code>.\nTry a test configuration that imports the <code>HeroModule</code> like this one:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-hero-module\" header=\"app/hero/hero-detail.component.spec.ts (HeroModule setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:   [ HeroModule ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: HeroService,    useClass: TestHeroService },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n  .compileComponents();\n}));\n\n</code-example>\n<p>That's <em>really</em> crisp. Only the <em>test doubles</em> in the <code>providers</code> remain. Even the <code>HeroDetailComponent</code> declaration is gone.</p>\n<p>In fact, if you try to declare it, Angular will throw an error because\n<code>HeroDetailComponent</code> is declared in both the <code>HeroModule</code> and the <code>DynamicTestModule</code>\ncreated by the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.</p>\n<div class=\"alert is-helpful\">\n<p>Importing the component's feature module can be the easiest way to configure tests\nwhen there are many mutual dependencies within the module and\nthe module is small, as feature modules tend to be.</p>\n</div>\n<hr>\n<a id=\"component-override\"></a>\n<h3 id=\"override-component-providers\">Override component providers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#override-component-providers\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>HeroDetailComponent</code> provides its own <code>HeroDetailService</code>.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.ts\" region=\"prototype\" header=\"app/hero/hero-detail.component.ts (prototype)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector:    'app-hero-detail',\n  templateUrl: './hero-detail.component.html',\n  <a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a>:  ['./hero-detail.component.css' ],\n  providers:  [ HeroDetailService ]\n})\nexport class HeroDetailComponent implements <a href=\"api/core/OnInit\" class=\"code-anchor\">OnInit</a> {\n  constructor(\n    private heroDetailService: HeroDetailService,\n    private route:  <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>,\n    private router: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>) {\n  }\n}\n\n</code-example>\n<p>It's not possible to stub the component's <code>HeroDetailService</code> in the <code>providers</code> of the <code>TestBed.configureTestingModule</code>.\nThose are providers for the <em>testing module</em>, not the component. They prepare the dependency injector at the <em>fixture level</em>.</p>\n<p>Angular creates the component with its <em>own</em> injector, which is a <em>child</em> of the fixture injector.\nIt registers the component's providers (the <code>HeroDetailService</code> in this case) with the child injector.</p>\n<p>A test cannot get to child injector services from the fixture injector.\nAnd <code>TestBed.configureTestingModule</code> can't configure them either.</p>\n<p>Angular has been creating new instances of the real <code>HeroDetailService</code> all along!</p>\n<div class=\"alert is-helpful\">\n<p>These tests could fail or timeout if the <code>HeroDetailService</code> made its own XHR calls to a remote server.\nThere might not be a remote server to call.</p>\n<p>Fortunately, the <code>HeroDetailService</code> delegates responsibility for remote data access to an injected <code>HeroService</code>.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.service.ts\" region=\"prototype\" header=\"app/hero/hero-detail.service.ts (prototype)\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class HeroDetailService {\n  constructor(private heroService: HeroService) {  }\n/* . . . */\n}\n\n</code-example>\n<p>The <a href=\"guide/testing#feature-module-import\">previous test configuration</a> replaces the real <code>HeroService</code> with a <code>TestHeroService</code>\nthat intercepts server requests and fakes their responses.</p>\n</div>\n<p>What if you aren't so lucky. What if faking the <code>HeroService</code> is hard?\nWhat if <code>HeroDetailService</code> makes its own server requests?</p>\n<p>The <code>TestBed.overrideComponent</code> method can replace the component's <code>providers</code> with easy-to-manage <em>test doubles</em>\nas seen in the following setup variation:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"setup-override\" header=\"app/hero/hero-detail.component.spec.ts (Override setup)\" linenums=\"false\">\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  const routerSpy = createRouterSpy();\n\n  TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>:   [ HeroModule ],\n    providers: [\n      { provide: <a href=\"api/router/ActivatedRoute\" class=\"code-anchor\">ActivatedRoute</a>, useValue: <a href=\"api/router/RouterOutlet#activatedRoute\" class=\"code-anchor\">activatedRoute</a> },\n      { provide: <a href=\"api/router/Router\" class=\"code-anchor\">Router</a>,         useValue: routerSpy},\n    ]\n  })\n\n  // Override component's own provider\n  .overrideComponent(HeroDetailComponent, {\n    set: {\n      providers: [\n        { provide: HeroDetailService, useClass: HeroDetailServiceSpy }\n      ]\n    }\n  })\n\n  .compileComponents();\n}));\n\n</code-example>\n<p>Notice that <code>TestBed.configureTestingModule</code> no longer provides a (fake) <code>HeroService</code> because it's <a href=\"guide/testing#spy-stub\">not needed</a>.</p>\n<a id=\"override-component-method\"></a>\n<h4 id=\"the-overridecomponent-method\">The <em>overrideComponent</em> method<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-overridecomponent-method\"><i class=\"material-icons\">link</i></a></h4>\n<p>Focus on the <code>overrideComponent</code> method.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"override-component-method\" header=\"app/hero/hero-detail.component.spec.ts (overrideComponent)\" linenums=\"false\">\n.overrideComponent(HeroDetailComponent, {\n  set: {\n    providers: [\n      { provide: HeroDetailService, useClass: HeroDetailServiceSpy }\n    ]\n  }\n})\n\n</code-example>\n<p>It takes two arguments: the component type to override (<code>HeroDetailComponent</code>) and an override metadata object.\nThe <a href=\"guide/testing#metadata-override-object\">override metadata object</a> is a generic defined as follows:</p>\n<code-example format=\".\" language=\"javascript\">\n  type <a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a><t> = {\n    add?: Partial<t>;\n    remove?: Partial<t>;\n    set?: Partial<t>;\n  };\n</t></t></t></t></code-example>\n<p>A metadata override object can either add-and-remove elements in metadata properties or completely reset those properties.\nThis example resets the component's <code>providers</code> metadata.</p>\n<p>The type parameter, <code>T</code>, is the kind of metadata you'd pass to the <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> decorator:</p>\n<code-example format=\".\" language=\"javascript\">\n  selector?: string;\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>?: string;\n  templateUrl?: string;\n  providers?: any[];\n  ...\n</code-example>\n<a id=\"spy-stub\"></a>\n<h4 id=\"provide-a-spy-stub-herodetailservicespy\">Provide a <em>spy stub</em> (<em>HeroDetailServiceSpy</em>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#provide-a-spy-stub-herodetailservicespy\"><i class=\"material-icons\">link</i></a></h4>\n<p>This example completely replaces the component's <code>providers</code> array with a new array containing a <code>HeroDetailServiceSpy</code>.</p>\n<p>The <code>HeroDetailServiceSpy</code> is a stubbed version of the real <code>HeroDetailService</code>\nthat fakes all necessary features of that service.\nIt neither injects nor delegates to the lower level <code>HeroService</code>\nso there's no need to provide a test double for that.</p>\n<p>The related <code>HeroDetailComponent</code> tests will assert that methods of the <code>HeroDetailService</code>\nwere called by spying on the service methods.\nAccordingly, the stub implements its methods as spies:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"hds-spy\" header=\"app/hero/hero-detail.component.spec.ts (HeroDetailServiceSpy)\" linenums=\"false\">\nclass HeroDetailServiceSpy {\n  testHero: Hero = {id: 42, name: 'Test Hero' };\n\n  /* emit cloned test hero */\n  getHero = jasmine.createSpy('getHero').and.callFake(\n    () => asyncData(Object.assign({}, this.testHero))\n  );\n\n  /* emit clone of test hero, with <a href=\"api/core/QueryList#changes\" class=\"code-anchor\">changes</a> merged in */\n  saveHero = jasmine.createSpy('saveHero').and.callFake(\n    (hero: Hero) => asyncData(Object.assign(this.testHero, hero))\n  );\n}\n\n\n</code-example>\n<a id=\"override-tests\"></a>\n<h4 id=\"the-override-tests\">The override tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-override-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>Now the tests can control the component's hero directly by manipulating the spy-stub's <code>testHero</code>\nand confirm that service methods were called.</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"override-tests\" header=\"app/hero/hero-detail.component.spec.ts (override tests)\" linenums=\"false\">\nlet hdsSpy: HeroDetailServiceSpy;\n\nbeforeEach(<a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>(() => {\n  createComponent();\n  // get the component's injected HeroDetailServiceSpy\n  hdsSpy = fixture.debugElement.injector.get(HeroDetailService) as any;\n}));\n\nit('should have called `getHero`', () => {\n  expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n});\n\nit('should display stub hero\\'s name', () => {\n  expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n});\n\nit('should save stub hero change', <a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>(() => {\n  const origName = hdsSpy.testHero.name;\n  const newName = 'New Name';\n\n  page.nameInput.value = newName;\n  page.nameInput.dispatchEvent(newEvent('input')); // tell Angular\n\n  expect(component.hero.name).toBe(newName, 'component hero has new name');\n  expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n\n  click(page.saveBtn);\n  expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n\n  <a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a>(); // wait for <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a> save to complete\n  expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n  expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n}));\n\n</code-example>\n<a id=\"more-overrides\"></a>\n<h4 id=\"more-overrides\">More overrides<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-overrides\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>TestBed.overrideComponent</code> method can be called multiple times for the same or different components.\nThe <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> offers similar <code>overrideDirective</code>, <code>overrideModule</code>, and <code>overridePipe</code> methods\nfor digging into and replacing parts of these other classes.</p>\n<p>Explore the options and combinations on your own.</p>\n<hr>\n<a id=\"attribute-directive\"></a>\n<h2 id=\"attribute-directive-testing\">Attribute Directive Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#attribute-directive-testing\"><i class=\"material-icons\">link</i></a></h2>\n<p>An <em>attribute directive</em> modifies the behavior of an element, component or another directive.\nIts name reflects the way the directive is applied: as an attribute on a host element.</p>\n<p>The sample application's <code>HighlightDirective</code> sets the background color of an element\nbased on either a data bound color or a default color (lightgray).\nIt also sets a custom property of the element (<code>customProperty</code>) to <code>true</code>\nfor no reason other than to show that it can.</p>\n<code-example path=\"testing/src/app/shared/highlight.directive.ts\" header=\"app/shared/highlight.directive.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>, <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> } from '@angular/core';\n\n@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a>({ selector: '[highlight]' })\n/** Set backgroundColor for the attached element to highlight color\n *  and set the element's customProperty to true */\nexport class HighlightDirective implements <a href=\"api/core/OnChanges\" class=\"code-anchor\">OnChanges</a> {\n\n  defaultColor =  'rgb(211, 211, 211)'; // lightgray\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>('highlight') bgColor: string;\n\n  constructor(private el: <a href=\"api/core/ElementRef\" class=\"code-anchor\">ElementRef</a>) {\n    el.nativeElement.style.customProperty = true;\n  }\n\n  ngOnChanges() {\n    this.el.nativeElement.style.backgroundColor = this.bgColor || this.defaultColor;\n  }\n}\n\n\n</code-example>\n<p>It's used throughout the application, perhaps most simply in the <code>AboutComponent</code>:</p>\n<code-example path=\"testing/src/app/about/about.component.ts\" header=\"app/about/about.component.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n  &#x3C;h2 highlight=\"skyblue\">About&#x3C;/h2>\n  &#x3C;h3>Quote of the day:&#x3C;/h3>\n  &#x3C;twain-quote>&#x3C;/twain-quote>\n  `\n})\nexport class AboutComponent { }\n\n\n</code-example>\n<p>Testing the specific use of the <code>HighlightDirective</code> within the <code>AboutComponent</code> requires only the\ntechniques explored above (in particular the <a href=\"guide/testing#nested-component-tests\">\"Shallow test\"</a> approach).</p>\n<code-example path=\"testing/src/app/about/about.component.spec.ts\" region=\"tests\" header=\"app/about/about.component.spec.ts\" linenums=\"false\">\nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ AboutComponent, HighlightDirective],\n    <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>:      [ <a href=\"api/core/NO_ERRORS_SCHEMA\" class=\"code-anchor\">NO_ERRORS_SCHEMA</a> ]\n  })\n  .createComponent(AboutComponent);\n  fixture.detectChanges(); // initial binding\n});\n\nit('should have skyblue &#x3C;h2>', () => {\n  const h2: HTMLElement = fixture.nativeElement.querySelector('h2');\n  const bgColor = h2.style.backgroundColor;\n  expect(bgColor).toBe('skyblue');\n});\n\n</code-example>\n<p>However, testing a single use case is unlikely to explore the full range of a directive's capabilities.\nFinding and testing all components that use the directive is tedious, brittle, and almost as unlikely to afford full coverage.</p>\n<p><em>Class-only tests</em> might be helpful,\nbut attribute directives like this one tend to manipulate the DOM.\nIsolated unit tests don't touch the DOM and, therefore,\ndo not inspire confidence in the directive's efficacy.</p>\n<p>A better solution is to create an artificial test component that demonstrates all ways to apply the directive.</p>\n<code-example path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"test-component\" header=\"app/shared/highlight.directive.spec.ts (TestComponent)\" linenums=\"false\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  <a href=\"api/core/Component#template\" class=\"code-anchor\">template</a>: `\n  &#x3C;h2 highlight=\"yellow\">Something Yellow&#x3C;/h2>\n  &#x3C;h2 highlight>The Default (Gray)&#x3C;/h2>\n  &#x3C;h2>No Highlight&#x3C;/h2>\n  &#x3C;input #box [highlight]=\"box.value\" value=\"cyan\"/>`\n})\nclass TestComponent { }\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/testing/highlight-directive-spec.png\" alt=\"HighlightDirective spec in action\" width=\"200\" height=\"159\">\n</figure>\n<div class=\"alert is-helpful\">\n<p>The <code>&#x3C;input></code> case binds the <code>HighlightDirective</code> to the name of a color value in the input box.\nThe initial value is the word \"cyan\" which should be the background color of the input box.</p>\n</div>\n<p>Here are some tests of this component:</p>\n<code-example path=\"testing/src/app/shared/highlight.directive.spec.ts\" region=\"selected-tests\" header=\"app/shared/highlight.directive.spec.ts (selected tests)\">\nbeforeEach(() => {\n  fixture = TestBed.configureTestingModule({\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>: [ HighlightDirective, TestComponent ]\n  })\n  .createComponent(TestComponent);\n\n  fixture.detectChanges(); // initial binding\n\n  // all elements with an attached HighlightDirective\n  des = fixture.debugElement.queryAll(By.directive(HighlightDirective));\n\n  // the h2 without the HighlightDirective\n  bareH2 = fixture.debugElement.query(By.css('h2:not([highlight])'));\n});\n\n// color tests\nit('should have three highlighted elements', () => {\n  expect(des.length).toBe(3);\n});\n\nit('should color 1st &#x3C;h2> background \"yellow\"', () => {\n  const bgColor = des[0].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe('yellow');\n});\n\nit('should color 2nd &#x3C;h2> background w/ default color', () => {\n  const dir = des[1].injector.get(HighlightDirective) as HighlightDirective;\n  const bgColor = des[1].nativeElement.style.backgroundColor;\n  expect(bgColor).toBe(dir.defaultColor);\n});\n\nit('should bind &#x3C;input> background to value color', () => {\n  // easier to work with nativeElement\n  const input = des[2].nativeElement as HTMLInputElement;\n  expect(input.style.backgroundColor).toBe('cyan', 'initial backgroundColor');\n\n  // dispatch <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> DOM event so that Angular responds to the input value change.\n  input.value = 'green';\n  input.dispatchEvent(newEvent('input'));\n  fixture.detectChanges();\n\n  expect(input.style.backgroundColor).toBe('green', 'changed backgroundColor');\n});\n\n\nit('bare &#x3C;h2> should not have <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> customProperty', () => {\n  expect(bareH2.properties['customProperty']).toBeUndefined();\n});\n\n</code-example>\n<p>A few techniques are noteworthy:</p>\n<ul>\n<li>\n<p>The <code>By.directive</code> predicate is a great way to get the elements that have this directive <em>when their element types are unknown</em>.</p>\n</li>\n<li>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:not\"><code>:not</code> pseudo-class</a>\nin <code>By.css('h2:not([highlight])')</code> helps find <code>&#x3C;h2></code> elements that <em>do not</em> have the directive.\n<code>By.css('*:not([highlight])')</code> finds <em>any</em> element that does not have the directive.</p>\n</li>\n<li>\n<p><code><a href=\"api/core/DebugElement#styles\" class=\"code-anchor\">DebugElement.styles</a></code> affords access to element styles even in the absence of a real browser, thanks to the <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> abstraction.\nBut feel free to exploit the <code>nativeElement</code> when that seems easier or more clear than the abstraction.</p>\n</li>\n<li>\n<p>Angular adds a directive to the injector of the element to which it is applied.\nThe test for the default color uses the injector of the second <code>&#x3C;h2></code> to get its <code>HighlightDirective</code> instance\nand its <code>defaultColor</code>.</p>\n</li>\n<li>\n<p><code><a href=\"api/core/DebugElement#properties\" class=\"code-anchor\">DebugElement.properties</a></code> affords access to the artificial custom property that is set by the directive.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"pipe-testing\">Pipe Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#pipe-testing\"><i class=\"material-icons\">link</i></a></h2>\n<p>Pipes are easy to test without the Angular testing utilities.</p>\n<p>A pipe class has one method, <code>transform</code>, that manipulates the input\nvalue into a transformed output value.\nThe <code>transform</code> implementation rarely interacts with the DOM.\nMost pipes have no dependence on Angular other than the <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>\nmetadata and an interface.</p>\n<p>Consider a <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> that capitalizes the first letter of each word.\nHere's a naive implementation with a regular expression.</p>\n<code-example path=\"testing/src/app/shared/title-case.pipe.ts\" header=\"app/shared/title-case.pipe.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'titlecase', <a href=\"api/core/Pipe#pure\" class=\"code-anchor\">pure</a>: true})\n/** Transform to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case: uppercase the first letter of the words in <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> string.*/\nexport class <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a> implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(input: string): string {\n    return input.length === 0 ? '' :\n      input.replace(/\\w\\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));\n  }\n}\n\n\n</code-example>\n<p>Anything that uses a regular expression is worth testing thoroughly.\nUse simple Jasmine to explore the expected cases and the edge cases.</p>\n<code-example path=\"testing/src/app/shared/title-case.pipe.spec.ts\" region=\"excerpt\" header=\"app/shared/title-case.pipe.spec.ts\">\ndescribe('<a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>', () => {\n  // This pipe is <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> <a href=\"api/core/Pipe#pure\" class=\"code-anchor\">pure</a>, stateless function so no need for BeforeEach\n  let pipe = new <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>();\n\n  it('transforms \"abc\" to \"Abc\"', () => {\n    expect(pipe.transform('abc')).toBe('Abc');\n  });\n\n  it('transforms \"abc def\" to \"Abc Def\"', () => {\n    expect(pipe.transform('abc def')).toBe('Abc Def');\n  });\n\n  // ... more tests ...\n});\n\n</code-example>\n<a id=\"write-tests\"></a>\n<h4 id=\"write-dom-tests-too\">Write DOM tests too<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#write-dom-tests-too\"><i class=\"material-icons\">link</i></a></h4>\n<p>These are tests of the pipe <em>in isolation</em>.\nThey can't tell if the <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> is working properly as applied in the application components.</p>\n<p>Consider adding component tests such as this one:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (pipe test)\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // get the name's input and display elements from the DOM\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // simulate user entering <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> new name into the input box\n  nameInput.value = 'quick BROWN  fOx';\n\n  // dispatch <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> DOM event so that Angular learns of input value change.\n  nameInput.dispatchEvent(newEvent('input'));\n\n  // Tell Angular to <a href=\"api/forms/NgModel#update\" class=\"code-anchor\">update</a> the display binding through the title pipe\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n<hr>\n<a id=\"test-debugging\"></a>\n<h2 id=\"test-debugging\">Test debugging<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-debugging\"><i class=\"material-icons\">link</i></a></h2>\n<p>Debug specs in the browser in the same way that you debug an application.</p>\n<ol>\n<li>Reveal the karma browser window (hidden earlier).</li>\n<li>Click the <strong>DEBUG</strong> button; it opens a new browser tab and re-runs the tests.</li>\n<li>Open the browser's “Developer Tools” (<code>Ctrl-Shift-I</code> on windows; <code>Command-Option-I</code> in OSX).</li>\n<li>Pick the \"sources\" section.</li>\n<li>Open the <code>1st.spec.ts</code> test file (Control/Command-P, then start typing the name of the file).</li>\n<li>Set a breakpoint in the test.</li>\n<li>Refresh the browser, and it stops at the breakpoint.</li>\n</ol>\n<figure>\n  <img src=\"generated/images/guide/testing/karma-1st-spec-debug.png\" alt=\"Karma debugging\" width=\"700\" height=\"150\">\n</figure>\n<hr>\n<a id=\"atu-apis\"></a>\n<h2 id=\"testing-utility-apis\">Testing Utility APIs<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing-utility-apis\"><i class=\"material-icons\">link</i></a></h2>\n<p>This section takes inventory of the most useful Angular testing features and summarizes what they do.</p>\n<p>The Angular testing utilities include the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>, the <code><a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a></code>, and a handful of functions that control the test environment.\nThe <a href=\"guide/testing#testbed-api-summary\"><em>TestBed</em></a> and <a href=\"guide/testing#component-fixture-api-summary\"><em>ComponentFixture</em></a> classes are covered separately.</p>\n<p>Here's a summary of the stand-alone functions, in order of likely utility:</p>\n<table>\n  <tbody><tr>\n    <th>\n      Function\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/async\" class=\"code-anchor\">async</a></code>\n    </td>\n    <td>\n<p>      Runs the body of a test (<code>it</code>) or setup (<code>beforeEach</code>) function within a special <em>async test zone</em>.\nSee <a href=\"guide/testing#async\">discussion above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a></code>\n    </td>\n    <td>\n<p>      Runs the body of a test (<code>it</code>) within a special <em>fakeAsync test zone</em>, enabling\na linear control flow coding style. See <a href=\"guide/testing#fake-async\">discussion above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/tick\" class=\"code-anchor\">tick</a></code>\n    </td>\n    <td>\n<p>      Simulates the passage of time and the completion of pending asynchronous activities\nby flushing both <em>timer</em> and <em>micro-task</em> queues within the <em>fakeAsync test zone</em>.</p>\n      <div class=\"alert is-helpful\">\n<p>      The curious, dedicated reader might enjoy this lengthy blog post,\n<a href=\"https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\">\"<em>Tasks, microtasks, queues and schedules</em>\"</a>.</p>\n      </div>\n<p>      Accepts an optional argument that moves the virtual clock forward\nby the specified number of milliseconds,\nclearing asynchronous activities scheduled within that timeframe.\nSee <a href=\"guide/testing#tick\">discussion above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n       <code>inject</code>\n    </td>\n    <td>\n<p>      Injects one or more services from the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> injector into a test function.\nIt cannot inject a service provided by the component itself.\nSee discussion of the <a href=\"guide/testing#get-injected-services\">debugElement.injector</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/discardPeriodicTasks\" class=\"code-anchor\">discardPeriodicTasks</a></code>\n    </td>\n    <td>\n<p>      When a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test ends with pending timer event <em>tasks</em> (queued <code>setTimeOut</code> and <code>setInterval</code> callbacks),\nthe test fails with a clear error message.</p>\n<p>      In general, a test should end with no queued tasks.\nWhen pending timer tasks are expected, call <code><a href=\"api/core/testing/discardPeriodicTasks\" class=\"code-anchor\">discardPeriodicTasks</a></code> to flush the <em>task</em> queue\nand avoid the error.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/flushMicrotasks\" class=\"code-anchor\">flushMicrotasks</a></code>\n    </td>\n    <td>\n<p>      When a <code><a href=\"api/core/testing/fakeAsync\" class=\"code-anchor\">fakeAsync</a>()</code> test ends with pending <em>micro-tasks</em> such as unresolved promises,\nthe test fails with a clear error message.</p>\n<p>      In general, a test should wait for micro-tasks to finish.\nWhen pending microtasks are expected, call <code><a href=\"api/core/testing/flushMicrotasks\" class=\"code-anchor\">flushMicrotasks</a></code> to flush the  <em>micro-task</em> queue\nand avoid the error.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/ComponentFixtureAutoDetect\" class=\"code-anchor\">ComponentFixtureAutoDetect</a></code>\n    </td>\n    <td>\n<p>      A provider token for a service that turns on <a href=\"guide/testing#automatic-change-detection\">automatic change detection</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/getTestBed\" class=\"code-anchor\">getTestBed</a></code>\n    </td>\n    <td>\n<p>      Gets the current instance of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.\nUsually unnecessary because the static class methods of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class are typically sufficient.\nThe <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance exposes a few rarely used members that are not available as\nstatic methods.</p>\n    </td>\n  </tr>\n</tbody></table>\n<hr>\n<a id=\"testbed-class-summary\"></a>\n<h4 id=\"testbed-class-summary\"><em>TestBed</em> class summary<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testbed-class-summary\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> class is one of the principal Angular testing utilities.\nIts API is quite large and can be overwhelming until you've explored it,\na little at a time. Read the early part of this guide first\nto get the basics before trying to absorb the full API.</p>\n<p>The module definition passed to <code>configureTestingModule</code>\nis a subset of the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> metadata properties.</p>\n<code-example format=\".\" language=\"javascript\">\n  type <a href=\"api/core/testing/TestModuleMetadata\" class=\"code-anchor\">TestModuleMetadata</a> = {\n    providers?: any[];\n    <a href=\"api/core/NgModule#declarations\" class=\"code-anchor\">declarations</a>?: any[];\n    <a href=\"api/core/NgModule#imports\" class=\"code-anchor\">imports</a>?: any[];\n    <a href=\"api/core/NgModule#schemas\" class=\"code-anchor\">schemas</a>?: Array&#x3C;<a href=\"api/core/SchemaMetadata\" class=\"code-anchor\">SchemaMetadata</a> | any[]>;\n  };\n</code-example>\n<a id=\"metadata-override-object\"></a>\n<p>Each override method takes a <code><a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a>&#x3C;T></code> where <code>T</code> is the kind of metadata\nappropriate to the method, that is, the parameter of an <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>,\n<code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>, <code>@<a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>, or <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code>.</p>\n<code-example format=\".\" language=\"javascript\">\n  type <a href=\"api/core/testing/MetadataOverride\" class=\"code-anchor\">MetadataOverride</a><t> = {\n    add?: Partial<t>;\n    remove?: Partial<t>;\n    set?: Partial<t>;\n  };\n</t></t></t></t></code-example>\n<a id=\"testbed-methods\"></a>\n<a id=\"testbed-api-summary\"></a>\n<p>The <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> API consists of static class methods that either update or reference a <em>global</em> instance of the<code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>.</p>\n<p>Internally, all static methods cover methods of the current runtime <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance,\nwhich is also returned by the <code><a href=\"api/core/testing/getTestBed\" class=\"code-anchor\">getTestBed</a>()</code> function.</p>\n<p>Call <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> methods <em>within</em> a <code>beforeEach()</code> to ensure a fresh start before each individual test.</p>\n<p>Here are the most important static methods, in order of likely utility.</p>\n<table>\n  <tbody><tr>\n    <th>\n      Methods\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>configureTestingModule</code>\n    </td>\n    <td>\n<p>      The testing shims (<code>karma-test-shim</code>, <code>browser-test-shim</code>)\nestablish the <a href=\"guide/testing\">initial test environment</a> and a default testing module.\nThe default testing module is configured with basic declaratives and some Angular service substitutes that every tester needs.</p>\n<p>      Call <code>configureTestingModule</code> to refine the testing module configuration for a particular set of tests\nby adding and removing imports, declarations (of components, directives, and pipes), and providers.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>compileComponents</code>\n    </td>\n    <td>\n<p>      Compile the testing module asynchronously after you've finished configuring it.\nYou <strong>must</strong> call this method if <em>any</em> of the testing module components have a <code>templateUrl</code>\nor <code><a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">styleUrls</a></code> because fetching component template and style files is necessarily asynchronous.\nSee <a href=\"guide/testing#compile-components\">above</a>.</p>\n<p>      After calling <code>compileComponents</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration is frozen for the duration of the current spec.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>createComponent<t></t></code>\n    </td>\n    <td>\n<p>      Create an instance of a component of type <code>T</code> based on the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration.\nAfter calling <code>compileComponent</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration is frozen for the duration of the current spec.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overrideModule</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code>. Recall that modules can import other modules.\nThe <code>overrideModule</code> method can reach deeply into the current testing module to\nmodify one of these inner modules.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overrideComponent</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given component class, which could be nested deeply\nwithin an inner module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overrideDirective</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given directive class, which could be nested deeply\nwithin an inner module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>overridePipe</code>\n    </td>\n    <td>\n<p>      Replace metadata for the given pipe class, which could be nested deeply\nwithin an inner module.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <a id=\"testbed-get\"></a>\n      <code>get</code>\n    </td>\n    <td>\n<p>      Retrieve a service from the current <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> injector.</p>\n<p>      The <code>inject</code> function is often adequate for this purpose.\nBut <code>inject</code> throws an error if it can't provide the service.</p>\n<p>      What if the service is optional?</p>\n<p>      The <code><a href=\"api/core/testing/TestBed#get\" class=\"code-anchor\">TestBed.get()</a></code> method takes an optional second parameter,\nthe object to return if Angular can't find the provider\n(<code>null</code> in this example):</p>\n<p>      <code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"testbed-get-w-null\" header=\"app/demo/demo.testbed.spec.ts\" linenums=\"false\">\nservice = TestBed.get(NotProvided, null); // service is null\n\n</code-example></p>\n<p>      After calling <code>get</code>, the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> configuration is frozen for the duration of the current spec.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <a id=\"testbed-initTestEnvironment\"></a>\n      <code>initTestEnvironment</code>\n    </td>\n    <td>\n<p>      Initialize the testing environment for the entire test run.</p>\n<p>      The testing shims (<code>karma-test-shim</code>, <code>browser-test-shim</code>) call it for you\nso there is rarely a reason for you to call it yourself.</p>\n<p>      You may call this method <em>exactly once</em>. If you must change\nthis default in the middle of your test run, call <code>resetTestEnvironment</code> first.</p>\n<p>      Specify the Angular compiler factory, a <code><a href=\"api/core/PlatformRef\" class=\"code-anchor\">PlatformRef</a></code>, and a default Angular testing module.\nAlternatives for non-browser platforms are available in the general form\n<code>@angular/platform-&#x3C;platform_name>/testing/&#x3C;platform_name></code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>resetTestEnvironment</code>\n    </td>\n    <td>\n<p>      Reset the initial test environment, including the default testing module.</p>\n    </td>\n  </tr>\n</tbody></table>A few of the <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> instance methods are not covered by static <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code> <em>class</em> methods.\nThese are rarely needed.<p></p>\n<a id=\"component-fixture-api-summary\"></a>\n<h4 id=\"the-componentfixture\">The <em>ComponentFixture</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#the-componentfixture\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>TestBed.createComponent&#x3C;T></code>\ncreates an instance of the component <code>T</code>\nand returns a strongly typed <code><a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a></code> for that component.</p>\n<p>The <code><a href=\"api/core/testing/ComponentFixture\" class=\"code-anchor\">ComponentFixture</a></code> properties and methods provide access to the component,\nits DOM representation, and aspects of its Angular environment.</p>\n<a id=\"component-fixture-properties\"></a>\n<h4 id=\"componentfixture-properties\"><em>ComponentFixture</em> properties<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#componentfixture-properties\"><i class=\"material-icons\">link</i></a></h4>\n<p>Here are the most important properties for testers, in order of likely utility.</p>\n<table>\n  <tbody><tr>\n    <th>\n      Properties\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>componentInstance</code>\n    </td>\n    <td>\n<p>      The instance of the component class created by <code>TestBed.createComponent</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/testing/ComponentFixture#debugElement\" class=\"code-anchor\">debugElement</a></code>\n    </td>\n    <td>\n<p>      The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> associated with the root element of the component.</p>\n<p>      The <code><a href=\"api/core/testing/ComponentFixture#debugElement\" class=\"code-anchor\">debugElement</a></code> provides insight into the component and its DOM element during test and debugging.\nIt's a critical property for testers. The most interesting members are covered <a href=\"guide/testing#debug-element-details\">below</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>nativeElement</code>\n    </td>\n    <td>\n<p>      The native DOM element at the root of the component.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>changeDetectorRef</code>\n    </td>\n    <td>\n<p>      The <code><a href=\"api/core/ChangeDetectorRef\" class=\"code-anchor\">ChangeDetectorRef</a></code> for the component.</p>\n<p>      The <code><a href=\"api/core/ChangeDetectorRef\" class=\"code-anchor\">ChangeDetectorRef</a></code> is most valuable when testing a\ncomponent that has the <code><a href=\"api/core/ChangeDetectionStrategy#OnPush\" class=\"code-anchor\">ChangeDetectionStrategy.OnPush</a></code> method\nor the component's change detection is under your programmatic control.</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"component-fixture-methods\"></a>\n<h4 id=\"componentfixture-methods\"><em>ComponentFixture</em> methods<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#componentfixture-methods\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <em>fixture</em> methods cause Angular to perform certain tasks on the component tree.\nCall these method to trigger Angular behavior in response to simulated user action.</p>\n<p>Here are the most useful methods for testers.</p>\n<table>\n  <tbody><tr>\n    <th>\n      Methods\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>detectChanges</code>\n    </td>\n    <td>\n<p>      Trigger a change detection cycle for the component.</p>\n<p>      Call it to initialize the component (it calls <code>ngOnInit</code>) and after your\ntest code, change the component's data bound property values.\nAngular can't see that you've changed <code>personComponent.name</code> and won't update the <code>name</code>\nbinding until you call <code>detectChanges</code>.</p>\n<p>      Runs <code>checkNoChanges</code>afterwards to confirm that there are no circular updates unless\ncalled as <code>detectChanges(false)</code>;</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>autoDetectChanges</code>\n    </td>\n    <td>\n<p>      Set this to <code>true</code> when you want the fixture to detect changes automatically.</p>\n<p>      When autodetect is <code>true</code>, the test fixture calls <code>detectChanges</code> immediately\nafter creating the component. Then it listens for pertinent zone events\nand calls <code>detectChanges</code> accordingly.\nWhen your test code modifies component property values directly,\nyou probably still have to call <code>fixture.detectChanges</code> to trigger data binding updates.</p>\n<p>      The default is <code>false</code>. Testers who prefer fine control over test behavior\ntend to keep it <code>false</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>checkNoChanges</code>\n    </td>\n    <td>\n<p>      Do a change detection run to make sure there are no pending changes.\nThrows an exceptions if there are.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>isStable</code>\n    </td>\n    <td>\n<p>      If the fixture is currently <em>stable</em>, returns <code>true</code>.\nIf there are async tasks that have not completed, returns <code>false</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>whenStable</code>\n    </td>\n    <td>\n<p>      Returns a promise that resolves when the fixture is stable.</p>\n<p>      To resume testing after completion of asynchronous activity or\nasynchronous change detection, hook that promise.\nSee <a href=\"guide/testing#when-stable\">above</a>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>destroy</code>\n    </td>\n    <td>\n<p>      Trigger component destruction.</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"debug-element-details\"></a>\n<h4 id=\"debugelement-1\"><em>DebugElement</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#debugelement-1\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> provides crucial insights into the component's DOM representation.</p>\n<p>From the test root component's <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> returned by <code>fixture.debugElement</code>,\nyou can walk (and query) the fixture's entire element and component subtrees.</p>\n<p>Here are the most useful <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> members for testers, in approximate order of utility:</p>\n<table>\n  <tbody><tr>\n    <th>\n      Member\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>nativeElement</code>\n    </td>\n    <td>\n<p>      The corresponding DOM element in the browser (null for WebWorkers).</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a></code>\n    </td>\n    <td>\n<p>      Calling <code><a href=\"api/animations/query\" class=\"code-anchor\">query</a>(predicate: <a href=\"api/core/Predicate\" class=\"code-anchor\">Predicate</a>&#x3C;<a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>>)</code> returns the first <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>\nthat matches the <a href=\"guide/testing#query-predicate\">predicate</a> at any depth in the subtree.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>queryAll</code>\n    </td>\n    <td>\n<p>      Calling <code>queryAll(predicate: <a href=\"api/core/Predicate\" class=\"code-anchor\">Predicate</a>&#x3C;<a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a>>)</code> returns all <code>DebugElements</code>\nthat matches the <a href=\"guide/testing#query-predicate\">predicate</a> at any depth in subtree.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>injector</code>\n    </td>\n    <td>\n<p>      The host dependency injector.\nFor example, the root element's component instance injector.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>componentInstance</code>\n    </td>\n    <td>\n<p>      The element's own component instance, if it has one.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>context</code>\n    </td>\n    <td>\n<p>      An object that provides parent context for this element.\nOften an ancestor component instance that governs this element.</p>\n<p>      When an element is repeated within <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>, the context is an <code>NgForRow</code> whose <code>$implicit</code>\nproperty is the value of the row instance value.\nFor example, the <code>hero</code> in <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\"</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>children</code>\n    </td>\n    <td>\n<p>      The immediate <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> children. Walk the tree by descending through <code>children</code>.</p>\n      <div class=\"alert is-helpful\">\n<p>      <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> also has <code><a href=\"api/core/DebugElement#childNodes\" class=\"code-anchor\">childNodes</a></code>, a list of <code><a href=\"api/core/DebugNode\" class=\"code-anchor\">DebugNode</a></code> objects.\n<code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> derives from <code><a href=\"api/core/DebugNode\" class=\"code-anchor\">DebugNode</a></code> objects and there are often\nmore nodes than elements. Testers can usually ignore plain nodes.</p>\n      </div>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>parent</code>\n    </td>\n    <td>\n<p>      The <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> parent. Null if this is the root element.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>name</code>\n    </td>\n    <td>\n<p>      The element tag name, if it is an element.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>triggerEventHandler</code>\n    </td>\n    <td>\n<p>      Triggers the event by its name if there is a corresponding listener\nin the element's <code><a href=\"api/core/DebugNode#listeners\" class=\"code-anchor\">listeners</a></code> collection.\nThe second parameter is the <em>event object</em> expected by the handler.\nSee <a href=\"guide/testing#trigger-event-handler\">above</a>.</p>\n<p>      If the event lacks a listener or there's some other problem,\nconsider calling <code>nativeElement.dispatchEvent(eventObject)</code>.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/DebugNode#listeners\" class=\"code-anchor\">listeners</a></code>\n    </td>\n    <td>\n<p>      The callbacks attached to the component's <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a></code> properties and/or the element's event properties.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/DebugNode#providerTokens\" class=\"code-anchor\">providerTokens</a></code>\n    </td>\n    <td>\n<p>      This component's injector lookup tokens.\nIncludes the component itself plus the tokens that the component lists in its <code>providers</code> metadata.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code>source</code>\n    </td>\n    <td>\n<p>      Where to find this element in the source component template.</p>\n    </td>\n  </tr>\n  <tr>\n    <td style=\"vertical-align: top\">\n      <code><a href=\"api/core/DebugNode#references\" class=\"code-anchor\">references</a></code>\n    </td>\n    <td>\n<p>      Dictionary of objects associated with template local variables (e.g. <code>#foo</code>),\nkeyed by the local variable name.</p>\n    </td>\n  </tr>\n</tbody></table>\n<a id=\"query-predicate\"></a>\n<p>The <code>DebugElement.query(predicate)</code> and <code>DebugElement.queryAll(predicate)</code> methods take a\npredicate that filters the source element's subtree for matching <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code>.</p>\n<p>The predicate is any method that takes a <code><a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a></code> and returns a <em>truthy</em> value.\nThe following example finds all <code>DebugElements</code> with a reference to a template local variable named \"content\":</p>\n<code-example path=\"testing/src/app/demo/demo.testbed.spec.ts\" region=\"custom-predicate\" header=\"app/demo/demo.testbed.spec.ts\" linenums=\"false\">\n// Filter for DebugElements with <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> #content reference\nconst contentRefs = el.queryAll( de => de.references['content']);\n\n</code-example>\n<p>The Angular <code><a href=\"api/platform-browser/By\" class=\"code-anchor\">By</a></code> class has three static methods for common predicates:</p>\n<ul>\n<li><code>By.all</code> - return all elements.</li>\n<li><code>By.css(selector)</code> - return elements with matching CSS selectors.</li>\n<li><code>By.directive(directive)</code> - return elements that Angular matched to an instance of the directive class.</li>\n</ul>\n<code-example path=\"testing/src/app/hero/hero-list.component.spec.ts\" region=\"by\" header=\"app/hero/hero-list.component.spec.ts\" linenums=\"false\">\n// Can find <a href=\"api/core/DebugElement\" class=\"code-anchor\">DebugElement</a> either by css selector or by directive\nconst h2        = fixture.debugElement.query(By.css('h2'));\nconst directive = fixture.debugElement.query(By.directive(HighlightDirective));\n\n</code-example>\n<hr>\n<a id=\"faq\"></a>\n<h2 id=\"frequently-asked-questions\">Frequently Asked Questions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#frequently-asked-questions\"><i class=\"material-icons\">link</i></a></h2>\n<a id=\"q-spec-file-location\"></a>\n<h4 id=\"why-put-spec-file-next-to-the-file-it-tests\">Why put spec file next to the file it tests?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#why-put-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>It's a good idea to put unit test spec files in the same folder\nas the application source code files that they test:</p>\n<ul>\n<li>Such tests are easy to find.</li>\n<li>You see at a glance if a part of your application lacks tests.</li>\n<li>Nearby tests can reveal how a part works in context.</li>\n<li>When you move the source (inevitable), you remember to move the test.</li>\n<li>When you rename the source file (inevitable), you remember to rename the test file.</li>\n</ul>\n<hr>\n<a id=\"q-specs-in-test-folder\"></a>\n<h4 id=\"when-would-i-put-specs-in-a-test-folder\">When would I put specs in a test folder?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#when-would-i-put-specs-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4>\n<p>Application integration specs can test the interactions of multiple parts\nspread across folders and modules.\nThey don't really belong to any part in particular, so they don't have a\nnatural home next to any one file.</p>\n<p>It's often better to create an appropriate folder for them in the <code>tests</code> directory.</p>\n<p>Of course specs that test the test helpers belong in the <code>test</code> folder,\nnext to their corresponding helper files.</p>\n<a id=\"q-e2e\"></a>\n<h4 id=\"why-not-rely-on-e2e-tests-of-dom-integration\">Why not rely on E2E tests of DOM integration?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#why-not-rely-on-e2e-tests-of-dom-integration\"><i class=\"material-icons\">link</i></a></h4>\n<p>The component DOM tests described in this guide often require extensive setup and\nadvanced techniques whereas the <a href=\"guide/testing#component-class-testing\">unit tests</a>\nare comparatively simple.</p>\n<h4 id=\"why-not-defer-dom-integration-tests-to-end-to-end-e2e-testing\">Why not defer DOM integration tests to end-to-end (E2E) testing?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#why-not-defer-dom-integration-tests-to-end-to-end-e2e-testing\"><i class=\"material-icons\">link</i></a></h4>\n<p>E2E tests are great for high-level validation of the entire system.\nBut they can't give you the comprehensive test coverage that you'd expect from unit tests.</p>\n<p>E2E tests are difficult to write and perform poorly compared to unit tests.\nThey break easily, often due to changes or misbehavior far removed from the site of breakage.</p>\n<p>E2E tests can't easily reveal how your components behave when things go wrong,\nsuch as missing or bad data, lost connectivity, and remote service failures.</p>\n<p>E2E tests for apps that update a database,\nsend an invoice, or charge a credit card require special tricks and back-doors to prevent\naccidental corruption of remote resources.\nIt can even be hard to navigate to the component you want to test.</p>\n<p>Because of these many obstacles, you should test DOM interaction\nwith unit testing techniques as much as possible.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/dependency-injection\n - guide/setup\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/animations/browser/testing/MockAnimationDriver#log\n - api/animations/query\n - api/animations/trigger\n - api/common/AsyncPipe\n - api/common/CommonModule\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/TitleCasePipe\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpErrorResponse\n - api/common/http/HttpErrorResponse#message\n - api/common/http/HttpEventType#User\n - api/common/http/testing/HttpClientTestingModule\n - api/core/AfterViewInit\n - api/core/ApplicationInitStatus#done\n - api/core/ApplicationRef#tick\n - api/core/ChangeDetectionStrategy#OnPush\n - api/core/ChangeDetectorRef\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - api/core/Component#template\n - api/core/Component#templateUrl\n - api/core/DebugElement\n - api/core/DebugElement#childNodes\n - api/core/DebugElement#nativeElement\n - api/core/DebugElement#properties\n - api/core/DebugElement#query\n - api/core/DebugElement#styles\n - api/core/DebugNode\n - api/core/DebugNode#listeners\n - api/core/DebugNode#providerTokens\n - api/core/DebugNode#references\n - api/core/Directive\n - api/core/Directive#host\n - api/core/ElementRef\n - api/core/EventEmitter\n - api/core/Inject\n - api/core/Injectable\n - api/core/Input\n - api/core/NO_ERRORS_SCHEMA\n - api/core/NgModule\n - api/core/NgModule#declarations\n - api/core/NgModule#imports\n - api/core/NgModule#schemas\n - api/core/OnChanges\n - api/core/OnInit\n - api/core/Output\n - api/core/Pipe\n - api/core/Pipe#pure\n - api/core/PipeTransform\n - api/core/PlatformRef\n - api/core/Predicate\n - api/core/QueryList#changes\n - api/core/SchemaMetadata\n - api/core/Version#patch\n - api/core/ViewChild\n - api/core/testing/ComponentFixture\n - api/core/testing/ComponentFixture#debugElement\n - api/core/testing/ComponentFixture#nativeElement\n - api/core/testing/ComponentFixtureAutoDetect\n - api/core/testing/MetadataOverride\n - api/core/testing/TestBed\n - api/core/testing/TestBed#compileComponents\n - api/core/testing/TestBed#configureTestingModule\n - api/core/testing/TestBed#createComponent\n - api/core/testing/TestBed#get\n - api/core/testing/TestModuleMetadata\n - api/core/testing/async\n - api/core/testing/discardPeriodicTasks\n - api/core/testing/fakeAsync\n - api/core/testing/flush\n - api/core/testing/flushMicrotasks\n - api/core/testing/getTestBed\n - api/core/testing/tick\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/forms/NgModel#model\n - api/forms/NgModel#update\n - api/http/HttpModule\n - api/http/RequestMethod#Get\n - api/platform-browser/BrowserModule\n - api/platform-browser/By\n - api/platform-browser/By#css\n - api/platform-browser/Title\n - api/router/ActivatedRoute\n - api/router/ActivatedRoute#paramMap\n - api/router/ParamMap\n - api/router/Params\n - api/router/Router\n - api/router/Router#config\n - api/router/Router#events\n - api/router/Router#navigated\n - api/router/RouterLink\n - api/router/RouterLinkWithHref\n - api/router/RouterModule\n - api/router/RouterOutlet\n - api/router/RouterOutlet#activatedRoute\n - api/router/convertToParamMap\n - api/router/testing/RouterTestingModule\n - api/service-worker/UpdateActivatedEvent#previous\n - cli\n - cli/test\n - guide/dependency-injection\n - guide/feature-modules\n - guide/http\n - guide/http#http-%EC%9A%94%EC%B2%AD-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\n - guide/lifecycle-hooks\n - guide/ngmodules\n - guide/router#route-parameters\n - guide/setup#appendix-test-using-fakeasyncasync\n - guide/testing#activatedroutestub\n - guide/testing#always-get-the-service-from-an-injector\n - guide/testing#angular-testbed\n - guide/testing#async\n - guide/testing#async-observable-helpers\n - guide/testing#async-observables\n - guide/testing#async-test-with-async\n - guide/testing#async-test-with-fakeasync\n - guide/testing#attribute-directive-testing\n - guide/testing#automatic-change-detection\n - guide/testing#beforeeach\n - guide/testing#bycss\n - guide/testing#bydirective-and-injected-directives\n - guide/testing#calling-compilecomponents\n - guide/testing#change-an-input-value-with-dispatchevent\n - guide/testing#cli-generated-tests\n - guide/testing#click-helper\n - guide/testing#click-the-element\n - guide/testing#clicking\n - guide/testing#code-coverage-enforcement\n - guide/testing#cold-observable\n - guide/testing#comparing-dates-inside-fakeasync\n - guide/testing#compile-components\n - guide/testing#compilecomponents-is-async\n - guide/testing#compilecomponents-is-harmless\n - guide/testing#component-binding\n - guide/testing#component-class-testing\n - guide/testing#component-dom-testing\n - guide/testing#component-fixture\n - guide/testing#component-fixture-api-summary\n - guide/testing#component-inside-a-test-host\n - guide/testing#component-marble-tests\n - guide/testing#component-override\n - guide/testing#component-test-basics\n - guide/testing#component-test-scenarios\n - guide/testing#component-with-a-dependency\n - guide/testing#component-with-async-service\n - guide/testing#component-with-external-files\n - guide/testing#component-with-inputs-and-outputs\n - guide/testing#componentfixture\n - guide/testing#componentfixture-methods\n - guide/testing#componentfixture-properties\n - guide/testing#components-with-routerlink\n - guide/testing#configuration\n - guide/testing#configure-cli-for-ci-testing-in-chrome\n - guide/testing#configure-project-for-circle-ci\n - guide/testing#configure-project-for-travis-ci\n - guide/testing#consolidated-setup\n - guide/testing#createcomponent\n - guide/testing#createcomponent-does-not-bind-data\n - guide/testing#dashboard-hero-component\n - guide/testing#debug-element-details\n - guide/testing#debugelement\n - guide/testing#debugelement-1\n - guide/testing#detectchanges\n - guide/testing#enable-code-coverage-reports\n - guide/testing#fake-async\n - guide/testing#feature-module-import\n - guide/testing#final-setup-and-tests\n - guide/testing#frequently-asked-questions\n - guide/testing#get-injected-services\n - guide/testing#httpclienttestingmodule\n - guide/testing#import-a-feature-module\n - guide/testing#import-a-shared-module\n - guide/testing#jasmine-done\n - guide/testing#jasmineclock-with-fakeasync\n - guide/testing#learn-about-marble-testing\n - guide/testing#marble-error-testing\n - guide/testing#marble-frame\n - guide/testing#marble-testing\n - guide/testing#metadata-override-object\n - guide/testing#more-async-tests\n - guide/testing#more-overrides\n - guide/testing#nativeelement\n - guide/testing#nested-component-tests\n - guide/testing#no_errors_schema\n - guide/testing#other-test-frameworks\n - guide/testing#override-component-providers\n - guide/testing#page-object\n - guide/testing#pipe-testing\n - guide/testing#provide-a-spy-stub-herodetailservicespy\n - guide/testing#provide-service-test-doubles\n - guide/testing#query-for-the-h1\n - guide/testing#query-predicate\n - guide/testing#reduce-the-setup\n - guide/testing#routed-components\n - guide/testing#routerlink\n - guide/testing#routing-component\n - guide/testing#service-tests\n - guide/testing#services-with-dependencies\n - guide/testing#set-up-continuous-integration\n - guide/testing#setup\n - guide/testing#setup-with-module-imports\n - guide/testing#spy-stub\n - guide/testing#stubbing-unneeded-components\n - guide/testing#support-more-macrotasks\n - guide/testing#synchronous-tests\n - guide/testing#test-dashboardherocomponent-stand-alone\n - guide/testing#test-debugging\n - guide/testing#test-file-name-and-location\n - guide/testing#testbed-api-summary\n - guide/testing#testbed-class-summary\n - guide/testing#testbedget\n - guide/testing#testing\n - guide/testing#testing-http-services\n - guide/testing#testing-services-with-the-testbed\n - guide/testing#testing-utility-apis\n - guide/testing#testing-with-a-spy\n - guide/testing#testing-with-activatedroutestub\n - guide/testing#testing-without-beforeeach\n - guide/testing#tests-w-test-double\n - guide/testing#the-async-beforeeach\n - guide/testing#the-componentfixture\n - guide/testing#the-override-tests\n - guide/testing#the-overridecomponent-method\n - guide/testing#the-synchronous-beforeeach\n - guide/testing#the-tick-function\n - guide/testing#tick\n - guide/testing#trigger-event-handler\n - guide/testing#triggereventhandler\n - guide/testing#use-a-page-object\n - guide/testing#use-both-techniques-together\n - guide/testing#using-the-rxjs-scheduler-inside-fakeasync\n - guide/testing#what-good-are-these-tests\n - guide/testing#when-stable\n - guide/testing#when-would-i-put-specs-in-a-test-folder\n - guide/testing#whenstable\n - guide/testing#why-not-defer-dom-integration-tests-to-end-to-end-e2e-testing\n - guide/testing#why-not-rely-on-e2e-tests-of-dom-integration\n - guide/testing#why-put-spec-file-next-to-the-file-it-tests\n - guide/testing#why-stubbed-routerlink-tests\n - guide/testing#write-dom-tests-too\n - tutorial\n - http://reactivex.io/documentation/operators/defer.html\n - http://rxmarbles.com/\n - https://circleci.com/add-projects\n - https://circleci.com/docs/2.0/\n - https://circleci.com/docs/2.0/first-steps/\n - https://crbug.com/737678\n - https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n - https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\n - https://developer.mozilla.org/en-US/docs/Web/CSS/:not\n - https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\n - https://developers.google.com/web/updates/2017/04/headless-chrome#cli\n - https://docs.npmjs.com/cli/run-script\n - https://docs.travis-ci.com/\n - https://github.com/ReactiveX/rxjs/blob/master/doc/writing-marble-tests.md\n - https://github.com/angular/angular-cli\n - https://github.com/angular/angular/edit/master/aio/content/guide/testing.md?message=docs%3A%20describe%20your%20change...\n - https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n - https://jasmine.github.io/\n - https://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support\n - https://jasmine.github.io/2.0/introduction.html#section-Spies\n - https://karma-runner.github.io\n - https://karma-runner.github.io/latest/config/configuration-file.html\n - https://plnkr.co/\n - https://travis-ci.org/auth\n - https://travis-ci.org/profile\n - https://www.protractortest.org/#/api-overview\n-->"
}