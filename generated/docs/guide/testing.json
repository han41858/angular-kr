{
  "id": "guide/testing",
  "title": "테스트",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/testing.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<a id=\"top\"></a>\n<!--\n# Testing\n-->\n<h1 id=\"테스트\">테스트<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#테스트\"><i class=\"material-icons\">link</i></a></h1>\n<p>Testing your Angular application helps you check that your app is working as you expect.</p>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p>Before writing tests for your Angular app, you should have a basic understanding of the following concepts:</p>\n<ul>\n<li>Angular fundamentals</li>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li><a href=\"/cli\">Angular CLI</a></li>\n</ul>\n<hr>\n<p>The testing documentation offers tips and techniques for unit and integration testing Angular applications through a sample application created with the <a href=\"cli\">Angular CLI</a>.\nThis sample application is much like the one in the <a href=\"tutorial\"><em>Tour of Heroes</em> tutorial</a>.</p>\n<div class=\"alert is-helpful\">\n<p>  For the sample app that the testing guides describe, see the <live-example nodownload=\"\">sample app</live-example>.</p>\n<p>  For the tests features in the testing guides, see <live-example stackblitz=\"specs\" nodownload=\"\">tests</live-example>.</p>\n</div>\n<a id=\"setup\"></a>\n<h2 id=\"set-up-testing\">Set up testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-testing\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe Angular CLI downloads and installs everything you need to test an Angular application with the [Jasmine test framework](https://jasmine.github.io/).\n\nThe project you create with the CLI is immediately ready to test.\nJust run the [`ng test`](cli/test) CLI command:\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test\n</code-example>\n\nThe `ng test` command builds the app in _watch mode_,\nand launches the [Karma test runner](https://karma-runner.github.io).\n\nThe console output looks a bit like this:\n\n<code-example language=\"sh\" class=\"code-shell\">\n10% building modules 1/1 modules 0 active\n...INFO [karma]: Karma v1.7.1 server started at http://0.0.0.0:9876/\n...INFO [launcher]: Launching browser Chrome ...\n...INFO [launcher]: Starting browser Chrome\n...INFO [Chrome ...]: Connected on socket ...\nChrome ...: Executed 3 of 3 SUCCESS (0.135 secs / 0.205 secs)\n</code-example>\n\nThe last line of the log is the most important.\nIt shows that Karma ran three tests that all passed.\n\nA Chrome browser also opens and displays the test output in the \"Jasmine HTML Reporter\" like this.\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/testing/initial-jasmine-html-reporter.png' alt=\"Jasmine HTML Reporter in the browser\">\n</div>\n\nMost people find this browser output easier to read than the console log.\nYou can click on a test row to re-run just that test or click on a description to re-run the tests in the selected test group (\"test suite\").\n\nMeanwhile, the `ng test` command is watching for changes.\n\nTo see this in action, make a small change to `app.component.ts` and save.\nThe tests run again, the browser refreshes, and the new test results appear.\n-->\n<p>Angular 애플리케이션은 <a href=\"https://jasmine.github.io/\">Jasmine 테스트 프레임워크</a>로 테스트하는데, 애플리케이션을 테스트할 때 필요한 환경은 Angular CLI가 프로젝트를 생성하면서 모두 준비하기 때문에 바로 테스트할 수 있는 상태입니다.\n프로젝트 최상위 폴더에서 <a href=\"cli/test\"><code>ng test</code></a> 명령을 실행해 보세요:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test\n</code-example>\n<p><code>ng test</code> 명령을 실행하면 애플리케이션을 <em>워치 모드(watch mode)</em> 로 빌드하고 <a href=\"https://karma-runner.github.io\">Karma 테스트 러너</a>를 실행합니다.</p>\n<p>콘솔은 다음과 같이 출력될 것입니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n10% building modules 1/1 modules 0 active\n...INFO [karma]: Karma v1.7.1 server started at http://0.0.0.0:9876/\n...INFO [launcher]: Launching browser Chrome ...\n...INFO [launcher]: Starting browser Chrome\n...INFO [Chrome ...]: Connected on socket ...\nChrome ...: Executed 3 of 3 SUCCESS (0.135 secs / 0.205 secs)\n</code-example>\n<p>이 로그에서 마지막 줄이 가장 중요합니다.\n마지막 줄을 보면 Karma가 3개의 테스트를 실행했고, 실행한 테스트는 모두 통과했다는 것을 확인할 수 있습니다.</p>\n<p>테스트 실행 결과는 Chrome 브라우저에서도 확인할 수 있습니다.\n브라우저에서는 \"Jasmine HTML Reporter\"를 사용해서 다음과 같이 표시됩니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/testing/initial-jasmine-html-reporter.png\" alt=\"브라우저에서 Jasmine HTML Reporter 확인하기\" width=\"502\" height=\"306\">\n</div>\n<p>테스트 결과는 콘솔 로그로 확인하는 것보다 브라우저에서 확인하는 것이 더 편합니다.\n브라우저에서는 특정 테스트 스펙을 클릭해서 해당 스펙만 다시 실행해볼 수 있고, 테스트 그룹(test suite)을 클릭해서 그룹 단위로 다시 실행할 수도 있습니다.</p>\n<p>그리고 <code>ng test</code> 명령을 실행했기 때문에 코드가 변경되는 것도 감지합니다.</p>\n<p><code>app.component.ts</code> 파일의 내용을 수정하고 저장해 보세요.\n그러면 테스트가 다시 실행되면서 브라우저도 갱신되고, 새로운 결과 화면이 표시될 것입니다.</p>\n<!--\n## Configuration\n-->\n<h4 id=\"테스트-설정\">테스트 설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#테스트-설정\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe CLI takes care of Jasmine and Karma configuration for you.\n\nYou can fine-tune many options by editing the `karma.conf.js` in the root folder of the project and\nthe `test.ts` files in the `src/` folder.\n\nThe `karma.conf.js` file is a partial Karma configuration file.\nThe CLI constructs the full runtime configuration in memory, based on application structure specified in the `angular.json` file, supplemented by `karma.conf.js`.\n\nSearch the web for more details about Jasmine and Karma configuration.\n-->\n<p>Angular CLI로 프로젝트를 생성하면 Jasmine과 Karma를 실행할 수 있는 환경 설정이 자동으로 구성됩니다.\n이후에 이 설정을 튜닝하고 싶으면 프로젝트 최상위 폴더에 있는 <code>karma.conf.js</code> 파일과 <code>src/test.ts</code> 파일을 수정하면 됩니다.</p>\n<p><code>karma.conf.js</code> 파일은 Karma가 실행되는 환경설정 중 일부를 구성합니다.\nKarma의 전체 설정값은 테스트를 실행하는 시점에 <code>angular.json</code> 파일과 <code>karma.conf.js</code>를 분석해서 Angular CLI가 구성합니다.</p>\n<p>자세한 내용은 Jasmine 문서와 Karma 문서를 참고하세요.</p>\n<!--\n### Other test frameworks\n-->\n<h4 id=\"다른-테스트-프레임워크\">다른 테스트 프레임워크<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#다른-테스트-프레임워크\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou can also unit test an Angular app with other testing libraries and test runners.\nEach library and runner has its own distinctive installation procedures, configuration, and syntax.\n\nSearch the web to learn more.\n-->\n<p>Jasmine과 Karma 말고도 다른 라이브러리나 테스트 러너를 사용해서 Angular 앱을 테스트할 수도 있습니다.\n이 때 라이브러리를 설치하는 방법, 환경을 설정하는 방법, 실행하는 방법은 라이브러리에 따라 다르기 때문에 사용하려는 라이브러리가 제공하는 문서를 참고하세요.</p>\n<!--\n### Test file name and location\n-->\n<h4 id=\"테스트-파일의-이름과-위치\">테스트 파일의 이름과 위치<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#테스트-파일의-이름과-위치\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nLook inside the `src/app` folder.\n\nThe CLI generated a test file for the `AppComponent` named `app.component.spec.ts`.\n\n<div class=\"alert is-important\">\n\nThe test file extension **must be `.spec.ts`** so that tooling can identify it as a file with tests (AKA, a _spec_ file).\n\n</div>\n\nThe `app.component.ts` and `app.component.spec.ts` files are siblings in the same folder.\nThe root file names (`app.component`) are the same for both files.\n\nAdopt these two conventions in your own projects for _every kind_ of test file.\n-->\n<p><code>src/app</code> 폴더를 봅시다.</p>\n<p>Angular CLI로 프로젝트를 생성하면 <code>AppComponent</code>를 테스트 하는 코드가 <code>app.component.spec.ts</code> 파일에 존재합니다.</p>\n<div class=\"alert is-important\">\n<p>IDE와 같은 툴에서 스펙 파일을 구분하려면 테스트 파일의 확장자를 <strong>반드시 <code>.spec.ts</code></strong>로 지정해야 합니다.</p>\n</div>\n<p>두 파일을 보면 <code>app.component.ts</code> 파일과 <code>app.component.spec.ts</code> 파일은 같은 폴더에 이웃한 파일이며, 두 파일의 컴포넌트 이름 부분(<code>app.component</code>)이 같다는 것을 확인할 수 있습니다.</p>\n<p>이 룰은 프로젝트 안에 있는 <em>모든</em> 테스트 파일에 적용하는 것이 좋습니다.</p>\n<a id=\"q-spec-file-location\"></a>\n<h4 id=\"place-your-spec-file-next-to-the-file-it-tests\">Place your spec file next to the file it tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4>\n<p>It's a good idea to put unit test spec files in the same folder\nas the application source code files that they test:</p>\n<ul>\n<li>Such tests are easy to find.</li>\n<li>You see at a glance if a part of your application lacks tests.</li>\n<li>Nearby tests can reveal how a part works in context.</li>\n<li>When you move the source (inevitable), you remember to move the test.</li>\n<li>When you rename the source file (inevitable), you remember to rename the test file.</li>\n</ul>\n<a id=\"q-specs-in-test-folder\"></a>\n<h4 id=\"place-your-spec-files-in-a-test-folder\">Place your spec files in a test folder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-files-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4>\n<p>Application integration specs can test the interactions of multiple parts\nspread across folders and modules.\nThey don't really belong to any part in particular, so they don't have a\nnatural home next to any one file.</p>\n<p>It's often better to create an appropriate folder for them in the <code>tests</code> directory.</p>\n<p>Of course specs that test the test helpers belong in the <code>test</code> folder,\nnext to their corresponding helper files.</p>\n<a id=\"ci\"></a>\n<!--\n## Set up continuous integration\n-->\n<h2 id=\"지속적인-통합환경-구성하기\">지속적인 통합환경 구성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#지속적인-통합환경-구성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nOne of the best ways to keep your project bug-free is through a test suite, but it's easy to forget to run tests all the time.\nContinuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request.\n\nThere are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others.\nAlthough Circle CI and Travis CI are paid services, they are provided free for open source projects.\nYou can create a public project on GitHub and add these services without paying.\nContributions to the Angular repo are automatically run through a whole suite of Circle CI tests.\n\nThis article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.\n-->\n<p>프로젝트에서 발생하는 버그를 방지하려면 주기적으로 테스트를 실행하는 것이 좋지만, 매번 테스트를 실행해야 하는 것은 번거로운 일입니다.\n이 때 프로젝트 레파지토리에 CI(Continuous integration) 서버를 연결하면 이 레파지토리에 커밋이나 풀 리퀘스트가 있을 때마다 자동으로 테스트를 실행하게 할 수 있습니다.</p>\n<p>Circle CI와 Travis CI는 이런 경우에 사용하는 유료 CI 서비스입니다. 그리고 Jenkins와 같은 툴을 사용하면 무료 CI 환경을 구성할 수도 있습니다.\nCircle CI와 Travis CI는 기본적으로 유료 서비스지만, 오픈 소스 프로젝트에는 무료로 사용할 수 있습니다.\n그래서 GitHub에 public 프로젝트를 만들면 이 서비스를 무료로 사용할 수 있습니다.\nAngular 공식 레파지토리에 코드를 반영할 때도 Circle CI 테스트가 자동으로 실행됩니다.</p>\n<p>이 섹션에서는 프로젝트에 Circle CI와 Travis CI를 연결하는 방법에 대해 설명하고, 프로젝트의 테스트 스펙을 리모트 서버의 Chrome 브라우저에서 실행하는 방법에 대해 안내합니다.</p>\n<!--\n### Configure project for Circle CI\n-->\n<h3 id=\"circle-ci-환경-설정하기\">Circle CI 환경 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#circle-ci-환경-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nStep 1: Create a folder called `.circleci` at the project root.\n\nStep 2: In the new folder, create a file called `config.yml` with the following content:\n\n```\nversion: 2\njobs:\n  build:\n    working_directory: ~/my-project\n    docker:\n      - image: circleci/node:10-browsers\n    steps:\n      - checkout\n      - restore_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n      - run: npm install\n      - save_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n          paths:\n            - \"node_modules\"\n      - run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n      - run: npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js\n```\n\nThis configuration caches `node_modules/` and uses [`npm run`](https://docs.npmjs.com/cli/run-script) to run CLI commands, because `@angular/cli` is not installed globally.\nThe double dash (`--`) is needed to pass arguments into the `npm` script.\n\nStep 3: Commit your changes and push them to your repository.\n\nStep 4: [Sign up for Circle CI](https://circleci.com/docs/2.0/first-steps/) and [add your project](https://circleci.com/add-projects).\nYour project should start building.\n\n* Learn more about Circle CI from [Circle CI documentation](https://circleci.com/docs/2.0/).\n-->\n<p>1단계: 프로젝트 최상위 폴더에 <code>.circleci</code> 폴더를 생성합니다.</p>\n<p>2단계: 이 폴더에 <code>config.yml</code> 파일을 생성하고 파일의 내용을 다음과 같이 작성합니다:</p>\n<code-example>\nversion: 2\njobs:\n  build:\n    working_directory: ~/my-project\n    docker:\n      - image: circleci/node:10-browsers\n    steps:\n      - checkout\n      - restore_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n      - run: npm install\n      - save_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n          paths:\n            - \"node_modules\"\n      - run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n      - run: npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js\n</code-example>\n<p>이 환경설정 파일의 내용은 <code>node_modules/</code> 폴더의 내용을 캐싱하고 <a href=\"https://docs.npmjs.com/cli/run-script\"><code>npm run</code></a>으로 Angular CLI 명령을 실행하는 것입니다.\n<code>@angular/cli</code>는 전역 범위에 필요하기 때문에 <code>npm install</code> 명령을 실행해서 설치했습니다.\n그리고 <code>npm</code> 스크립트에 옵션을 지정하려면 대시 2개(<code>--</code>)를 함께 사용해야 합니다.</p>\n<p>3단계: 변경사항을 커밋하고 레파지토리에 푸시합니다.</p>\n<p>4단계: <a href=\"https://circleci.com/docs/2.0/first-steps/\">Circle CI에 회원가입</a>한 뒤에 <a href=\"https://circleci.com/add-projects\">프로젝트를 추가</a>하면 프로젝트 빌드가 시작됩니다.</p>\n<ul>\n<li>더 자세한 내용은 <a href=\"https://circleci.com/docs/2.0/\">Circle CI 문서</a>를 참고하세요.</li>\n</ul>\n<!--\n### Configure project for Travis CI\n-->\n<h3 id=\"travis-ci-환경-설정하기\">Travis CI 환경 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#travis-ci-환경-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nStep 1: Create a file called `.travis.yml` at the project root, with the following content:\n\n```\ndist: trusty\nsudo: false\n\nlanguage: node_js\nnode_js:\n  - \"10\"\n\naddons:\n  apt:\n    sources:\n      - google-chrome\n    packages:\n      - google-chrome-stable\n\ncache:\n  directories:\n     - ./node_modules\n\ninstall:\n  - npm install\n\nscript:\n  - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n  - npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js\n```\n\nThis does the same things as the CircleCI configuration, except that Travis doesn't come with Chrome, so use Chromium instead.\n\nStep 2: Commit your changes and push them to your repository.\n\nStep 3: [Sign up for Travis CI](https://travis-ci.org/auth) and [add your project](https://travis-ci.org/profile).\nYou'll need to push a new commit to trigger a build.\n\n* Learn more about Travis CI testing from [Travis CI documentation](https://docs.travis-ci.com/).\n-->\n<p>1단계: 프로젝트 최상위 폴더에 <code>.travis.yml</code> 파일을 생성하고 내용을 다음과 같이 작성합니다:</p>\n<code-example>\ndist: trusty\nsudo: false\n\nlanguage: node_js\nnode_js:\n  - \"10\"\n\naddons:\n  apt:\n    sources:\n      - google-chrome\n    packages:\n      - google-chrome-stable\n\ncache:\n  directories:\n     - ./node_modules\n\ninstall:\n  - npm install\n\nscript:\n  - npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n  - npm run e2e -- --protractor-config=e2e/protractor-ci.conf.js\n</code-example>\n<p>이 환경설정 파일의 내용은 Circle CI에서 설정했던 내용과 같지만, Travis에는 Chrome이 설치되어있지 않기 때문에 Chromium을 추가로 설치했습니다.</p>\n<p>2단계: 변경사항을 커밋하고 레파지토리에 푸시합니다.</p>\n<p>3단계: <a href=\"https://travis-ci.org/auth\">Travis CI에 회원가입</a>한 뒤에 <a href=\"https://circleci.com/add-projects\">프로젝트를 추가</a>합니다.\n빌드를 실행하려면 레파지토리에 새로운 커밋이 푸시되어야 합니다.</p>\n<ul>\n<li>더 자세한 내용은 <a href=\"https://docs.travis-ci.com/\">Travis CI 문서</a>를 참고하세요.</li>\n</ul>\n<!--\n### Configure CLI for CI testing in Chrome\n-->\n<h3 id=\"ci-환경에서-chrome으로-테스트하기\">CI 환경에서 Chrome으로 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#ci-환경에서-chrome으로-테스트하기\"><i class=\"material-icons\">link</i></a></h3>\n<p>When the CLI commands <code>ng test</code> and <code>ng e2e</code> are generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests.</p>\n<p>There are configuration files for both the <a href=\"https://karma-runner.github.io/latest/config/configuration-file.html\">Karma JavaScript test runner</a>\nand <a href=\"https://www.protractortest.org/#/api-overview\">Protractor</a> end-to-end testing tool,\nwhich you must adjust to start Chrome without sandboxing.</p>\n<p>We'll be using <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome#cli\">Headless Chrome</a> in these examples.</p>\n<ul>\n<li>In the Karma configuration file, <code>karma.conf.js</code>, add a custom launcher called ChromeHeadlessCI below browsers:\n-->\n로컬 개발환경에서 Angular CLI로 <code>ng test</code> 명령이나 <code>ng e2e</code> 명령을 실행하면 Chrome 브라우저가 실행되고 이 브라우저에서 테스트가 실행됩니다.</li>\n</ul>\n<p>이런 환경을 구성하려면 <a href=\"https://karma-runner.github.io/latest/config/configuration-file.html\">Karma JavaScript 테스트 러너</a>와 e2e 테스트 툴인 <a href=\"https://www.protractortest.org/#/api-overview\">Protractor</a>가 실행될 환경이 모두 설정되어야 하며, Angular CLI로 생성한 프로젝트에는 이 환경은 자동으로 구성되어 있습니다.\n하지만 CI 환경에서는 Chrome 브라우저를 직접 실행하지 않고 화면과 샌드박스 기능 없이 사용하는 것이 더 좋습니다.</p>\n<p>이번 섹션에서는 <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome#cli\">Headless Chrome</a>을 사용하는 방법에 대해 알아봅시다.</p>\n<ul>\n<li>Karma 환경설정 파일 <code>karma.conf.js</code>에 커스텀 런처를 ChromeHeadlessCI를 추가합니다:</li>\n</ul>\n<code-example>\nbrowsers: ['ChromeHeadlessCI'],\ncustomLaunchers: {\n  ChromeHeadlessCI: {\n    base: 'ChromeHeadless',\n    flags: ['--no-sandbox']\n  }\n},\n</code-example>\n<!--\n* In the root folder of your e2e tests project, create a new file named `protractor-ci.conf.js`. This new file extends the original `protractor.conf.js`.\n-->\n<ul>\n<li>e2e 테스트 프로젝트의 최상위 폴더에 <code>protractor-ci.conf.js</code> 파일을 생성합니다. 이 파일은 기존에 존재하는 <code>protractor.conf.js</code> 파일을 확장하는 용도로 사용합니다.</li>\n</ul>\n<code-example>\nconst config = require('./protractor.conf').config;\n\nconfig.capabilities = {\n  browserName: 'chrome',\n  chromeOptions: {\n    args: ['--headless', '--no-sandbox']\n  }\n};\n\nexports.config = config;\n</code-example>\n<!--\nNow you can run the following commands to use the `--no-sandbox` flag:\n-->\n<p>그러면 아래 명령들은 <code>--no-sandbox</code> 플래그가 지정된 채로 실행됩니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng test --no-watch --no-progress --browsers=ChromeHeadlessCI\n  ng e2e --protractor-config=e2e/protractor-ci.conf.js\n</code-example>\n<div class=\"alert is-helpful\">\n   <!--\n   **Note:** Right now, you'll also want to include the `--disable-gpu` flag if you're running on Windows. See [crbug.com/737678](https://crbug.com/737678).\n   -->\n<p>   <strong>참고:</strong> 개발 환경이 Windows라면 <code>--disable-gpu</code> 플래그를 사용하는 것이 나을 수 있습니다. 자세한 내용은 <a href=\"https://crbug.com/737678\">이 링크</a>를 참고하세요.</p>\n</div>\n<hr>\n<h2 id=\"more-info-on-testing\">More info on testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-info-on-testing\"><i class=\"material-icons\">link</i></a></h2>\n<p>After you've set up your app for testing, you may find the following testing  guides useful.</p>\n<ul>\n<li><a href=\"guide/testing-code-coverage\">Code coverage</a>—find out how much of your app your tests are covering and how to specify required amounts.</li>\n<li><a href=\"guide/testing-services\">Testing services</a>—learn how to test the services your app uses.</li>\n<li><a href=\"guide/testing-components-basics\">Basics of testing components</a>—discover the basics of testing Angular components.</li>\n<li><a href=\"guide/testing-components-scenarios\">Component testing scenarios</a>—read about the various kinds of component testing scenarios and use cases.</li>\n<li><a href=\"guide/testing-attribute-directives\">Testing attribute directives</a>—learn about how to test your attribute directives.</li>\n<li><a href=\"guide/testing-pipes\">Testing pipes</a>—find out how to test attribute directives.</li>\n<li><a href=\"guide/testing-attribute-directives\">Debugging tests</a>—uncover common testing bugs.</li>\n<li><a href=\"guide/testing-utility-apis\">Testing utility APIs</a>—get familiar with Angular testing features.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/dependency-injection\n - guide/example-apps-list\n - guide/test-debugging\n - guide/testing-utility-apis\n-->\n<!-- links from this doc:\n - /cli\n - cli\n - cli/test\n - guide/testing#ci-환경에서-chrome으로-테스트하기\n - guide/testing#circle-ci-환경-설정하기\n - guide/testing#more-info-on-testing\n - guide/testing#place-your-spec-file-next-to-the-file-it-tests\n - guide/testing#place-your-spec-files-in-a-test-folder\n - guide/testing#prerequisites\n - guide/testing#set-up-testing\n - guide/testing#travis-ci-환경-설정하기\n - guide/testing#다른-테스트-프레임워크\n - guide/testing#지속적인-통합환경-구성하기\n - guide/testing#테스트\n - guide/testing#테스트-설정\n - guide/testing#테스트-파일의-이름과-위치\n - guide/testing-attribute-directives\n - guide/testing-code-coverage\n - guide/testing-components-basics\n - guide/testing-components-scenarios\n - guide/testing-pipes\n - guide/testing-services\n - guide/testing-utility-apis\n - tutorial\n - https://circleci.com/add-projects\n - https://circleci.com/docs/2.0/\n - https://circleci.com/docs/2.0/first-steps/\n - https://crbug.com/737678\n - https://developers.google.com/web/updates/2017/04/headless-chrome#cli\n - https://docs.npmjs.com/cli/run-script\n - https://docs.travis-ci.com/\n - https://github.com/angular/angular/edit/master/aio/content/guide/testing.md?message=docs%3A%20describe%20your%20change...\n - https://jasmine.github.io/\n - https://karma-runner.github.io\n - https://karma-runner.github.io/latest/config/configuration-file.html\n - https://travis-ci.org/auth\n - https://www.protractortest.org/#/api-overview\n-->"
}