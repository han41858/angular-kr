{
  "id": "guide/i18n",
  "title": "Internationalization (i18n)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/i18n.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"internationalization-i18n\">Internationalization (i18n)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#internationalization-i18n\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nApplication internationalization is a many-faceted area of development, focused on making\napplications available and user-friendly to a worldwide audience. This page describes Angular's\ninternationalization (i18n) tools, which can help you make your app available in multiple languages.\n\nSee the <live-example downloadOnly name=\"i18n\">i18n Example</live-example> for a simple example of\nan AOT-compiled app, translated into French.\n-->\n<p>애플리케이션 국제화(internationalization, i18n)는 애플리케이션을 세계 여러 곳에 있는 사용자가 이해할 수 있도록 다양한 언어로 제공하고, 좀 더 사용자에게 친숙하게 다가가려면 어떻게 해야 할지 개선하는 것에 초점을 두는 개발 영역입니다.\n이 문서는 Angular가 제공하는 i18n 툴에 대해 소개합니다. i18n 툴을 활용하면 애플리케이션을 여러 언어로 제공할 수 있습니다.</p>\n<p>프랑스어로 제공되는 앱을 AOT 방식으로 컴파일한 <live-example downloadonly=\"\" name=\"i18n\">i18n 예제</live-example>를 확인해 보세요.</p>\n<a id=\"angular-i18n\"></a>\n<!--\n## Angular and i18n\n-->\n<h2 id=\"angular와-i18n\">Angular와 i18n<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#angular와-i18n\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n*Internationalization* is the process of designing and preparing your app to be usable in different languages. \n*Localization* is the process of translating your internationalized app into specific languages for particular locales. \n\nAngular simplifies the following aspects of internationalization:\n* Displaying dates, number, percentages, and currencies in a local format.\n* Preparing text in component templates for translation.\n* Handling plural forms of words.\n* Handling alternative text.\n\nFor localization, you can use the [Angular CLI](cli) to generate most of the boilerplate necessary to create files for translators, and to publish your app in multiple languages. \nAfter you have set up your app to use i18n, the CLI can help you with the following steps:\n* Extracting localizable text into a file that you can send out to be translated.\n* Building and serving the app for a given locale, using the translated text.\n* Creating multiple language versions of your app.\n-->\n<p><em>Internationalization</em>은 애플리케이션 설계 단계 중 하나이며, 애플리케이션을 여러 언어로 제공할 수 있도록 준비하는 것을 의미합니다.\n그리고 <em>Localization</em>은 i18n이 적용된 앱을 특정 언어로 번역하는 단계를 의미합니다.</p>\n<p>Angular는 i18n을 다음과 같이 단순화했습니다:</p>\n<ul>\n<li>화면에 표시되는 날짜, 숫자, 퍼센트, 화폐는 해당 지역의 형식에 맞게 제공합니다.</li>\n<li>컴포넌트 템플릿에 표시되는 문구는 해당 언어로 제공합니다.</li>\n<li>복수형 문구가 다국어로 번역되는 것에 대비합니다.</li>\n<li>필요하다면 대체 텍스트를 준비합니다.</li>\n</ul>\n<p>Localization의 관점에서는 <a href=\"cli\">Angular CLI</a>를 사용해서 번역에 필요한 파일을 생성하거나 앱을 여러 언어로 빌드해서 배포할 수 있습니다.\n이 작업을 하려면 애플리케이션에 i18n 설정을 적용해야 Angular CLI가 제공하는 다음 기능을 활용할 수 있습니다:</p>\n<ul>\n<li>번역할 내용을 한번에 모아 번역 소스 파일을 생성할 수 있습니다.</li>\n<li>텍스트를 번역하고 나면 특정 언어로 애플리케이션을 빌드하고 실행할 수 있습니다.</li>\n<li>운영용 애플리케이션을 여러 언어로 빌드할 수 있습니다.</li>\n</ul>\n<a id=\"setting-up-locale\"></a>\n<a id=\"setting-up-the-locale-of-your-app\"></a>\n<!--\n## Setting up the locale of your app\n-->\n<h2 id=\"locale-환경설정\">locale 환경설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#locale-환경설정\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA locale is an identifier (id) that refers to a set of user preferences that tend to be shared\nwithin a region of the world, such as country. This document refers to a locale identifier as a\n\"locale\" or \"locale id\".\n\nA Unicode locale identifier is composed of a Unicode language identifier and (optionally) the\ncharacter `-` followed by a locale extension. (For historical reasons the character `_` is supported\nas an alternative to `-`.)  For example, in the locale id `fr-CA` the `fr` refers to the French\nlanguage identifier, and the `CA` refers to the locale extension Canada.\n-->\n<p>locale은 국가와 같이 한 지역에 사는 사람들이 공유하는 것들을 의미합니다. 서로 구분할 수 있기 때문에 id의 한 종류라고도 할 수 있습니다.\n이 문서에서 \"locale\"이나 \"locale id\"라고 하는 것은 모두 이 locale을 의미합니다.</p>\n<p>유니코드 locale id는 유니코드 언어 id를 사용하며, 이 뒤에  <code>-</code>를 붙이고 locale 확장 id를 붙일 수도 있습니다.\n(<code>-</code> 대신 <code><a href=\"\" class=\"code-anchor\">_</a></code> 가 사용되는 경우도 있습니다.)\n예를 들어 <code>fr-CA</code>라는 locale id가 있다면, 이것은 기본적으로 프랑스어 id를 의미하며 <code>CA</code>가 붙었기 때문에 캐나다에서 사용하는 프랑스어를 의미합니다.</p>\n<div class=\"alert is-critical\">\n<!--\nAngular follows the Unicode LDML convention that uses stable identifiers (Unicode locale identifiers)\nbased on the norm [BCP47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt). It is very important that\nyou follow this convention when you define your locale, because the Angular i18n tools use this\nlocale id to find the correct corresponding locale data.\n-->\n<p>Angular는 <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">BCP47</a>로 정의된 Unicode LDML 컨벤션을 준수합니다.\nAngular에서 locale id를 지정할 때도 Angular CLI i18n툴은 이 컨벤션에서 정의하는 locale id를 기준으로 다국어 데이터를 제공합니다.</p>\n</div>\n<!--\nBy default, Angular uses the locale `en-US`, which is English as spoken in the United States of America.\n\nFor more information about Unicode locale identifiers, see the\n[CLDR core spec](http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers).\n\nFor a complete list of locales supported by Angular, see\n[the Angular repository](https://github.com/angular/angular/tree/master/packages/common/locales).\n\nThe locale identifiers used by CLDR and Angular are based on [BCP47](http://www.rfc-editor.org/rfc/bcp/bcp47.txt).\nThese specifications change over time; the following table maps previous identifiers to current ones at\ntime of writing:\n-->\n<p>기본적으로 Angular가 사용하는 locale은 <code>en-US</code>이기 때문에 미국에서 사용되는 영어를 기준으로 합니다.</p>\n<p>유니코드 locald id에 대해 자세하게 알아보려면 <a href=\"http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers\">CLDR core spec</a> 문서를 참고하세요.</p>\n<p>Angular가 제공하는 전체 locale 목록은 <a href=\"https://github.com/angular/angular/tree/master/packages/common/locales\">Angular 레파지토리</a>에서 확인할 수 있습니다.</p>\n<p>CLDR과 Angular가 사용하는 locale id는 모두 <a href=\"http://www.rfc-editor.org/rfc/bcp/bcp47.txt\">BCP47</a>를 기준으로 합니다.\n이 스펙은 변경될 수 있기 때문에 이전과 달라진 항목도 일부 있습니다.</p>\n<!--\n| Locale name                   | Old locale id     | New locale id |\n|-------------------------------|-------------------|---------------|\n| Indonesian                    | in                | id            |\n| Hebrew                        | iw                | he            |\n| Romanian Moldova              | mo                | ro-MD         |\n| Norwegian Bokmål              | no, no-NO         | nb            |\n| Serbian Latin                 | sh                | sr-Latn       |\n| Filipino                      | tl                | fil           |\n| Portuguese Brazil             | pt-BR             | pt            |\n| Chinese Simplified            | zh-cn, zh-Hans-CN | zh-Hans       |\n| Chinese Traditional           | zh-tw, zh-Hant-TW | zh-Hant       |\n| Chinese Traditional Hong Kong | zh-hk             | zh-Hant-HK    |\n-->\n<table>\n<thead>\n<tr>\n<th>Locale 이름</th>\n<th>이전 locale id</th>\n<th>새 locale id</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Indonesian</td>\n<td>in</td>\n<td>id</td>\n</tr>\n<tr>\n<td>Hebrew</td>\n<td>iw</td>\n<td>he</td>\n</tr>\n<tr>\n<td>Romanian Moldova</td>\n<td>mo</td>\n<td>ro-MD</td>\n</tr>\n<tr>\n<td>Norwegian Bokmål</td>\n<td>no, no-NO</td>\n<td>nb</td>\n</tr>\n<tr>\n<td>Serbian Latin</td>\n<td>sh</td>\n<td>sr-Latn</td>\n</tr>\n<tr>\n<td>Filipino</td>\n<td>tl</td>\n<td>fil</td>\n</tr>\n<tr>\n<td>Portuguese Brazil</td>\n<td>pt-BR</td>\n<td>pt</td>\n</tr>\n<tr>\n<td>Chinese Simplified</td>\n<td>zh-cn, zh-Hans-CN</td>\n<td>zh-Hans</td>\n</tr>\n<tr>\n<td>Chinese Traditional</td>\n<td>zh-tw, zh-Hant-TW</td>\n<td>zh-Hant</td>\n</tr>\n<tr>\n<td>Chinese Traditional Hong Kong</td>\n<td>zh-hk</td>\n<td>zh-Hant-HK</td>\n</tr>\n</tbody>\n</table>\n<a id=\"i18n-pipes\"></a>\n<!--\n## i18n pipes\n-->\n<h2 id=\"i18n-파이프\">i18n 파이프<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#i18n-파이프\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAngular pipes can help you with internationalization: the `DatePipe`, `CurrencyPipe`, `DecimalPipe`\nand `PercentPipe` use locale data to format data based on the `LOCALE_ID`.\n\nBy default, Angular only contains locale data for `en-US`. If you set the value of\n`LOCALE_ID` to another locale, you must import locale data for that new locale.\nThe CLI imports the locale data for you when you use the parameter `--configuration` with `ng serve` and\n`ng build`.\n\nIf you want to import locale data for other languages, you can do it manually:\n-->\n<p>Angular가 제공하는 파이프 중 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>, <code><a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">CurrencyPipe</a></code>, <code><a href=\"api/common/DecimalPipe\" class=\"code-anchor\">DecimalPipe</a></code>, <code><a href=\"api/common/PercentPipe\" class=\"code-anchor\">PercentPipe</a></code>는 애플리케이션에 설정한 <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code>에 맞게 자동으로 다국어를 지원합니다.</p>\n<p>기본적으로 Angular가 로드하는 locale 데이터는 <code>en-US</code> 뿐입니다.\n그래서 <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code>를 다른 값으로 지정했다면 이 locale에 맞는 locale 데이터를 로드해야 합니다.\n이 때 Angular CLI 명령을 실행하면서 <code>--configuration</code> 옵션을 지정했다면, <code>ng serve</code> 명령이나 <code>ng build</code> 명령을 실행할 때 자동으로 locale 데이터를 로드합니다.</p>\n<p>이 데이터를 수동으로 로드하려면 다음과 같이 작성하면 됩니다:</p>\n<code-example path=\"i18n/doc-files/app.locale_data.ts\" region=\"import-locale\" header=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a> } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\n\n// 두번째 인자 `fr`은 생략해도 됩니다.\n<a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a>(localeFr, 'fr');\n\n</code-example>\n<!--\nThe first parameter is an object containing the locale data imported from `@angular/common/locales`.\nBy default, the imported locale data is registered with the locale id that is defined in the Angular\nlocale data itself.\nIf you want to register the imported locale data with another locale id, use the second parameter to\nspecify a custom locale id. For example, Angular's locale data defines the locale id for French as\n\"fr\". You can use the second parameter to associate the imported French locale data with the custom\nlocale id \"fr-FR\" instead of \"fr\".\n\nThe files in `@angular/common/locales` contain most of the locale data that you\nneed, but some advanced formatting options might only be available in the extra dataset that you can\nimport from `@angular/common/locales/extra`. An error message informs you when this is the case.\n-->\n<p>첫번째 인자는 <code>@angular/common/locales</code>에서 로드한 locale 데이터 객체입니다.\n기본적으로 locale 데이터를 로드하면 이 데이터가 등록된 locale id를 기준으로 Angular에 등록됩니다.\n그런데 데이터에 지정된 locale id 말고 다른 locale id를 사용하고 싶다면 원하는 locale id를 두번째 인자로 전달하면 됩니다.\n기본적으로 Angular에서 프랑스어 locale 데이터가 제공되는 파일은 \"fr\"이며 \"fr\"이라는 locale id로 등록되지만, \"fr\" 대신 \"fr-FR\"이라는 locale id로 등록할 수 있습니다.</p>\n<p><code>@angular/common/locales</code> 패키지는 대부분의 경우에 사용할 수 있는 locale 데이터를 제공하지만, 이 패키지에서 제공하는 것 외에 다른 데이터셋이 더 필요하다면 <code>@angular/common/locales/extra</code> 패키지를 로드해서 사용해도 됩니다.\n이 패키지의 내용이 필요한 경우는 에러 메시지로 출력됩니다.</p>\n  <code-example path=\"i18n/doc-files/app.locale_data_extra.ts\" region=\"import-locale-extra\" header=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a> } from '@angular/common';\nimport localeFr from '@angular/common/locales/fr';\nimport localeFrExtra from '@angular/common/locales/extra/fr';\n\n<a href=\"api/common/registerLocaleData\" class=\"code-anchor\">registerLocaleData</a>(localeFr, 'fr-FR', localeFrExtra);\n\n</code-example>\n<div class=\"alert is-helpful\">\n  <!--\n  All locale data used by Angular are extracted from the Unicode Consortium's\n  <a href=\"http://cldr.unicode.org/\" title=\"CLDR\">Common Locale Data Repository (CLDR)</a>.\n  -->\n<p>  Angular가 제공하는 locale 데이터는 모두 Unicode Consortium이 제공하는 <a href=\"http://cldr.unicode.org/\" title=\"CLDR\">Common Locale Data Repository (CLDR)</a>에서 발췌했습니다.</p>\n</div>\n<!--\n## Template translations\n-->\n<h2 id=\"템플릿-번역\">템플릿 번역<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#템플릿-번역\"><i class=\"material-icons\">link</i></a></h2>\n<div class=\"alert is-helpful\">\n  <!--\n  This document refers to a unit of translatable text as \"text,\" a \"message\", or a\n  \"text message.\"\n  -->\n<p>  이 문서에서 언급하는 \"텍스트\", \"메시지\", \"텍스트 메시지\"는 번역 대상이 되는 문자열 단위를 의미합니다.</p>\n</div>\n<!--\nThe i18n template translation process has four phases:\n\n1. Mark static text messages in your component templates for translation.\n\n2. Create a translation file: Use the Angular CLI `xi18n` command to extract the marked text into an industry-standard translation source file.\n\n3. Edit the generated translation file: Translate the extracted text into the target language.\n\n4. Merge the completed translation file into the app. To do this, use the Angular CLI `build` command to compile the app, choosing a [locale-specific configuration](#merge-aot), or specifying the following command options.\n\n    * `--i18nFile`=*path to the translation file*\n    * `--i18nFormat`=*format of the translation file*\n    * `--i18nLocale`= *locale id* \n\nThe command replaces the original messages with translated text, and generates a new version of the app in the target language. \n\nYou need to build and deploy a separate version of the app for each supported language.\n-->\n<p>i18n 템플릿 번역은 4단계로 진행합니다:</p>\n<ol>\n<li>\n<p>컴포넌트 템플릿 안에 있는 텍스트 메시지 중에서 번역할 대상을 지정합니다.</p>\n</li>\n<li>\n<p>번역 소스 파일을 생성합니다: Angular CLI <code>xi18n</code> 명령을 실행하면 번역할 텍스트로 표시한 문구를 모아 파일로 추출할 수 있습니다.</p>\n</li>\n<li>\n<p>번역 소스 파일로 추출된 문구를 원하는 언어로 변환합니다.</p>\n</li>\n<li>\n<p>번역한 파일을 애플리케이션에 적용합니다. Angular CLI <code>build</code> 명령을 실행하면 애플리케이션이 빌드되는데, 이 때 <a href=\"guide/i18n#merge-aot\">locale 설정</a>을 지정하거나 다음 옵션을 사용하면 됩니다.</p>\n<ul>\n<li><code>--i18nFile</code>=<em>번역 파일의 위치</em></li>\n<li><code>--i18nFormat</code>=<em>번역 파일의 형식</em></li>\n<li><code>--i18nLocale</code>= <em>locale id</em> </li>\n</ul>\n</li>\n</ol>\n<p>이 명령을 실행하면 원래 메시지 대신 번역 파일의 텍스트가 적용되며, 애플리케이션도 해당 언어로 빌드됩니다.</p>\n<p>애플리케이션을 여러 언어로 제공하려면 각각의 언어로 애플리케이션을 빌드하고 배포해야 합니다.</p>\n<a id=\"i18n-attribute\"></a>\n<!--\n### Mark text with the i18n attribute\n-->\n<h3 id=\"i18n-어트리뷰트로-번역대상-지정하기\">i18n 어트리뷰트로 번역대상 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#i18n-어트리뷰트로-번역대상-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe Angular `i18n` attribute marks translatable content. Place it on every element tag whose fixed\ntext is to be translated.\n\nIn the example below, an `<h1>` tag displays a simple English language greeting, \"Hello i18n!\"\n-->\n<p>Angular가 제공하는 <code>i18n</code> 어트리뷰트를 사용하면 번역할 문구를 지정할 수 있습니다.\n번역하려는 문구가 포함된 모든 엘리먼트 태그에 이 어트리뷰트를 지정하세요.</p>\n<p>아래 예제에서 <code>&#x3C;h1></code> 태그에는 \"Hello i18n!\"이라는 영어 문장이 표시됩니다.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"greeting\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<!--\nTo mark the greeting for translation, add the `i18n` attribute to the `<h1>` tag.\n-->\n<p>이 문장을 번역 대상으로 지정하려면 <code>&#x3C;h1></code> 태그에 <code>i18n</code> 어트리뷰트를 추가하면 됩니다.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<div class=\"alert is-helpful\">\n  <!--\n  `i18n` is a custom attribute, recognized by Angular tools and compilers.\n  After translation, the compiler removes it. It is not an Angular directive.\n  -->\n<p>  <code>i18n</code>은 Angular 툴과 컴파일러가 번역 대상을 인식하기 위해 제공되는 커스텀 어트리뷰트이며, Angular 디렉티브는 아닙니다.\n이 어트리뷰트는 애플리케이션이 컴파일될 때 자동으로 제거됩니다.</p>\n</div>\n<a id=\"help-translator\"></a>\n<!--\n### Help the translator with a description and meaning\n-->\n<h3 id=\"문장의-의미-추가하기\">문장의 의미 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#문장의-의미-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo translate a text message accurately, the translator may need additional information or context.\n\nYou can add a description of the text message as the value of the `i18n` attribute, as shown in the\nexample below:\n-->\n<p>텍스트 메시지를 정확하게 번역하려면 해당 문구가 어떤 맥락에서 사용되었는지 추가 정보가 더 필요할 수도 있습니다.</p>\n<p>그렇다면 이 정보는 <code>i18n</code> 어트리뷰트에 다음과 같이 추가할 수 있습니다:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-desc\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<!--\nThe translator may also need to know the meaning or intent of the text message within this particular\napp context.\n\nYou add context by beginning the `i18n` attribute value with the _meaning_ and\nseparating it from the _description_ with the `|` character: `<meaning>|<description>`\n-->\n<p>이 정보가 제공되면 번역자가 해당 텍스트 메시지가 애플리케이션의 어떤 맥락에 사용되었는지 제대로 알 수 있습니다.</p>\n<p>그리고 <code>i18n</code>에 해당 문구의 <em>의미(meaning)</em> 와 <em>설명(description)</em> 을 함께 제공하려면 <code>|</code> 문자를 사용해서 <code>&#x3C;의미>|&#x3C;설명></code> 형식으로 작성하면 됩니다:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-meaning\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<!--\nAll occurrences of a text message that have the same meaning will have the same translation.\nA text message that is associated with different meanings can have different translations.\n\nThe Angular extraction tool preserves both the meaning and the description in the translation\nsource file to facilitate contextually-specific translations, but only the combination of meaning\nand text message are used to generate the specific id of a translation. If you have two\nsimilar text messages with different meanings, they are extracted separately. If you have two similar\ntext messages with different descriptions (not different meanings), then they are extracted only once.\n-->\n<p>같은 의미로 사용된 텍스트 메시지는 모두 동일하게 번역되어야 합니다.\n그런데 텍스트는 같더라도 다른 맥락으로 사용된 텍스트 메시지는 다르게 번역될 수도 있습니다.</p>\n<p>i18n 툴은 텍스트가 맥락에 어울리게 번역될 수 있도록 해당 문장의 의미와 설명을 모두 추출하지만, 이 문장에 id를 할당할 때는 해당 문구의 내용과 의미만 조합한 id를 할당하며, 이 과정에 메시지의 설명은 고려하지 않습니다.\n그래서 비슷하지만 서로 다른 의미로 사용된 두 메시지가 있다면 이 메시지는 id가 다르기 때문에 명확하게 구분할 수 있습니다.\n하지만 두 메시지의 설명이 다르고 의미가 같다면, 이 메시지는 한번만 추출됩니다.</p>\n<a id=\"custom-id\"></a>\n<!--\n### Set a custom id for persistence and maintenance\n-->\n<h3 id=\"유지관리를-위해-커스텀-id-지정하기\">유지관리를 위해 커스텀 id 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#유지관리를-위해-커스텀-id-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe angular i18n extractor tool generates a file with a translation unit entry for each `i18n`\nattribute in a template. By default, it assigns each translation unit a unique id such as this one:\n-->\n<p>Angular i18n 추출 툴로 파일을 생성하면 템플릿에 <code>i18n</code> 어트리뷰트가 적용된 각 문구를 번역 단위(translation unit) 하나로 생성합니다.\n그리고 기본적으로 이 유닛에는 다음과 같이 유일한 id가 지정됩니다:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"generated-id\" linenums=\"false\">\n&#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n\n</code-example>\n<!--\nWhen you change the translatable text, the extractor tool generates a new id for that translation unit.\nYou must then update the translation file with the new id.\n\nAlternatively, you can specify a custom id in the `i18n` attribute by using the prefix `@@`.\nThe example below defines the custom id `introductionHeader`:\n-->\n<p>번역할 문구를 변경하면 i18n 추출 툴이 생성하는 id도 변경됩니다.\n번역 파일의 내용도 새로운 id로 변경해야 합니다.</p>\n<p>이 과정이 번거롭다면 <code>i18n</code> 어트리뷰트를 지정할 때 <code>@@</code> 접두사를 사용해서 커스텀 id를 지정할 수 있습니다.\n<code>introductionHeader</code>라는 커스텀 id를 지정하려면 다음과 같이 작성하면 됩니다:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-solo-id\" header=\"app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<!--\nWhen you specify a custom id, the extractor tool and compiler generate a translation unit with that\ncustom id.\n-->\n<p>커스텀 id를 지정하고 나면 i18n 추출 툴이 번역 유닛을 생성할 때 이 커스텀 id를 사용하게 됩니다.</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"custom-id\" linenums=\"false\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n\n</code-example>\n<!--\nThe custom id is persistent. The extractor tool does not change it when the translatable text changes.\nTherefore, you do not need to update the translation. This approach makes maintenance easier.\n-->\n<p>커스텀 id는 계속 유지됩니다.\n번역할 문구가 변경되더라도 i18n 추출 툴이 할당하는 id는 변경되지 않습니다.\n그래서 커스텀 id를 사용하면 문구를 변경하더라도 번역 결과 파일을 수정할 필요가 없습니다.\n유지보수하기에는 이 방법이 더 편합니다.</p>\n<!--\n#### Use a custom id with a description\n-->\n<h4 id=\"설명과-커스텀-id-함께-사용하기\">설명과 커스텀 id 함께 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#설명과-커스텀-id-함께-사용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou can use a custom id in combination with a description by including both in the value of the\n`i18n` attribute. In the example below, the `i18n` attribute value includes a description, followed\nby the custom `id`:\n-->\n<p>커스텀 id는 해당 문구에 대한 설명과 함께 <code>i18n</code> 어트리뷰트에 사용할 수 있습니다.\n다음과 같이 작성하면 됩니다:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-id\" header=\"app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<!--\nYou also can add a meaning, as shown in this example:\n-->\n<p>비슷한 방식으로, 문구의 의미를 함께 작성할 수도 있습니다:</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-meaning-and-id\" header=\"app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<!--\n#### Define unique custom ids\n-->\n<h4 id=\"커스텀-id는-유일한-값으로-지정하세요\">커스텀 id는 유일한 값으로 지정하세요.<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#커스텀-id는-유일한-값으로-지정하세요\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nBe sure to define custom ids that are unique. If you use the same id for two different text messages,\nonly the first one is extracted, and its translation is used in place of both original text messages.\n\nIn the example below the custom id `myId` is used for two different messages:\n-->\n<p>커스텀 id는 반드시 유일한 값으로 지정해야 합니다.\n서로 다른 텍스트 메시지에 같은 id가 지정되면, i18n 툴이 첫번째 메시지만 추출하며, 번역된 문구는 해당 id가 지정된 모든 곳에 적용됩니다.</p>\n<p>아래 예제에서 <code>myId</code>는 서로 다른 메시지 2개에 지정되었습니다.</p>\n<code-example language=\"html\">\n  &#x3C;h3 i18n=\"@@myId\">Hello&#x3C;/h3>\n  &#x3C;!-- ... -->\n  &#x3C;p i18n=\"@@myId\">Good bye&#x3C;/p>\n</code-example>\n<!--\nConsider this translation to French:\n-->\n<p>이 내용을 프랑스어로 번역했다고 합시다:</p>\n<code-example language=\"xml\">\n  &#x3C;trans-unit id=\"myId\" datatype=\"html\">\n    &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Hello&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n    &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a> <a href=\"api/animations/state\" class=\"code-anchor\">state</a>=\"new\">Bonjour&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n  &#x3C;/trans-unit>\n</code-example>\n<!--\nBecause the custom id is the same, both of the elements in the resulting translation contain\nthe same text, `Bonjour`:\n-->\n<p>그러면 두 메시지의 커스텀 id가 같기 때문에 <code>&#x3C;h3></code>과 <code>&#x3C;p></code>의 내용은 모두 <code>Bonjour</code>라는 텍스트로 대체됩니다:</p>\n<code-example language=\"html\">\n  &#x3C;h3>Bonjour&#x3C;/h3>\n  &#x3C;!-- ... -->\n  &#x3C;p>Bonjour&#x3C;/p>\n</code-example>\n<a id=\"no-element\"></a>\n<!--\n### Translate text without creating an element\n-->\n<h3 id=\"엘리먼트를-사용하지-않은-텍스트-번역하기\">엘리먼트를 사용하지 않은 텍스트 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#엘리먼트를-사용하지-않은-텍스트-번역하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIf there is a section of text that you would like to translate, you can wrap it in a `<span>` tag.\nHowever, if you don't want to create a new DOM element merely to facilitate translation,\nyou can wrap the text in an `<ng-container>` element.\nThe `<ng-container>` is transformed into an html comment:\n-->\n<p>번역하려는 텍스트 문구가 있다면 이 테스트는 <code>&#x3C;span></code> 태그로 감싼 후에 번역 대상으로 지정할 수 있습니다.\n그런데 새로운 DOM 엘리먼트를 추가하지 않으면서 문구를 번역하려면, 이 텍스트를 <code>&#x3C;ng-container></code> 엘리먼트로 감싸면 됩니다.\n<code>&#x3C;ng-container></code>는 HTML로 렌더링될 때 주석으로 처리됩니다:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-ng-container\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n</code-example>\n<a id=\"translate-attributes\"></a>\n<!--\n### Translate attributes\n-->\n<h3 id=\"어트리뷰트-번역하기\">어트리뷰트 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#어트리뷰트-번역하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nDisplayed text is sometimes supplied as the value of an attribute, rather than the content of tag.\nFor example, if your template has an image with a `title` attribute, the text value of the `title` attribute needs to be translated.\n-->\n<p>어떤 경우에는 태그 안에 있는 내용이 화면에 표시되지 않고 어트리뷰트로 지정된 값이 화면에 표시되는 경우가 있습니다.\n예를 들어 템플릿에 이미지가 있고, 이 이미지에는 <code>title</code> 어트리뷰트가 지정되었는데, 이 <code>title</code> 어트리뷰트의 내용을 번역해야 한다고 합시다.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-title\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"logo\" title=\"Angular logo\">\n\n</code-example>\n<!--\nTo mark an attribute for translation, add an attribute in the form of `i18n-x`,\nwhere `x` is the name of the attribute to translate. The following example shows how to mark the\n`title` attribute for translation by adding the `i18n-title` attribute on the `img` tag:\n-->\n<p>어트리뷰트를 번역 대상으로 지정하려면 번역하려는 어트리뷰트 이름(<code>x</code>)을 가리키는 <code>i18n-x</code> 어트리뷰트를 추가하면 됩니다.\n그래서 아래 예제에서는 <code>img</code> 태그의 <code>title</code> 어트리뷰트를 번역대상으로 지정하기 위해 <code>i18n-title</code> 어트리뷰트를 추가했습니다.</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-title-translate\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n\n</code-example>\n<!--\nThis technique works for any attribute of any element.\n\nYou also can assign a meaning, description, and id with the `i18n-x=\"<meaning>|<description>@@<id>\"`\nsyntax.\n-->\n<p>이 테크닉은 엘리먼트에 존재하는 모든 어트리뷰트에 적용할 수 있습니다.</p>\n<p>그리고 이 방식을 활용하면서 문장의 의미와 설명을 추가해서 <code>i18n-x=\"&#x3C;meaning>|&#x3C;description>@@&#x3C;id>\"</code> 라는 문법을 사용할 수도 있습니다.</p>\n<!--\n## Regular expressions for plurals and selections\n-->\n<h2 id=\"정규-표현식으로-복수형과-선택지-정의하기\">정규 표현식으로 복수형과 선택지 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#정규-표현식으로-복수형과-선택지-정의하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nDifferent languages have different pluralization rules and grammatical constructions that add \ncomplexity to the translation task. \nYou can use regular expressions with the `plural` and `select` clauses to provide patterns that aid translation in these cases.\n-->\n<p>세계 여러 언어에는 서로 다른 복수형 문법이 있고 서로 다른 방식으로 조합될 수 있기 때문에 번역 작업이 복잡해질 수 있습니다.\n이런 경우에는 복수형 문법과 대체문구 선택 조건을 정규 표현식으로 정의할 수 있습니다.</p>\n<a id=\"plural-ICU\"></a>\n<!--\n### Pluralization\n-->\n<h3 id=\"복수형-문법pluralization\">복수형 문법(Pluralization)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#복수형-문법pluralization\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nSuppose that you want to say that something was \"updated x minutes ago\".\nIn English, depending upon the number of minutes, you could display \"just now\", \"one minute ago\",\nor \"x minutes ago\" (with x being the actual number).\nOther languages might express the cardinality differently.\n\nThe example below shows how to use a `plural` ICU expression to display one of those three options\nbased on when the update occurred:\n-->\n<p>어떤 것이 \"x분 전에 업데이트 되었다\"는 것을 표현하고 싶다고 합시다.\n영어를 예로 들면 분 단위를 사용해서 \"just now\"라고 표현할 수도 있고 \"one minute ago\"라고 표현할 수도 있으며 \"x minutes ago\"라고 표현할 수도 있습니다.\n다른 언어는 또 다른 방식으로 표현할 수도 있습니다.</p>\n<p>아래 예제에서는 <code>plural</code> ICU 표현식을 사용해서 내용이 변경된 시점에 따라 이 내용을 3가지 방식으로 표현합니다:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-plural\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}&#x3C;/span>\n\n</code-example>\n<!--\n* The first parameter is the key. It is bound to the component property (`minutes`), which determines\nthe number of minutes.\n* The second parameter identifies this as a `plural` translation type.\n* The third parameter defines a pluralization pattern consisting of pluralization categories and their matching values.\n-->\n<ul>\n<li>표현식의 첫번째 인자는 키(key)입니다. 이 값은 업데이트된 시점을 표현하는 컴포넌트 프로퍼티 <code>minutes</code>와 바인딩됩니다.</li>\n<li>두번째 인자는 <code>plural</code> 번역 타입을 의미하는 id입니다.</li>\n<li>세번째 인자는 복수형 문법을 조합하는 패턴입니다. 이 패턴은 복수형 카테고리와 이 카테고리에 해당하는 값으로 조합됩니다.</li>\n</ul>\n<div class=\"alert is-helpful\">\n  <!--\n  This syntax conforms to the\n  <a href=\"http://userguide.icu-project.org/formatparse/messages\" title=\"ICU Message Format\">ICU Message Format</a>\n  as specified in the\n  <a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules\" title=\"Pluralization Rules\">CLDR pluralization rules</a>.\n  -->\n<p>  이 문법은 <a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules\" title=\"Pluralization Rules\">CLDR pluralization rules</a>에 <a href=\"http://userguide.icu-project.org/formatparse/messages\" title=\"ICU Message Format\">ICU Message Format</a>으로 정의되어 있습니다.</p>\n</div>\n<!--\nPluralization categories include (depending on the language):\n\n* =0 (or any other number)\n* zero\n* one\n* two\n* few\n* many\n* other\n-->\n<p>복수형 카테고리로 사용할 수 있는 항목은 다음과 같습니다 (언어에 따라 다릅니다):</p>\n<ul>\n<li>=0 (이나 특정 숫자값)</li>\n<li>zero</li>\n<li>one</li>\n<li>two</li>\n<li>few</li>\n<li>many</li>\n<li>other</li>\n</ul>\n<!--\nAfter the pluralization category, put the default English text in braces (`{}`).\n\nIn the example above, the three options are specified according to that pluralization pattern. For\ntalking about zero minutes, you use `=0 {just now}`. For one minute, you use `=1 {one minute}`.\nAny unmatched cardinality uses `other {{{minutes}} minutes ago}`. You could choose to add patterns\nfor two, three, or any other number if the pluralization rules were different. For the example of\n\"minute\", only these three patterns are necessary in English.\n-->\n<p>복수형 카테고리 뒤에는 괄호로 기본 영어 문구를 지정합니다(<code>{}</code>).</p>\n<p>위 예제를 다시 보면, 이 예제에는 복수형 패턴이 3개 선언되었습니다.\n1분이 되지 않은 경우는 <code>=0 {just now}</code>로 지정했습니다.\n그리고 1분인 경우는 <code>=1 {one minute}</code>로 지정했습니다.\n둘 다 해당되지 않는 경우는 <code>other {{{minutes}} minutes ago}</code>를 지정했습니다.\n물론 two, three 등 복수형 규칙은 얼마든지 추가할 수 있습니다.\n이 예제에서 다루는 것처럼 영어로 \"minute\" 단위를 표현하는 것이라면 3가지 경우만 있으면 됩니다.</p>\n<div class=\"alert is-helpful\">\n  <!--\n  You can use interpolations and html markup inside of your translations.\n  -->\n<p>  번역할 문구 안에는 문자열 바인딩이나 HTML 마크업을 사용할 수도 있습니다.</p>\n</div>\n<a id=\"select-ICU\"></a>\n<!--\n### Select among alternative text messages\n-->\n<h3 id=\"대체-문구-중에서-선택하기\">대체 문구 중에서 선택하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#대체-문구-중에서-선택하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIf your template needs to display different text messages depending on the value of a variable, you\nneed to translate all of those alternative text messages.\n\nYou can handle this with a `select` ICU expression. It is similar to the `plural` expressions\nexcept that you choose among alternative translations based on a string value instead of a number,\nand you define those string values.\n\nThe following format message in the component template binds to the component's `gender` property,\nwhich outputs one of the following string values: \"male\", \"female\" or \"other\".\nThe message maps those values to the appropriate translations:\n-->\n<p>템플릿에서 변수의 값에 따라 다른 문구를 표시해야 한다면, 이 문구를 모두 번역해놓고 하나를 선택하는 방법을 활용할 수도 있습니다.</p>\n<p>이 경우에는 <code>select</code> ICU 표현식을 사용합니다.\n이 문법은 <code>plural</code> 표현식과 비슷하지만, 숫자값을 기준으로 문구를 선택하는 것이 아니라 문자열(string) 값을 기준으로 문구를 선택합니다.</p>\n<p>아래 예제는 컴포넌트의 <code>gender</code> 프로퍼티가 컴포넌트 템플릿에 바인딩되어 메시지를 표시하는데, 이 때 프로퍼티의 값은 \"m\", \"f\", \"o\" 중 하나입니다.\n그러면 이 선택자를 사용해서 다음과 같은 표현식을 정의할 수 있습니다:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n\n</code-example>\n<a id=\"nesting-ICUS\"></a>\n<!--\n### Nesting plural and select ICU expressions\n-->\n<h3 id=\"중첩된-복수-표현식과-대체-문구-선택-표현식\">중첩된 복수 표현식과 대체 문구 선택 표현식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#중첩된-복수-표현식과-대체-문구-선택-표현식\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can also nest different ICU expressions together, as shown in this example:\n-->\n<p>서로 다른 ICU 표현식은 아래 예제처럼 동시에 사용할 수도 있습니다:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-nested\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n&#x3C;/span>\n\n</code-example>\n<a id=\"ng-xi18n\"></a>\n<a id=\"ng-xi18n-options\"></a>\n<!--\n## Create a translation source file\n-->\n<h2 id=\"번역-소스-파일-생성하기\">번역 소스 파일 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#번역-소스-파일-생성하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhen your app is ready, you can use the Angular CLI to extract the text messages marked with `i18n` and attributes marked with `i18n-x` into a translation source file.\nOpen a terminal window at the root of the app project and run the CLI command `xi18n`.\n-->\n<p>번역할 텍스트를 모두 체크했으면 이제 Angular CLI를 사용해서 <code>i18n</code>이 지정된 텍스트 메시지와 <code>i18n-x</code>가 지정된 어트리뷰트를 추출해서 번역 소스 파일을 생성할 수 있습니다.\n번역 소스 파일을 생성하려면 터미널 창에서 애플리케이션 최상위 폴더로 이동한 뒤에 Angular CLI <code>xi18n</code> 명령을 실행하면 됩니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng xi18n\n</code-example>\n<!--\nBy default, the command creates a file named `messages.xlf` in your `src/` folder. \n-->\n<p>기본적으로 이 명령을 실행하면 <code>src/</code> 폴더에 <code>messages.xlf</code> 파일을 생성합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nIf you don't use the CLI, you have two options:\n* You can use the `ng-xi18n` tool directly from the `@angular/compiler-cli` package.\nFor more information, see the [`ng xi18n` command documentation](cli/xi18n).\n* You can use the CLI Webpack plugin `AngularCompilerPlugin` from the `@ngtools/webpack` package.\nSet the parameters `i18nOutFile` and `i18nOutFormat` to trigger the extraction.\nFor more information, see the [Angular Ahead-of-Time Webpack Plugin documentation](https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack).\n-->\n<p>Angular CLI를 사용하지 않는 방법이 두 가지 있습니다:</p>\n<ul>\n<li>\n<p>첫번째는 <code>@angular/compiler-cli</code> 패키지에 있는 <code>ng-xi18n</code> 툴을 직접 실행하는 것입니다.\n자세한 내용은 <a href=\"cli/xi18n\"><code>ng xi18n</code> 커맨드 문서</a>를 참고하세요.</p>\n</li>\n<li>\n<p>다른 방법은 <code>@ngtools/webpack</code> 패키지에 있는 <code>AngularCompilerPlugin</code> Angular CLI Webpack 플러그인을 사용하는 것입니다.\n이 플러그인을 사용하려면 <code>i18nOutFile</code>과 <code>i18nOutFormat</code>을 명시적으로 지정해야 합니다.\n자세한 내용은 <a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\">Angular Ahead-of-Time Webpack Plugin 문서</a>를 참고하세요.</p>\n</li>\n</ul>\n</div>\n<a id=\"other-formats\"></a>\n<!--\n### Output options\n-->\n<h3 id=\"추출-옵션\">추출 옵션<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#추출-옵션\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can supply command options to change the format, the name, the location, and the source locale of the extracted file. \nFor example, to create a file in the `src/locale` folder, specify the output path:\n-->\n<p>추출 파일의 형식, 이름, 위치, 언어를 변경하려면 <code>xi18n</code> 명령을 실행하면서 옵션을 지정하면 됩니다.\n예를 들어 번역 소스 파일을 <code>src/<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a></code> 폴더에 생성하려면 다음과 같이 지정하면 됩니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng xi18n --output-path src/<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a>\n</code-example>\n<!--\nBy default, the `xi18n` command generates a translation file named `messages.xlf` in the\n<a href=\"https://en.wikipedia.org/wiki/XLIFF\">XML Localization Interchange File Format\n(XLIFF, version 1.2)</a>.\n\nThe command can read and write files in three translation formats:\n* XLIFF 1.2 (default)\n* XLIFF 2\n* <a href=\"http://cldr.unicode.org/development/development-process/design-proposals/xmb\" >XML Message\nBundle (XMB)</a>\n\nYou can specify the translation format explicitly with the `--i18nFormat` command option, as illustrated in\nthese example commands:\n-->\n<p>기본 옵션으로 <code>xi18n</code> 명령을 실행하면 번역 소스 파일은 <code>messages.xlf</code>라는 이름으로, <a href=\"https://en.wikipedia.org/wiki/XLIFF\">XML Localization Interchange File Format\n(XLIFF, version 1.2)</a> 형식으로 생성됩니다.</p>\n<p>Angular CLI는 다음 세 종류의 번역 형식을 인식할 수 있습니다:</p>\n<ul>\n<li>XLIFF 1.2 (default)</li>\n<li>XLIFF 2</li>\n<li><a href=\"http://cldr.unicode.org/development/development-process/design-proposals/xmb\">XML Message\nBundle (XMB)</a></li>\n</ul>\n<p>번역 소스 파일의 형식을 명시적으로 지정하려면 <code>--i18nFormat</code> 옵션을 사용하면 됩니다.\n세 종류의 형식은 각각 다음과 같이 지정합니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng xi18n  --i18n-format=xlf\nng xi18n  --i18n-format=xlf2\nng xi18n  --i18n-format=xmb\n</code-example>\n<!--\nThe sample in this guide uses the default XLIFF 1.2 format.\n-->\n<p>이 문서에서는 기본값인 XLIFF 1.2 형식으로 생성된 소스 파일을 기준으로 설명합니다.</p>\n<div class=\"alert is-helpful\">\n  <!--\n  XLIFF files have the extension .xlf. The XMB format generates .xmb source files but uses\n  .xtb (XML Translation Bundle: XTB) translation files.\n  -->\n<p>  XLIFF 포맷 파일의 확장자는 .xlf입니다. 그리고 XMB 포맷 파일의 기본 확장자는 .xmb지만 Angular에서는 .xtb (XML Translation Bundle: XTB) 확장자를 사용합니다.</p>\n</div>\n<!--\nYou can change the name of the translation source file that is generated by the extraction tool with\nthe `--outFile` command option:\n-->\n<p>번역 소스 파일의 이름은 <code>--outFile</code> 옵션을 사용하면 변경할 수 있습니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng xi18n --out-file source.xlf\n\n</code-example>\n<!--\nYou can specify the base locale of your app with the`--i18n-locale` command option:\n-->\n<p>그리고 <code>--i18n-locale</code> 옵션을 사용하면 애플리케이션이 사용하는 기본 locale을 지정할 수 있습니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n\n  ng xi18n --i18n-locale fr\n\n</code-example>\n<!--\nThe extraction tool uses the locale to add the app locale information into your translation source\nfile. This information is not used by Angular, but external translation tools may need it.\n-->\n<p>번역 소스 파일을 생성하는 툴은 이렇게 지정한 locale 정보를 앱에 추가하고 번역 소스 파일에도 추가합니다.\n이 정보를 Angular가 직접 사용하지는 않지만 다른 번역 툴을 사용할 때 활용할 수 있습니다.</p>\n<a id=\"translate\"></a>\n<!--\n## Translate the source text\n-->\n<h2 id=\"텍스트-번역하기\">텍스트 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#텍스트-번역하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `ng xi18n` command generates a translation source file named `messages.xlf` in the project `src`\nfolder.\nThe next step is to translate the display strings in this source file into language-specific \ntranslation files. The example in this guide creates a French translation file.\n-->\n<p>기본 옵션으로 <code>ng xi18n</code> 명령을 실행하면 번역 소스 파일 <code>messages.xlf</code>가 프로젝트의 <code>src</code> 폴더에 생성됩니다.\n그러면 이 파일의 내용을 원하는 언어에 맞게 번역하면 됩니다.\n이 문서에서 제공하는 예제에서는 프랑스어로 번역했습니다.</p>\n<a id=\"localization-folder\"></a>\n<!--\n### Create a localization folder\n-->\n<h3 id=\"다국어-폴더-생성하기\">다국어 폴더 생성하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#다국어-폴더-생성하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nMost apps are translated into more than one other language. For this reason, it is standard practice\nfor the project structure to reflect the entire internationalization effort.\n\nOne approach is to dedicate a folder to localization and store related assets, such as\ninternationalization files, there.\n-->\n<p>애플리케이션은 보통 하나 이상의 언어로 번역됩니다.\n그래서 프로젝트 구조는 다국어를 염두에 두고 준비해야 합니다.\n일반적인 방법은 다국어(localization)만을 위한 폴더를 하나 생성하고 이 폴더에 다국어와 관련된 파일(internationalization files)을 모두 모아두는 것입니다.</p>\n<div class=\"alert is-helpful\">\n  <!--\n  Localization and internationalization are\n  <a href=\"https://en.wikipedia.org/wiki/Internationalization_and_localization\">different but\n  closely related terms</a>.\n  -->\n<p>  Localization과 Internationalization이 의미하는 것은 <a href=\"https://en.wikipedia.org/wiki/Internationalization_and_localization\">다르지만, 밀접한 관계가 있습니다.</a></p>\n</div>\n<!--\nThis guide follows that approach. It has a `locale` folder under `src/`.\nAssets within that folder have a filename extension that matches their associated locale.\n-->\n<p>이 문서에서도 이 방식을 따릅니다.\n<code>src/</code> 폴더 밑에 <code><a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a></code> 폴더를 만들고, 이 폴더에 다국어와 관련된 파일을 모두 모아두겠습니다.\n이 때 폴더 안에 있는 파일들은 해당 언어를 가리키는 확장자를 붙이는 것이 좋습니다.</p>\n<!--\n### Create the translation files\n-->\n<h3 id=\"번역-소스-파일-복사하기\">번역 소스 파일 복사하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#번역-소스-파일-복사하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nFor each translation source file, there must be at least one language translation file for the\nresulting translation.\n\nFor this example:\n\n1. Make a copy of the `messages.xlf` file.\n2. Put the copy in the `locale` folder.\n3. Rename the copy to `messages.fr.xlf` for the French language translation.\n\nIf you were translating to other languages, you would repeat these steps for each target language.\n-->\n<p>번역 결과물 파일은 번역 소스 파일마다 최소한 1개 이상 존재해야 합니다.</p>\n<ol>\n<li><code>messages.xlf</code> 파일의 복사본을 만듭니다.</li>\n<li>이 파일을 <code><a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a></code> 폴더로 옮깁니다.</li>\n<li>이 파일을 프랑스어로 번역한다면 파일의 이름을 <code>messages.fr.xlf</code>로 변경합니다.</li>\n</ol>\n<p>이 과정은 번역 소스 파일을 다른 언어로 번역할 때마다 반복해야 합니다.</p>\n<a id=\"translate-text-nodes\"></a>\n<!--\n### Translate text nodes\n-->\n<h3 id=\"텍스트-노드-번역하기\">텍스트 노드 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#텍스트-노드-번역하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn a large translation project, you would send the `messages.fr.xlf` file to a French translator who\nwould enter the translations using an XLIFF file editor.\n\nThis sample file is easy to translate without a special editor or knowledge of French.\n\n1. Open `messages.fr.xlf` and find the first `<trans-unit>` section:\n-->\n<p>번역할 내용이 많다면 <code>messages.fr.xlf</code> 파일을 프랑스어 번역자에게 요청할 수도 있으며, 이 번역자는 XLIFF 파일 에디터로 이 파일을 처리할 수도 있습니다.</p>\n<p>하지만 이 문서에서 다루는 예제 파일의 내용은 그리 많지 않기 때문에 일반 텍스트 에디터를 기준으로 설명하겠습니다.</p>\n<ol>\n<li><code>messages.fr.xlf</code> 파일을 열고 첫번째 <code>&#x3C;trans-unit></code> 섹션을 찾습니다:</li>\n</ol>\n<blockquote>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-hello-before\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Hello i18n!&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\"><a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a> welcome&#x3C;/note>\n&#x3C;/trans-unit>\n\n</code-example>\n</blockquote>\n<!--\n> This XML element represents the translation of the `<h1>` greeting tag that you marked with the\n  `i18n` attribute earlier in this guide.\n\n> Note that the translation unit `id=introductionHeader` is derived from the\n  [custom `id`](#custom-id \"Set a custom id\") that you set earlier, but\n  without the `@@` prefix required in the source HTML.\n-->\n<blockquote>\n<p>이 XML 엘리먼트는 위에서 <code>i18n</code> 어트리뷰트를 지정했던 <code>&#x3C;h1></code> 태그에 해당됩니다.</p>\n<p>위에서 지정했던 <a href=\"guide/i18n#custom-id\" title=\"Set a custom id\">커스텀 <code>id</code></a>가 <code>id=introductionHeader</code>와 같이 지정된 것도 확인해 보세요. 소스 HTML에 붙였던 <code>@@</code> 접두사는 이 파일에 존재하지 않습니다.</p>\n</blockquote>\n<!--\n2. Duplicate the `<source/>` tag, rename it `target`, and then replace its content with the French\n  greeting. If you were working with a more complex translation, you could use the information\n  and context provided by the source, description, and meaning elements to guide your selection of\n  the appropriate French translation.\n\n> <code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-hello\" header=\"src/locale/messages.fr.xlf (&lt;trans-unit&gt;, after translation)\" linenums=\"false\">\n&lt;trans-unit id=&quot;introductionHeader&quot; datatype=&quot;html&quot;&gt;\n  &lt;source&gt;Hello i18n!&lt;/source&gt;\n  &lt;target&gt;Bonjour i18n !&lt;/target&gt;\n  &lt;note priority=&quot;1&quot; from=&quot;description&quot;&gt;An introduction header for this sample&lt;/note&gt;\n  &lt;note priority=&quot;1&quot; from=&quot;meaning&quot;&gt;User welcome&lt;/note&gt;\n&lt;/trans-unit&gt;\n\n</code-example>\n-->\n<ol start=\"2\">\n<li><code>&#x3C;<a href=\"\" class=\"code-anchor\">source</a>/></code> 태그를 복사하고 새로 만든 태그의 이름을 <code><a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a></code>로 변경합니다. 그리고 이 태그 안에 있는 텍스트를 프랑스어로 변경합니다. 번역하려는 문장이 복잡하다면 <code><a href=\"\" class=\"code-anchor\">source</a></code>나 <code>description</code>, <code>meaning</code> 엘리먼트에 있는 내용을 참고하면 됩니다.</li>\n</ol>\n<blockquote>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-hello\" header=\"src/locale/messages.fr.xlf (<trans-unit>, 번역 후)\" linenums=\"false\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Hello i18n!&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Bonjour i18n !&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n  &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\"><a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a> welcome&#x3C;/note>\n&#x3C;/trans-unit>\n\n</code-example>\n</blockquote>\n<!--\n3. Translate the other text nodes the same way:\n-->\n<ol start=\"3\">\n<li>다른 텍스트 노드도 같은 방식으로 번역합니다:</li>\n</ol>\n<blockquote>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-other-nodes\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>I don&#x26;apos;t output any element&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Je n'affiche aucun élément&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Angular logo&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Logo d'Angular&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n</blockquote>\n<div class=\"alert is-important\">\n  <!--\n  **The Angular i18n tools generated the ids for these translation units. Don't change them.**\n  Each `id` depends upon the content of the template text and its assigned meaning.\n  If you change either the text or the meaning, then the `id` changes.\n  For more information, see the **[translation file maintenance discussion](#custom-id)**.\n  -->\n<p>  <strong>Angular i18n 툴로 번역할 문구를 추출하면 번역 단위마다 id가 지정됩니다. 이 id는 변경하지 마세요.</strong>\n이 <code>id</code>는 템플릿에 사용된 텍스트와 의미에 따라 지정된 것입니다.\n그래서 텍스트의 내용이나 의미를 변경하면 <code>id</code>도 변경됩니다.\n자세한 내용은 <strong><a href=\"guide/i18n#custom-id\">번역 파일 관리</a></strong> 섹션을 참고하세요.</p>\n</div>\n<a id=\"translate-plural-select\"></a>\n<!--\n## Translating plural and select expressions\n-->\n<h2 id=\"복수-표현식과-대체문구-번역하기\">복수 표현식과 대체문구 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#복수-표현식과-대체문구-번역하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe _plural_ and _select_ ICU expressions are extracted separately, so they require special attention\nwhen preparing for translation.\n\nLook for these expressions in relation to other translation units that you recognize from\nelsewhere in the source template. In this example, you know the translation unit for the `select`\nmust be just below the translation unit for the logo.\n-->\n<p><em>복수(plural)</em> 표현식과 <em>대체문구 선택(select)</em> ICU 표현식은 별개 번역 단위로 추출됩니다.\n그래서 이 표현식들을 번역할 때는 특히 주의해야 합니다.</p>\n<p>이 표현식들은 소스 템플릿에 존재하는 번역 단위 근처에 생성되기 때문에 금방 찾을 수 있습니다.\n그래서 지금 다루는 예제에서는 로고에 해당하는 번역 단위 바로 밑에 <code>select</code> 번역 단위가 존재합니다.</p>\n<a id=\"translate-plural\"></a>\n<!--\n### Translate _plural_\n-->\n<h3 id=\"복수-표현식-번역하기\"><em>복수 표현식</em> 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#복수-표현식-번역하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo translate a `plural`, translate its ICU format match values:\n-->\n<p>복수 표현식(<code>plural</code>)을 번역하려면 해당 문구를 ICU 포맷에 맞게 다음과 같이 번역해야 합니다:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-plural\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"5a134dee893586d02bffc9611056b9cadf9abfad\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_PLURAL, plural, =0 {à l'instant} =1 {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> une minute} other {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<!--\nYou can add or remove plural cases, with each language having its own cardinality.  (See\n[CLDR plural rules](http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html).)\n-->\n<p>복수 표현식은 번역하려는 언어에 따라 자유롭게 추가되거나 생략할 수 있습니다.\n(<a href=\"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\">CLDR 복수표현식 규칙</a>을 참고하세요.)</p>\n<a id=\"translate-select\"></a>\n<!--\n### Translate _select_\n-->\n<h3 id=\"대체-문구-번역하기\"><em>대체 문구</em> 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#대체-문구-번역하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nBelow is the content of our example `select` ICU expression in the component template:\n-->\n<p>아래 코드는 <code>select</code> ICU 표현식이 사용된 컴포넌트 템플릿의 일부입니다:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" header=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n\n</code-example>\n<!--\nThe extraction tool broke that into two translation units because ICU expressions are extracted\nseparately.\n\nThe first unit contains the text that was outside of the `select`.\nIn place of the `select` is a placeholder, `<x id=\"ICU\">`, that represents the `select` message.\nTranslate the text and move around the placeholder if necessary, but don't remove it. If you remove\nthe placeholder, the ICU expression will not be present in your translated app.\n-->\n<p>이 태그는 2개의 번역 단위로 분리됩니다. 왜냐하면 ICU 표현식에서 전체 문구와 대체 문구는 별개로 표현되기 때문입니다.</p>\n<p>첫번째 번역 단위는 대체 문구 표현식(<code>select</code>) 외부에 있는 텍스트입니다.\n이 번역 단위에서 <code>select</code>가 있던 자리에는 대체 문구를 대신해서 <code>&#x3C;x id=\"ICU\"></code>가 들어갑니다.\n번역을 진행하면서 다른 텍스트는 수정해도 되고 <code>&#x3C;x></code> 태그의 위치를 옮겨도 되지만, 이 태그를 제거하면 안됩니다.\n이 태그를 제거하면 ICU 표현식의 내용이 화면에 표시되지 않습니다.</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-select-1\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"f99f34ac9bd4606345071bd813858dec29f3b7d1\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>The author is &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>L'auteur est &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<!--\nThe second translation unit, immediately below the first one, contains the `select` message.\nTranslate that as well.\n-->\n<p>두번째 번역 단위는 첫번째 번역 단위 바로 밑에 존재하는데, 이 번역 단위에는 대체 표현식 안에 있는 메시지가 들어있습니다.\n이 문장도 해당 언어에 맞게 번역하면 됩니다.</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-select-2\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"eff74b75ab7364b6fa888f1cbfae901aaaf02295\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_SELECT, select, male {male} female {female} other {other} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<!--\nHere they are together, after translation:\n-->\n<p>이 작업을 끝내면 다음과 같은 내용이 됩니다:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translated-select\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"f99f34ac9bd4606345071bd813858dec29f3b7d1\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>The author is &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>L'auteur est &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"eff74b75ab7364b6fa888f1cbfae901aaaf02295\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_SELECT, select, male {male} female {female} other {other} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<a id=\"translate-nested\"></a>\n<!--\n### Translate a nested expression\n-->\n<h3 id=\"중첩된-표현식-번역하기\">중첩된 표현식 번역하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#중첩된-표현식-번역하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nA nested expression is similar to the previous examples. As in the previous example, there are\ntwo translation units. The first one contains the text outside of the nested expression:\n-->\n<p>중첩된 표현식도 지금까지 살펴봤던 예제와 비슷합니다.\n이전 예제와 마찬가지로, 중첩된 표현식도 여러개의 번역 단위로 분리됩니다.\n첫번째 번역 단위에는 중첩된 표현식 밖에 있는 텍스트가 존재합니다:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-nested-1\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"972cb0cf3e442f7b1c00d7dab168ac08d6bdf20c\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Updated: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Mis à jour: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<!--\nThe second unit contains the complete nested expression:\n-->\n<p>그리고 두번째 번역 단위에는 중첩된 표현식의 내용이 들어갑니다:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-nested-2\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"7151c2e67748b726f0864fc443861d45df21d706\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} }} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_PLURAL, plural, =0 {à l'instant} =1 {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> une minute} other {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} }} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<!--\nAnd both together:\n-->\n<p>두 번역 단위를 모두 번역하고 나면 파일의 내용은 다음과 같이 됩니다:</p>\n<code-example path=\"i18n/doc-files/messages.fr.xlf.html\" region=\"translate-nested\" header=\"src/locale/messages.fr.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"972cb0cf3e442f7b1c00d7dab168ac08d6bdf20c\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Updated: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Mis à jour: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"7151c2e67748b726f0864fc443861d45df21d706\" datatype=\"html\">\n  &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} }} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n  &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_PLURAL, plural, =0 {à l'instant} =1 {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> une minute} other {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} }} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n&#x3C;/trans-unit>\n\n</code-example>\n<!--\nThe entire template translation is complete. The next section describes how to load that translation\ninto the app.\n-->\n<p>이제 템플릿 번역은 끝났습니다.\n다음 섹션에서는 이렇게 만든 번역 파일을 애플리케이션에 어떻게 적용할 수 있는지 알아봅시다.</p>\n<a id=\"app-pre-translation\"></a>\n<!--\n### The app and its translation file\n-->\n<h3 id=\"번역-결과물\">번역 결과물<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#번역-결과물\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe sample app and its translation file are now as follows:\n-->\n<p>이제 예제 애플리케이션과 번역 파일의 내용은 다음과 같습니다:</p>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\">\n&#x3C;h1 i18n=\"<a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a> welcome|An introduction header for this sample@@introductionHeader\">\n  Hello i18n!\n&#x3C;/h1>\n\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n&#x3C;br />\n\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n&#x3C;br>\n&#x3C;button (click)=\"inc(1)\">+&#x3C;/button> &#x3C;button (click)=\"inc(-1)\">-&#x3C;/button>\n&#x3C;span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}&#x3C;/span>\n({{minutes}})\n&#x3C;br>&#x3C;br>\n&#x3C;button (click)=\"male()\">&#x26;#9794;&#x3C;/button> &#x3C;button (click)=\"female()\">&#x26;#9792;&#x3C;/button> &#x3C;button (click)=\"other()\">&#x26;#9895;&#x3C;/button>\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n&#x3C;br>&#x3C;br>\n&#x3C;span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n&#x3C;/span>\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.ts\" path=\"i18n/src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  minutes = 0;\n  gender = 'female';\n  fly = true;\n  logo = 'https://angular.io/assets/images/logos/angular/angular.png';\n  heroes: string[] = ['Magneta', 'Celeritas', 'Dynama'];\n  inc(i: number) {\n    this.minutes = Math.min(5, Math.max(0, this.minutes + i));\n  }\n  male() { this.gender = 'male'; }\n  female() { this.gender = 'female'; }\n  other() { this.gender = 'other'; }\n}\n\n\n\n</code-pane>\n  <code-pane header=\"src/app/app.module.ts\" path=\"i18n/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane header=\"src/main.ts\" path=\"i18n/doc-files/main.1.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane header=\"src/locale/messages.fr.xlf\" path=\"i18n/doc-files/messages.fr.xlf.html\">\n&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&#x3C;xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:<a href=\"api/platform-server/PlatformConfig#document\" class=\"code-anchor\">document</a>:1.2\">\n  &#x3C;file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\">\n    &#x3C;body>\n      &#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Hello i18n!&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n        &#x3C;note priority=\"1\" from=\"meaning\"><a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a> welcome&#x3C;/note>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Hello i18n!&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Bonjour i18n !&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n        &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n        &#x3C;note priority=\"1\" from=\"meaning\"><a href=\"api/common/http/HttpEventType#User\" class=\"code-anchor\">User</a> welcome&#x3C;/note>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>I don&#x26;apos;t output any element&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Je n'affiche aucun élément&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Angular logo&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Logo d'Angular&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"5a134dee893586d02bffc9611056b9cadf9abfad\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_PLURAL, plural, =0 {à l'instant} =1 {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> une minute} other {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"f99f34ac9bd4606345071bd813858dec29f3b7d1\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>The author is &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>L'auteur est &#x3C;x id=\"ICU\" equiv-text=\"{gender, select, male {...} female {...} other {...}}\"/>&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"eff74b75ab7364b6fa888f1cbfae901aaaf02295\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_SELECT, select, male {male} female {female} other {other} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_SELECT, select, male {un homme} female {une femme} other {autre} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"972cb0cf3e442f7b1c00d7dab168ac08d6bdf20c\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>Updated: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>Mis à jour: &#x3C;x id=\"ICU\" equiv-text=\"{minutes, plural, =0 {...} =1 {...} other {...}}\"/>&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"7151c2e67748b726f0864fc443861d45df21d706\" datatype=\"html\">\n        &#x3C;<a href=\"\" class=\"code-anchor\">source</a>>{VAR_PLURAL, plural, =0 {just now} =1 {one minute ago} other {&#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes ago by {VAR_SELECT, select, male {male} female {female} other {other} }} }&#x3C;/<a href=\"\" class=\"code-anchor\">source</a>>\n        &#x3C;<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>{VAR_PLURAL, plural, =0 {à l'instant} =1 {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> une minute} other {il y <a href=\"api/router/RouterLinkWithHref\" class=\"code-anchor\">a</a> &#x3C;x id=\"INTERPOLATION\" equiv-text=\"{{minutes}}\"/> minutes par {VAR_SELECT, select, male {un homme} female {une femme} other {autre} }} }&#x3C;/<a href=\"api/router/RouterLinkWithHref#target\" class=\"code-anchor\">target</a>>\n      &#x3C;/trans-unit>\n    &#x3C;/body>\n  &#x3C;/file>\n&#x3C;/xliff>\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"merge\"></a>\n<!--\n## Merge the completed translation file into the app\n-->\n<h2 id=\"번역한-내용을-앱에-반영하기\">번역한 내용을 앱에 반영하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#번역한-내용을-앱에-반영하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo merge the translated text into component templates, compile the app with the completed\ntranslation file.\n\n Provide the Angular compiler with three translation-specific pieces of information:\n\n  * The translation file.\n  * The translation file format.\n  * The locale (`fr` or `en-US` for instance).\n\nThe compilation process is the same whether the translation file is in `.xlf` format or in another\nformat that Angular understands, such as `.xtb`.\n\nHow you provide this information depends upon whether you compile with\nthe JIT compiler or the AOT compiler.\n\n  * With [AOT](guide/i18n#merge-aot), you pass the information as configuration settings.\n  * With [JIT](guide/i18n#merge-jit), you provide the information at bootstrap time.\n-->\n<p>번역한 텍스트를 컴포넌트 템플릿에 반영하려면 애플리케이션을 컴파일하면서 해당 번역 파일을 지정하면 됩니다.</p>\n<p>그러면 Angular 컴파일러가 다음 3개의 정보를 활용해서 애플리케이션을 컴파일합니다:</p>\n<ul>\n<li>번역 결과물 파일</li>\n<li>번역 파일의 형식</li>\n<li>locale (ex. <code>fr</code>, <code>en-US</code>)</li>\n</ul>\n<p>번역 결과물 파일은 파일은 Angular가 처리할 수 있는 형식이면 어떤 것이든 가능합니다. <code>.xlf</code> 형식이어도 되고 <code>.xtb</code> 형식이어도 됩니다.</p>\n<p>그런데 이 정보를 활용해서 애플리케이션을 빌드할 때 어떤 컴파일러를 사용하는지에 따라 설정방법이 조금 다릅니다.</p>\n<ul>\n<li><a href=\"guide/i18n#merge-aot\">AOT</a> 컴파일러를 사용하는 경우에는 빌드 환경설정에 이 정보를 지정합니다.</li>\n<li><a href=\"guide/i18n#merge-jit\">JIT</a> 컴파일러를 사용하는 경우에는 애플리케이션을 부트스트랩하는 시점에 이 정보를 지정합니다.</li>\n</ul>\n<a id=\"merge-aot\"></a>\n<!--\n### Merge with the AOT compiler\n-->\n<h3 id=\"aot-컴파일러를-사용하는-경우\">AOT 컴파일러를 사용하는 경우<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#aot-컴파일러를-사용하는-경우\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe [AOT compiler](guide/glossary#aot) is part of a build process that produces a small, fast,\nready-to-run application package, typically for production.\n\nWhen you internationalize with the AOT compiler, you must pre-build a separate application\npackage for each language and serve the appropriate package based on either server-side language\ndetection or url parameters.\n\nTo instruct the AOT compiler to use your translation configuration, set the three \"i18n\" build configuration options in your `angular.json` file.\n\n* `i18nFile`: the path to the translation file.\n* `i18nFormat`: the format of the translation file.\n* `i18nLocale`: the locale id.\n\nYou should also direct the output to a locale-specific folder to keep it separate from other locale versions of your app, by setting the `outputPath` configuration option.\n-->\n<p><a href=\"guide/glossary#aot\">AOT 컴파일러</a>는 애플리케이션을 작고, 빠르며, 바로 실행할 수 있는 패키지 형태로 빌드하는 툴입니다. 주로 운영용으로 사용됩니다.</p>\n<p>AOT 컴파일러를 사용하는 환경에서 다국어 작업을 하고 있다면, 다국어마다 애플리케이션을 빌드하고 서버에서 언어를 감지하거나 url 주소로 애플리케이션을 어떤 언어로 제공할 것인지 결정해야 합니다.</p>\n<p>AOT 컴파일러를 실행할 때 번역 결과물 파일을 반영하려면 <code>angular.json</code> 파일의 빌드 옵션에 \"i18n\"로 시작하는 3개의 설정을 추가하면 됩니다.</p>\n<ul>\n<li><code>i18nFile</code>: 번역 결과물 파일의 위치</li>\n<li><code>i18nFormat</code>: 번역 파일의 형식</li>\n<li><code>i18nLocale</code>: locale id</li>\n</ul>\n<p>그리고 이 설정으로 애플리케이션을 빌드하면서 해당 locale에 해당하는 폴더에 빌드 결과물을 생성하려면 <code>outputPath</code> 옵션을 추가로 지정하면 됩니다.</p>\n<code-example>\n\"build\": {\n  ...\n  \"configurations\": {\n    ...\n    \"fr\": {\n      \"aot\": true,\n      \"outputPath\": \"dist/my-project-fr/\",\n      \"i18nFile\": \"src/<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a>/messages.fr.xlf\",\n      \"i18nFormat\": \"xlf\",\n      \"i18nLocale\": \"fr\",\n      ...\n    }\n  }\n},\n\"serve\": {\n  ...\n  \"configurations\": {\n    ...\n    \"fr\": {\n      \"browserTarget\": \"*project-name*:build:fr\"\n    }\n  }\n}\n</code-example>\n<!--\nYou can then pass this configuration to the `ng serve` or `ng build` commands.\nThe example below shows how to serve the French language file created in previous\nsections of this guide:\n-->\n<p>이 환경 설정은 <code>ng serve</code>나 <code>ng build</code> 명령을 실행할 때 적용할 수 있습니다.\n그래서 위와 같이 구성된 환경설정 파일을 바탕으로 애플리케이션을 프랑스어로 빌드하려면 다음 명령을 실행하면 됩니다:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng serve --configuration=fr\n</code-example>\n<!--\nFor production builds, you define a separate `production-fr` build configuration in\nthe CLI configuration file, `angular.json`.\n-->\n<p>그리고 운영용 빌드 설정을 추가로 지정하려면 <code>angular.json</code> 파일에 <code>production-fr</code> 빌드 옵션을 추가하면 됩니다.</p>\n<code-example>\n...\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:<a href=\"api/animations/browser\" class=\"code-anchor\">browser</a>\",\n    \"options\": { ... },\n    \"configurations\": {\n      \"fr\": {\n        \"aot\": true,\n        \"outputPath\": \"dist/my-project-fr/\",\n        \"i18nFile\": \"src/<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a>/messages.fr.xlf\",\n        \"i18nFormat\": \"xlf\",\n        \"i18nLocale\": \"fr\",\n        \"i18nMissingTranslation\": \"error\",\n      }\n// ...\n\"serve\": {\n  \"builder\": \"@angular-devkit/build-angular:dev-server\",\n  \"options\": {\n    \"browserTarget\": \"my-project:build\"\n  },\n  \"configurations\": {\n    \"production\": {\n      \"browserTarget\": \"my-project:build:production\"\n    },\n    \"fr\": {\n      \"browserTarget\": \"my-project:build:fr\"\n    }\n  }\n},\n</code-example>\n<!--\nThe same configuration options can also be provided through the CLI with your existing `production` configuration.\n-->\n<p>이 환경 설정 옵션은 Angular CLI 명령을 직접 실행하면서도 적용할 수 있습니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng build --prod --i18n-file src/<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a>/messages.fr.xlf --i18n-format xlf --i18n-locale fr\n</code-example>\n<a id=\"merge-jit\"></a>\n<!--\n### Merge with the JIT compiler\n-->\n<h3 id=\"jit-컴파일러를-사용하는-경우\">JIT 컴파일러를 사용하는 경우<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#jit-컴파일러를-사용하는-경우\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe [JITcompiler](guide/glossary#jit) compiles your app in the browser as the app loads.\nTo support translation with the JIT compiler, you must do the following:\n\n1. Import the appropriate language translation file as a string constant.\n2. Create corresponding translation providers for the JIT compiler.\n3. Bootstrap the app with those providers.\n\nThree providers tell the JIT compiler how to translate the template texts for a particular language\nwhile compiling the app:\n\n* `TRANSLATIONS` is a string containing the content of the translation file.\n* `TRANSLATIONS_FORMAT` is the format of the file: `xlf`, `xlf2`, or `xtb`.\n* `LOCALE_ID` is the locale of the target language.\n\nThe Angular `bootstrapModule` method has a second `compilerOptions` parameter that can influence the\nbehavior of the compiler. You can use it to specify the translation providers:\n-->\n<p><a href=\"guide/glossary#jit\">JIT 컴파일러</a>는 애플리케이션을 브라우저에 로드할 때 컴파일합니다.\n그래서 JIT 컴파일러를 사용하는 환경에서는 다음 과정을 거쳐 다국어를 반영합니다:</p>\n<ol>\n<li>문자열 상수로 원하는 언어의 번역 결과물 파일을 로드합니다.</li>\n<li>해당 언어에 해당하는 프로바이더를 선언하고 JIT 컴파일러에 등록합니다.</li>\n<li>이 프로바이더를 사용해서 애플리케이션을 부트스트랩합니다.</li>\n</ol>\n<p>템플릿에 있는 텍스트를 원하는 언어로 변경하려면 프로바이더 3개를 JIT 컴파일러에 등록해야 합니다.</p>\n<ul>\n<li>번역 결과물 파일의 내용은 <code><a href=\"api/core/TRANSLATIONS\" class=\"code-anchor\">TRANSLATIONS</a></code> 토큰으로 등록합니다.</li>\n<li>번역 파일의 형식(<code>xlf</code>, <code>xlf2</code>, <code>xtb</code>)은 <code><a href=\"api/core/TRANSLATIONS_FORMAT\" class=\"code-anchor\">TRANSLATIONS_FORMAT</a></code> 토큰으로 등록합니다.</li>\n<li>적용하려는 언어는 <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code> 토큰으로 등록합니다.</li>\n</ul>\n<p><code>bootstrapModule</code> 메소드의 두번째 인자로 <code>compileOptions</code>을 지정하면 JIT 컴파일러의 동작을 변경할 수 있습니다.\n<code><a href=\"api/core/TRANSLATIONS\" class=\"code-anchor\">TRANSLATIONS</a></code> 프로바이더와 <code><a href=\"api/core/TRANSLATIONS_FORMAT\" class=\"code-anchor\">TRANSLATIONS_FORMAT</a></code> 프로바이더는 이 옵션으로 지정합니다:</p>\n<code-example path=\"i18n/doc-files/main.2.ts\" header=\"src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>, <a href=\"api/core/TRANSLATIONS\" class=\"code-anchor\">TRANSLATIONS</a>, <a href=\"api/core/TRANSLATIONS_FORMAT\" class=\"code-anchor\">TRANSLATIONS_FORMAT</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n// webpack에 사용할 require 메소드를 선언합니다.\ndeclare const require;\n// webpack raw-loader를 사용해서 파일의 내용을 문자열로 읽어옵니다.\nconst translations = require(`raw-loader!./<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a>/messages.fr.xlf`);\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule, {\n  providers: [\n    {provide: <a href=\"api/core/TRANSLATIONS\" class=\"code-anchor\">TRANSLATIONS</a>, useValue: translations},\n    {provide: <a href=\"api/core/TRANSLATIONS_FORMAT\" class=\"code-anchor\">TRANSLATIONS_FORMAT</a>, useValue: 'xlf'}\n  ]\n});\n\n\n</code-example>\n<!--\nThen provide the `LOCALE_ID` in the main module:\n-->\n<p>그리고 <code><a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a></code> 프로바이더는 메인 모듈에 등록합니다:</p>\n<code-example path=\"i18n/doc-files/app.module.ts\" header=\"src/app/app.module.ts\" linenums=\"false\">\nimport { <a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a>, <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> } from '@angular/platform-browser';\n\nimport { AppComponent } from '../src/app/app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [ <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> ],\n  declarations: [ AppComponent ],\n  providers: [ { provide: <a href=\"api/core/LOCALE_ID\" class=\"code-anchor\">LOCALE_ID</a>, useValue: 'fr' } ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<a id=\"missing-translation\"></a>\n<!--\n### Report missing translations\n-->\n<h3 id=\"번역이-누락되면-경고하기\">번역이 누락되면 경고하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#번역이-누락되면-경고하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nBy default, when a translation is missing, the build succeeds but generates a warning such as\n`Missing translation for message \"foo\"`. You can configure the level of warning that is generated by\nthe Angular compiler:\n\n* Error: throw an error. If you are using AOT compilation, the build will fail. If you are using JIT\ncompilation, the app will fail to load.\n* Warning (default): show a 'Missing translation' warning in the console or shell.\n* Ignore: do nothing.\n\nYou specify the warning level in the `configurations` section your Angular CLI build configuration. The example below shows how to set the warning level to error:\n-->\n<p>기본적으로 번역 문구 중에 누락된 것이 있으면 <code>Missing translation for <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> \"foo\"</code>라는 경고 메시지가 표시되지만 애플리케이션 빌드는 성공합니다.\n이 경고 메시지의 레벨은 다음 항목으로 변경할 수 있습니다:</p>\n<ul>\n<li>Error: 에러를 발생시킵니다. AOT 컴파일러를 사용한다면 빌드 자체를 실패한 것으로 처리합니다. JIT 컴파일러를 사용한다면 애플리케이션 로드가 실패합니다.</li>\n<li>Warning (기본값): 콘솔이나 셸에 <code>Missing translation</code> 경고 메시지를 표시합니다.</li>\n<li>Ignore: 아무것도 하지 않습니다.</li>\n</ul>\n<p>경고 메시지의 레벨은 Angular CLI 빌드 설정의 <code>configurations</code> 섹션에 설정합니다.\n예를 들어 경고 레벨을 <code><a href=\"api/core/MissingTranslationStrategy#Error\" class=\"code-anchor\">Error</a></code>로 변경하려면 다음과 같이 지정하면 됩니다:</p>\n<code-example>\n\"configurations\": {\n  ...\n  \"fr\": {\n    ...\n    \"i18nMissingTranslation\": \"error\"\n  }\n}\n</code-example>\n<!--\nIf you use the JIT compiler, specify the warning level in the compiler config at bootstrap by adding\nthe 'MissingTranslationStrategy' property. The example below shows how to set the warning level to\nerror:\n-->\n<p>JIT 컴파일러를 사용하는 경우에는 애플리케이션을 빌드할 때 컴파일러 설정 객체에 <code>missingTranslation</code> 프로퍼티를 추가하면 됩니다.\n위와 마찬가지로 경고 레벨을 <code><a href=\"api/core/MissingTranslationStrategy#Error\" class=\"code-anchor\">Error</a></code>로 변경하려면 다음과 같이 지정하면 됩니다:</p>\n<code-example path=\"i18n/doc-files/main.3.ts\" header=\"src/main.ts\">\nimport { <a href=\"api/core/MissingTranslationStrategy\" class=\"code-anchor\">MissingTranslationStrategy</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\n// ...\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule, {\n  missingTranslation: <a href=\"api/core/MissingTranslationStrategy#Error\" class=\"code-anchor\">MissingTranslationStrategy.Error</a>,\n  providers: [\n    // ...\n  ]\n});\n\n\n</code-example>\n<!--\n### Build for multiple locales\n-->\n<h3 id=\"다국어-설정으로-앱-빌드하기\">다국어 설정으로 앱 빌드하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#다국어-설정으로-앱-빌드하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen you use the CLI `build` or `serve` command to build your application for different locales, change the output path using the `--outputPath` command option (along with the i18n-specific command options), so that the translation files are saved to different locations.\nWhen you are serving a locale-specific version from a subdirectory, you can also change the base URL used by your app by specifying the `--baseHref` option.\n\nFor example, if the French version of your application is served from https://myapp.com/fr/, configure the build for the French version as follows.\n-->\n<p>Angular CLI로 <code>build</code>나 <code>serve</code> 명령을 실행하면 한 번에 한 locale 설정으로 애플리케이션을 빌드할 수 있으며, <code>--outputPath</code> 옵션을 사용하면 빌드 결과물이 어느 위치에 생성될지 지정할 수 있습니다.\n이 때 locale이 설정된 상태로 애플리케이션을 서브 폴더에 빌드하면, <code>--baseHref</code> 옵션을 사용해서 기준(base) URL을 변경해야할 수도 있습니다.</p>\n<p>예를 들어 애플리케이션의 프랑스어 버전이 <a href=\"https://myapp.com/fr/\">https://myapp.com/fr/</a> 주소로 제공된다고 합시다.\n그러면 이 버전으로 빌드할 때 다음과 같은 옵션을 사용할 수 있습니다:</p>\n<code-example>\n\"configurations\": {\n  \"fr\": {\n    \"aot\": true,\n    \"outputPath\": \"dist/my-project-fr/\",\n    \"baseHref\": \"/fr/\",\n    \"i18nFile\": \"src/<a href=\"api/common/NgLocaleLocalization#locale\" class=\"code-anchor\">locale</a>/messages.fr.xlf\",\n    \"i18nFormat\": \"xlf\",\n    \"i18nLocale\": \"fr\",\n    \"i18nMissingTranslation\": \"error\",\n  }\n</code-example>\n<!--\nFor more details about how to create scripts to generate an app in multiple languages and how to set up Apache 2 to serve them from different subdirectories, read [this tutorial by Philippe Martin](https://medium.com/@feloy/deploying-an-i18n-angular-app-with-angular-cli-fc788f17e358#.1xq4iy6fp).\n-->\n<p>애플리케이션을 여러 언어로 빌드하고 Apache 2에서 이 빌드 결과물들을 제공하는 방법에 대해 자세하게 알아보려면 <a href=\"https://medium.com/@feloy/deploying-an-i18n-angular-app-with-angular-cli-fc788f17e358#.1xq4iy6fp\">Philippe Martin이 작성한 이 튜토리얼</a>을 참고하세요.</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/PercentPipe\n - api/common/getLocaleExtraDayPeriodRules\n - api/common/getLocaleExtraDayPeriods\n - api/common/registerLocaleData\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - guide/architecture-next-steps\n - guide/workspace-config\n-->\n<!-- links from this doc:\n - api/animations/browser\n - api/animations/state\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/DecimalPipe\n - api/common/NgLocaleLocalization#locale\n - api/common/PercentPipe\n - api/common/http/HttpErrorResponse#message\n - api/common/http/HttpEventType#User\n - api/common/registerLocaleData\n - api/core/Component\n - api/core/LOCALE_ID\n - api/core/MissingTranslationStrategy\n - api/core/MissingTranslationStrategy#Error\n - api/core/NgModule\n - api/core/TRANSLATIONS\n - api/core/TRANSLATIONS_FORMAT\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - api/platform-server/PlatformConfig#document\n - api/router/RouterLinkWithHref\n - api/router/RouterLinkWithHref#target\n - cli\n - cli/xi18n\n - guide/glossary#aot\n - guide/glossary#jit\n - guide/i18n#angular와-i18n\n - guide/i18n#aot-컴파일러를-사용하는-경우\n - guide/i18n#custom-id\n - guide/i18n#i18n-어트리뷰트로-번역대상-지정하기\n - guide/i18n#i18n-파이프\n - guide/i18n#internationalization-i18n\n - guide/i18n#jit-컴파일러를-사용하는-경우\n - guide/i18n#locale-환경설정\n - guide/i18n#merge-aot\n - guide/i18n#merge-jit\n - guide/i18n#다국어-설정으로-앱-빌드하기\n - guide/i18n#다국어-폴더-생성하기\n - guide/i18n#대체-문구-번역하기\n - guide/i18n#대체-문구-중에서-선택하기\n - guide/i18n#문장의-의미-추가하기\n - guide/i18n#번역-결과물\n - guide/i18n#번역-소스-파일-복사하기\n - guide/i18n#번역-소스-파일-생성하기\n - guide/i18n#번역이-누락되면-경고하기\n - guide/i18n#번역한-내용을-앱에-반영하기\n - guide/i18n#복수-표현식-번역하기\n - guide/i18n#복수-표현식과-대체문구-번역하기\n - guide/i18n#복수형-문법pluralization\n - guide/i18n#설명과-커스텀-id-함께-사용하기\n - guide/i18n#어트리뷰트-번역하기\n - guide/i18n#엘리먼트를-사용하지-않은-텍스트-번역하기\n - guide/i18n#유지관리를-위해-커스텀-id-지정하기\n - guide/i18n#정규-표현식으로-복수형과-선택지-정의하기\n - guide/i18n#중첩된-복수-표현식과-대체-문구-선택-표현식\n - guide/i18n#중첩된-표현식-번역하기\n - guide/i18n#추출-옵션\n - guide/i18n#커스텀-id는-유일한-값으로-지정하세요\n - guide/i18n#텍스트-노드-번역하기\n - guide/i18n#텍스트-번역하기\n - guide/i18n#템플릿-번역\n - http://cldr.unicode.org/\n - http://cldr.unicode.org/core-spec#Unicode_Language_and_Locale_Identifiers\n - http://cldr.unicode.org/development/development-process/design-proposals/xmb\n - http://cldr.unicode.org/index/cldr-spec/plural-rules\n - http://userguide.icu-project.org/formatparse/messages\n - http://www.rfc-editor.org/rfc/bcp/bcp47.txt\n - http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html\n - https://en.wikipedia.org/wiki/Internationalization_and_localization\n - https://en.wikipedia.org/wiki/XLIFF\n - https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\n - https://github.com/angular/angular/edit/master/aio/content/guide/i18n.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/angular/tree/master/packages/common/locales\n - https://medium.com/@feloy/deploying-an-i18n-angular-app-with-angular-cli-fc788f17e358#.1xq4iy6fp\n - https://myapp.com/fr/\n-->"
}