{
  "id": "guide/template-expression-operators",
  "title": "Template expression operators",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-expression-operators.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!-- <a id=\"expression-operators\"></a> -->\n<h1 id=\"template-expression-operators\">Template expression operators<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#template-expression-operators\"><i class=\"material-icons\">link</i></a></h1>\n<p>The Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios. The next sections cover three of these operators:</p>\n<ul>\n<li><a href=\"guide/template-expression-operators#pipe\">pipe</a></li>\n<li><a href=\"guide/template-expression-operators#safe-navigation-operator\">safe navigation operator</a></li>\n<li><a href=\"guide/template-expression-operators#non-null-assertion-operator\">non-null assertion operator</a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<a id=\"pipe\"></a>\n<h2 id=\"the-pipe-operator-\">The pipe operator (<code>|</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-pipe-operator-\"><i class=\"material-icons\">link</i></a></h2>\n<p>The result of an expression might require some transformation before you're ready to use it in a binding.\nFor example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.</p>\n<p>Pipes are simple functions that accept an input value and return a transformed value.\nThey're easy to apply within template expressions, using the pipe operator (<code>|</code>):</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"uppercase-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through uppercase pipe: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/p>\n\n</code-example>\n<p>The pipe operator passes the result of an expression on the left to a pipe function on the right.</p>\n<p>You can chain expressions through multiple pipes:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"pipe-chain\" header=\"src/app/app.component.html\">\n&#x3C;!-- title 을 대문자로 변경한 후에 소문자로 변경합니다. -->\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through a pipe chain: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/p>\n\n</code-example>\n<p>And you can also <a href=\"guide/pipes#parameterizing-a-pipe\">apply parameters</a> to a pipe:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"date-pipe\" header=\"src/app/app.component.html\">\n&#x3C;!-- 파이프에 인자 사용하기 => \"February 25, 1980\" -->\n&#x3C;p>Manufacture date with date format pipe: {{item.manufactureDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'longDate'}}&#x3C;/p>\n\n</code-example>\n<p>The <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> pipe is particularly helpful for debugging bindings:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"json-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p>Item json pipe: {{item | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/p>\n\n</code-example>\n<p>The generated output would look something like this:</p>\n<code-example language=\"json\">\n  { \"name\": \"Telephone\",\n    \"manufactureDate\": \"1980-02-25T05:00:00.000Z\",\n    \"price\": 98 }\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The pipe operator has a higher precedence than the ternary operator (<code>?:</code>),\nwhich means <code>a ? b : c | x</code> is parsed as <code>a ? b : (c | x)</code>.\nNevertheless, for a number of reasons,\nthe pipe operator cannot be used without parentheses in the first and second operands of <code>?:</code>.\nA good practice is to use parentheses in the third operand too.</p>\n</div>\n<hr>\n<a id=\"safe-navigation-operator\"></a>\n<h2 id=\"the-safe-navigation-operator----and-null-property-paths\">The safe navigation operator ( <code>?</code> ) and null property paths<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-safe-navigation-operator----and-null-property-paths\"><i class=\"material-icons\">link</i></a></h2>\n<p>The Angular safe navigation operator, <code>?</code>, guards against <code>null</code> and <code>undefined</code>\nvalues in property paths. Here, it protects against a view render failure if <code>item</code> is <code>null</code>.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"safe\" header=\"src/app/app.component.html\">\n&#x3C;p>The item name is: {{item?.name}}&#x3C;/p>\n\n</code-example>\n<p>If <code>item</code> is <code>null</code>, the view still renders but the displayed value is blank; you see only \"The item name is:\" with nothing after it.</p>\n<p>Consider the next example, with a <code>nullItem</code>.</p>\n<code-example language=\"html\">\n  The null item name is {{nullItem.name}}\n</code-example>\n<p>Since there is no safe navigation operator and <code>nullItem</code> is <code>null</code>, JavaScript and Angular would throw a <code>null</code> reference error and break the rendering process of Angular:</p>\n<code-example language=\"bash\">\n  TypeError: Cannot read property 'name' of null.\n</code-example>\n<p>Sometimes however, <code>null</code> values in the property\npath may be OK under certain circumstances,\nespecially when the value starts out null but the data arrives eventually.</p>\n<p>With the safe navigation operator, <code>?</code>, Angular stops evaluating the expression when it hits the first <code>null</code> value and renders the view without errors.</p>\n<p>It works perfectly with long property paths such as <code>a?.b?.c?.d</code>.</p>\n<hr>\n<a id=\"non-null-assertion-operator\"></a>\n<h2 id=\"the-non-null-assertion-operator---\">The non-null assertion operator ( <code>!</code> )<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a></h2>\n<p>As of Typescript 2.0, you can enforce <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">strict null checking</a> with the <code>--strictNullChecks</code> flag. TypeScript then ensures that no variable is unintentionally <code>null</code> or <code>undefined</code>.</p>\n<p>In this mode, typed variables disallow <code>null</code> and <code>undefined</code> by default. The type checker throws an error if you leave a variable unassigned or try to assign <code>null</code> or <code>undefined</code> to a variable whose type disallows <code>null</code> and <code>undefined</code>.</p>\n<p>The type checker also throws an error if it can't determine whether a variable will be <code>null</code> or <code>undefined</code> at runtime. You tell the type checker not to throw an error by applying the postfix\n<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"Non-null assertion operator\">non-null assertion operator, !</a>.</p>\n<p>The Angular non-null assertion operator, <code>!</code>, serves the same purpose in\nan Angular template. For example, you can assert that <code>item</code> properties are also defined.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&#x3C;!-- color 값이 없어도 에러가 발생하지 않습니다. -->\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item\">The item's color is: {{item!.color}}&#x3C;/p>\n\n</code-example>\n<p>When the Angular compiler turns your template into TypeScript code,\nit prevents TypeScript from reporting that <code>item.color</code> might be <code>null</code> or <code>undefined</code>.</p>\n<p>Unlike the <a href=\"guide/template-expression-operators#safe-navigation-operator\" title=\"Safe navigation operator (?)\"><em>safe navigation operator</em></a>,\nthe non-null assertion operator does not guard against <code>null</code> or <code>undefined</code>.\nRather, it tells the TypeScript type checker to suspend strict <code>null</code> checks for a specific property expression.</p>\n<p>The non-null assertion operator, <code>!</code>, is optional with the exception that you must use it when you turn on strict null checks.</p>\n<a id=\"any-type-cast-function\"></a>\n<h2 id=\"the-any-type-cast-function\">The <code>$any()</code> type cast function<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#the-any-type-cast-function\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes a binding expression triggers a type error during <a href=\"guide/aot-compiler\">AOT compilation</a> and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the <code>$any()</code> cast function to cast\nthe expression to the <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> type</a> as in the following example:</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(item).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p>When the Angular compiler turns this template into TypeScript code,\nit prevents TypeScript from reporting that <code>bestByDate</code> is not a member of the <code>item</code>\nobject when it runs type checking on the template.</p>\n<p>The <code>$any()</code> cast function also works with <code>this</code> to allow access to undeclared members of\nthe component.</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(this).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p>The <code>$any()</code> cast function works anywhere in a binding expression where a method call is valid.</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgIf\n - guide/aot-compiler\n - guide/architecture-components\n - guide/built-in-directives\n - guide/interpolation\n - guide/pipes\n - guide/template-statements\n - guide/template-syntax\n - guide/template-typecheck\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/platform-browser/Title\n - guide/aot-compiler\n - guide/pipes#parameterizing-a-pipe\n - guide/template-expression-operators#non-null-assertion-operator\n - guide/template-expression-operators#pipe\n - guide/template-expression-operators#safe-navigation-operator\n - guide/template-expression-operators#template-expression-operators\n - guide/template-expression-operators#the-any-type-cast-function\n - guide/template-expression-operators#the-non-null-assertion-operator---\n - guide/template-expression-operators#the-pipe-operator-\n - guide/template-expression-operators#the-safe-navigation-operator----and-null-property-paths\n - http://www.typescriptlang.org/docs/handbook/basic-types.html#any\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-expression-operators.md?message=docs%3A%20describe%20your%20change...\n-->"
}