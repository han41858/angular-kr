{
  "id": "guide/template-expression-operators",
  "title": "템필릿 표현식 연산자",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-expression-operators.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!-- <a id=\"expression-operators\"></a> -->\n<!--\n# Template expression operators\n-->\n<h1 id=\"템필릿-표현식-연산자\">템필릿 표현식 연산자<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#템필릿-표현식-연산자\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nThe Angular template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios. The next sections cover three of these operators:\n\n* [pipe](guide/template-expression-operators#pipe)\n* [safe navigation operator](guide/template-expression-operators#safe-navigation-operator)\n* [non-null assertion operator](guide/template-expression-operators#non-null-assertion-operator)\n\n<div class=\"alert is-helpful\">\n\nSee the <live-example></live-example> for a working example containing the code snippets in this guide.\n\n</div>\n-->\n<p>Angular가 제공하는 템플릿 표현식 문법은 JavaScript 문법 일부를 활용하는 것이며, 여기에 Angular용 연산자 몇가지 추가되었습니다.\n이 문서에서는 다음 3개의 연산자에 대해 알아봅시다:</p>\n<ul>\n<li><a href=\"guide/template-expression-operators#pipe\">파이프</a></li>\n<li><a href=\"guide/template-expression-operators#safe-navigation-operator\">안전 참조 연산자, <code>?</code></a></li>\n<li><a href=\"guide/template-expression-operators#non-null-assertion-operator\">null값 아님 보장 연산자, <code>!</code></a></li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<a id=\"pipe\"></a>\n<!--\n## The pipe operator (`|`)\n-->\n<h2 id=\"파이프-연산자-\">파이프 연산자 (<code>|</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#파이프-연산자-\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe result of an expression might require some transformation before you're ready to use it in a binding.\nFor example, you might display a number as a currency, change text to uppercase, or filter a list and sort it.\n\nPipes are simple functions that accept an input value and return a transformed value.\nThey're easy to apply within template expressions, using the pipe operator (`|`):\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"uppercase-pipe\" header=\"src/app/app.component.html\">\n&lt;p&gt;Title through uppercase pipe: {{title | uppercase}}&lt;/p&gt;\n\n</code-example>\n\nThe pipe operator passes the result of an expression on the left to a pipe function on the right.\n\nYou can chain expressions through multiple pipes:\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"pipe-chain\" header=\"src/app/app.component.html\">\n&lt;!-- title 을 대문자로 변경한 후에 소문자로 변경합니다. --&gt;\n&lt;p&gt;Title through a pipe chain: {{title | uppercase | lowercase}}&lt;/p&gt;\n\n</code-example>\n\nAnd you can also [apply parameters](guide/pipes#parameterizing-a-pipe) to a pipe:\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"date-pipe\" header=\"src/app/app.component.html\">\n&lt;!-- 파이프에 인자 사용하기 =&gt; &quot;February 25, 1980&quot; --&gt;\n&lt;p&gt;Manufacture date with date format pipe: {{item.manufactureDate | date:&#39;longDate&#39;}}&lt;/p&gt;\n\n</code-example>\n\nThe `json` pipe is particularly helpful for debugging bindings:\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"json-pipe\" header=\"src/app/app.component.html\">\n&lt;p&gt;Item json pipe: {{item | json}}&lt;/p&gt;\n\n</code-example>\n\nThe generated output would look something like this:\n\n<code-example language=\"json\">\n  { \"name\": \"Telephone\",\n    \"manufactureDate\": \"1980-02-25T05:00:00.000Z\",\n    \"price\": 98 }\n</code-example>\n\n<div class=\"alert is-helpful\">\n\nThe pipe operator has a higher precedence than the ternary operator (`?:`),\nwhich means `a ? b : c | x` is parsed as `a ? b : (c | x)`.\nNevertheless, for a number of reasons,\nthe pipe operator cannot be used without parentheses in the first and second operands of `?:`.\nA good practice is to use parentheses in the third operand too.\n\n</div>\n-->\n<p>표현식이 실행된 결과를 DOM에 바인딩하기 전에 원하는 형식으로 변환해야 하는 경우가 있습니다.\n숫자를 통화 단위로 변환하거나, 문자열을 대문자로 변환하고, 배열을 필터링하거나 정렬하는 경우가 그렇습니다.</p>\n<p>파이프(Pipe)는 입력값을 하나 받아서 간단하게 형태를 변환하는 함수를 의미합니다.\n파이프는 템플릿 표현식에 파이프 연산자(<code>|</code>)를 붙이기만 하면 쉽게 적용할 수 있습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"uppercase-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through uppercase pipe: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}&#x3C;/p>\n\n</code-example>\n<p>파이프 연산자를 사용하면 파이프 연산자 왼쪽에 있는 표현식의 결과값이 파이프 연산자 오른쪽에 지정된 파이프 함수로 전달됩니다.</p>\n<p>그리고 파이프 여러개를 체이닝하는 형태로 사용할 수도 있습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"pipe-chain\" header=\"src/app/app.component.html\">\n&#x3C;!-- title 을 대문자로 변경한 후에 소문자로 변경합니다. -->\n&#x3C;p><a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> through a pipe chain: {{title | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a> | <a href=\"api/common/LowerCasePipe\" class=\"code-anchor\">lowercase</a>}}&#x3C;/p>\n\n</code-example>\n<p>그리고 파이프에는 <a href=\"guide/pipes#parameterizing-a-pipe\">추가 인자</a>를 함께 전달할 수도 있습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"date-pipe\" header=\"src/app/app.component.html\">\n&#x3C;!-- 파이프에 인자 사용하기 => \"February 25, 1980\" -->\n&#x3C;p>Manufacture date with date format pipe: {{item.manufactureDate | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'longDate'}}&#x3C;/p>\n\n</code-example>\n<p>특히 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> 파이프는 바인딩 표현식을 디버깅하는 용도로 활용하기 좋습니다:</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"json-pipe\" header=\"src/app/app.component.html\">\n&#x3C;p>Item json pipe: {{item | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}&#x3C;/p>\n\n</code-example>\n<p><code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a></code> 파이프를 거치면 <code>item</code> 객체가 이렇게 변환됩니다:</p>\n<code-example language=\"json\">\n  { \"name\": \"Telephone\",\n    \"manufactureDate\": \"1980-02-25T05:00:00.000Z\",\n    \"price\": 98 }\n</code-example>\n<div class=\"alert is-helpful\">\n<p>파이프 연산자는 삼항연산자(<code>?:</code>)보다 우선순위가 높기 때문에 <code>a ? b : c | x</code> 라는 표현식은 <code>a ? b : (c | x)</code> 라는 표현식과 같습니다.\n그래서 삼항연산자와 파이프를 함께 사용할 때는 괄호(<code>()</code>)를 사용해서 우선순위를 정확하게 지정하는 것이 좋습니다.</p>\n</div>\n<hr>\n<a id=\"safe-navigation-operator\"></a>\n<!--\n## The safe navigation operator ( `?` ) and null property paths\n-->\n<h2 id=\"안전-참조-연산자-\">안전 참조 연산자 (<code>?</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#안전-참조-연산자-\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe Angular safe navigation operator, `?`, guards against `null` and `undefined`\nvalues in property paths. Here, it protects against a view render failure if `item` is `null`.\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"safe\" header=\"src/app/app.component.html\">\n&lt;p&gt;The item name is: {{item?.name}}&lt;/p&gt;\n\n</code-example>\n\nIf `item` is `null`, the view still renders but the displayed value is blank; you see only \"The item name is:\" with nothing after it.\n\nConsider the next example, with a `nullItem`.\n\n<code-example language=\"html\">\n  The null item name is {{nullItem.name}}\n</code-example>\n\nSince there is no safe navigation operator and `nullItem` is `null`, JavaScript and Angular would throw a `null` reference error and break the rendering process of Angular:\n\n<code-example language=\"bash\">\n  TypeError: Cannot read property 'name' of null.\n</code-example>\n\nSometimes however, `null` values in the property\npath may be OK under certain circumstances,\nespecially when the value starts out null but the data arrives eventually.\n\nWith the safe navigation operator, `?`, Angular stops evaluating the expression when it hits the first `null` value and renders the view without errors.\n\nIt works perfectly with long property paths such as `a?.b?.c?.d`.\n-->\n<p>Angular 안전 참조 연산자(safe navigation operator, <code>?</code>)를 사용하면 프로퍼티를 참조하는 경로에 있는 <code>null</code> 값과 <code>undefined</code> 값을 방지할 수 있습니다.\n그래서 아래처럼 사용하면 <code>item</code> 값이 <code>null</code>일 때 템플릿을 렌더링하다 발생하는 에러를 방지할 수 있습니다.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"safe\" header=\"src/app/app.component.html\">\n&#x3C;p>The item name is: {{item?.name}}&#x3C;/p>\n\n</code-example>\n<p>이제 <code>item</code> 값이 <code>null</code>이면 <code>{{item?.name}}</code> 쪽은 빈칸으로 처리되어 \"The Item name is:\" 라는 문구만 화면에 표시됩니다.</p>\n<p><code>nullItem</code>의 경우를 생각해 봅시다.</p>\n<code-example language=\"html\">\n  The null item name is {{nullItem.name}}\n</code-example>\n<p>이 코드에는 안전 참조 연산자가 사용되지 않았습니다.\n그러면 <code>nullItem</code> 값이 <code>null</code> 일 때 <code>null</code> 객체를 참조할 수 없기 때문에 JavaScript와 Angular 쪽에서 에러가 발생하며 이런 에러 메시지를 표시하면서 렌더링도 실패합니다:</p>\n<code-example language=\"bash\">\n  TypeError: Cannot read property 'name' of null.\n</code-example>\n<p>하지만 프로퍼티를 참조하는 중간에 <code>null</code>이 있다고 해서 항상 잘못된 경우는 아닙니다.\n외부에서 데이터를 받아오기 전까지는 프로퍼티 값이 제대로 들어있지 않을 수도 있습니다.</p>\n<p>이 때 안전 참조 연산자 <code>?</code>를 사용하면 Angular가 템플릿 표현식을 평가하다가 <code>null</code> 값을 만났을 때 실행을 중단하며 에러 없이 렌더링을 끝낼 수 있습니다.</p>\n<p>프로퍼티를 참조하는 경로가 <code>a?.b?.c?.d</code>처럼 길더라도 전혀 문제되지 않습니다.</p>\n<hr>\n<a id=\"non-null-assertion-operator\"></a>\n<!--\n## The non-null assertion operator ( `!` )\n-->\n<h2 id=\"null값-아님-보장-연산자-\">null값 아님 보장 연산자 (<code>!</code>)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#null값-아님-보장-연산자-\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAs of Typescript 2.0, you can enforce [strict null checking](http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html \"Strict null checking in TypeScript\") with the `--strictNullChecks` flag. TypeScript then ensures that no variable is unintentionally `null` or `undefined`.\n\nIn this mode, typed variables disallow `null` and `undefined` by default. The type checker throws an error if you leave a variable unassigned or try to assign `null` or `undefined` to a variable whose type disallows `null` and `undefined`.\n\nThe type checker also throws an error if it can't determine whether a variable will be `null` or `undefined` at runtime. You tell the type checker not to throw an error by applying the postfix\n[non-null assertion operator, !](http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator \"Non-null assertion operator\").\n\nThe Angular non-null assertion operator, `!`, serves the same purpose in\nan Angular template. For example, you can assert that `item` properties are also defined.\n\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&lt;!-- color 값이 없어도 에러가 발생하지 않습니다. --&gt;\n&lt;p *ngIf=&quot;item&quot;&gt;The item&#39;s color is: {{item!.color}}&lt;/p&gt;\n\n</code-example>\n\nWhen the Angular compiler turns your template into TypeScript code,\nit prevents TypeScript from reporting that `item.color` might be `null` or `undefined`.\n\nUnlike the [_safe navigation operator_](guide/template-expression-operators#safe-navigation-operator \"Safe navigation operator (?)\"),\nthe non-null assertion operator does not guard against `null` or `undefined`.\nRather, it tells the TypeScript type checker to suspend strict `null` checks for a specific property expression.\n\nThe non-null assertion operator, `!`, is optional with the exception that you must use it when you turn on strict null checks.\n-->\n<p>TypeScript는 2.0 버전부터는 <code>--strictNullChecks</code> 옵션으로 <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">엄격한 null 검사 기능</a>을 활성화 할 수 있습니다.\n이 기능을 활성화하면 변수 값이 <code>null</code>이나 <code>undefined</code>가 되는 것을 방지합니다.</p>\n<p>이 기능을 활성화한 상태에서는 <code>null</code> 값이나 <code>undefined</code> 값을 기본값으로 사용할 수 없습니다.\n그리고 변수의 값을 할당하지 않거나 <code>null</code>, <code>undefined</code> 값으로 할당하는 경우에도 오류가 발생합니다.</p>\n<p>그리고 이 기능을 활성화하면 실행되는 시점에 변수의 값이 <code>null</code>이나 <code>undefined</code>가 될 수 있는 경우도 감지해서 오류로 판단합니다.\n<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"Non-null assertion operator\">null값 아님 보장 연산자 (non-null assertion operator, <code>!</code>)</a>는 이런 오류를 방지할 때 사용합니다.</p>\n<p>Angular null값 아님 보장 연산자(<code>!</code>)도 Angular 템플릿에서 똑같은 역할을 합니다.\n<code>item</code> 프로퍼티를 활용하는 코드가 다음과 같이 있다고 합시다.</p>\n<code-example path=\"template-expression-operators/src/app/app.component.html\" region=\"non-null\" header=\"src/app/app.component.html\">\n&#x3C;!-- color 값이 없어도 에러가 발생하지 않습니다. -->\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"item\">The item's color is: {{item!.color}}&#x3C;/p>\n\n</code-example>\n<p>Angular 컴파일러가 이 템플릿 코드를 TypeScript 코드로 바꾸고 나면 <code>item.color</code> 값이 <code>null</code>이나 <code>undefined</code>가 될 수 있기 때문에 TypeScript 쪽에서 오류로 판단하고 에러를 발생시킵니다.</p>\n<p>하지만 <a href=\"guide/template-expression-operators#safe-navigation-operator\" title=\"Safe navigation operator (?)\"><em>안전 참조 연산자</em></a>와는 다르게, null값 아님 보장 연산자는 <code>null</code> 값이나 <code>undefined</code> 값이 발생하는 것을 막지 않습니다.\n그래서 이런 경우에는 TypeScript 타입 검사기에게 이 표현식에 대해서는 엄격한 <code>null</code> 검사를 잠시 미뤄두도록 지정할 수 있습니다.</p>\n<p>null값 아님 보장 연산자 <code>!</code>를 꼭 사용해야 하는 것은 아니지만, 엄격한 null 검사 모드를 활성화하면 종종 사용하게 될 것입니다.</p>\n<a id=\"any-type-cast-function\"></a>\n<!--\n## The `$any()` type cast function\n-->\n<h2 id=\"타입-캐스팅-함수-any\">타입 캐스팅 함수 <code>$any()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-expression-operators#타입-캐스팅-함수-any\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nSometimes a binding expression triggers a type error during [AOT compilation](guide/aot-compiler) and it is not possible or difficult to fully specify the type.\nTo silence the error, you can use the `$any()` cast function to cast\nthe expression to the [`any` type](http://www.typescriptlang.org/docs/handbook/basic-types.html#any) as in the following example:\n\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&lt;p&gt;The item&#39;s undeclared best by date is: {{$any(item).bestByDate}}&lt;/p&gt;\n\n</code-example>\n\nWhen the Angular compiler turns this template into TypeScript code,\nit prevents TypeScript from reporting that `bestByDate` is not a member of the `item`\nobject when it runs type checking on the template.\n\nThe `$any()` cast function also works with `this` to allow access to undeclared members of\nthe component.\n\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&lt;p&gt;The item&#39;s undeclared best by date is: {{$any(this).bestByDate}}&lt;/p&gt;\n\n</code-example>\n\nThe `$any()` cast function works anywhere in a binding expression where a method call is valid.\n-->\n<p>사용할 수 없는 타입의 변수를 사용했거나 변수의 타입을 제대로 추론할 수 없는 경우에는 <a href=\"guide/aot-compiler\">AOT 컴파일</a> 중에 타입 에러가 발생할 수 있습니다.\n이 에러를 방지하려면 <code>$any()</code> 캐스팅 함수를 사용해서 표현식을 <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\"><code>any</code> 타입</a>으로 캐스팅하면 됩니다:</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-1\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(item).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p>Angular 컴파일러가 이 템플릿을 TypeScript 코드로 변환하면 <code>bestByDate</code>가 <code>item</code> 객체에 존재하지 않기 때문에 TypeScript 쪽에서는 에러로 판단하지만, 이 에러를 무시하고 컴파일을 진행할 수 있습니다.</p>\n<p><code>$any()</code> 캐스팅 함수는 컴포넌트 멤버를 참조하는 <code>this</code>에도 사용할 수 있습니다.</p>\n<code-example path=\"built-in-template-functions/src/app/app.component.html\" region=\"any-type-cast-function-2\" header=\"src/app/app.component.html\">\n&#x3C;p>The item's undeclared best by date is: {{$any(this).bestByDate}}&#x3C;/p>\n\n</code-example>\n<p><code>$any()</code> 캐스팅 함수는 존재하지 않는 멤버나 메소드를 참조하지만 않는다면 어디에라도 자유롭게 사용할 수 있습니다.</p>\n\n</div>\n\n<!-- links to this doc:\n - api/common/NgIf\n - guide/aot-compiler\n - guide/architecture-components\n - guide/built-in-directives\n - guide/interpolation\n - guide/pipes\n - guide/template-statements\n - guide/template-syntax\n - guide/template-typecheck\n-->\n<!-- links from this doc:\n - api/common/DatePipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgIf\n - api/common/UpperCasePipe\n - api/platform-browser/Title\n - guide/aot-compiler\n - guide/pipes#parameterizing-a-pipe\n - guide/template-expression-operators#non-null-assertion-operator\n - guide/template-expression-operators#null값-아님-보장-연산자-\n - guide/template-expression-operators#pipe\n - guide/template-expression-operators#safe-navigation-operator\n - guide/template-expression-operators#안전-참조-연산자-\n - guide/template-expression-operators#타입-캐스팅-함수-any\n - guide/template-expression-operators#템필릿-표현식-연산자\n - guide/template-expression-operators#파이프-연산자-\n - http://www.typescriptlang.org/docs/handbook/basic-types.html#any\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\n - http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-expression-operators.md?message=docs%3A%20describe%20your%20change...\n-->"
}