{
  "id": "guide/attribute-binding",
  "title": "Attribute, class, and style bindings",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/attribute-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"attribute-class-and-style-bindings\">Attribute, class, and style bindings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#attribute-class-and-style-bindings\"><i class=\"material-icons\">link</i></a></h1>\n<p>The template syntax provides specialized one-way bindings for scenarios less well-suited to property binding.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<h2 id=\"attribute-binding\">Attribute binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#attribute-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Set the value of an attribute directly with an <strong>attribute binding</strong>. This is the only exception to the rule that a binding sets a target property and the only binding that creates and sets an attribute.</p>\n<p>Usually, setting an element property with a <a href=\"guide/property-binding\">property binding</a>\nis preferable to setting the attribute with a string. However, sometimes\nthere is no element property to bind, so attribute binding is the solution.</p>\n<p>Consider the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a> and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>. They are purely attributes, don't correspond to element properties, and don't set element properties. In these cases, there are no property targets to bind to.</p>\n<p>Attribute binding syntax resembles property binding, but\ninstead of an element property between brackets, start with the prefix <code>attr</code>,\nfollowed by a dot (<code>.</code>), and the name of the attribute.\nYou then set the attribute value, using an expression that resolves to a string,\nor remove the attribute when the expression resolves to <code>null</code>.</p>\n<p>One of the primary use cases for attribute binding\nis to set ARIA attributes, as in this example:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"attrib-binding-aria\" header=\"src/app/app.component.html\">\n&#x3C;!-- 웹 접근성 향상을 위해 ARIA 어트리뷰트를 지정할 수 있습니다. -->\n&#x3C;button [attr.aria-label]=\"actionName\">{{actionName}} with Aria&#x3C;/button>\n\n</code-example>\n<a id=\"colspan\"></a>\n<div class=\"alert is-helpful\">\n<h4 id=\"colspan-and-colspan\"><code>colspan</code> and <code>colSpan</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#colspan-and-colspan\"><i class=\"material-icons\">link</i></a></h4>\n<p>Notice the difference between the <code>colspan</code> attribute and the <code>colSpan</code> property.</p>\n<p>If you wrote something like this:</p>\n<code-example language=\"html\">\n  &#x3C;tr>&#x3C;td colspan=\"{{1 + 1}}\">Three-Four&#x3C;/td>&#x3C;/tr>\n</code-example>\n<p>You'd get this error:</p>\n<code-example language=\"bash\">\n  Template parse errors:\n  Can't bind to 'colspan' since it isn't a known native property\n</code-example>\n<p>As the message says, the <code>&#x3C;td></code> element does not have a <code>colspan</code> property. This is true\nbecause <code>colspan</code> is an attribute—<code>colSpan</code>, with a capital <code>S</code>, is the\ncorresponding property. Interpolation and property binding can set only <em>properties</em>, not attributes.</p>\n<p>Instead, you'd use property binding and write it like this:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- colSpan 프로퍼티는 캐멀 케이스입니다. -->\n&#x3C;tr>&#x3C;td [colSpan]=\"1 + 1\">Three-Four&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n</div>\n<hr>\n<a id=\"class-binding\"></a>\n<h2 id=\"class-binding\">Class binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#class-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here's how to set the <code>class</code> attribute without a binding in plain HTML:</p>\n<code-example language=\"html\">\n&#x3C;!-- standard class attribute setting -->\n&#x3C;div class=\"foo bar\">Some text&#x3C;/div>\n</code-example>\n<p>You can also add and remove CSS class names from an element's <code>class</code> attribute with a <strong>class binding</strong>.</p>\n<p>To create a single class binding, start with the prefix <code>class</code> followed by a dot (<code>.</code>) and the name of the CSS class (for example, <code>[class.foo]=\"hasFoo\"</code>).\nAngular adds the class when the bound expression is truthy, and it removes the class when the expression is falsy (with the exception of <code>undefined</code>, see <a href=\"guide/attribute-binding#styling-delegation\">styling delegation</a>).</p>\n<p>To create a binding to multiple classes, use a generic <code>[class]</code> binding without the dot (for example, <code>[class]=\"classExpr\"</code>).\nThe expression can be a space-delimited string of class names, or you can format it as an object with class names as the keys and truthy/falsy expressions as the values.\nWith object format, Angular will add a class only if its associated value is truthy.</p>\n<p>It's important to note that with any object-like expression (<code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, etc), the identity of the object must change for the class list to be updated.\nUpdating the property without changing object identity will have no effect.</p>\n<p>If there are multiple bindings to the same class name, conflicts are resolved using <a href=\"guide/attribute-binding#styling-precedence\">styling precedence</a>.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Binding Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Input Type\n    </th>\n    <th>\n      Example Input Values\n    </th>\n  </tr>\n  <tr>\n    <td>Single class binding</td>\n    <td><code>[class.foo]=\"hasFoo\"</code></td>\n    <td><code>boolean | undefined | null</code></td>\n    <td><code>true</code>, <code>false</code></td>\n  </tr>\n  <tr>\n    <td rowspan=\"3\">Multi-class binding</td>\n    <td rowspan=\"3\"><code>[class]=\"classExpr\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"my-class-1 my-class-2 my-class-3\"</code></td>\n  </tr>\n  <tr>\n    <td><code>{[key: string]: boolean | undefined | null}</code></td>\n    <td><code>{foo: true, bar: false}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['foo', 'bar']</code></td>\n  </tr>\n</tbody></table>\n<p>The <a href=\"guide/built-in-directives/#ngclass\">NgClass</a> directive can be used as an alternative to direct <code>[class]</code> bindings.\nHowever, using the above class binding syntax without <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> is preferred because due to improvements in class binding in Angular, <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code> no longer provides significant value, and might eventually be removed in the future.</p>\n<hr>\n<h2 id=\"style-binding\">Style binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#style-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Here's how to set the <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> attribute without a binding in plain HTML:</p>\n<code-example language=\"html\">\n&#x3C;!-- standard <a href=\"api/animations/style\" class=\"code-anchor\">style</a> attribute setting -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\">Some text&#x3C;/div>\n</code-example>\n<p>You can also set styles dynamically with a <strong>style binding</strong>.</p>\n<p>To create a single style binding, start with the prefix <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> followed by a dot (<code>.</code>) and the name of the CSS style property (for example, <code>[style.width]=\"width\"</code>).\nThe property will be set to the value of the bound expression, which is normally a string.\nOptionally, you can add a unit extension like <code>em</code> or <code>%</code>, which requires a number type.</p>\n<div class=\"alert is-helpful\">\n<p>Note that a <em>style property</em> name can be written in either\n<a href=\"guide/glossary#dash-case\">dash-case</a>, as shown above, or\n<a href=\"guide/glossary#camelcase\">camelCase</a>, such as <code>fontSize</code>.</p>\n</div>\n<p>If there are multiple styles you'd like to toggle, you can bind to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> property directly without the dot (for example, <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code>).\nThe expression attached to the <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding is most often a string list of styles like <code>\"width: 100px; height: 100px;\"</code>.</p>\n<p>You can also format the expression as an object with style names as the keys and style values as the values, like <code>{width: '100px', height: '100px'}</code>.\nIt's important to note that with any object-like expression (<code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>, etc), the identity of the object must change for the class list to be updated.\nUpdating the property without changing object identity will have no effect.</p>\n<p>If there are multiple bindings to the same style property, conflicts are resolved using <a href=\"guide/attribute-binding#styling-precedence\">styling precedence rules</a>.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Binding Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Input Type\n    </th>\n    <th>\n      Example Input Values\n    </th>\n  </tr>\n  <tr>\n    <td>Single style binding</td>\n    <td><code>[style.width]=\"width\"</code></td>\n    <td><code>string | undefined | null</code></td>\n    <td><code>\"100px\"</code></td>\n  </tr>\n  <tr>\n  </tr><tr>\n    <td>Single style binding with units</td>\n    <td><code>[style.width.px]=\"width\"</code></td>\n    <td><code>number | undefined | null</code></td>\n    <td><code>100</code></td>\n  </tr>\n    <tr>\n    <td rowspan=\"3\">Multi-style binding</td>\n    <td rowspan=\"3\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"width: 100px; height: 100px\"</code></td>\n  </tr>\n  <tr>\n    <td><code>{[key: string]: string | undefined | null}</code></td>\n    <td><code>{width: '100px', height: '100px'}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['width', '100px']</code></td>\n  </tr>\n</tbody></table>\n<p>The <a href=\"guide/built-in-directives/#ngstyle\">NgStyle</a> directive can be used as an alternative to direct <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> bindings.\nHowever, using the above style binding syntax without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> is preferred because due to improvements in style binding in Angular, <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> no longer provides significant value, and might eventually be removed in the future.</p>\n<hr>\n<a id=\"styling-precedence\"></a>\n<h2 id=\"styling-precedence\">Styling Precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#styling-precedence\"><i class=\"material-icons\">link</i></a></h2>\n<p>A single HTML element can have its CSS class list and style values bound to multiple sources (for example, host bindings from multiple directives).</p>\n<p>When there are multiple bindings to the same class name or style property, Angular uses a set of precedence rules to resolve conflicts and determine which classes or styles are ultimately applied to the element.</p>\n<div class=\"alert is-helpful\">\n<h4 id=\"styling-precedence-highest-to-lowest\">Styling precedence (highest to lowest)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#styling-precedence-highest-to-lowest\"><i class=\"material-icons\">link</i></a></h4>\n<ol>\n<li>\n<p>Template bindings</p>\n<ol>\n<li>Property binding (for example, <code>&#x3C;div [class.foo]=\"hasFoo\"></code> or <code>&#x3C;div [style.color]=\"color\"></code>)</li>\n<li>Map binding (for example, <code>&#x3C;div [class]=\"classExpr\"></code> or <code>&#x3C;div [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\"></code>)</li>\n<li>Static value (for example, <code>&#x3C;div class=\"foo\"></code> or <code>&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\"></code>)</li>\n</ol>\n</li>\n<li>\n<p>Directive host bindings</p>\n<ol>\n<li>Property binding (for example, <code>host: {'[class.foo]': 'hasFoo'}</code> or <code>host: {'[style.color]': 'color'}</code>)</li>\n<li>Map binding (for example, <code>host: {'[class]': 'classExpr'}</code> or <code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code>)</li>\n<li>Static value (for example, <code>host: {'class': 'foo'}</code> or <code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code>)</li>\n</ol>\n</li>\n<li>\n<p>Component host bindings</p>\n<ol>\n<li>Property binding (for example, <code>host: {'[class.foo]': 'hasFoo'}</code> or <code>host: {'[style.color]': 'color'}</code>)</li>\n<li>Map binding (for example, <code>host: {'[class]': 'classExpr'}</code> or <code>host: {'[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]': 'styleExpr'}</code>)</li>\n<li>Static value (for example, <code>host: {'class': 'foo'}</code> or <code>host: {'<a href=\"api/animations/style\" class=\"code-anchor\">style</a>': 'color: blue'}</code>)</li>\n</ol>\n</li>\n</ol>\n</div>\n<p>The more specific a class or style binding is, the higher its precedence.</p>\n<p>A binding to a specific class (for example, <code>[class.foo]</code>) will take precedence over a generic <code>[class]</code> binding, and a binding to a specific style (for example, <code>[style.bar]</code>) will take precedence over a generic <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> binding.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"basic-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>기본 순서&#x3C;/h3>\n\n&#x3C;!-- `class.special`이 `class`보다 우선순위가 높습니다.  -->\n&#x3C;div [class.special]=\"isSpecial\" [class]=\"classExpr\">Some text.&#x3C;/div>\n\n&#x3C;!-- `style.color`가 `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>`보다 우선순위가 높습니다.  -->\n&#x3C;div [style.color]=\"color\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\">Some text.&#x3C;/div>\n\n</code-example>\n<p>Specificity rules also apply when it comes to bindings that originate from different sources.\nIt's possible for an element to have bindings in the template where it's declared, from host bindings on matched directives, and from host bindings on matched components.</p>\n<p>Template bindings are the most specific because they apply to the element directly and exclusively, so they have the highest precedence.</p>\n<p>Directive host bindings are considered less specific because directives can be used in multiple locations, so they have a lower precedence than template bindings.</p>\n<p>Directives often augment component behavior, so host bindings from components have the lowest precedence.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"source-specificity\" header=\"src/app/app.component.html\">\n&#x3C;h3>소스별 우선순위&#x3C;/h3>\n\n&#x3C;!-- `dirWithClassBinding`이나 `comp-with-host-binding`보다 `class.special` 템플릿 바인딩의 우선순위가 더 높습니다. -->\n&#x3C;comp-with-host-binding [class.special]=\"isSpecial\" dirWithClassBinding>Some text.&#x3C;/comp-with-host-binding>\n\n&#x3C;!-- `dirWithStyleBinding`이나 `comp-with-host-binding`보다 `style.color` 템플릿 바인딩의 우선순위가 더 높습니다. -->\n&#x3C;comp-with-host-binding [style.color]=\"color\" dirWithStyleBinding>Some text.&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p>In addition, bindings take precedence over static attributes.</p>\n<p>In the following case, <code>class</code> and <code>[class]</code> have similar specificity, but the <code>[class]</code> binding will take precedence because it is dynamic.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"dynamic-priority\" header=\"src/app/app.component.html\">\n&#x3C;h3>동적 vs 정적&#x3C;/h3>\n\n&#x3C;!-- `classExpr`이 동적으로 처리되기 때문에 `class`보다 우선순위가 높습니다. -->\n&#x3C;div class=\"special\" [class]=\"classExpr\">Some text.&#x3C;/div>\n\n&#x3C;!-- `styleExpr`이 동적으로 처리되기 때문에 `<a href=\"api/animations/style\" class=\"code-anchor\">style</a>`보다 우선순위가 높습니다. -->\n&#x3C;div <a href=\"api/animations/style\" class=\"code-anchor\">style</a>=\"color: blue\" [<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpr\">Some text.&#x3C;/div>\n\n\n</code-example>\n<a id=\"styling-delegation\"></a>\n<h3 id=\"delegating-to-styles-with-lower-precedence\">Delegating to styles with lower precedence<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#delegating-to-styles-with-lower-precedence\"><i class=\"material-icons\">link</i></a></h3>\n<p>It is possible for higher precedence styles to \"delegate\" to lower precedence styles using <code>undefined</code> values.\nWhereas setting a style property to <code>null</code> ensures the style is removed, setting it to <code>undefined</code> will cause Angular to fall back to the next-highest precedence binding to that style.</p>\n<p>For example, consider the following template:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"style-delegation\" header=\"src/app/app.component.html\">\n&#x3C;comp-with-host-binding dirWithHostBinding>&#x3C;/comp-with-host-binding>\n\n</code-example>\n<p>Imagine that the <code>dirWithHostBinding</code> directive and the <code>comp-with-host-binding</code> component both have a <code>[style.width]</code> host binding.\nIn that case, if <code>dirWithHostBinding</code> sets its binding to <code>undefined</code>, the <code>width</code> property will fall back to the value of the <code>comp-with-host-binding</code> host binding.\nHowever, if <code>dirWithHostBinding</code> sets its binding to <code>null</code>, the <code>width</code> property will be removed entirely.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/accessibility\n - guide/ajs-quick-reference\n - guide/built-in-directives\n - guide/glossary\n - guide/property-binding\n - guide/router-tutorial-toh\n - guide/template-syntax\n - tutorial/toh-pt2\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgClass\n - api/common/NgStyle\n - guide/attribute-binding#attribute-binding\n - guide/attribute-binding#attribute-class-and-style-bindings\n - guide/attribute-binding#class-binding\n - guide/attribute-binding#colspan-and-colspan\n - guide/attribute-binding#delegating-to-styles-with-lower-precedence\n - guide/attribute-binding#style-binding\n - guide/attribute-binding#styling-delegation\n - guide/attribute-binding#styling-precedence\n - guide/attribute-binding#styling-precedence-highest-to-lowest\n - guide/built-in-directives/#ngclass\n - guide/built-in-directives/#ngstyle\n - guide/glossary#camelcase\n - guide/glossary#dash-case\n - guide/property-binding\n - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\n - https://developer.mozilla.org/en-US/docs/Web/SVG\n - https://github.com/angular/angular/edit/master/aio/content/guide/attribute-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}