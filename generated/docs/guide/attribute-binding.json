{
  "id": "guide/attribute-binding",
  "title": "어트리뷰트, 클래스, 스타일 바인딩",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/attribute-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Attribute, class, and style bindings\n-->\n<h1 id=\"어트리뷰트-클래스-스타일-바인딩\">어트리뷰트, 클래스, 스타일 바인딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#어트리뷰트-클래스-스타일-바인딩\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAttribute binding in Angular helps you set values for attributes directly.\nWith attribute binding, you can improve accessibility, style your application dynamically, and manage multiple CSS classes or styles simultaneously.\n\n<div class=\"alert is-helpful\">\n\nSee the <live-example></live-example> for a working example containing the code snippets in this guide.\n\n</div>\n-->\n<p>어트리뷰트 바인딩을 활용하면 엘리먼트 어트리뷰트의 값을 직접 지정할 수 있습니다.\n이 문법을 활용하면 웹 접근성을 향상시킬 수 있고, 애플리케이션 스타일을 동적으로 조정할 수 있으며, CSS 클래스 여러개와 CSS 스타일 여러개를 한 번에 적용할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<!--\n## Binding to an attribute\n-->\n<h2 id=\"어트리뷰트-바인딩하기\">어트리뷰트 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#어트리뷰트-바인딩하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIt is recommended that you set an element property with a [property binding](guide/property-binding) whenever possible.\nHowever, sometimes you don't have an element property to bind.\nIn those situations, you can use attribute binding.\n\nFor example, [ARIA](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA) and\n[SVG](https://developer.mozilla.org/en-US/docs/Web/SVG) are purely attributes.\nNeither ARIA nor SVG correspond to element properties and don't set element properties.\nIn these cases, you must use attribute binding because there are no corresponding property targets.\n-->\n<p>엘리먼트 프로퍼티 값을 <a href=\"guide/property-binding\">프로퍼티 바인딩</a> 으로 할당할 수 있다면 이 방법이 가장 좋습니다.\n하지만 엘리먼트 프로퍼티를 바인딩할 수 없는 경우가 있습니다.\n어트리뷰트 바인딩은 이런 경우에 사용합니다.</p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a>와\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>에는 어트리뷰트만 존재합니다.\n그래서 엘리먼트 프로퍼티가 존재하지 않기 때문에 프로퍼티 값을 지정할 수도 없습니다.\n이런 경우에는 어트리뷰트 바인딩을 사용하는 수밖에 없습니다.</p>\n<!--\n## Syntax\n-->\n<h2 id=\"문법\">문법<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#문법\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAttribute binding syntax resembles [property binding](guide/property-binding), but instead of an element property between brackets, you precede the name of the attribute with the prefix `attr`, followed by a dot.\nThen, you set the attribute value with an expression that resolves to a string.\n\n<code-example language=\"html\">\n\n &lt;p [attr.attribute-you-are-targeting]=\"expression\"&gt;&lt;/p&gt;\n\n</code-example>\n\n<div class=\"alert is-helpful\">\n\nWhen the expression resolves to `null`, Angular removes the attribute altogether.\n\n</div>\n-->\n<p>어트리뷰트 바인딩 문법은 <a href=\"guide/property-binding\">프로퍼티 바인딩</a> 문법과 비슷하지만, 대괄호(<code>[]</code>) 안에 엘리먼트 프로퍼티를 지정하지 않고 <code>attr.</code> 접두사를 붙인 후에 어트리뷰트 이름을 지정합니다.\n등호 오른쪽에는 어트리뷰트에 지정할 값을 문자열을 반환하는 표현식으로 연결하면 됩니다.</p>\n<code-example language=\"html\">\n\n &#x3C;p [attr.대상-어트리뷰트]=\"표현식\">&#x3C;/p>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>표현식이 <code>null</code>로 평가되면 Angular는 해당 어트리뷰트를 자체를 제거합니다.</p>\n</div>\n<!--\n## Binding ARIA attributes\n-->\n<h2 id=\"aria-어트리뷰트-바인딩하기\">ARIA 어트리뷰트 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#aria-어트리뷰트-바인딩하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nOne of the primary use cases for attribute binding\nis to set ARIA attributes, as in this example:\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"attrib-binding-aria\" header=\"src/app/app.component.html\">\n&lt;!-- 웹 접근성 향상을 위해 ARIA 어트리뷰트를 지정할 수 있습니다. --&gt;\n&lt;button [attr.aria-label]=&quot;actionName&quot;&gt;{{actionName}} with Aria&lt;/button&gt;\n\n</code-example>\n-->\n<p>어트리뷰트 바인딩을 사용하는 목적 중 가장 중요한 것은 ARIA 어트리뷰트를 설정하는 것입니다:</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"attrib-binding-aria\" header=\"src/app/app.component.html\">\n&#x3C;!-- 웹 접근성 향상을 위해 ARIA 어트리뷰트를 지정할 수 있습니다. -->\n&#x3C;button [attr.aria-label]=\"actionName\">{{actionName}} with Aria&#x3C;/button>\n\n</code-example>\n<a id=\"colspan\"></a>\n<!--\n## Binding to `colspan`\n-->\n<h2 id=\"colspan-바인딩하기\"><code>colspan</code> 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#colspan-바인딩하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAnother common use case for attribute binding is with the `colspan` attribute in tables.\nBinding to the `colspan` attribute helps you keep your tables programmatically dynamic.\nDepending on the amount of data that your application populates a table with, the number of columns that a row spans could change.\n\nTo use attribute binding with the `<td>` attribute `colspan`:\n\n1. Specify the `colspan` attribute by using the following syntax: `[attr.colspan]`.\n1. Set `[attr.colspan]` equal to an expression.\n\nIn the following example, we bind the `colspan` attribute to the expression `1 + 1`.\n\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"colspan\" header=\"src/app/app.component.html\">\n&lt;!--  표현식 평가 결과는 colspan=2 입니다. --&gt;\n&lt;tr&gt;&lt;td [attr.colspan]=&quot;1 + 1&quot;&gt;One-Two&lt;/td&gt;&lt;/tr&gt;\n\n</code-example>\n\nThis binding causes the `<tr>` to span two columns.\n\n<div class=\"alert is-helpful\">\n\nSometimes there are differences between the name of property and an attribute.\n\n`colspan` is an attribute of `<tr>`, while `colSpan`  with a capital \"S\" is a property.\nWhen using attribute binding, use `colspan` with a lowercase \"s\".\nFor more information on how to bind to the `colSpan` property, see the [`colspan` and `colSpan`](guide/property-binding#colspan) section of [Property Binding](guide/property-binding).\n\n</div>\n-->\n<p>어트리뷰트 바인딩은 테이블 엘리먼트의 <code>colspan</code> 어트리뷰트를 바인딩 할 때도 사용합니다.\n이 어트리뷰트를 바인딩하면 테이블의 모습을 동적으로 변경할 수 있습니다.\n데이터의 모습에 따라 행/열의 병합 개수를 조절할 때 사용합니다.</p>\n<p><code>&#x3C;td></code> 엘리먼트에 <code>colspan</code> 어트리뷰트를 바인딩하려면 이렇게 하면 됩니다:</p>\n<ol>\n<li><code>[attr.colspan]</code> 문법으로 <code>colspan</code> 어트리뷰트에 접근합니다.</li>\n<li><code>[attr.colspan]</code>에 표현식을 연결합니다.</li>\n</ol>\n<p>아래 예제는 <code>colspan</code> 어트리뷰트에 <code>1 + 1</code>라는 표현식을 연결하는 예제 코드입니다.</p>\n<code-example path=\"attribute-binding/src/app/app.component.html\" region=\"colspan\" header=\"src/app/app.component.html\">\n&#x3C;!--  표현식 평가 결과는 colspan=2 입니다. -->\n&#x3C;tr>&#x3C;td [attr.colspan]=\"1 + 1\">One-Two&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n<p>그러면 <code>&#x3C;td></code> 어트리뷰트가 2열로 구성됩니다.</p>\n<div class=\"alert is-helpful\">\n<p>프로퍼티의 이름과 어트리뷰트 이름이 다른 경우가 가끔 있습니다.</p>\n<p><code>&#x3C;td></code> 엘리먼트를 생각해보면 <code>colspan</code>은 어트리뷰트이며 대문자 \"S\"가 들어간 <code>colSpan</code>은 프로퍼티입니다.\n어트리뷰트를 바인딩하려면 반드시 소문자 \"s\"가 들어간 <code>colspan</code>을 사용해야 합니다.\n<code>colSpan</code> 프로퍼티를 바인딩하는 방법에 대해 자세하게 알아보려면 <a href=\"guide/property-binding\">프로퍼티 바인딩</a> 문서의 <a href=\"guide/property-binding#colspan\">colspan과 colSpan</a> 섹션을 참고하세요.</p>\n</div>\n<hr>\n<a id=\"class-binding\"></a>\n<!--\n## Binding to the `class` attribute\n-->\n<h2 id=\"class-어트리뷰트-바인딩하기\"><code>class</code> 어트리뷰트 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#class-어트리뷰트-바인딩하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can use class binding to add and remove CSS class names from an element's `class` attribute.\n-->\n<p>엘리먼트의 <code>class</code> 어트리뷰트를 바인딩하면 해당 엘리먼트에 CSS 클래스를 적용하거나 제거할 수 있습니다.</p>\n<!--\n### Binding to a single CSS `class`\n-->\n<h3 id=\"css-class-하나-바인딩하기\">CSS <code>class</code> 하나 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#css-class-하나-바인딩하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo create a single class binding, use the prefix `class` followed by a dot and the name of the CSS class&mdash;for example, `[class.sale]=\"onSale\"`.\nAngular adds the class when the bound expression, `onSale` is truthy, and it removes the class when the expression is falsy&mdash;with the exception of `undefined`.\nSee [styling delegation](guide/style-precedence#styling-delegation) for more information.\n-->\n<p>클래스를 하나만 바인딩하려면 <code>[class.sale]=\"onSale\"</code>라는 문법처럼 <code>class</code> 뒤에 마침표(<code>.</code>)를 붙이고 원하는 CSS 클래스를 지정하면 됩니다.\n그러면 <code>onSale</code>라는 표현식이 참으로 평가될 때 <code>sale</code> 클래스를 엘리먼트에 적용하며, 표현식이 거짓으로 평가되면 <code>sale</code> 클래스를 엘리먼트에서 제거합니다.\n표현식이 <code>undefined</code>로 평가되면 오류가 발생합니다.\n자세한 내용은 <a href=\"guide/style-precedence#styling-delegation\">스타일 지정 우선순위</a> 문서를 참고하세요.</p>\n<!--\n### Binding to multiple CSS classes\n-->\n<h3 id=\"css-클래스-여러개-바인딩하기\">CSS 클래스 여러개 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#css-클래스-여러개-바인딩하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo bind to multiple classes, use `[class]` set to an expression&mdash;for example, `[class]=\"classExpression\"`.\nThe expression can be a space-delimited string of class names, or an object with class names as the keys and truthy or falsy expressions as the values.\nWith an object format, Angular adds a class only if its associated value is truthy.\n\n<div class=\"alert is-important\">\n\nWith any object-like expression&mdash;such as `object`, `Array`, `Map`, or `Set`&mdash;the identity of the object must change for Angular to update the class list.\nUpdating the property without changing object identity has no effect.\n\n</div>\n\nIf there are multiple bindings to the same class name, Angular uses [styling precedence](guide/style-precedence) to determine which binding to use.\n\nThe following table summarizes class binding syntax.\n-->\n<p>클래스를 여러개 바인딩하려면 <code>[class]=\"클래스-표현식\"</code>이라는 문법을 사용하면 됩니다.\n이 때 표현식은 공백으로 구분되는 문자열로 클래스 이름을 지정할 수 있으며, 클래스 이름을 키로 갖는 객체를 사용할 수도 있습니다.\n객체 형태를 사용하면 해당 객체 중 참으로 평가되는 클래스만 엘리먼트에 적용됩니다.</p>\n<div class=\"alert is-important\">\n<p><code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>과 같은 객체로 클래스를 바인딩할 때는 이 객체의 인스턴스가 변경되어야 클래스 목록이 변경됩니다.\n객체 인스턴스는 그대로고 프로퍼티 값만 변경되면 반영되지 않습니다.</p>\n</div>\n<p>같은 클래스 이름이 여러 곳에서 바인딩되면 <a href=\"guide/style-precedence\">스타일 지정 우선순위</a>에 따라 적용 여부가 결정됩니다.</p>\n<p>클래스 바인딩 문법을 요약하면 이렇습니다.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <!--\n    <th>\n      Binding Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Input Type\n    </th>\n    <th>\n      Example Input Values\n    </th>\n    -->\n    <th>\n      바인딩 타입\n    </th>\n    <th>\n      문법\n    </th>\n    <th>\n      입력값 타입\n    </th>\n    <th>\n      입력값 예시\n    </th>\n  </tr>\n  <tr>\n    <!--\n    <td>Single class binding</td>\n    -->\n    <td>클래스 하나 바인딩</td>\n    <td><code>[class.sale]=\"onSale\"</code></td>\n    <td><code>boolean | undefined | null</code></td>\n    <td><code>true</code>, <code>false</code></td>\n  </tr>\n  <tr>\n    <!--\n    <td rowspan=3>Multi-class binding</td>\n    -->\n    <td rowspan=\"3\">클래스 여러개 바인딩</td>\n    <td rowspan=\"3\"><code>[class]=\"classExpression\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"my-class-1 my-class-2 my-class-3\"</code></td>\n  </tr>\n  <tr>\n    <td><code>{[key: string]: boolean | undefined | null}</code></td>\n    <td><code>{foo: true, bar: false}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['foo', 'bar']</code></td>\n  </tr>\n</tbody></table>\n<hr>\n<a id=\"style-binding\"></a>\n<!--\n## Binding to the style attribute\n-->\n<h2 id=\"스타일-어트리뷰트-바인딩하기\">스타일 어트리뷰트 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#스타일-어트리뷰트-바인딩하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can use style binding to set styles dynamically.\n-->\n<p>스타일 어트리뷰트를 바인딩하면 엘리먼트의 스타일을 동적으로 변경할 수 있습니다.</p>\n<!--\n### Binding to a single style\n-->\n<h3 id=\"스타일-하나-바인딩하기\">스타일 하나 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#스타일-하나-바인딩하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo create a single style binding, use the prefix `style` followed by a dot and the name of the CSS style property&mdash;for example, `[style.width]=\"width\"`.\nAngular sets the property to the value of the bound expression, which is usually a string.\nOptionally, you can add a unit extension like `em` or `%`, which requires a number type.\n\n<div class=\"alert is-helpful\">\n\nYou can write a style property name in either [dash-case](guide/glossary#dash-case), or\n[camelCase](guide/glossary#camelcase).\n\n</div>\n-->\n<p>스타일을 하나만 바인딩하려면 <code>[style.width]=\"width\"</code>처럼 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code> 접두사 뒤에 마침표(<code>.</code>)를 붙이고 원하는 CSS 스타일 프로퍼티 이름을 지정하면 됩니다.\nAngular는 바인딩된 표현식을 평가하고 프로퍼티 값으로 지정하는데, 보통 이 값은 문자열 타입이지만 <code>em</code>이나 <code>%</code>와 같은 단위를 붙이면 숫자를 사용할 수도 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p>스타일 프로퍼티 이름은 <a href=\"guide/glossary#dash-case\">대시-케이스(dash-case)</a>와 <a href=\"guide/glossary#camelcase\">캐멀 케이스(camelCase)</a> 중 하나를 사용할 수 있습니다.</p>\n</div>\n<!--\n### Binding to multiple styles\n-->\n<h3 id=\"스타일-여러개-바인딩하기\">스타일 여러개 바인딩하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/attribute-binding#스타일-여러개-바인딩하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo toggle multiple styles, bind to the `[style]` attribute&mdash;for example, `[style]=\"styleExpression\"`.\nThe expression is often a string list of styles such as `\"width: 100px; height: 100px;\"`.\n\nYou can also format the expression as an object with style names as the keys and style values as the values, such as `{width: '100px', height: '100px'}`.\n\n<div class=\"alert is-important\">\n\nWith any object-like expression&mdash;such as `object`, `Array`, `Map`, or `Set`&mdash;the identity of the object must change for Angular to update the class list.\nUpdating the property without changing object identity has no effect.\n\n</div>\n\nIf there are multiple bindings to the same style attribute, Angular uses [styling precedence](guide/style-precedence) to determine which binding to use.\n\nThe following table summarizes style binding syntax.\n-->\n<p>스타일 여러개를 한번에 조작하려면 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"스타일-표현식\"</code>이라는 문법처럼 <code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]</code> 어트리뷰트를 바인딩하면 됩니다.\n이 표현식의 결과는 <code>\"width: 100px; height: 100px;\"</code>과 같은 문자열 형식으로 구성합니다.</p>\n<p>스타일을 바인딩 할 때는 스타일 이름을 키로 하는 객체를 사용할 수도 있습니다.\n표현식에 <code>{width: '100px', height: '100px'}</code>과 같은 객체를 바인딩하면 됩니다.</p>\n<div class=\"alert is-important\">\n<p><code>object</code>, <code>Array</code>, <code>Map</code>, <code>Set</code>과 같은 객체를 표현식에 사용하면 이 객체의 인스턴스가 변경되어야 스타일이 제대로 반영됩니다.\n객체 인스턴스는 그대로고 프로퍼티 값만 변경되면 반영되지 않습니다.</p>\n</div>\n<p>같은 스타일 어트리뷰트가 여러 곳에서 바인딩되면 <a href=\"guide/style-precedence\">스타일 지정 우선순위</a>에 따라 적용 여부가 결정됩니다.\n스타일 바인딩 문법을 요약하면 이렇습니다.</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"15%\">\n  \n  <col width=\"20%\">\n  \n  <col width=\"35%\">\n  \n  <col width=\"30%\">\n  \n  </colgroup><tbody><tr>\n    <!--\n    <th>\n      Binding Type\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Input Type\n    </th>\n    <th>\n      Example Input Values\n    </th>\n    -->\n    <th>\n      바인딩 타입\n    </th>\n    <th>\n      문법\n    </th>\n    <th>\n      입력값 타입\n    </th>\n    <th>\n      입력값 예시\n    </th>\n  </tr>\n  <tr>\n    <!--\n    <td>Single style binding</td>\n    -->\n    <td>스타일 하나 바인딩</td>\n    <td><code>[style.width]=\"width\"</code></td>\n    <td><code>string | undefined | null</code></td>\n    <td><code>\"100px\"</code></td>\n  </tr>\n  <tr>\n  </tr><tr>\n    <!--\n    <td>Single style binding with units</td>\n    -->\n    <td>단위와 함께 스타일 하나 바인딩</td>\n    <td><code>[style.width.px]=\"width\"</code></td>\n    <td><code>number | undefined | null</code></td>\n    <td><code>100</code></td>\n  </tr>\n    <tr>\n    <!--\n    <td rowspan=3>Multi-style binding</td>\n    -->\n    <td rowspan=\"3\">스타일 여러개 바인딩</td>\n    <td rowspan=\"3\"><code>[<a href=\"api/animations/style\" class=\"code-anchor\">style</a>]=\"styleExpression\"</code></td>\n    <td><code>string</code></td>\n    <td><code>\"width: 100px; height: 100px\"</code></td>\n  </tr>\n  <tr>\n    <td><code>{[key: string]: string | undefined | null}</code></td>\n    <td><code>{width: '100px', height: '100px'}</code></td>\n  </tr>\n  <tr>\n    <td><code>Array</code>&#x3C;<code>string</code>></td>\n    <td><code>['width', '100px']</code></td>\n  </tr>\n</tbody></table>\n\n</div>\n\n<!-- links to this doc:\n - guide/accessibility\n - guide/ajs-quick-reference\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/glossary\n - guide/router-tutorial-toh\n - guide/template-syntax\n - tutorial/toh-pt2\n-->\n<!-- links from this doc:\n - api/animations/style\n - guide/attribute-binding#aria-어트리뷰트-바인딩하기\n - guide/attribute-binding#class-어트리뷰트-바인딩하기\n - guide/attribute-binding#colspan-바인딩하기\n - guide/attribute-binding#css-class-하나-바인딩하기\n - guide/attribute-binding#css-클래스-여러개-바인딩하기\n - guide/attribute-binding#문법\n - guide/attribute-binding#스타일-어트리뷰트-바인딩하기\n - guide/attribute-binding#스타일-여러개-바인딩하기\n - guide/attribute-binding#스타일-하나-바인딩하기\n - guide/attribute-binding#어트리뷰트-바인딩하기\n - guide/attribute-binding#어트리뷰트-클래스-스타일-바인딩\n - guide/glossary#camelcase\n - guide/glossary#dash-case\n - guide/property-binding\n - guide/property-binding#colspan\n - guide/style-precedence\n - guide/style-precedence#styling-delegation\n - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\n - https://developer.mozilla.org/en-US/docs/Web/SVG\n - https://github.com/angular/angular/edit/master/aio/content/guide/attribute-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}