{
  "id": "guide/npm-packages",
  "title": "Npm 패키지",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/npm-packages.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Npm Packages\n-->\n<h1 id=\"npm-패키지\">Npm 패키지<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#npm-패키지\"><i class=\"material-icons\">link</i></a></h1>\n<!--\n The [**Angular CLI**](https://cli.angular.io/), Angular applications, and Angular itself depend upon features and functionality provided by libraries that are available as [**npm**](https://docs.npmjs.com/) packages.\n-->\n<p><a href=\"https://cli.angular.io/\"><strong>Angular CLI</strong></a>와 Angular 애플리케이션, Angular 프레임워크 그 자체도 <a href=\"https://docs.npmjs.com/\"><strong>npm</strong></a> 패키지를 사용합니다.</p>\n<!--\nYou can download and install these npm packages with the [**npm client**](https://docs.npmjs.com/cli/install), which runs as a Node.js® application.\n-->\n<p>이렇게 사용하는 npm 패키지는 일반적인 Node.js® 애플리케이션을 실행하는 것처럼 <a href=\"https://docs.npmjs.com/cli/install\"><strong>npm 클라이언트</strong></a>를 사용해서 다운받고 설치할 수 있습니다.</p>\n<!--\nThe [**yarn client**](https://yarnpkg.com/en/) is a popular alternative for downloading and installing npm packages.\nThe Angular CLI uses `yarn` by default to install npm packages when you create a new project.\n-->\n<p><a href=\"https://yarnpkg.com/en/\"><strong>yarn 클라이언트</strong></a>는 npm 패키지 매니저를 대체하는 툴로 많이 사용됩니다.\nAngular CLI도 기본 패키지 매니저로 <code>yarn</code>을 사용합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nNode.js and npm are essential to Angular development.\n\n[Get them now](https://docs.npmjs.com/getting-started/installing-node \"Installing Node.js and updating npm\")\nif they're not already installed on your machine.\n\n**Verify that you are running Node.js `v8.x` or higher and npm `5.x` or higher**\nby running the commands `node -v` and `npm -v` in a terminal/console window.\nOlder versions produce errors.\n\nConsider using [nvm](https://github.com/creationix/nvm) for managing multiple\nversions of Node.js and npm. You may need [nvm](https://github.com/creationix/nvm) if\nyou already have projects running on your machine that use other versions of Node.js and npm.\n-->\n<p>Angular 애플리케이션을 개발하려면 Node.js와 npm이 꼭 필요합니다.</p>\n<p>아직 PC에 설치되어 있지 않다면 <a href=\"https://docs.npmjs.com/getting-started/installing-node\" title=\"Installing Node.js and updating npm\">지금 설치</a>하세요.</p>\n<p>그리고 터미널이나 콘솔창에서 <code>node -v</code>, <code>npm -v</code> 명령을 실행했을 때 <strong>Node.js 버전은 <code>v8.x</code>이상, npm 버전은 <code>5.x</code> 이상</strong>이어야 합니다. 이전 버전에서는 에러가 발생할 수 있습니다.</p>\n<p>Node.js와 npm을 여러 버전으로 관리해야 한다면 <a href=\"https://github.com/creationix/nvm\">nvm</a>을 사용해보는 것도 좋습니다. <a href=\"https://github.com/creationix/nvm\">nvm</a>은 현재 PC에 설치된 Node.js와 npm과는 다른 버전을 사용하는 프로젝트를 실행할 때도 사용할 수 있습니다.</p>\n</div>\n<h2 id=\"packagejson\"><em>package.json</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#packagejson\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nBoth `npm` and `yarn` install packages that are identified in a [**package.json**](https://docs.npmjs.com/files/package.json) file.\n\nThe CLI `ng new` command creates a default `package.json` file for your project.\nThis `package.json` specifies _a starter set of packages_ that work well together and \njointly support many common application scenarios.\n\nYou will add packages to `package.json` as your application evolves.\nYou may even remove some.\n\nThis guide focuses on the most important packages in the starter set.\n-->\n<p><code>npm</code>과 <code>yarn</code>으로 설치한 패키지는 모두 <a href=\"https://docs.npmjs.com/files/package.json\"><strong>package.json</strong></a> 파일에 추가됩니다.</p>\n<p>그리고 Angular CLI로 <code>ng new</code> 명령을 실행해서 프로젝트를 새로 만들 때도 기본 <code>package.json</code> 파일이 생성됩니다. 이 때 만들어지는 <code>package.json</code> 파일은 애플리케이션에 기본적으로 필요한 기능을 담은 <em>스타터 셋</em> 이라고도 볼 수 있습니다.</p>\n<p>애플리케이션이 점차 확장되면 <code>package.json</code>에 새로운 패키지를 추가하게 될 것입니다.\n물론 사용하지 않는 패키지는 제거할 수도 있습니다.</p>\n<p>이 문서에서는 스타터 셋에 포함된 패키지 중 중요한 것에 대해 소개합니다.</p>\n<!--\n#### *dependencies* and *devDependencies*\n-->\n<h4 id=\"dependencies와-devdependencies\"><em>dependencies</em>와 <em>devDependencies</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#dependencies와-devdependencies\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `package.json` includes two sets of packages,\n[dependencies](guide/npm-packages#dependencies) and [devDependencies](guide/npm-packages#dev-dependencies).\n\nThe *dependencies* are essential to *running* the application.\nThe *devDependencies* are only necessary to *develop* the application.\n-->\n<p><code>package.json</code>에서 관리하는 패키지들은 <a href=\"guide/npm-packages#dependencies\">dependencies</a>와 <a href=\"guide/npm-packages#dev-dependencies\">devDependencies</a>로 나뉘어 집니다.</p>\n<p><em>dependencies</em>에 추가된 패키지는 애플리케이션을 <em>실행할 때</em> 필요합니다.\n그리고 <em>devDependencies</em>에 추가된 패키지는 애플리케이션을 <em>개발할 때만</em> 필요합니다.</p>\n<a id=\"dependencies\"></a>\n<h2 id=\"dependencies\"><em>Dependencies</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#dependencies\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `dependencies` section of `package.json` contains:\n\n* **Angular packages**: Angular core and optional modules; their package names begin `@angular/`.\n\n* **Support packages**: 3rd party libraries that must be present for Angular apps to run.\n\n* **Polyfill packages**: Polyfills plug gaps in a browser's JavaScript implementation.\n-->\n<p><code><a href=\"api/core/ResolvedReflectiveFactory#dependencies\" class=\"code-anchor\">dependencies</a></code>에는 다음과 같은 패키지가 해당됩니다:</p>\n<ul>\n<li>\n<p><strong>Angular 패키지</strong>:  Angular 코어 모듈과 옵션 모듈이 해당됩니다. 모듈의 이름은 모두 <code>@angular/</code>로 시작합니다.</p>\n</li>\n<li>\n<p><strong>지원 패키지</strong>: Angular가 실행될 때 필요한 서드파티 라이브러리가 해당됩니다.</p>\n</li>\n<li>\n<p><strong>폴리필 패키지</strong>: 브라우저에서 최신 JavaScript 표준을 지원하지 않는 경우에 사용하는 라이브러리가 해당됩니다.</p>\n</li>\n</ul>\n<!--\n### Angular Packages\n-->\n<h3 id=\"angular-패키지\">Angular 패키지<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#angular-패키지\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n**@angular/animations**: Angular's animations library makes it easy to define and apply animation effects such as page and list transitions.\nRead about it in the [Animations guide](guide/animations).\n-->\n<p><strong>@angular/animation</strong>: 페이지 전환이나 리스트에 사용되는 애니메이션 기능을 제공하는 라이브러리입니다.\n자세한 내용은 <a href=\"guide/animations\">애니메이션 문서</a>를 참고하세요.</p>\n<!--\n**@angular/common**: The commonly needed services, pipes, and directives provided by the Angular team.\nThe [`HttpClientModule`](guide/http) is also here, in the '@angular/common/http' subfolder.\n-->\n<p><strong>@angular/common</strong>: 서비스나 파이프, 디렉티브를 사용하기 위해 필요한 라이브러리입니다. <a href=\"guide/http\"><code>HttpClientModule</code></a>도 이 모듈에 포함되며, 코드는 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 폴더에 있습니다.</p>\n<!--\n**@angular/core**: Critical runtime parts of the framework needed by every application.\nIncludes all metadata decorators, `Component`, `Directive`,  dependency injection, and the component lifecycle hooks.\n-->\n<p><strong>@angular/core</strong>: Angular 애플리케이션이 실행될 때 꼭 필요한 라이브러리입니다. <code><a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code>, <code><a href=\"api/core/Directive\" class=\"code-anchor\">Directive</a></code>와 같은 메타데이터 데코레이터, 의존성 주입, 컴포넌트 라이프싸이클 후킹 시스템이 포함되어 있습니다.</p>\n<!--\n**@angular/compiler**: Angular's *Template Compiler*.\nIt understands templates and can convert them to code that makes the application run and render.\nTypically you don’t interact with the compiler directly; rather, you use it indirectly via `platform-browser-dynamic` when [JIT compiling](guide/aot-compiler) in the browser.\n-->\n<p><strong>@angular/compiler</strong>: Angular <em>템플릿 컴파일러</em>입니다.\n템플릿 컴파일러는 템플릿을 분석해서 애플리케이션이 동작할 때 화면에 렌더링할 수 있는 코드 형태로 변경합니다.\n일반적으로 이 컴파일러를 직접 다루는 일은 없지만, 브라우저에서 <a href=\"guide/aot-compiler\">JIT 컴파일 할 때</a> <code>platform-browser-dynamic</code> 라이브러리를 사용하게 되는데 이 라이브러리가 템플릿 컴파일러를 사용합니다.</p>\n<!--\n**@angular/forms**: support for both [template-driven](guide/forms) and [reactive forms](guide/reactive-forms).\n-->\n<p><strong>@angular/forms</strong>: <a href=\"guide/forms\">템플릿 기반 폼</a>과 <a href=\"guide/reactive-forms\">반응형 폼</a>을 제공하는 라이브러리입니다.</p>\n<!--\n**@angular/http**: Angular's old, deprecated, HTTP client.\n-->\n<p><strong>@angular/http</strong>: Angular HTTP 클라이언트 기능을 제공하는 라이브러리입니다. 이 라이브러리는 지원이 중단되었습니다.</p>\n<!--\n**@angular/platform-browser**: Everything DOM and browser related, especially\nthe pieces that help render into the DOM.\nThis package also includes the `bootstrapModuleFactory()` method\nfor bootstrapping applications for production builds that pre-compile with [AOT](guide/aot-compiler).\n-->\n<p><strong>@angular/platform-browser</strong>: DOM과 브라우저에 관련된 기능을 제공하는 라이브러리이며 이 라이브러리를 통해 DOM에 렌더링하는 기능을 사용할 수 있습니다.\n<a href=\"guide/aot-compiler\">AOT 컴파일러</a>로 애플리케이션을 부트스트랩하는 <code><a href=\"api/core/PlatformRef#bootstrapModuleFactory\" class=\"code-anchor\">bootstrapModuleFactory()</a></code> 메소드도 이 패키지에 있습니다.</p>\n<!--\n**@angular/platform-browser-dynamic**: Includes [Providers](api/core/Provider)\nand methods to compile and run the app on the client \nusing the [JIT compiler](guide/aot-compiler).\n-->\n<p><strong>@angular/platform-browser-dynamic</strong>: <a href=\"api/core/Provider\">프로바이더</a>와 <a href=\"guide/aot-compiler\">JIT 컴파일러</a>를 제공하는 라이브러리입니다. JIT 컴일러는 TypeScript 코드를 클라이언트에서 직접 JavaScript 코드로 컴파일할 때 사용합니다.</p>\n<!--\n**@angular/router**: The [router module](/guide/router) navigates among your app pages when the browser URL changes.\n-->\n<p><strong>@angular/router</strong>: 브라우저 URL이 변경될 때마다 페이지를 전환하는 <a href=\"/guide/router\">라우터 모듈</a>을 제공하는 라이브러리입니다.</p>\n<!--\n**@angular/upgrade**: Set of utilities for upgrading AngularJS applications to Angular.\n-->\n<p><strong>@angular/upgrade</strong>: AngularJS 애플리케이션을 Angular로 업그레이드할 때 사용할 수 있는 기능을 제공하는 라이브러리입니다.</p>\n<a id=\"polyfills\"></a>\n<!--\n### Polyfill packages\n-->\n<h3 id=\"폴리필-패키지\">폴리필 패키지<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#폴리필-패키지\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nMany browsers lack native support for some features in the latest HTML standards,\nfeatures that Angular requires.\n\"[Polyfills](https://en.wikipedia.org/wiki/Polyfill)\" can emulate the missing features.\nThe [Browser Support](guide/browser-support) guide explains which browsers need polyfills and \nhow you can add them.\n-->\n<p>Angular가 사용하는 최신 HTML 표준을 모든 브라우저가 네이티브로 지원하는 것은 아닙니다.\n그래서 이 기능들을 사용하기 위해 \"<a href=\"https://en.wikipedia.org/wiki/Polyfill\">폴리필(Polyfills)</a>\"을 사용합니다.\n브라우저에 따라 어떤 폴리필이 필요한지 확인하려면 <a href=\"guide/browser-support\">브라우저 지원</a> 문서를 확인하세요.</p>\n<!--\nThe default `package.json` installs the **[core-js](https://github.com/zloirock/core-js)** package\nwhich polyfills missing features for several popular browser.\n-->\n<p>기본 폴리필인 <strong><a href=\"https://github.com/zloirock/core-js\">core-js</a></strong>는 Angular CLI로 프로젝트를 생성할 때 <code>package.json</code> 파일에 자동으로 포함됩니다.</p>\n<!--\n### Support packages\n-->\n<h3 id=\"기타-패키지\">기타 패키지<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#기타-패키지\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n**[rxjs](https://github.com/benlesh/RxJS)**: Many Angular APIs return _observables_. RxJS is an implementation of the proposed [Observables specification](https://github.com/zenparsing/es-observable) currently before the\n[TC39](http://www.ecma-international.org/memento/TC39.htm) committee that determines standards for the JavaScript language.\n-->\n<p><strong><a href=\"https://github.com/benlesh/RxJS\">rxjs</a></strong>: Angular에는 <em>옵저버블</em> 을 반환하는 API가 많습니다. 옵저버블은 <a href=\"http://www.ecma-international.org/memento/TC39.htm\">TC39</a> 위원회에서 JavaScript 표준으로 검토되고 있지만 아직까지 정식 표준으로 지정되지는 않았습니다. RxJS는 현재 시점에서 이 <a href=\"https://github.com/zenparsing/es-observable\">옵저버블 표준</a>을 제공하는 라이브러리입니다.</p>\n<!--\n**[zone.js](https://github.com/angular/zone.js)**: Angular relies on zone.js to run Angular's change detection processes when native JavaScript operations raise events.  Zone.js is an implementation of a [specification](https://gist.github.com/mhevery/63fdcdf7c65886051d55) currently before the\n[TC39](http://www.ecma-international.org/memento/TC39.htm) committee that determines standards for the JavaScript language.\n-->\n<p><strong><a href=\"https://github.com/angular/zone.js\">zone.js</a></strong>: Angular의 변화 감지 과정은 zone.js 라이브러리를 사용합니다. 이벤트 발생과 관련된 새로운 JavaScript 표준이 <a href=\"http://www.ecma-international.org/memento/TC39.htm\">TC39</a>에서 검토중이며, 현재 시점에 <a href=\"https://gist.github.com/mhevery/63fdcdf7c65886051d55\">이 표준</a>을 도입하기 위해 zone.js가 사용됩니다.</p>\n<a id=\"dev-dependencies\"></a>\n<h2 id=\"devdependencies\"><em>DevDependencies</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#devdependencies\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe packages listed in the *devDependencies* section of the `package.json` help you develop the application on your local machine.\n-->\n<p><code>package.json</code> 파일의 <em>devDependencies</em> 목록에 추가된 패키지는 애플리케이션을 로컬환경에서 개발할 때 필요한 라이브러리들입니다.</p>\n<!--\nYou don't deploy them with the production application although there is no harm in doing so.\n-->\n<p>이 목록에 있는 라이브러리들은 애플리케이션을 운영용으로 빌드할 때 포함할 필요가 없습니다.</p>\n<!--\n**[@angular/cli](https://github.com/angular/angular-cli/)**: The Angular CLI tools.\n-->\n<p><strong><a href=\"https://github.com/angular/angular-cli/\">@angular/cli</a></strong>: Angular CLI입니다.</p>\n<!--\n**[@angular/compiler-cli](https://github.com/angular/angular/blob/master/packages/compiler-cli/README.md)**: The Angular compiler, which is invoked by the Angular CLI's `build` and `serve` commands.\n-->\n<p><strong><a href=\"https://github.com/angular/angular/blob/master/packages/compiler-cli/README.md\">@angular/compiler-cli</a></strong>: Angular CLI의 <code>build</code> 명령이나 <code>serve</code> 명령을 실행할 때 사용되는 Angular 컴파일러입니다.</p>\n<!--\n**[@angular/language-service](https://github.com/angular/angular-cli/)**: The Angular language service analyzes component templates and provides type and error information that TypeScript-aware editors can use to improve the developer's experience.\nFor example, see the [Angular language service extension for VS Code](https://marketplace.visualstudio.com/items?itemName=Angular.ng-template)\n-->\n<p><strong><a href=\"https://github.com/angular/angular-cli/\">@angular/language-service</a></strong>: Angular의 TypeScript 지원 라이브러리입니다. 이 라이브러리는 컴포넌트 템플릿에 사용된 객체의 타입을 분석하고 TypeScript 지원 기능을 제공하는 에디터에 추가 디버깅 정보를 제공합니다.\n<a href=\"https://marketplace.visualstudio.com/items?itemName=Angular.ng-template\">Angular language service extension for VS Code</a>와 같은 플러그인이 이 라이브러리를 활용한 것입니다.</p>\n<!--\n**@types/... **: TypeScript definition files for 3rd party libraries such as Jasmine and Node.js.\n-->\n<p><strong>@types/... </strong>: Jasmine이나 Node.js 등 서드파티 라이브러리의 TypeScript 타입 정보를 제공하는 라이브러리입니다.</p>\n<!--\n**[codelyzer](https://www.npmjs.com/package/codelyzer)**: A linter for Angular apps whose rules conform to the Angular [style guide](guide/styleguide).\n-->\n<p><strong><a href=\"https://www.npmjs.com/package/codelyzer\">codelyzer</a></strong>: Angular <a href=\"guide/styleguide\">스타일 가이드</a>처럼 코딩 스타일 규칙을 정의할 때 사용하는 라이브러리입다.</p>\n<!--\n**jasmine/... **: packages to support the [Jasmine](https://jasmine.github.io/) test library.\n-->\n<p><strong>jasmine/... </strong>: <a href=\"https://jasmine.github.io/\">Jasmine</a> 테스트 라이브러리와 관련된 패키지들입니다.</p>\n<!--\n**karma/... **: packages to support the [karma](https://www.npmjs.com/package/karma) test runner.\n-->\n<p><strong>karma/... </strong>: 테스트 러너인 <a href=\"https://www.npmjs.com/package/karma\">karma</a>를 실행할 때 필요한 패키지들입니다.</p>\n<!--\n**[protractor](https://www.npmjs.com/package/protractor)**: an end-to-end (e2e) framework for Angular apps. \nBuilt on top of [WebDriverJS](https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs).\n-->\n<p><strong><a href=\"https://www.npmjs.com/package/protractor\">protractor</a></strong>: Angular에 엔드-투-엔드 (e2e) 테스트를 적용할 때 사용하는 프레임워크입니다.\n이 라이브러리는 <a href=\"https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs\">WebDriverJS</a>를 활용합니다.</p>\n<!--\n**[ts-node](https://www.npmjs.com/package/ts-node)**: TypeScript execution environment and REPL for Node.js.\n-->\n<p><strong><a href=\"https://www.npmjs.com/package/ts-node\">ts-node</a></strong>: Node.js REPL 환경에 TypeScript 기능을 제공하는 라이브러리입니다.</p>\n<!--\n**[tslint](https://www.npmjs.com/package/tslint)**: a static analysis tool that checks TypeScript code for readability, maintainability, and functionality errors.\n-->\n<p><strong><a href=\"https://www.npmjs.com/package/tslint\">tslint</a></strong>: TypeScript 코드의 가독성, 유지보수 편의성, 기능 에러를 분석하는 정적 코드 분석 툴입니다.</p>\n<!--\n**[typescript](https://www.npmjs.com/package/typescript)**:\nthe TypeScript language server, including the *tsc* TypeScript compiler.\n-->\n<p><strong><a href=\"https://www.npmjs.com/package/typescript\">typescript</a></strong>: TypeScript 컴파일러인 <em>tsc</em>를 제공하는 TypeScript 언어셋입니다.</p>\n<!--\n## So many packages! So many files!\n-->\n<h2 id=\"패키지가-너무-많다-파일도-많다\">패키지가 너무 많다! 파일도 많다!<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#패키지가-너무-많다-파일도-많다\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe default `package.json` installs more packages than you'll need for your project.\n\nA given package may contain tens, hundreds, even thousands of files,\nall of them in your local machine's `node_modules` directory.\nThe sheer volume of files is intimidating, \n\nYou can remove packages that you don't need but how can you be sure that you won't need it?\nAs a practical matter, it's better to install a package you don't need than worry about it.\nExtra packages and package files on your local development machine are harmless.\n\nBy default the Angular CLI build process bundles into a single file just the few \"vendor\" library files that your application actually needs.\nThe browser downloads this bundle, not the original package files.\n\nSee the [Deployment](guide/deployment) to learn more.\n-->\n<p>애플리케이션이 확장되면서 기본 <code>package.json</code>에 있는 패키지 외에 더 많은 패키지들을 설치하게 될 것입니다.</p>\n<p>그런데 각 패키지는 수십, 수백, 많게는 수천개의 파일로 구성될 수 있으며, 이 파일은 모두 <code>node_modules</code> 폴더에 설치됩니다.\n이 파일들이 차지하는 용량도 작지는 않습니다.</p>\n<p>필요없는 패키지는 삭제해도 되지만 어떤 패키지가 필요없는지 어떻게 알 수 있을까요?\n실제 개발환경이라며 사용하지 않는 패키지라도 그대로 설치하는 것도 나쁘지 않습니다.\n실제로 사용하지 않는 패키지가 로컬 개발 환경에 설치되었다고 해도 특별히 문제될 것은 없기 때문입니다.</p>\n<p>그리고 Angular CLI가 애플리케이션을 빌드하게 되면 이 애플리케이션에 실제로 사용되는 라이브러리만 최종 결과물에 포함됩니다.\n브라우저가 다운로드하는 것은 이렇게 빌드된 최종 결과물이며, 원래 패키지 파일을 전부 다운로드하는 것은 아닙니다.</p>\n<p>더 자세한 내용은 <a href=\"guide/deployment\">배포</a> 문서를 참고하세요.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/file-structure\n - guide/glossary\n-->\n<!-- links from this doc:\n - /guide/router\n - api/common/http\n - api/core/Component\n - api/core/Directive\n - api/core/PlatformRef#bootstrapModuleFactory\n - api/core/Provider\n - api/core/ResolvedReflectiveFactory#dependencies\n - guide/animations\n - guide/aot-compiler\n - guide/browser-support\n - guide/deployment\n - guide/forms\n - guide/http\n - guide/npm-packages#angular-패키지\n - guide/npm-packages#dependencies\n - guide/npm-packages#dependencies와-devdependencies\n - guide/npm-packages#dev-dependencies\n - guide/npm-packages#devdependencies\n - guide/npm-packages#npm-패키지\n - guide/npm-packages#packagejson\n - guide/npm-packages#기타-패키지\n - guide/npm-packages#패키지가-너무-많다-파일도-많다\n - guide/npm-packages#폴리필-패키지\n - guide/reactive-forms\n - guide/styleguide\n - http://www.ecma-international.org/memento/TC39.htm\n - https://cli.angular.io/\n - https://docs.npmjs.com/\n - https://docs.npmjs.com/cli/install\n - https://docs.npmjs.com/files/package.json\n - https://docs.npmjs.com/getting-started/installing-node\n - https://en.wikipedia.org/wiki/Polyfill\n - https://gist.github.com/mhevery/63fdcdf7c65886051d55\n - https://github.com/SeleniumHQ/selenium/wiki/WebDriverJs\n - https://github.com/angular/angular-cli/\n - https://github.com/angular/angular/blob/master/packages/compiler-cli/README.md\n - https://github.com/angular/angular/edit/master/aio/content/guide/npm-packages.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/zone.js\n - https://github.com/benlesh/RxJS\n - https://github.com/creationix/nvm\n - https://github.com/zenparsing/es-observable\n - https://github.com/zloirock/core-js\n - https://jasmine.github.io/\n - https://marketplace.visualstudio.com/items?itemName=Angular.ng-template\n - https://www.npmjs.com/package/codelyzer\n - https://www.npmjs.com/package/karma\n - https://www.npmjs.com/package/protractor\n - https://www.npmjs.com/package/ts-node\n - https://www.npmjs.com/package/tslint\n - https://www.npmjs.com/package/typescript\n - https://yarnpkg.com/en/\n-->"
}