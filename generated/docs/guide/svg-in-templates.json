{
  "id": "guide/svg-in-templates",
  "title": "SVG in templates",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/svg-in-templates.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"svg-in-templates\">SVG in templates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/svg-in-templates#svg-in-templates\"><i class=\"material-icons\">link</i></a></h1>\n<p>It is possible to use SVG as valid templates in Angular. All of the template syntax below is\napplicable to both SVG and HTML. Learn more in the SVG <a href=\"https://www.w3.org/TR/SVG11/\">1.1</a> and\n<a href=\"https://www.w3.org/TR/SVG2/\">2.0</a> specifications.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example name=\"template-syntax\"></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<p>Why would you use SVG as template, instead of simply adding it as image to your application?</p>\n<p>When you use an SVG as the template, you are able to use directives and bindings just like with HTML\ntemplates. This means that you will be able to dynamically generate interactive graphics.</p>\n<p>Refer to the sample code snippet below for a syntax example:</p>\n<code-example path=\"template-syntax/src/app/svg.component.ts\" header=\"src/app/svg.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-svg',\n  templateUrl: './svg.component.svg',\n  styleUrls: ['./svg.component.css']\n})\nexport class SvgComponent {\n  fillColor = 'rgb(255, 0, 0)';\n\n  changeColor() {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    this.fillColor = `rgb(${r}, ${g}, ${b})`;\n  }\n}\n\n\n</code-example>\n<p>Add the following code to your <code>svg.component.svg</code> file:</p>\n<code-example path=\"template-syntax/src/app/svg.component.svg\" header=\"src/app/svg.component.svg\">\n&#x3C;svg>\n  &#x3C;g>\n    &#x3C;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" [attr.fill]=\"fillColor\" (click)=\"changeColor()\" />\n    &#x3C;text x=\"120\" y=\"50\">click the rectangle to change the fill color&#x3C;/text>\n  &#x3C;/g>\n&#x3C;/svg>\n\n\n</code-example>\n<p>Here you can see the use of a <code>click()</code> event binding and the property binding syntax\n(<code>[attr.fill]=\"fillColor\"</code>).</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Component\n - guide/svg-in-templates#svg-in-templates\n - https://github.com/angular/angular/edit/master/aio/content/guide/svg-in-templates.md?message=docs%3A%20describe%20your%20change...\n - https://www.w3.org/TR/SVG11/\n - https://www.w3.org/TR/SVG2/\n-->"
}