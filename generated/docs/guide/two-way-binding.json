{
  "id": "guide/two-way-binding",
  "title": "양방향 바인딩 [(...)]",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/two-way-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Two-way binding `[(...)]`\n-->\n<h1 id=\"양방향-바인딩-\">양방향 바인딩 <code>[(...)]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#양방향-바인딩-\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nTwo-way binding gives your app a way to share data between a component class and\nits template.\n\n<div class=\"alert is-helpful\">\n\nSee the <live-example></live-example> for a working example containing the code snippets in this guide.\n\n</div>\n-->\n<p>양방향 바인딩(two-way binding)을 활용하면 컴포넌트 클래스와 컴포넌트 템플릿 사이에 데이터를 공유할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<!--\n## Basics of two-way binding\n-->\n<h2 id=\"기본-개념\">기본 개념<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#기본-개념\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTwo-way binding does two things:\n\n1. Sets a specific element property.\n1. Listens for an element change event.\n\nAngular offers a special _two-way data binding_ syntax for this purpose, `[()]`.\nThe `[()]` syntax combines the brackets\nof property binding, `[]`, with the parentheses of event binding, `()`.\n\n<div class=\"callout is-important\">\n\n<header>\n  [( )] = banana in a box\n</header>\n\nVisualize a *banana in a box* to remember that the parentheses go _inside_ the brackets.\n\n</div>\n\nThe `[()]` syntax is easy to demonstrate when the element has a settable\nproperty called `x` and a corresponding event named `xChange`.\nHere's a `SizerComponent` that fits this pattern.\nIt has a `size` value property and a companion `sizeChange` event:\n\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" header=\"src/app/sizer.component.ts\">\nimport { Component, Input, Output, EventEmitter } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-sizer&#39;,\n  templateUrl: &#39;./sizer.component.html&#39;,\n  styleUrls: [&#39;./sizer.component.css&#39;]\n})\nexport class SizerComponent {\n\n\n  @Input()  size: number | string;\n  @Output() sizeChange = new EventEmitter&lt;number&gt;();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n\n}\n\n\n</code-example>\n\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&lt;div&gt;\n  &lt;button (click)=&quot;dec()&quot; title=&quot;smaller&quot;&gt;-&lt;/button&gt;\n  &lt;button (click)=&quot;inc()&quot; title=&quot;bigger&quot;&gt;+&lt;/button&gt;\n  &lt;label [style.font-size.px]=&quot;size&quot;&gt;FontSize: {{size}}px&lt;/label&gt;\n&lt;/div&gt;\n\n\n</code-example>\n\nThe initial `size` is an input value from a property binding.\nClicking the buttons increases or decreases the `size`, within\nmin/max value constraints,\nand then raises, or emits, the `sizeChange` event with the adjusted size.\n\nHere's an example in which the `AppComponent.fontSizePx` is two-way bound to the `SizerComponent`:\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-1)\" region=\"two-way-1\">\n&lt;app-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/app-sizer&gt;\n&lt;div [style.font-size.px]=&quot;fontSizePx&quot;&gt;Resizable Text&lt;/div&gt;\n\n</code-example>\n\nThe `AppComponent.fontSizePx` establishes the initial `SizerComponent.size` value.\n\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n\nClicking the buttons updates the `AppComponent.fontSizePx` via the two-way binding.\nThe revised `AppComponent.fontSizePx` value flows through to the _style_ binding,\nmaking the displayed text bigger or smaller.\n\nThe two-way binding syntax is really just syntactic sugar for a _property_ binding and an _event_ binding.\nAngular desugars the `SizerComponent` binding into this:\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-2)\" region=\"two-way-2\">\n&lt;app-sizer [size]=&quot;fontSizePx&quot; (sizeChange)=&quot;fontSizePx=$event&quot;&gt;&lt;/app-sizer&gt;\n\n</code-example>\n\nThe `$event` variable contains the payload of the `SizerComponent.sizeChange` event.\nAngular assigns the `$event` value to the `AppComponent.fontSizePx` when the user clicks the buttons.\n-->\n<p>양방향 바인딩은 이런 용도로 사용합니다:</p>\n<ol>\n<li>엘리먼트 프로퍼티의 값을 설정합니다.</li>\n<li>엘리먼트에서 변경(<code>change</code>) 이벤트가 발생하는 것을 감지합니다.</li>\n</ol>\n<p>양방향 바인딩은 특별한 <em>양방향 데이터 바인딩</em> 문법을 사용합니다.\n<code>[()]</code>라는 형태인데, 이 문법은 프로퍼티 바인딩(<code>[]</code>)과 이벤트 바인딩(<code>()</code>)이 합쳐진 형태입니다.</p>\n<div class=\"callout is-important\">\n<header>\n  [( )] = 상자 안에 든 바나나\n</header>\n<p>대괄호와 소괄호의 순서를 헷갈리지 않으려면 <em>상자 안에 있는 바나나</em> 모양을 생각해 보세요.\n소괄호는 대괄호 <em>안에</em> 위치합니다.</p>\n</div>\n<p><code>[()]</code> 문법이 사용되었다면 엘리먼트에 있는 <code>x</code> 프로퍼티 값을 외부에서 지정할 수 있고, <code>xChange</code> 이벤트도 발생한다는 것을 의미합니다.\n<code>SizerComponent</code> 코드를 보며 알아봅시다.\n이 컴포넌트에는 <code>size</code> 프로퍼티가 있으며 <code>sizeChange</code> 이벤트도 선언되어 있습니다:</p>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" header=\"src/app/sizer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sizer',\n  templateUrl: './sizer.component.html',\n  styleUrls: ['./sizer.component.css']\n})\nexport class SizerComponent {\n\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  size: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n\n}\n\n\n</code-example>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&#x3C;div>\n  &#x3C;button (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n  &#x3C;button (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n  &#x3C;label [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/label>\n&#x3C;/div>\n\n\n</code-example>\n<p><code>size</code> 프로퍼티의 초기값은 프로퍼티 바인딩에 의해 할당됩니다.\n그리고 증감 버튼을 누를 때마다 최소값/최대값 범위 안에서 <code>size</code> 값이 변경되는데, 이 때 <code>sizeChange</code> 이벤트가 발생합니다.</p>\n<p><code>SizerComponent</code>에 양방향 바인딩으로 연결된 <code>AppComponent.fontSizePx</code> 코드를 봅시다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (양방향-바인딩-1)\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p><code>SizerComponent.size</code> 프로퍼티의 초기값은 <code>AppComponent.fontSizePx</code> 프로퍼티에 의해 할당됩니다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p>이제 증감 버튼을 누르면 양방향 바인딩에 의해 <code>AppComponent.fontSizePx</code> 프로퍼티 값이 변경됩니다.\n그리고 <code>AppComponent.fontSizePx</code>이 <em>스타일</em> 바인딩으로 연결되어 있기 때문에 이 프로퍼티 값이 변경되는 것은 화면에 표시되는 문자열이 커지고 작아지는 것으로 확인할 수 있습니다.</p>\n<p>사실 양방향 바인딩 문법은 <em>프로퍼티</em> 바인딩과 <em>이벤트</em> 바인딩을 엮어서 다르게 표현한 것입니다.\n그래서 양방향 바인딩 문법을 사용하지 않고 이렇게 구현할 수도 있습니다:</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (양방향-바인딩-2)\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<p><code>SizerComponent.sizeChange</code>에는 이벤트에 대한 정보가 담겨 <code>$event</code> 객체로 전달됩니다.\n그래서 사용자가 증감 버튼을 클릭하면 <code>AppComponent.fontSizePx</code> 값이 <code>$event</code>로 전달됩니다.</p>\n<!--\n## Two-way binding in forms\n-->\n<h2 id=\"폼에서-양방향-바인딩-사용하기\">폼에서 양방향 바인딩 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#폼에서-양방향-바인딩-사용하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe two-way binding syntax is a great convenience compared to\nseparate property and event bindings. It would be convenient to\nuse two-way binding with HTML form elements like `<input>` and\n`<select>`. However, no native HTML element follows the `x`\nvalue and `xChange` event pattern.\n\nFor more on how to use two-way binding in forms, see\nAngular [NgModel](guide/built-in-directives#ngModel).\n-->\n<p>양방향 바인딩 문법은 프로퍼티 바인딩 문법과 이벤트 바인딩 문법을 따로 사용하는 것보다 훨씬 편합니다.\n그래서 <code>&#x3C;input></code>이나 <code>&#x3C;select></code>와 같은 HTML 폼 엘리먼트에 양방향 바인딩을 활용하는 것도 아주 좋습니다.\n하지만 기본 HTML 엘리먼트에는 <code>x</code>라는 프로퍼티가 없으며 <code>xChange</code>와 같은 이벤트 패턴을 따르지도 않습니다.</p>\n<p>폼에 양방향 바인딩을 활용하는 방법에 대해 알아보려면 <a href=\"guide/built-in-directives#ngModel\">NgModel</a> 문서를 참고하세요.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/built-in-directives\n - guide/inputs-outputs\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/Output\n - guide/built-in-directives#ngModel\n - guide/two-way-binding#기본-개념\n - guide/two-way-binding#양방향-바인딩-\n - guide/two-way-binding#폼에서-양방향-바인딩-사용하기\n - https://github.com/angular/angular/edit/master/aio/content/guide/two-way-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}