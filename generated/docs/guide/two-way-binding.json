{
  "id": "guide/two-way-binding",
  "title": "양방향 바인딩(Two-way binding)",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/two-way-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Two-way binding\n-->\n<h1 id=\"양방향-바인딩two-way-binding\">양방향 바인딩(Two-way binding)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#양방향-바인딩two-way-binding\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nTwo-way binding gives components in your application a way to share data.\nUse two-way binding binding to listen for events and update values simultaneously between parent and child components.\n\n<div class=\"alert is-helpful\">\n\nSee the <live-example></live-example> for a working example containing the code snippets in this guide.\n\n</div>\n-->\n<p>양방향 바인딩을 활용하면 컴포넌트끼리 데이터를 공유할 수 있습니다.\n양방향 바인딩은 자식 컴포넌트에서 발생하는 이벤트를 감지하는 바인딩과 자식 컴포넌트에 데이터를 전달하는 프로퍼티 바인딩이 결합된 형태입니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 설명하는 내용은 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<!--\n## Prerequisites\n-->\n<h2 id=\"사전지식\">사전지식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#사전지식\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo get the most out of two-way binding, you should have a basic understanding of the following concepts:\n\n* [Property binding](guide/property-binding)\n* [Event binding](guide/event-binding)\n* [Inputs and Outputs](guide/inputs-outputs)\n\n<hr>\n\nTwo-way binding combines property binding with event binding:\n\n* [Property binding](guide/property-binding) sets a specific element property.\n* [Event binding](guide/event-binding) listens for an element change event.\n-->\n<p>양방향 바인딩에 대해 제대로 이해하려면 이런 내용에 대해 이해하고 있는 것이 좋습니다:</p>\n<ul>\n<li><a href=\"guide/property-binding\">프로퍼티 바인딩</a></li>\n<li><a href=\"guide/event-binding\">이벤트 바인딩</a></li>\n<li><a href=\"guide/inputs-outputs\">입출력 프로퍼티</a></li>\n</ul>\n<hr>\n<p>양방향 바인딩은 프로퍼티 바인딩과 이벤트 바인딩이 결합된 것입니다:</p>\n<ul>\n<li>엘리먼트 프로퍼티의 값을 지정하기 위해 <a href=\"guide/property-binding\">프로퍼티 바인딩</a>이 사용됩니다.</li>\n<li>엘리먼트가 변경된 것을 감지하기 위해 <a href=\"guide/event-binding\">이벤트 바인딩</a>이 사용됩니다.</li>\n</ul>\n<!--\n## Adding two-way data binding\n-->\n<h2 id=\"양방향-바인딩-추가하기\">양방향 바인딩 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#양방향-바인딩-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAngular's two-way binding syntax is a combination of square brackets and parentheses, `[()]`.\nThe `[()]` syntax combines the brackets of property binding, `[]`, with the parentheses of event binding, `()`, as follows.\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"two-way-syntax\">\n&lt;app-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/app-sizer&gt;\n\n</code-example>\n-->\n<p>Angular는 대괄호와 소괄호를 함께 사용하는 <code>[()]</code>라는 문법을 양방향 바인딩 문법으로 제공합니다.\n이 문법은 프로퍼티 바인딩 문법(<code>[]</code>)과 이벤트 바인딩 문법(<code>()</code>)이 결합된 형태입니다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"two-way-syntax\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n\n</code-example>\n<!--\n## How two-way binding works\n-->\n<h2 id=\"양방향-바인딩이-동작하는-과정\">양방향 바인딩이 동작하는 과정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#양방향-바인딩이-동작하는-과정\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nFor two-way data binding to work, the `@Output()` property must use the pattern, `inputChange`, where `input` is the name of the `@Input()` property.\nFor example, if the `@Input()` property is `size`, the `@Output()` property must be `sizeChange`.\n\nThe following `sizerComponent` has a `size` value property and a `sizeChange` event.\nThe `size` property is an `@Input()`, so data can flow into the `sizerComponent`.\nThe `sizeChange` event is an `@Output()`, which allows data to flow out of the `sizerComponent` to the parent component.\n\nNext, there are two methods, `dec()` to decrease the font size and `inc()` to increase the font size.\nThese two methods use `resize()` to change the value of the `size` property within min/max value constraints, and to emit an event that conveys the new `size` value.\n\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" region=\"sizer-component\" header=\"src/app/sizer.component.ts\">\nexport class SizerComponent {\n\n  @Input()  size: number | string;\n  @Output() sizeChange = new EventEmitter&lt;number&gt;();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n}\n\n</code-example>\n\nThe `sizerComponent` template has two buttons that each bind the click event to the `inc()` and `dec()` methods.\nWhen the user clicks one of the buttons, the `sizerComponent` calls the corresponding method.\nBoth methods, `inc()` and `dec()`, call the `resize()` method with a `+1` or `-1`, which in turn raises the `sizeChange` event with the new size value.\n\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&lt;div&gt;\n  &lt;button (click)=&quot;dec()&quot; title=&quot;smaller&quot;&gt;-&lt;/button&gt;\n  &lt;button (click)=&quot;inc()&quot; title=&quot;bigger&quot;&gt;+&lt;/button&gt;\n  &lt;label [style.font-size.px]=&quot;size&quot;&gt;FontSize: {{size}}px&lt;/label&gt;\n&lt;/div&gt;\n\n\n</code-example>\n\n\nIn the `AppComponent` template, `fontSizePx` is two-way bound to the `SizerComponent`.\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"two-way-1\">\n&lt;app-sizer [(size)]=&quot;fontSizePx&quot;&gt;&lt;/app-sizer&gt;\n&lt;div [style.font-size.px]=&quot;fontSizePx&quot;&gt;Resizable Text&lt;/div&gt;\n\n</code-example>\n\nIn the `AppComponent`, `fontSizePx` establishes the initial `SizerComponent.size` value by setting the value to `16`.\n\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n\nClicking the buttons updates the `AppComponent.fontSizePx`.\nThe revised `AppComponent.fontSizePx` value updates the style binding, which makes the displayed text bigger or smaller.\n\nThe two-way binding syntax is shorthand for a combination of property binding and event binding.\nThe `SizerComponent` binding as separate property binding and event binding is as follows.\n\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (expanded)\" region=\"two-way-2\">\n&lt;app-sizer [size]=&quot;fontSizePx&quot; (sizeChange)=&quot;fontSizePx=$event&quot;&gt;&lt;/app-sizer&gt;\n\n</code-example>\n\nThe `$event` variable contains the data of the `SizerComponent.sizeChange` event.\nAngular assigns the `$event` value to the `AppComponent.fontSizePx` when the user clicks the buttons.\n\n<div class=\"callout is-helpful\">\n\n  <header>Two-way binding in forms</header>\n\n  Because no native HTML element follows the `x` value and `xChange` event pattern, two-way binding with form elements requires `NgModel`.\n  For more information on how to use two-way binding in forms, see Angular [NgModel](guide/built-in-directives#ngModel).\n\n</div>\n-->\n<p>양방향 데이터 바인딩이 동작하려면 자식 컴포넌트에 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 데코레이터가 지정된 프로퍼티가 있어야 하며, 이 프로퍼티 이름이 <code>input</code>이라면 <code>inputChange</code> 프로퍼티에 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 데코레이터가 지정되어야 합니다.\n예를 들면 <code>size</code> 프로퍼티에 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 데코레이터가 지정되어 있어야 하며, <code>sizeChange</code> 프로퍼티에 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 데코레이터가 지정되어 있어야 합니다.</p>\n<p>아래 예제에서 <code>sizerComponent</code>에는 <code>size</code> 프로퍼티와 <code>sizeChange</code> 프로퍼티가 존재합니다.\n이 프로퍼티 중 <code>size</code> 프로퍼티에는 <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> 데코레이터가 지정되어 있기 때문에 데이터가 <code>sizerComponent</code> 안으로 전달될 수 있습니다.\n그리고 <code>sizeChange</code> 프로퍼티에는 <code>@<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>()</code> 데코레이터가 지정되어 있기 때문에 <code>sizerComponent</code>에서 부모 컴포넌트 방향으로 데이터가 전달될 수 있습니다.</p>\n<p><code>sizerComponent</code>에는 메서드가 3개 더 있습니다.\n<code>dec()</code> 메서드는 폰트 크기를 줄이는 메서드이고, <code>inc()</code> 메서드는 폰트 크기를 키우는 메서드입니다.\n두 메서드는 <code>resize()</code> 메서드를 활용해서 최소값/최대값 범위 안에서 <code>size</code> 프로퍼티 값을 조정하며, 새로 변경된 값으로 이벤트를 생성해서 보냅니다.</p>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" region=\"sizer-component\" header=\"src/app/sizer.component.ts\">\nexport class SizerComponent {\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  size: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n}\n\n</code-example>\n<p><code>sizerComponent</code> 템플릿에는 버튼이 2개 있으며 이 버튼은 각각 <code>inc()</code> 메서드와 <code>dec()</code> 메서드에 클릭 이벤트로 연결되어 있습니다.\n이후에 사용자가 버튼을 클릭하면 연결된 메서드가 실행되면서 <code>resize()</code> 메서드를 호출하고, 새로 변경된 값으로 <code>sizeChange</code> 이벤트가 발생합니다.</p>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&#x3C;div>\n  &#x3C;button (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n  &#x3C;button (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n  &#x3C;label [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/label>\n&#x3C;/div>\n\n\n</code-example>\n<p><code>AppComponent</code> 템플릿에는 <code>fontSizePx</code> 프로퍼티가 <code>SizerComponent</code>와 양방향으로 바인딩되어 있습니다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p><code>AppComponent</code>에 있는 <code>fontSizePx</code> 프로퍼티는 <code>SizerComponent.size</code> 값에 따라 초기화되며, 예제에서는 <code>16</code>입니다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p>이제 버튼을 클릭하면 <code>AppComponent.fontSizePx</code> 프로퍼티 값이 갱신됩니다.\n그러면 변경된 프로퍼티 값에 따라 스타일이 바인딩되기 때문에 화면에 표시된 글자도 커지거나 작아집니다.</p>\n<p>양방향 바인딩 문법은 프로퍼티 바인딩 문법과 이벤트 바인딩 문법을 짧게 줄여놓은 것입니다.\n두 바인딩 문법은 아래 코드처럼 풀어서 작성할 수도 있습니다.</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (풀어쓴 문법)\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<p><code>$event</code> 변수에는 <code>SizerComponent.sizeChange</code> 이벤트로 보낸 데이터가 담겨 있습니다.\n이 변수의 값은 <code>AppComponent.fontSizePx</code>에 할당됩니다.</p>\n<div class=\"callout is-helpful\">\n  <header>폼에서 양방향 바인딩 사용하기</header>\n<p>  표준 HTML 엘리먼트는 값을 <code>x</code>에 저장하고 <code>xChange</code>로 이벤트를 보내는 패턴을 사용하지 않기 때문에 폼에 양방향 바인딩을 사용하려면 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code>을 활용해야 합니다.\n폼에서 양방향 바인딩을 사용하는 방법에 대해 자세하게 알아보려면 <a href=\"guide/built-in-directives#ngModel\">NgModel</a> 문서를 참고하세요.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/built-in-directives\n - guide/example-apps-list\n - guide/inputs-outputs\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/EventEmitter\n - api/core/Input\n - api/core/Output\n - api/forms/NgModel\n - guide/built-in-directives#ngModel\n - guide/event-binding\n - guide/inputs-outputs\n - guide/property-binding\n - guide/two-way-binding#사전지식\n - guide/two-way-binding#양방향-바인딩-추가하기\n - guide/two-way-binding#양방향-바인딩two-way-binding\n - guide/two-way-binding#양방향-바인딩이-동작하는-과정\n - https://github.com/angular/angular/edit/master/aio/content/guide/two-way-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}