{
  "id": "guide/two-way-binding",
  "title": "Two-way binding [(...)]",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/two-way-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"two-way-binding-\">Two-way binding <code>[(...)]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#two-way-binding-\"><i class=\"material-icons\">link</i></a></h1>\n<p>Two-way binding gives your app a way to share data between a component class and\nits template.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<h2 id=\"basics-of-two-way-binding\">Basics of two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#basics-of-two-way-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>Two-way binding does two things:</p>\n<ol>\n<li>Sets a specific element property.</li>\n<li>Listens for an element change event.</li>\n</ol>\n<p>Angular offers a special <em>two-way data binding</em> syntax for this purpose, <code>[()]</code>.\nThe <code>[()]</code> syntax combines the brackets\nof property binding, <code>[]</code>, with the parentheses of event binding, <code>()</code>.</p>\n<div class=\"callout is-important\">\n<header>\n  [( )] = banana in a box\n</header>\n<p>Visualize a <em>banana in a box</em> to remember that the parentheses go <em>inside</em> the brackets.</p>\n</div>\n<p>The <code>[()]</code> syntax is easy to demonstrate when the element has a settable\nproperty called <code>x</code> and a corresponding event named <code>xChange</code>.\nHere's a <code>SizerComponent</code> that fits this pattern.\nIt has a <code>size</code> value property and a companion <code>sizeChange</code> event:</p>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.ts\" header=\"src/app/sizer.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a>, <a href=\"api/core/Input\" class=\"code-anchor\">Input</a>, <a href=\"api/core/Output\" class=\"code-anchor\">Output</a>, <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-sizer',\n  templateUrl: './sizer.component.html',\n  styleUrls: ['./sizer.component.css']\n})\nexport class SizerComponent {\n\n\n  @<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()  size: number | string;\n  @<a href=\"api/core/Output\" class=\"code-anchor\">Output</a>() sizeChange = new <a href=\"api/core/EventEmitter\" class=\"code-anchor\">EventEmitter</a>&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n\n}\n\n\n</code-example>\n<code-example path=\"two-way-binding/src/app/sizer/sizer.component.html\" header=\"src/app/sizer.component.html\">\n&#x3C;div>\n  &#x3C;button (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n  &#x3C;button (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n  &#x3C;label [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/label>\n&#x3C;/div>\n\n\n</code-example>\n<p>The initial <code>size</code> is an input value from a property binding.\nClicking the buttons increases or decreases the <code>size</code>, within\nmin/max value constraints,\nand then raises, or emits, the <code>sizeChange</code> event with the adjusted size.</p>\n<p>Here's an example in which the <code>AppComponent.fontSizePx</code> is two-way bound to the <code>SizerComponent</code>:</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-1)\" region=\"two-way-1\">\n&#x3C;app-sizer [(size)]=\"fontSizePx\">&#x3C;/app-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p>The <code>AppComponent.fontSizePx</code> establishes the initial <code>SizerComponent.size</code> value.</p>\n<code-example path=\"two-way-binding/src/app/app.component.ts\" header=\"src/app/app.component.ts\" region=\"font-size\">\nfontSizePx = 16;\n\n</code-example>\n<p>Clicking the buttons updates the <code>AppComponent.fontSizePx</code> via the two-way binding.\nThe revised <code>AppComponent.fontSizePx</code> value flows through to the <em>style</em> binding,\nmaking the displayed text bigger or smaller.</p>\n<p>The two-way binding syntax is really just syntactic sugar for a <em>property</em> binding and an <em>event</em> binding.\nAngular desugars the <code>SizerComponent</code> binding into this:</p>\n<code-example path=\"two-way-binding/src/app/app.component.html\" header=\"src/app/app.component.html (two-way-2)\" region=\"two-way-2\">\n&#x3C;app-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/app-sizer>\n\n</code-example>\n<p>The <code>$event</code> variable contains the payload of the <code>SizerComponent.sizeChange</code> event.\nAngular assigns the <code>$event</code> value to the <code>AppComponent.fontSizePx</code> when the user clicks the buttons.</p>\n<h2 id=\"two-way-binding-in-forms\">Two-way binding in forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/two-way-binding#two-way-binding-in-forms\"><i class=\"material-icons\">link</i></a></h2>\n<p>The two-way binding syntax is a great convenience compared to\nseparate property and event bindings. It would be convenient to\nuse two-way binding with HTML form elements like <code>&#x3C;input></code> and\n<code>&#x3C;select></code>. However, no native HTML element follows the <code>x</code>\nvalue and <code>xChange</code> event pattern.</p>\n<p>For more on how to use two-way binding in forms, see\nAngular <a href=\"guide/built-in-directives#ngModel\">NgModel</a>.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/built-in-directives\n - guide/inputs-outputs\n - guide/template-syntax\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/EventEmitter\n - api/core/Input\n - api/core/Output\n - guide/built-in-directives#ngModel\n - guide/two-way-binding#basics-of-two-way-binding\n - guide/two-way-binding#two-way-binding-\n - guide/two-way-binding#two-way-binding-in-forms\n - https://github.com/angular/angular/edit/master/aio/content/guide/two-way-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}