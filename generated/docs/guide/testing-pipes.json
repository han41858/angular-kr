{
  "id": "guide/testing-pipes",
  "title": "파이프 테스트하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/testing-pipes.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Testing Pipes\n-->\n<h1 id=\"파이프-테스트하기\">파이프 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-pipes#파이프-테스트하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nYou can test [pipes](guide/pipes) without the Angular testing utilities.\n\n<div class=\"alert is-helpful\">\n\n  For the sample app that the testing guides describe, see the <live-example name=\"testing\" embedded-style noDownload>sample app</live-example>.\n\n  For the tests features in the testing guides, see <live-example name=\"testing\" stackblitz=\"specs\" noDownload>tests</live-example>.\n\n</div>\n-->\n<p><a href=\"guide/pipes\">파이프</a>는 Angular 전용 테스트 기능을 활용하지 않아도 테스트할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 다루는 예제 앱을 직접 확인하려면 <live-example name=\"testing\" embedded-style=\"\" nodownload=\"\">sample app</live-example> 링크를 참고하세요.</p>\n<p>이 문서에서 다루는 테스트 기능이 동작하는 것을 직접 확인하려면 <live-example name=\"testing\" stackblitz=\"specs\" nodownload=\"\">tests</live-example> 링크를 확인하세요.</p>\n</div>\n<!--\n## Testing the `TitleCasePipe`\n-->\n<h2 id=\"titlecasepipe-테스트하기\"><code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code> 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-pipes#titlecasepipe-테스트하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nA pipe class has one method, `transform`, that manipulates the input\nvalue into a transformed output value.\nThe `transform` implementation rarely interacts with the DOM.\nMost pipes have no dependence on Angular other than the `@Pipe`\nmetadata and an interface.\n\nConsider a `TitleCasePipe` that capitalizes the first letter of each word.\nHere's an implementation with a regular expression.\n\n<code-example path=\"testing/src/app/shared/title-case.pipe.ts\" header=\"app/shared/title-case.pipe.ts\">\nimport { Pipe, PipeTransform } from &#39;@angular/core&#39;;\n\n@Pipe({name: &#39;titlecase&#39;, pure: true})\n/** 문자열의 각 단어 중 첫글자를 대문자로 변환합니다. */\nexport class TitleCasePipe implements PipeTransform {\n  transform(input: string): string {\n    return input.length === 0 ? &#39;&#39; :\n      input.replace(/\\w\\S*/g, (txt =&gt; txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));\n  }\n}\n\n\n</code-example>\n\nAnything that uses a regular expression is worth testing thoroughly.\nUse simple Jasmine to explore the expected cases and the edge cases.\n\n<code-example path=\"testing/src/app/shared/title-case.pipe.spec.ts\" region=\"excerpt\" header=\"app/shared/title-case.pipe.spec.ts\">\ndescribe(&#39;TitleCasePipe&#39;, () =&gt; {\n  // 파이프는 순수 함수이며 스테이트도 없습니다. 따라서 BeforeEach는 필요 없습니다.\n  const pipe = new TitleCasePipe();\n\n  it(&#39;transforms &quot;abc&quot; to &quot;Abc&quot;&#39;, () =&gt; {\n    expect(pipe.transform(&#39;abc&#39;)).toBe(&#39;Abc&#39;);\n  });\n\n  it(&#39;transforms &quot;abc def&quot; to &quot;Abc Def&quot;&#39;, () =&gt; {\n    expect(pipe.transform(&#39;abc def&#39;)).toBe(&#39;Abc Def&#39;);\n  });\n\n  // ... 테스트 계속 ...\n});\n\n</code-example>\n-->\n<p>파이프 클래스에는 <code>transform</code> 메서드가 존재하는데, 이 메서드는 파이프에 들어오는 입력값을 변환해서 반환하는 메서드입니다.\n<code>transform</code> 메서드가 DOM과 연동되는 경우는 거의 없습니다.\n파이프는 대부분 <code>@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a></code> 메타데이터와 <code><a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a></code> 인터페이스 외에는 의존성 객체를 가지지도 않습니다.</p>\n<p><code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>는 각 단어의 첫 글자를 대문자로 변환하는 파이프입니다.\n이 기능은 정규표현식으로 구현되어 있습니다.</p>\n<code-example path=\"testing/src/app/shared/title-case.pipe.ts\" header=\"app/shared/title-case.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'titlecase', pure: true})\n/** 문자열의 각 단어 중 첫글자를 대문자로 변환합니다. */\nexport class <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a> implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(input: string): string {\n    return input.length === 0 ? '' :\n      input.replace(/\\w\\S*/g, (txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase() ));\n  }\n}\n\n\n</code-example>\n<p>정규표현식을 활용하는 로직은 되도록 많은 경우를 테스트하는 것이 좋습니다.\n이 중 몇가지 경우만 생각해보면 Jasmine을 사용해서 이렇게 테스트할 수 있습니다.</p>\n<code-example path=\"testing/src/app/shared/title-case.pipe.spec.ts\" region=\"excerpt\" header=\"app/shared/title-case.pipe.spec.ts\">\ndescribe('<a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>', () => {\n  // 파이프는 순수 함수이며 스테이트도 없습니다. 따라서 BeforeEach는 필요 없습니다.\n  const pipe = new <a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a>();\n\n  it('transforms \"abc\" to \"Abc\"', () => {\n    expect(pipe.transform('abc')).toBe('Abc');\n  });\n\n  it('transforms \"abc def\" to \"Abc Def\"', () => {\n    expect(pipe.transform('abc def')).toBe('Abc Def');\n  });\n\n  // ... 테스트 계속 ...\n});\n\n</code-example>\n<a id=\"write-tests\"></a>\n<!--\n## Writing DOM tests to support a pipe test\n-->\n<h2 id=\"dom-테스트-로직-추가하기\">DOM 테스트 로직 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing-pipes#dom-테스트-로직-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThese are tests of the pipe _in isolation_.\nThey can't tell if the `TitleCasePipe` is working properly as applied in the application components.\n\nConsider adding component tests such as this one:\n\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (pipe test)\">\nit(&#39;should convert hero name to Title Case&#39;, () =&gt; {\n  // 이름에 해당하는 input 엘리먼트와 이 이름을 화면에 표시하는 span 엘리먼트를 DOM에서 참조합니다.\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector(&#39;input&#39;);\n  const nameDisplay: HTMLElement = hostElement.querySelector(&#39;span&#39;);\n\n  // 사용자가 입력한 것처럼 입력 필드의 내용을 변경합니다.\n  nameInput.value = &#39;quick BROWN  fOx&#39;;\n\n  // 엘리먼트의 값이 변경되었다는 것을 Angular에게 알리기 위해 DOM 이벤트를 생성합니다.\n  // IE와 같이 오래된 브라우저에서는 CustomEvent 를 사용해야 합니다. 아래 문서를 참고하세요.\n  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n  nameInput.dispatchEvent(new Event(&#39;input&#39;));\n\n  // Angular가 화면을 갱신하도록 detectChanges() 함수를 실행합니다.\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe(&#39;Quick Brown  Fox&#39;);\n});\n\n</code-example>\n-->\n<p>파이프를 테스트하려면 이것만으로도 충분합니다.\n하지만 이 방식으로는 애플리케이션 컴포넌트에서도 <code><a href=\"api/common/TitleCasePipe\" class=\"code-anchor\">TitleCasePipe</a></code>가 제대로 동작하는지는 확인할 수 없습니다.</p>\n<p>이 내용을 검사하는 컴포넌트 테스트 코드는 이렇게 구현할 수 있습니다:</p>\n<code-example path=\"testing/src/app/hero/hero-detail.component.spec.ts\" region=\"title-case-pipe\" header=\"app/hero/hero-detail.component.spec.ts (파이프 테스트하기)\">\nit('should convert hero name to <a href=\"api/platform-browser/Title\" class=\"code-anchor\">Title</a> Case', () => {\n  // 이름에 해당하는 input 엘리먼트와 이 이름을 화면에 표시하는 span 엘리먼트를 DOM에서 참조합니다.\n  const hostElement = fixture.nativeElement;\n  const nameInput: HTMLInputElement = hostElement.querySelector('input');\n  const nameDisplay: HTMLElement = hostElement.querySelector('span');\n\n  // 사용자가 입력한 것처럼 입력 필드의 내용을 변경합니다.\n  nameInput.value = 'quick BROWN  fOx';\n\n  // 엘리먼트의 값이 변경되었다는 것을 Angular에게 알리기 위해 DOM 이벤트를 생성합니다.\n  // IE와 같이 오래된 브라우저에서는 CustomEvent 를 사용해야 합니다. 아래 문서를 참고하세요.\n  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n  nameInput.dispatchEvent(new <a href=\"api/router/Event\" class=\"code-anchor\">Event</a>('input'));\n\n  // Angular가 화면을 갱신하도록 detectChanges() 함수를 실행합니다.\n  fixture.detectChanges();\n\n  expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n});\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/testing\n-->\n<!-- links from this doc:\n - api/common/TitleCasePipe\n - api/core/Pipe\n - api/core/PipeTransform\n - api/platform-browser/Title\n - api/router/Event\n - guide/pipes\n - guide/testing-pipes#dom-테스트-로직-추가하기\n - guide/testing-pipes#titlecasepipe-테스트하기\n - guide/testing-pipes#파이프-테스트하기\n - https://github.com/angular/angular/edit/master/aio/content/guide/testing-pipes.md?message=docs%3A%20describe%20your%20change...\n-->"
}