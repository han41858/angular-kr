{
  "id": "guide/built-in-directives",
  "title": "Built-in directives",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/built-in-directives.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"built-in-directives\">Built-in directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-directives\"><i class=\"material-icons\">link</i></a></h1>\n<p>Angular offers two kinds of built-in directives: <a href=\"guide/attribute-directives\"><em>attribute</em> directives</a> and <a href=\"guide/structural-directives\"><em>structural</em> directives</a>.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<p>For more detail, including how to build your own custom directives, see <a href=\"guide/attribute-directives\">Attribute Directives</a> and <a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n<hr>\n<a id=\"attribute-directives\"></a>\n<h2 id=\"built-in-attribute-directives\">Built-in attribute directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>Attribute directives listen to and modify the behavior of\nother HTML elements, attributes, properties, and components.\nYou usually apply them to elements as if they were HTML attributes, hence the name.</p>\n<p>Many NgModules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code>RouterModule</code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code>FormsModule</code></a> define their own attribute directives.\nThe most common attribute directives are as follows:</p>\n<ul>\n<li><a href=\"guide/built-in-directives#ngClass\"><code>NgClass</code></a>—adds and removes a set of CSS classes.</li>\n<li><a href=\"guide/built-in-directives#ngStyle\"><code>NgStyle</code></a>—adds and removes a set of HTML styles.</li>\n<li><a href=\"guide/built-in-directives#ngModel\"><code>NgModel</code></a>—adds two-way data binding to an HTML form element.</li>\n</ul>\n<hr>\n<a id=\"ngClass\"></a>\n<h2 id=\"ngclass\"><code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngclass\"><i class=\"material-icons\">link</i></a></h2>\n<p>Add or remove several CSS classes simultaneously with <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"special-div\" header=\"src/app/app.component.html\">\n&#x3C;!-- \"special\" 클래스는 프로퍼티 바인딩으로 켜고 끌 수 있습니다. -->\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"isSpecial ? 'special' : ''\">This div is special&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>To add or remove a <em>single</em> class, use <a href=\"guide/attribute-binding#class-binding\">class binding</a> rather than <code><a href=\"api/common/NgClass\" class=\"code-anchor\">NgClass</a></code>.</p>\n</div>\n<p>Consider a <code>setCurrentClasses()</code> component method that sets a component property,\n<code>currentClasses</code>, with an object that adds or removes three classes based on the\n<code>true</code>/<code>false</code> state of three other component properties. Each key of the object is a CSS class name; its value is <code>true</code> if the class should be added,\n<code>false</code> if it should be removed.</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setClasses\" header=\"src/app/app.component.ts\">\n  currentClasses: {};\n/* . . . */\n  setCurrentClasses() {\n    // CSS 클래스는 컴포넌트 프로퍼티 값에 따라 추가되거나 제거됩니다.\n    this.currentClasses =  {\n      saveable: this.canSave,\n      modified: !this.isUnchanged,\n      special:  this.isSpecial\n    };\n  }\n\n</code-example>\n<p>Adding an <code><a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a></code> property binding to <code>currentClasses</code> sets the element's classes accordingly:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgClass-1\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"currentClasses\">This div is initially saveable, unchanged, and special.&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Remember that in this situation you'd call <code>setCurrentClasses()</code>,\nboth initially and when the dependent properties change.</p>\n</div>\n<hr>\n<a id=\"ngStyle\"></a>\n<h2 id=\"ngstyle\"><code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngstyle\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> to set many inline styles simultaneously and dynamically, based on the state of the component.</p>\n<h3 id=\"without-ngstyle\">Without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#without-ngstyle\"><i class=\"material-icons\">link</i></a></h3>\n<p>For context, consider setting a <em>single</em> style value with <a href=\"guide/attribute-binding#style-binding\">style binding</a>, without <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-ng-style\" header=\"src/app/app.component.html\">\n&#x3C;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\">\n  This div is x-large or smaller.\n&#x3C;/div>\n\n</code-example>\n<p>However, to set <em>many</em> inline styles at the same time, use the <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">NgStyle</a></code> directive.</p>\n<p>The following is a <code>setCurrentStyles()</code> method that sets a component\nproperty, <code>currentStyles</code>, with an object that defines three styles,\nbased on the state of three other component properties:</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"setStyles\" header=\"src/app/app.component.ts\">\n  currentStyles: {};\n/* . . . */\n  setCurrentStyles() {\n    // CSS 스타일은 컴포넌트 프로퍼티 값에 따라 지정됩니다.\n    this.currentStyles = {\n      'font-style':  this.canSave      ? 'italic' : 'normal',\n      'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n      'font-size':   this.isSpecial    ? '24px'   : '12px'\n    };\n  }\n\n</code-example>\n<p>Adding an <code><a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a></code> property binding to <code>currentStyles</code> sets the element's styles accordingly:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgStyle-2\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgStyle\" class=\"code-anchor\">ngStyle</a>]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Remember to call <code>setCurrentStyles()</code>, both initially and when the dependent properties change.</p>\n</div>\n<hr>\n<a id=\"ngModel\"></a>\n<h2 id=\"ngmodel-two-way-binding\"><code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code>: Two-way binding<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-two-way-binding\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive allows you to display a data property and\nupdate that property when the user makes changes. Here's an example:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" header=\"src/app/app.component.html (NgModel example)\" region=\"NgModel-1\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<h3 id=\"import-formsmodule-to-use-ngmodel\">Import <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to use <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#import-formsmodule-to-use-ngmodel\"><i class=\"material-icons\">link</i></a></h3>\n<p>Before using the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive in a two-way data binding,\nyou must import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and add it to the NgModule's <code>imports</code> list.\nLearn more about the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> and <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> in <a href=\"guide/forms#ngModel\">Forms</a>.</p>\n<p>Remember to import the <code><a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a></code> to make <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> available as follows:</p>\n<code-example path=\"built-in-directives/src/app/app.module.ts\" header=\"src/app/app.module.ts (FormsModule import)\" region=\"import-forms-module\">\nimport { <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> } from '@angular/forms'; // &#x3C;--- <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> 패키지 로드\n/* . . . */\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n/* . . . */\n\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    <a href=\"api/forms/FormsModule\" class=\"code-anchor\">FormsModule</a> // &#x3C;--- <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>에 로드\n  ],\n/* . . . */\n})\nexport class AppModule { }\n\n</code-example>\n<p>You could achieve the same result with separate bindings to\nthe <code>&#x3C;input></code> element's  <code>value</code> property and <code>input</code> event:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"without-NgModel\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"without\">without <a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a>:&#x3C;/label>\n&#x3C;input [value]=\"currentItem.name\" (input)=\"currentItem.name=$event.target.value\" id=\"without\">\n\n</code-example>\n<p>To streamline the syntax, the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> directive hides the details behind its own <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> input and <code>ngModelChange</code> output properties:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModelChange\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-change\">(ngModelChange)=\"...name=$event\":&#x3C;/label>\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"currentItem.name=$event\" id=\"example-change\">\n\n</code-example>\n<p>The <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> data property sets the element's value property and the <code>ngModelChange</code> event property\nlistens for changes to the element's value.</p>\n<h3 id=\"ngmodel-and-value-accessors\"><code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> and value accessors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngmodel-and-value-accessors\"><i class=\"material-icons\">link</i></a></h3>\n<p>The details are specific to each kind of element and therefore the <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> directive only works for an element\nsupported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>\nthat adapts an element to this protocol.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements and the\n<a href=\"guide/forms\">Forms</a> guide shows how to bind to them.</p>\n<p>You can't apply <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> to a non-form native element or a\nthird-party custom component until you write a suitable value accessor. For more information, see\nthe API documentation on <a href=\"api/forms/DefaultValueAccessor\">DefaultValueAccessor</a>.</p>\n<p>You don't need a value accessor for an Angular component that\nyou write because you can name the value and event properties\nto suit Angular's basic <a href=\"guide/two-way-binding\">two-way binding syntax</a>\nand skip <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">NgModel</a></code> altogether.\nThe <code>sizer</code> in the\n<a href=\"guide/two-way-binding\">Two-way Binding</a> section is an example of this technique.</p>\n<p>Separate <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code> bindings are an improvement over binding to the\nelement's native properties, but you can streamline the binding with a\nsingle declaration using the <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgModel-1\" header=\"src/app/app.component.html\">\n&#x3C;label for=\"example-ngModel\">[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]:&#x3C;/label>\n&#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"currentItem.name\" id=\"example-ngModel\">\n\n</code-example>\n<p>This <code>[(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]</code> syntax can only <em>set</em> a data-bound property.\nIf you need to do something more, you can write the expanded form;\nfor example, the following changes the <code>&#x3C;input></code> value to uppercase:</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"uppercase\" header=\"src/app/app.component.html\">\n&#x3C;input [<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>]=\"currentItem.name\" (ngModelChange)=\"setUppercaseName($event)\" id=\"example-uppercase\">\n\n</code-example>\n<p>Here are all variations in action, including the uppercase version:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ng-model-anim.gif\" alt=\"NgModel variations\" width=\"540\" height=\"264\">\n</div>\n<hr>\n<a id=\"structural-directives\"></a>\n<h2 id=\"built-in-structural-directives\">Built-in <em>structural</em> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#built-in-structural-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's structure, typically by adding, removing, and manipulating\nthe host elements to which they are attached.</p>\n<p>This section is an introduction to the common built-in structural directives:</p>\n<ul>\n<li><a href=\"guide/built-in-directives#ngIf\"><code>NgIf</code></a>—conditionally creates or destroys subviews from the template.</li>\n<li><a href=\"guide/built-in-directives#ngFor\"><code>NgFor</code></a>—repeat a node for each item in a list.</li>\n<li><a href=\"guide/built-in-directives#ngSwitch\"><code>NgSwitch</code></a>—a set of directives that switch among alternative views.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>The deep details of structural directives are covered in the\n<a href=\"guide/structural-directives\">Structural Directives</a> guide,\nwhich explains the following:</p>\n<ul>\n<li>Why you\n<a href=\"guide/structural-directives#the-asterisk--prefix\">prefix the directive name with an asterisk (*)</a>.</li>\n<li>Using <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a>\nto group elements when there is no suitable host element for the directive.</li>\n<li>How to write your own structural directive.</li>\n<li>That you can only apply <a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">one structural directive</a> to an element.</li>\n</ul>\n</div>\n<hr>\n<a id=\"ngIf\"></a>\n<h2 id=\"ngif\">NgIf<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngif\"><i class=\"material-icons\">link</i></a></h2>\n<p>You can add or remove an element from the DOM by applying an <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> directive to\na host element.\nBind the directive to a condition expression like <code>isActive</code> in this example.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-1\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"isActive\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n</div>\n<p>When the <code>isActive</code> expression returns a truthy value, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> adds the\n<code>ItemDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> removes the <code>ItemDetailComponent</code>\nfrom the DOM, destroying that component and all of its sub-components.</p>\n<h3 id=\"showhide-vs-ngif\">Show/hide vs. <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#showhide-vs-ngif\"><i class=\"material-icons\">link</i></a></h3>\n<p>Hiding an element is different from removing it with <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code>.\nFor comparison, the following example shows how to control\nthe visibility of an element with a\n<a href=\"guide/attribute-binding#class-binding\">class</a> or <a href=\"guide/attribute-binding#style-binding\">style</a> binding.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-3\" header=\"src/app/app.component.html\">\n&#x3C;!-- isSpecial이 true일 때 -->\n&#x3C;div [class.hidden]=\"!isSpecial\">Show with class&#x3C;/div>\n&#x3C;div [class.hidden]=\"isSpecial\">Hide with class&#x3C;/div>\n\n&#x3C;p>ItemDetail is in the DOM but hidden&#x3C;/p>\n&#x3C;app-item-detail [class.hidden]=\"isSpecial\">&#x3C;/app-item-detail>\n\n&#x3C;div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n&#x3C;div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with <a href=\"api/animations/style\" class=\"code-anchor\">style</a>&#x3C;/div>\n\n</code-example>\n<p>When you hide an element, that element and all of its descendants remain in the DOM.\nAll components for those elements stay in memory and\nAngular may continue to check for changes.\nYou could be holding onto considerable computing resources and degrading performance\nunnecessarily.</p>\n<p><code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> works differently. When <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> is <code>false</code>, Angular removes the element and its descendants from the DOM.\nIt destroys their components, freeing up resources, which\nresults in a better user experience.</p>\n<p>If you are hiding large component trees, consider <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> as a more\nefficient alternative to showing/hiding.</p>\n<div class=\"alert is-helpful\">\n<p>For more information on <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> and <code>ngIfElse</code>, see the <a href=\"api/common/NgIf\">API documentation about NgIf</a>.</p>\n</div>\n<h3 id=\"guard-against-null\">Guard against null<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#guard-against-null\"><i class=\"material-icons\">link</i></a></h3>\n<p>Another advantage of <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> is that you can use it to guard against null. Show/hide\nis best suited for very simple use cases, so when you need a guard, opt instead for <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code>. Angular will throw an error if a nested expression tries to access a property of <code>null</code>.</p>\n<p>The following shows <code><a href=\"api/common/NgIf\" class=\"code-anchor\">NgIf</a></code> guarding two <code>&#x3C;div></code>s.\nThe <code>currentCustomer</code> name appears only when there is a <code>currentCustomer</code>.\nThe <code>nullCustomer</code> will not be displayed as long as it is <code>null</code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"currentCustomer\">Hello, {{currentCustomer.name}}&#x3C;/div>\n\n</code-example>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgIf-2b\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"nullCustomer\">Hello, &#x3C;span>{{nullCustomer}}&#x3C;/span>&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>See also the\n<a href=\"guide/template-expression-operators#safe-navigation-operator\" title=\"Safe navigation operator (?.)\">safe navigation operator</a> below.</p>\n</div>\n<hr>\n<a id=\"ngFor\"></a>\n<h2 id=\"ngfor\"><code>NgFor</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor\"><i class=\"material-icons\">link</i></a></h2>\n<p><code>NgFor</code> is a repeater directive—a way to present a list of items.\nYou define a block of HTML that defines how a single item should be displayed\nand then you tell Angular to use that block as a template for rendering each item in the list.\nThe text assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is the instruction that guides the repeater process.</p>\n<p>The following example shows <code>NgFor</code> applied to a simple <code>&#x3C;div></code>. (Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>.)</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>. For more information\non the asterisk, see the <a href=\"guide/structural-directives#the-asterisk--prefix\">asterisk (*) prefix</a> section of\n<a href=\"guide/structural-directives\">Structural Directives</a>.</p>\n</div>\n<p>You can also apply an <code>NgFor</code> to a component element, as in the following example.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-2\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<a id=\"microsyntax\"></a>\n<div class=\"callout is-critical\">\n<header>*ngFor microsyntax</header>\n<p>The string assigned to <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> is not a <a href=\"guide/interpolation\">template expression</a>. Rather,\nit's a <em>microsyntax</em>—a little language of its own that Angular interprets.\nThe string <code>\"let item of items\"</code> means:</p>\n<blockquote>\n<p><em>Take each item in the <code>items</code> array, store it in the local <code>item</code> looping variable, and\nmake it available to the templated HTML for each iteration.</em></p>\n</blockquote>\n<p>Angular translates this instruction into an <code>&#x3C;ng-template></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code>item</code>\nin the list.\nFor more information about microsyntax, see the <a href=\"guide/structural-directives#microsyntax\">Structural Directives</a> guide.</p>\n</div>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h3 id=\"template-input-variables\">Template input variables<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#template-input-variables\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>let</code> keyword before <code>item</code> creates a template input variable called <code>item</code>.\nThe <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> directive iterates over the <code>items</code> array returned by the parent component's <code>items</code> property\nand sets <code>item</code> to the current item from the array during each iteration.</p>\n<p>Reference <code>item</code> within the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> host element\nas well as within its descendants to access the item's properties.\nThe following example references <code>item</code> first in an interpolation\nand then passes in a binding to the <code>item</code> property of the <code>&#x3C;app-item-detail></code> component.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-1-2\" header=\"src/app/app.component.html\">\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\">{{item.name}}&#x3C;/div>\n&#x3C;!-- . . . -->\n  &#x3C;app-item-detail *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items\" [item]=\"item\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>For more information about template input variables, see\n<a href=\"guide/structural-directives#template-input-variable\">Structural Directives</a>.</p>\n<h3 id=\"ngfor-with-index\"><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> with <code>index</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-with-index\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>index</code> property of the <code>NgFor</code> directive context\nreturns the zero-based index of the item in each iteration.\nYou can capture the <code>index</code> in a template input variable and use it in the template.</p>\n<p>The next example captures the <code>index</code> in a variable named <code>i</code> and displays it with the item name.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgFor-3\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items; let i=index\">{{i + 1}} - {{item.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><code>NgFor</code> is implemented by the <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> directive. Read more about the other <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">NgForOf</a></code> context values such as <code>last</code>, <code>even</code>,\nand <code>odd</code> in the <a href=\"api/common/NgForOf\">NgForOf API reference</a>.</p>\n</div>\n<a id=\"trackBy\"></a>\n<h3 id=\"ngfor-with-trackby\">*ngFor with <code>trackBy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a></h3>\n<p>If you use <code>NgFor</code> with large lists, a small change to one item, such as removing or adding an item, can trigger a cascade of DOM manipulations. For example, re-querying the server could reset a list with all new item objects, even when those items were previously displayed. In this case, Angular sees only a fresh list of new object references and has no choice but to replace the old DOM elements with all new DOM elements.</p>\n<p>You can make this more efficient with <code>trackBy</code>.\nAdd a method to the component that returns the value <code>NgFor</code> should track.\nIn this case, that value is the hero's <code>id</code>. If the <code>id</code> has already been rendered,\nAngular keeps track of it and doesn't re-query the server for the same <code>id</code>.</p>\n<code-example path=\"built-in-directives/src/app/app.component.ts\" region=\"trackByItems\" header=\"src/app/app.component.ts\">\ntrackByItems(index: number, item: Item): number { return item.id; }\n\n</code-example>\n<p>In the microsyntax expression, set <code>trackBy</code> to the <code>trackByItems()</code> method.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"trackBy\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let item of items; trackBy: trackByItems\">\n  ({{item.id}}) {{item.name}}\n&#x3C;/div>\n\n</code-example>\n<p>Here is an illustration of the <code>trackBy</code> effect.\n\"Reset items\" creates new items with the same <code>item.id</code>s.\n\"Change ids\" creates new items with new <code>item.id</code>s.</p>\n<ul>\n<li>With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</li>\n<li>With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</li>\n</ul>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngfor-trackby.gif\" alt=\"Animation of trackBy\" width=\"492\" height=\"442\">\n</div>\n<div class=\"alert is-helpful\">\n<p>Built-in directives use only public APIs; that is,\nthey do not have special access to any private APIs that other directives can't access.</p>\n</div>\n<hr>\n<a id=\"ngSwitch\"></a>\n<h2 id=\"the-ngswitch-directives\">The <code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> directives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/built-in-directives#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a></h2>\n<p>NgSwitch is like the JavaScript <code>switch</code> statement.\nIt displays one element from among several possible elements, based on a switch condition.\nAngular puts only the selected element into the DOM.</p>\n<!-- API Flagged -->\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is actually a set of three, cooperating directives:\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> as in the following example.</p>\n<p> <code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch\" header=\"src/app/app.component.html\">\n&#x3C;div [<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]=\"currentItem.feature\">\n  &#x3C;app-stout-item    *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'stout'\"    [item]=\"currentItem\">&#x3C;/app-stout-item>\n  &#x3C;app-device-item   *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'slim'\"     [item]=\"currentItem\">&#x3C;/app-device-item>\n  &#x3C;app-lost-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'vintage'\"  [item]=\"currentItem\">&#x3C;/app-lost-item>\n  &#x3C;app-best-item     *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"   [item]=\"currentItem\">&#x3C;/app-best-item>\n&#x3C;!-- . . . -->\n  &#x3C;app-unknown-item  *<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a>           [item]=\"currentItem\">&#x3C;/app-unknown-item>\n&#x3C;/div>\n\n</code-example></p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/built-in-directives/ngswitch.gif\" alt=\"Animation of NgSwitch\" width=\"370\" height=\"256\">\n</div>\n<p><code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is the controller directive. Bind it to an expression that returns\nthe <em>switch value</em>, such as <code>feature</code>. Though the <code>feature</code> value in this\nexample is a string, the switch value can be of any type.</p>\n<p><strong>Bind to <code>[<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a>]</code></strong>. You'll get an error if you try to set <code>*<a href=\"api/common/NgSwitch\" class=\"code-anchor\">ngSwitch</a></code> because\n<code><a href=\"api/common/NgSwitch\" class=\"code-anchor\">NgSwitch</a></code> is an <em>attribute</em> directive, not a <em>structural</em> directive.\nRather than touching the DOM directly, it changes the behavior of its companion directives.</p>\n<p><strong>Bind to <code>*<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a></code> and <code>*<a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">ngSwitchDefault</a></code></strong>.\nThe <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> directives are <em>structural</em> directives\nbecause they add or remove elements from the DOM.</p>\n<ul>\n<li>\n<p><code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code> adds its element to the DOM when its bound value equals the switch value and removes\nits bound value when it doesn't equal the switch value.</p>\n</li>\n<li>\n<p><code><a href=\"api/common/NgSwitchDefault\" class=\"code-anchor\">NgSwitchDefault</a></code> adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">NgSwitchCase</a></code>.</p>\n</li>\n</ul>\n<p>The switch directives are particularly useful for adding and removing <em>component elements</em>.\nThis example switches among four <code>item</code> components defined in the <code>item-switch.components.ts</code> file.\nEach component has an <code>item</code> <a href=\"guide/inputs-outputs#input\" title=\"Input property\">input property</a>\nwhich is bound to the <code>currentItem</code> of the parent component.</p>\n<p>Switch directives work as well with native elements and web components too.\nFor example, you could replace the <code>&#x3C;app-best-item></code> switch case with the following.</p>\n<code-example path=\"built-in-directives/src/app/app.component.html\" region=\"NgSwitch-div\" header=\"src/app/app.component.html\">\n&#x3C;div *<a href=\"api/common/NgSwitchCase\" class=\"code-anchor\">ngSwitchCase</a>=\"'bright'\"> Are you as bright as {{currentItem.name}}?&#x3C;/div>\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/attribute-directives\n - guide/displaying-data\n - guide/glossary\n - guide/interpolation\n - guide/structural-directives\n - guide/template-reference-variables\n - guide/template-statements\n - guide/template-syntax\n - guide/two-way-binding\n - guide/upgrade\n - tutorial/toh-pt2\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgClass\n - api/common/NgForOf\n - api/common/NgIf\n - api/common/NgStyle\n - api/common/NgSwitch\n - api/common/NgSwitchCase\n - api/common/NgSwitchDefault\n - api/core/NgModule\n - api/forms/ControlValueAccessor\n - api/forms/DefaultValueAccessor\n - api/forms/FormsModule\n - api/forms/NgModel\n - api/platform-browser/BrowserModule\n - guide/attribute-binding#class-binding\n - guide/attribute-binding#style-binding\n - guide/attribute-directives\n - guide/built-in-directives#built-in-attribute-directives\n - guide/built-in-directives#built-in-directives\n - guide/built-in-directives#built-in-structural-directives\n - guide/built-in-directives#guard-against-null\n - guide/built-in-directives#import-formsmodule-to-use-ngmodel\n - guide/built-in-directives#ngClass\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/built-in-directives#ngModel\n - guide/built-in-directives#ngStyle\n - guide/built-in-directives#ngSwitch\n - guide/built-in-directives#ngclass\n - guide/built-in-directives#ngfor\n - guide/built-in-directives#ngfor-with-index\n - guide/built-in-directives#ngfor-with-trackby\n - guide/built-in-directives#ngif\n - guide/built-in-directives#ngmodel-and-value-accessors\n - guide/built-in-directives#ngmodel-two-way-binding\n - guide/built-in-directives#ngstyle\n - guide/built-in-directives#showhide-vs-ngif\n - guide/built-in-directives#template-input-variables\n - guide/built-in-directives#the-ngswitch-directives\n - guide/built-in-directives#without-ngstyle\n - guide/forms\n - guide/forms#ngModel\n - guide/inputs-outputs#input\n - guide/interpolation\n - guide/router\n - guide/structural-directives\n - guide/structural-directives#microsyntax\n - guide/structural-directives#ngcontainer\n - guide/structural-directives#one-per-element\n - guide/structural-directives#template-input-variable\n - guide/structural-directives#the-asterisk--prefix\n - guide/template-expression-operators#safe-navigation-operator\n - guide/two-way-binding\n - https://github.com/angular/angular/edit/master/aio/content/guide/built-in-directives.md?message=docs%3A%20describe%20your%20change...\n-->"
}