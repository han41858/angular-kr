{
  "id": "guide/http",
  "title": "Communicating with backend services using HTTP",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/http.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"communicating-with-backend-services-using-http\">Communicating with backend services using HTTP<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#communicating-with-backend-services-using-http\"><i class=\"material-icons\">link</i></a></h1>\n<p>Most front-end applications need to communicate with a server over the HTTP protocol, in order to download or upload data and access other back-end services.\nAngular provides a simplified client HTTP API for Angular applications, the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service class in <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>.</p>\n<p>The HTTP client service offers the following major features.</p>\n<ul>\n<li>The ability to request <a href=\"guide/http#typed-response\">typed response objects</a>.</li>\n<li>Streamlined <a href=\"guide/http#error-handling\">error handling</a>.</li>\n<li><a href=\"guide/http#testing-requests\">Testability</a> features.</li>\n<li>Request and response <a href=\"guide/http#intercepting-requests-and-responses\">interception</a>.</li>\n</ul>\n<h5 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#prerequisites\"><i class=\"material-icons\">link</i></a></h5>\n<p>Before working with the <code>HTTPClientModule</code>, you should have a basic understanding of the following:</p>\n<ul>\n<li>TypeScript programming</li>\n<li>Usage of the HTTP protocol</li>\n<li>Angular app-design fundamentals, as described in <a href=\"guide/architecture\">Angular Concepts</a></li>\n<li>Observable techniques and operators. See the <a href=\"guide/observables\">Observables</a> guide.</li>\n</ul>\n<h2 id=\"setup-for-server-communication\">Setup for server communication<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#setup-for-server-communication\"><i class=\"material-icons\">link</i></a></h2>\n<p>Before you can use <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>, you need to import the Angular <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>.\nMost apps do so in the root <code>AppModule</code>.</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"sketch\" header=\"app/app.module.ts (excerpt)\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }         from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }    from '@angular/platform-browser';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    // <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> 뒤에 <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>을 로드합니다.\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<p>You can then inject the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service as a dependency of an application class, as shown in the following <code>ConfigService</code> example.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"proto\" header=\"app/config/config.service.ts (excerpt)\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class ConfigService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<p>The <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> service makes use of <a href=\"guide/glossary#observable\" title=\"Observable definition\">observables</a> for all transactions. You must import the RxJS observable and operator symbols that appear in the example snippets. These <code>ConfigService</code> imports are typical.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"rxjs-imports\" header=\"app/config/config.service.ts (RxJS imports)\">\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>You can run the <live-example></live-example> that accompanies this guide.</p>\n<p>The sample app does not require a data server.\nIt relies on the\n<a href=\"https://github.com/angular/in-memory-web-api/blob/master/README.md\">Angular <em>in-memory-web-api</em></a>,\nwhich replaces the <em>HttpClient</em> module's <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>.\nThe replacement service simulates the behavior of a REST-like backend.</p>\n<p>Look at the <code>AppModule</code> <em>imports</em> to see how it is configured.</p>\n</div>\n<!--\n## Requesting data from a server\n-->\n<h2 id=\"서버에서-데이터-받아오기\">서버에서 데이터 받아오기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#서버에서-데이터-받아오기\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <a href=\"api/common/http/HttpClient#get\"><code>HTTPClient.get()</code></a> method to fetch data from a server.\nThe asynchronous method sends an HTTP request, and returns an Observable that emits the requested data when the response is received.\nThe return type varies based on the <code>observe</code> and <code>responseType</code> values that you pass to the call.</p>\n<p>The <code>get()</code> method takes two arguments; the endpoint URL from which to fetch, and an <em>options</em> object that you can use to configure the request.</p>\n<code-example>\noptions: {\n    headers?: <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> | {[header: string]: string | string[]},\n    observe?: 'body' | 'events' | 'response',\n    params?: <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }\n</code-example>\n<p>Important options include the <em>observe</em> and <em>responseType</em> properties.</p>\n<ul>\n<li>The <em>observe</em> option specifies how much of the response to return.</li>\n<li>The <em>responseType</em> option specifies the format in which to return data.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<p>You can use the <code>options</code> object to configure various other aspects of an outgoing request.\nIn <a href=\"guide/http#adding-headers\">Adding headers</a>, for example, the service set the default headers using the <code>headers</code> option property.</p>\n<p>Use the <code>params</code> property to configure a request with <a href=\"guide/http#url-params\">HTTP URL parameters</a>, and the <code>reportProgress</code> option to <a href=\"guide/http#report-progress\">listen for progress events</a> when transferring large amounts of data.</p>\n</div>\n<p>Applications often request JSON data from a server.\nIn the <code>ConfigService</code> example, the app needs a configuration file on the server, <code>config.json</code>,\nthat specifies resource URLs.</p>\n<code-example path=\"http/src/assets/config.json\" header=\"assets/config.json\">\n{\n  \"heroesUrl\": \"api/heroes\",\n  \"textfile\": \"assets/textfile.txt\"\n}\n\n\n</code-example>\n<p>To fetch this kind of data, the <code>get()</code> call needs the following options: <code>{observe: 'body', responseType: 'json'}</code>.\nThese are the default values for those options, so the following examples do not pass the options object.\nLater sections show some of the additional option possibilities.</p>\n<a id=\"config-service\"></a>\n<p>The example conforms to the best practices for creating scalable solutions by defining a re-usable <a href=\"guide/glossary#service\" title=\"service definition\">injectable service</a> to perform the data-handling functionality.\nIn addition to fetching data, the service can post-process the data, add error handling, and add retry logic.</p>\n<p>The <code>ConfigService</code> fetches this file using the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_1\" header=\"app/config/config.service.ts (getConfig v.1)\">\nconfigUrl = 'assets/config.json';\n\ngetConfig() {\n  return this.http.get(this.configUrl);\n}\n\n</code-example>\n<p>The <code>ConfigComponent</code> injects the <code>ConfigService</code> and calls\nthe <code>getConfig</code> service method.</p>\n<p>Because the service method returns an <code>Observable</code> of configuration data,\nthe component <em>subscribes</em> to the method's return value.\nThe subscription callback performs minimal post-processing.\nIt copies the data fields into the component's <code>config</code> object, which is data-bound in the component template for display.</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v1\" header=\"app/config/config.component.ts (showConfig v.1)\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe((data: Config) => this.config = {\n        heroesUrl: data['heroesUrl'],\n        textfile:  data['textfile']\n    });\n}\n\n</code-example>\n<a id=\"typed-response\"></a>\n<h3 id=\"requesting-a-typed-response\">Requesting a typed response<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#requesting-a-typed-response\"><i class=\"material-icons\">link</i></a></h3>\n<p>You can structure your <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> request to declare the type of the response object, to make consuming the output easier and more obvious.\nSpecifying the response type acts as a type assertion at compile time.</p>\n<div class=\"alert is-important\">\n<p>Specifying the response type is a declaration to TypeScript that it should treat your response as being of the given type.\nThis is a build-time check and doesn't guarantee that the server will actually respond with an object of this type. It is up to the server to ensure that the type specified by the server API is returned.</p>\n</div>\n<p>To specify the response object type, first define an interface with the required properties.\nUse an interface rather than a class, because the response is a plain object that cannot be automatically converted to an instance of a class.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"config-interface\">\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n}\n\n</code-example>\n<p>Next, specify that interface as the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> call's type parameter in the service.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_2\" header=\"app/config/config.service.ts (getConfig v.2)\">\ngetConfig() {\n  // 이제 HTTP 요청 결과는 Config 타입의 Observable로 반환합니다.\n  return this.http.get&#x3C;Config>(this.configUrl);\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p> When you pass an interface as a type parameter to the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method, you can use the <a href=\"guide/rx-library#operators\">RxJS <code>map</code> operator</a> to transform the response data as needed by the UI. You can then pass the transformed data to the <a href=\"api/common/AsyncPipe\">async pipe</a>.</p>\n</div>\n<p>The callback in the updated component method receives a typed data object, which is\neasier and safer to consume:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v2\" header=\"app/config/config.component.ts (showConfig v.2)\">\nconfig: Config;\n\nshowConfig() {\n  this.configService.getConfig()\n    // Config 타입을 알기 때문에 클래스 프로퍼티로 바로 할당할 수 있습니다.\n    .subscribe((data: Config) => this.config = { ...data });\n}\n\n</code-example>\n<p>To access properties that are defined in an interface, you must explicitly convert the plain object you get from the JSON to the required response type.\nFor example, the following <code>subscribe</code> callback receives <code>data</code> as an Object, and then type-casts it in order to access the properties.</p>\n<code-example>\n   .subscribe(data => this.config = {\n     heroesUrl: (data as any).heroesUrl,\n     textfile:  (data as any).textfile,\n   });\n</code-example>\n<a id=\"string-union-types\"></a>\n<div class=\"callout is-important\">\n<header>*observe* and *response* types</header>\n<p>The types of the <code>observe</code> and <code>response</code> options are <em>string unions</em>, rather than plain strings.</p>\n<code-example>\noptions: {\n    ...\n    observe?: 'body' | 'events' | 'response',\n    ...\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    ...\n  }\n</code-example>\n<p>This can cause confusion. For example:</p>\n<code-example language=\"typescript\">\n// this works\nclient.get('/foo', {responseType: 'text'})\n\n// but this does NOT work\nconst options = {\n  responseType: 'text',\n};\nclient.get('/foo', options)\n</code-example>\n<p>In the second case, TypeScript infers the type of <code>options</code> to be <code>{responseType: string}</code>.\nThe type is too wide to pass to <code>HttpClient.get</code> which is expecting the type of <code>responseType</code> to be one of the <em>specific</em> strings.\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> is typed explicitly this way so that the compiler can report the correct return type based on the options you provided.</p>\n<p>Use <code>as const</code> to let TypeScript know that you really do mean to use a constant string type:</p>\n<code-example language=\"typescript\">\nconst options = {\n  responseType: 'text' as const,\n};\nclient.get('/foo', options);\n</code-example>\n</div>\n<h3 id=\"reading-the-full-response\">Reading the full response<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#reading-the-full-response\"><i class=\"material-icons\">link</i></a></h3>\n<p>In the previous example, the call to <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> did not specify any options. By default, it returned the JSON data contained in the response body.</p>\n<p>You might need more information about the transaction than is contained in the response body. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow.</p>\n<p>Tell <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> that you want the full response with the <code>observe</code> option of the <code>get()</code> method:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfigResponse\">\ngetConfigResponse(): Observable&#x3C;<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>> {\n  return this.http.get&#x3C;Config>(\n    this.configUrl, { observe: 'response' });\n}\n\n</code-example>\n<p>Now <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> returns an <code>Observable</code> of type <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> rather than just the JSON data contained in the body.</p>\n<p>The component's <code>showConfigResponse()</code> method displays the response headers as well as the configuration:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"showConfigResponse\" header=\"app/config/config.component.ts (showConfigResponse)\">\nshowConfigResponse() {\n  this.configService.getConfigResponse()\n    // 반환 형식은 `<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>` 입니다.\n    .subscribe(resp => {\n      // 헤더를 확인합니다.\n      const keys = resp.headers.keys();\n      this.headers = keys.map(key =>\n        `${key}: ${resp.headers.get(key)}`);\n\n      // `<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>` 객체의 body 프로퍼티는 `Config` 타입입니다.\n      this.config = { ... resp.body };\n    });\n}\n\n</code-example>\n<p>As you can see, the response object has a <code>body</code> property of the correct type.</p>\n<!--\n### Making a JSONP request\n-->\n<h3 id=\"jsonp-요청-보내기\">JSONP 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#jsonp-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<p>Apps can use the <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> to make <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a> requests across domains when a server doesn't support <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">CORS protocol</a>.</p>\n<p>Angular JSONP requests return an <code>Observable</code>.\nFollow the pattern for subscribing to observables and use the RxJS <code>map</code> operator to transform the response before using the <a href=\"api/common/AsyncPipe\">async pipe</a> to manage the results.</p>\n<p>In Angular, use JSONP by including <code><a href=\"api/common/http/HttpClientJsonpModule\" class=\"code-anchor\">HttpClientJsonpModule</a></code> in the <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> imports.\nIn the following example, the <code>searchHeroes()</code> method uses a JSONP request to query for heroes whose names contain the search term.</p>\n<code-example language=\"ts\">\n/* GET heroes whose name contains search term */\nsearchHeroes(term: string): Observable {\n  term = term.trim();\n\n  let heroesURL = `${this.heroesURL}?${term}`;\n  return this.http.jsonp(heroesUrl, 'callback').pipe(\n      catchError(this.handleError('searchHeroes', [])) // then handle the error\n    );\n};\n</code-example>\n<p>This request passes the <code>heroesURL</code> as the first parameter and the callback function name as the second parameter.\nThe response is wrapped in the callback function, which takes the observables returned by the JSONP method and pipes them through to the error handler.</p>\n<!--\n### Requesting non-JSON data\n-->\n<h3 id=\"json-형식이-아닌-응답-처리하기\">JSON 형식이 아닌 응답 처리하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#json-형식이-아닌-응답-처리하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nNot all APIs return JSON data.\nIn this next example, a `DownloaderService` method reads a text file from the server and logs the file contents, before returning those contents to the caller as an `Observable<string>`.\n\n<code-example path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\" header=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\">\ngetTextFile(filename: string) {\n  // 반환 형식을 지정하면 get() 함수가 반환하는 타입을 Observable&lt;string&gt;으로 변경할 수 있습니다.\n  // 이 때 get() 함수에 제네릭으로 &lt;string&gt; 타입을 지정할 필요는 없습니다.\n  return this.http.get(filename, {responseType: &#39;text&#39;})\n    .pipe(\n      tap( // HTTP 응답이나 에러를 로그로 출력합니다.\n        data =&gt; this.log(filename, data),\n        error =&gt; this.logError(filename, error)\n      )\n    );\n}\n\n</code-example>\n\n`HttpClient.get()` returns a string rather than the default JSON because of the `responseType` option.\n\nThe RxJS `tap` operator (as in \"wiretap\") lets the code inspect both success and error values passing through the observable without disturbing them.\n\nA `download()` method in the `DownloaderComponent` initiates the request by subscribing to the service method.\n\n<code-example path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\" header=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\">\ndownload() {\n  this.downloaderService.getTextFile(&#39;assets/textfile.txt&#39;)\n    .subscribe(results =&gt; this.contents = results);\n}\n\n</code-example>\n-->\n<p>모든 HTTP 요청이 JSON 데이터를 반환하는 것은 아닙니다.\n아래 예제에서 <code>DownloaderService</code>의 <code>getTextFile()</code> 메소드는 서버에 있는 텍스트 파일의 내용을 받아온 후에 로그에 출력하고 <code>Observable&#x3C;string></code> 타입으로 반환하는 함수입니다.</p>\n<code-example path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\" header=\"app/downloader/downloader.service.ts (getTextFile())\" linenums=\"false\">\ngetTextFile(filename: string) {\n  // 반환 형식을 지정하면 get() 함수가 반환하는 타입을 Observable&#x3C;string>으로 변경할 수 있습니다.\n  // 이 때 get() 함수에 제네릭으로 &#x3C;string> 타입을 지정할 필요는 없습니다.\n  return this.http.get(filename, {responseType: 'text'})\n    .pipe(\n      tap( // HTTP 응답이나 에러를 로그로 출력합니다.\n        data => this.log(filename, data),\n        error => this.logError(filename, error)\n      )\n    );\n}\n\n</code-example>\n<p>이 때 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 메소드에는 <code>responseType</code> 옵션이 사용되었기 때문에 기본 형식인 JSON 형식이 아니라 문자열 타입을 반환합니다.</p>\n<p>그리고 나서 RxJS <code>tap</code> 연산자를 사용해서 성공했을 때와 에러가 발생했을 때를 처리하고 있습니다.</p>\n<p>이 메소드는 <code>DownloaderComponent</code>에 있는 <code>download()</code> 메소드가 시작합니다.</p>\n<code-example path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\" header=\"app/downloader/downloader.component.ts (download())\" linenums=\"false\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results => this.contents = results);\n}\n\n</code-example>\n<a id=\"error-handling\"></a>\n<h2 id=\"handling-request-errors\">Handling request errors<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#handling-request-errors\"><i class=\"material-icons\">link</i></a></h2>\n<p>If the request fails on the server, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> returns an <em>error</em> object instead of a successful response.</p>\n<p>The same service that performs your server transactions should also perform error inspection, interpretation, and resolution.</p>\n<p>When an error occurs, you can obtain details of what failed in order to inform your user. In some cases, you might also automatically <a href=\"guide/http#retry\">retry the request</a>.</p>\n<a id=\"error-details\"></a>\n<h3 id=\"getting-error-details\">Getting error details<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#getting-error-details\"><i class=\"material-icons\">link</i></a></h3>\n<p>An app should give the user useful feedback when data access fails.\nA raw error object is not particularly useful as feedback.\nIn addition to detecting that an error has occurred, you need to get error details and use those details to compose a user-friendly response.</p>\n<p>Two types of errors can occur.</p>\n<ul>\n<li>\n<p>The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error <em>responses</em>.</p>\n</li>\n<li>\n<p>Something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator. These errors produce JavaScript <code>ErrorEvent</code> objects.</p>\n</li>\n</ul>\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> captures both kinds of errors in its <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code>. You can inspect that response to identify the error's cause.</p>\n<p>The following example defines an error handler in the previously defined <a href=\"guide/http#config-service\" title=\"ConfigService defined\">ConfigService</a>.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"handleError\" header=\"app/config/config.service.ts (handleError)\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.error instanceof ErrorEvent) {\n    // 클라이언트나 네트워크 문제로 발생한 에러.\n    console.error('An error occurred:', error.error.message);\n  } else {\n    // 백엔드에서 실패한 것으로 보낸 에러.\n    // 요청으로 받은 에러 객체를 확인하면 원인을 확인할 수 있습니다.\n    console.error(\n      `Backend returned code ${error.status}, ` +\n      `body was: ${error.error}`);\n  }\n  // 사용자가 이해할 수 있는 에러 메시지를 반환합니다.\n  return throwError(\n    'Something bad happened; please try again later.');\n};\n\n</code-example>\n<p>The handler returns an RxJS <code>ErrorObservable</code> with a user-friendly error message.\nThe following code updates the <code>getConfig()</code> method, using a <a href=\"guide/pipes\" title=\"Pipes guide\">pipe</a> to send all observables returned by the <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> call to the error handler.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\" header=\"app/config/config.service.ts (getConfig v.3 with error handler)\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<a id=\"retry\"></a>\n<h3 id=\"retrying-a-failed-request\">Retrying a failed request<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#retrying-a-failed-request\"><i class=\"material-icons\">link</i></a></h3>\n<p>Sometimes the error is transient and goes away automatically if you try again.\nFor example, network interruptions are common in mobile scenarios, and trying again\ncan produce a successful result.</p>\n<p>The <a href=\"guide/rx-library\">RxJS library</a> offers several <em>retry</em> operators.\nFor example, the <code>retry()</code> operator automatically re-subscribes to a failed <code>Observable</code> a specified number of times. <em>Re-subscribing</em> to the result of an <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> method call has the effect of reissuing the HTTP request.</p>\n<p>The following example shows how you can pipe a failed request to the <code>retry()</code> operator before passing it to the error handler.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig\" header=\"app/config/config.service.ts (getConfig with retry)\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      retry(3), // HTTP 요청이 실패하면 3번 더 시도합니다.\n      catchError(this.handleError) // 재시도한 후에도 발생한 에러를 처리합니다.\n    );\n}\n\n</code-example>\n<!--\n## Sending data to a server\n-->\n<h2 id=\"서버에-데이터-보내기\">서버에 데이터 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#서버에-데이터-보내기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIn addition to fetching data from a server, `HttpClient` supports other HTTP methods such as PUT, POST, and DELETE, which you can use to modify the remote data.\n\nThe sample app for this guide includes a simplified version of the \"Tour of Heroes\" example\nthat fetches heroes and enables users to add, delete, and update them.\nThe following sections show examples of the data-update methods from the sample's `HeroesService`.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>로 서버에 데이터를 요청할 때 사용하는 HTTP 메소드가 PUT, POST, DELETE라면 서버로 추가 데이터를 보낼 수 있습니다.</p>\n<p>이번 문단에서는 \"히어로들의 여행\" 튜토리얼에서 히어로의 목록을 가져오고 추가, 삭제, 수정했던 예제를 간단하게 다시 구현해 봅니다.\n예제에서 다루는 코드는 <code>HeroesService</code>만 해당됩니다.</p>\n<!--\n### Making a POST request\n-->\n<h3 id=\"post-요청-보내기\">POST 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#post-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nApps often send data to a server with a POST request when submitting a form.\nIn the following example, the `HeroesService` makes an HTTP POST request when adding a hero to the database.\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\" header=\"app/heroes/heroes.service.ts (addHero)\">\n/** POST: DB에 새로운 히어로를 추가합니다. */\naddHero (hero: Hero): Observable&lt;Hero&gt; {\n  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError(&#39;addHero&#39;, hero))\n    );\n}\n\n</code-example>\n\nThe `HttpClient.post()` method is similar to `get()` in that it has a type parameter, which you can use to specify that you expect the server to return data of a given type. The method takes a resource URL and two additional parameters:\n\n* *body* - The data to POST in the body of the request.\n* *options*` - An object containing method options which, in this case, [specify required headers](#adding-headers).\n\nThe example catches errors as [described above](#error-details).\n\nThe `HeroesComponent` initiates the actual POST operation by subscribing to\nthe `Observable` returned by this service method.\n\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\" header=\"app/heroes/heroes.component.ts (addHero)\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero =&gt; this.heroes.push(hero));\n\n</code-example>\n\nWhen the server responds successfully with the newly added hero, the component adds\nthat hero to the displayed `heroes` list.\n-->\n<p>데이터는 POST 방식으로 보낼 수도 있습니다.\n일반적으로 POST 메소드는 폼을 제출할 때도 사용하며, 우리가 살펴보고 있는 <code>HeroesService</code>에서는 히어로를 DB에 추가할 때 사용합니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\" header=\"app/heroes/heroes.service.ts (addHero())\">\n/** POST: DB에 새로운 히어로를 추가합니다. */\naddHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<p><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 메소드는 <code>get()</code>메소드와 비슷합니다. 서버로부터 받아올 데이터의 타입을 제네릭으로 지정하고, 첫번째 인자로 서버 API의 URL을 받는 것도 같습니다.</p>\n<ul>\n<li><em>hero</em> - POST 메소드일 때 요청으로 보낼 body 데이터를 지정합니다.</li>\n<li><em>httpOptions</em> - HTTP 요청에 대한 옵션을 지정합니다. <a href=\"guide/http#adding-headers\">헤더 추가하기</a>에서 지정한 옵션입니다.</li>\n</ul>\n<p>The example catches errors as <a href=\"guide/http#error-details\">described above</a>.</p>\n<p>이제 <code>HeroesComponent</code>가 옵저버블을 구독하면 POST 요청이 발생하며, 서버의 응답으로 받은 내용은 <code>Observable</code> 타입으로 전달됩니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\" header=\"app/heroes/heroes.component.ts (addHero())\">\nthis.heroesService\n  .addHero(newHero)\n  .subscribe(hero => this.heroes.push(hero));\n\n</code-example>\n<p>그러면 새로운 히어로가 정상적으로 추가되었다는 것을 컴포넌트가 알 수 있고, <code>heroes</code> 배열에 이 히어로를 추가해서 새로운 목록으로 화면에 표시할 수 있습니다.</p>\n<!--\n### Making a DELETE request\n-->\n<h3 id=\"delete-요청-보내기\">DELETE 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#delete-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThis application deletes a hero with the `HttpClient.delete` method by passing the hero's id\nin the request URL.\n\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\" header=\"app/heroes/heroes.service.ts (deleteHero)\">\n/** DELETE: DB에서 히어로를 삭제합니다. */\ndeleteHero (id: number): Observable&lt;{}&gt; {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError(&#39;deleteHero&#39;))\n    );\n}\n\n</code-example>\n\nThe `HeroesComponent` initiates the actual DELETE operation by subscribing to\nthe `Observable` returned by this service method.\n\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\" header=\"app/heroes/heroes.component.ts (deleteHero)\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n\nThe component isn't expecting a result from the delete operation, so it subscribes without a callback. Even though you are not using the result, you still have to subscribe. Calling the `subscribe()` method _executes_ the observable, which is what initiates the DELETE request.\n\n<div class=\"alert is-important\">\n\nYou must call _subscribe()_ or nothing happens. Just calling `HeroesService.deleteHero()` does not initiate the DELETE request.\n\n</div>\n-->\n<p>이 서비스는 히어로를 삭제할 때 <code>HttpClient.delete</code> 메소드를 활용하며, 삭제하려는 히어로의 ID는 url에 포함시켜 보냅니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\" header=\"app/heroes/heroes.service.ts (deleteHero)\">\n/** DELETE: DB에서 히어로를 삭제합니다. */\ndeleteHero (id: number): Observable&#x3C;{}> {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<p>이 메소드도 <code>HeroesComponent</code>가 구독할 때 실행되기 시작하며, 메소드가 실행되면서 DELETE 요청도 시작됩니다.\n그리고 메소드 실행결과는 <code>Observable</code> 타입으로 반환됩니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\" header=\"app/heroes/heroes.component.ts (deleteHero)\">\nthis.heroesService\n  .deleteHero(hero.id)\n  .subscribe();\n\n</code-example>\n<p>컴포넌트는 삭제 동작의 결과값을 활용하지 않기 때문에 콜백함수 없이 구독을 시작했습니다.\n옵저버블 구독은 이렇게 옵저버를 지정하지 않으면서 시작할 수도 있습니다.\n<code>subscribe()</code> 메소드가 실행되면 옵저버블이 실행되고, DELETE 요청도 시작됩니다.</p>\n<div class=\"alert is-important\">\n<p>옵저버블은 <em>subscribe()</em> 함수를 실행해야 시작됩니다. <code>HeroesService.deleteHero()</code>를 호출하는 것만으로는 DELETE 요청이 시작되지 않습니다.</p>\n</div>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\">\n// subscribe()가 없으면 아무것도 시작되지 않습니다.\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n<a id=\"always-subscribe\"></a>\n<!--\n**Always _subscribe_!**\n-->\n<p><strong><em>subscribe()</em> 가 꼭 있어야 합니다!</strong></p>\n<!--\nAn `HttpClient` method does not begin its HTTP request until you call `subscribe()` on the observable returned by that method. This is true for _all_ `HttpClient` _methods_.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 제공하는 모든 메소드는 <code>subscribe()</code> 없이 HTTP 요청이 시작되지 않습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe [`AsyncPipe`](api/common/AsyncPipe) subscribes (and unsubscribes) for you automatically.\n-->\n<p>템플릿에서 <a href=\"api/common/AsyncPipe\"><code>AsyncPipe</code></a>를 사용하면 옵저버블을 자동으로 구독하고 해지합니다.</p>\n</div>\n<!--\nAll observables returned from `HttpClient` methods are _cold_ by design.\nExecution of the HTTP request is _deferred_, allowing you to extend the\nobservable with additional operations such as  `tap` and `catchError` before anything actually happens.\n\nCalling `subscribe(...)` triggers execution of the observable and causes\n`HttpClient` to compose and send the HTTP request to the server.\n\nYou can think of these observables as _blueprints_ for actual HTTP requests.\n\n<div class=\"alert is-helpful\">\n\nIn fact, each `subscribe()` initiates a separate, independent execution of the observable.\nSubscribing twice results in two HTTP requests.\n\n```javascript\nconst req = http.get<Heroes>('/api/heroes');\n// 0 requests made - .subscribe() not called.\nreq.subscribe();\n// 1 request made.\nreq.subscribe();\n// 2 requests made.\n```\n</div>\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 메소드가 반환하는 옵저버블은 모두 <em>콜드 옵저버블(cold observable)</em> 입니다.\n옵저버블을 구독하는 객체가 없으면 HTTP 요청이 시작되지 않으며, <code>tap</code>이나 <code>catchError</code>와 같은 RxJS 연산자를 연결해도 구독 전에는 아무것도 실행되지 않습니다.</p>\n<p>그리고 <code>subscribe(...)</code>를 실행해야 옵저버블이 시작되고 HTTP 요청도 발생합니다.</p>\n<p>옵저버블은 실제 HTTP 요청을 표현한다고 이해할 수도 있습니다.</p>\n<div class=\"alert is-helpful\">\n<p><code>subscribe()</code> 함수는 실행될 때마다 새로운 옵저버블을 구성합니다.\n그래서 이 함수가 두 번 실행되면 HTTP 요청도 두 번 발생합니다.</p>\n<code-example language=\"javascript\">\nconst req = http.get&#x3C;Heroes>('/api/heroes');\n// 요청 횟수 0 - .subscribe() 는 아직 실행되지 않았습니다.\nreq.subscribe();\n// 요청 횟수 1\nreq.subscribe();\n// 요청 횟수 2\n</code-example>\n</div>\n<!--\n### Making a PUT request\n-->\n<h3 id=\"put-요청-보내기\">PUT 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#put-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<p>An app can send PUT requests using the HTTP client service.\nThe following <code>HeroesService</code> example, like the POST example, replaces a resource with updated data.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\" header=\"app/heroes/heroes.service.ts (updateHero)\">\n/** PUT: DB 데이터를 수정합니다. HTTP 요청이 성공하면 새로운 히어로 데이터를 반환합니다. */\nupdateHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.put&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<p>As for any of the HTTP methods that return an observable, the caller, <code>HeroesComponent.update()</code> <a href=\"guide/http#always-subscribe\" title=\"Why you must always subscribe.\">must <code>subscribe()</code></a> to the observable returned from the <code><a href=\"api/common/http/HttpClient#put\" class=\"code-anchor\">HttpClient.put()</a></code> in order to initiate the request.</p>\n<h3 id=\"adding-and-updating-headers\">Adding and updating headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#adding-and-updating-headers\"><i class=\"material-icons\">link</i></a></h3>\n<p>Many servers require extra headers for save operations.\nFor example, a server might require an authorization token, or \"Content-Type\" header to explicitly declare the MIME type of the request body.</p>\n<h5 id=\"adding-headers\">Adding headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#adding-headers\"><i class=\"material-icons\">link</i></a></h5>\n<p>The <code>HeroesService</code> defines such headers in an <code>httpOptions</code> object that are passed\nto every <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> save method.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\" header=\"app/heroes/heroes.service.ts (httpOptions)\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    'Authorization': 'my-auth-token'\n  })\n};\n\n</code-example>\n<h5 id=\"updating-headers\">Updating headers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#updating-headers\"><i class=\"material-icons\">link</i></a></h5>\n<p>You can't directly modify the existing headers within the previous options\nobject because instances of the <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> class are immutable.\nUse the <code>set()</code> method instead, to return a clone of the current instance with the new changes applied.</p>\n<p>The following example shows how, when an old token has expired, you can update the authorization header before making the next request.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\" linenums=\"false\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<a id=\"url-params\"></a>\n<h2 id=\"configuring-http-url-parameters\">Configuring HTTP URL parameters<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#configuring-http-url-parameters\"><i class=\"material-icons\">link</i></a></h2>\n<p>Use the <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> class with the <code>params</code> request option to add URL query strings in your <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>.</p>\n<p>The following example, the <code>searchHeroes()</code> method queries for heroes whose names contain the search term.</p>\n<p>Start by importing <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> class.</p>\n<code-example hidecopy=\"\" language=\"typescript\">\nimport {<a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>} from \"@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>\";\n</code-example>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroes\" linenums=\"false\">\n/* 입력된 단어가 포함된 히어로 목록을 GET 방식으로 요청합니다. */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  term = term.trim();\n\n  // 전달된 인자로 <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a> 객체를 생성합니다.\n  const options = term ?\n   { params: new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>().set('name', term) } : {};\n\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl, options)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n}\n\n</code-example>\n<p>If there is a search term, the code constructs an options object with an HTML URL-encoded search parameter.\nIf the term is \"cat\", for example, the GET request URL would be <code>api/heroes?name=cat</code>.</p>\n<p>The <code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code> object is immutable. If you need to update the options, save the returned value of the <code>.set()</code> method.</p>\n<p>You can also create HTTP parameters directly from a query string by using the <code>fromString</code> variable:</p>\n<code-example hidecopy=\"\" language=\"typescript\">\nconst params = new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>({fromString: 'name=foo'});\n</code-example>\n<a id=\"intercepting-requests-and-responses\"></a>\n<!--\n## Intercepting requests and responses\n-->\n<h2 id=\"http-요청응답-가로채기\">HTTP 요청/응답 가로채기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청응답-가로채기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWith interception, you declare _interceptors_ that inspect and transform HTTP requests from your application to a server.\nThe same interceptors can also inspect and transform a server's responses on their way back to the application.\nMultiple interceptors form a _forward-and-backward_ chain of request/response handlers.\n\nInterceptors can perform a variety of  _implicit_ tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response.\n\nWithout interception, developers would have to implement these tasks _explicitly_\nfor each `HttpClient` method call.\n-->\n<p>With interception, you declare <em>interceptors</em> that inspect and transform HTTP requests from your application to a server.\nThe same interceptors can also inspect and transform a server's responses on their way back to the application.\n인터셉터는 여러 개가 순서대로 실행되도록 체이닝할 수도 있습니다.</p>\n<p>인터셉터는 다양한 기능을 수행할 수 있습니다. 일반적으로는 HTTP 요청/응답에 대해 사용자 인증 정보를 확인하고 로그를 출력하기 위해 사용합니다.</p>\n<p>만약 인터셉터를 사용하지 않는다면, 모든 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 메소드가 실행될 때마다 필요한 작업을 <em>직접</em> 처리해야 합니다.</p>\n<!--\n### Write an interceptor\n-->\n<h3 id=\"인터셉터-구현하기\">인터셉터 구현하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#인터셉터-구현하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo implement an interceptor, declare a class that implements the `intercept()` method of the `HttpInterceptor` interface.\n\n Here is a do-nothing _noop_ interceptor that simply passes the request through without touching it:\n<code-example path=\"http/src/app/http-interceptors/noop-interceptor.ts\" header=\"app/http-interceptors/noop-interceptor.ts\">\nimport { Injectable } from &#39;@angular/core&#39;;\nimport {\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\n} from &#39;@angular/common/http&#39;;\n\nimport { Observable } from &#39;rxjs&#39;;\n\n/** 인자로 받은 HTTP 요청을 조작하지 않고, 다음 핸들러로 전달합니다. */\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n\n  intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler):\n    Observable&lt;HttpEvent&lt;any&gt;&gt; {\n    return next.handle(req);\n  }\n}\n\n\n</code-example>\n\nThe `intercept` method transforms a request into an `Observable` that eventually returns the HTTP response.\nIn this sense, each interceptor is fully capable of handling the request entirely by itself.\n\nMost interceptors inspect the request on the way in and forward the (perhaps altered) request to the `handle()` method of the `next` object which implements the [`HttpHandler`](api/common/http/HttpHandler) interface.\n\n```javascript\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n```\n\nLike `intercept()`, the `handle()` method transforms an HTTP request into an `Observable` of [`HttpEvents`](#interceptor-events) which ultimately include the server's response. The `intercept()` method could inspect that observable and alter it before returning it to the caller.\n\nThis _no-op_ interceptor simply calls `next.handle()` with the original request and returns the observable without doing a thing.\n-->\n<p>인터셉터를 구현하려면, <code><a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a></code> 인터페이스를 사용하는 클래스를 정의하고 이 클래스 안에 <code>intercept()</code> 메소드를 정의하면 됩니다.</p>\n<p>다음 코드는 기존 HTTP 요청을 변형하지 않고 그대로 통과시키는 인터셉터 기본 코드입니다:</p>\n<code-example path=\"http/src/app/http-interceptors/noop-interceptor.ts\" header=\"app/http-interceptors/noop-interceptor.ts\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport {\n  <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>, <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a>, <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>, <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>\n} from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\n\n/** 인자로 받은 HTTP 요청을 조작하지 않고, 다음 핸들러로 전달합니다. */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class NoopInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>):\n    Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    return next.handle(req);\n  }\n}\n\n\n</code-example>\n<p><code>intercept</code> 메소드는 <code>Observable</code> 타입으로 HTTP 요청을 받아서 HTTP 응답을 반환합니다.\n이것만 봐도, 각각의 인터셉터는 HTTP 요청에 대해 모든 것을 조작할 수 있습니다.</p>\n<p>일반적으로 인터셉터는 요청을 보내거나 응답을 받는 방향을 그대로 유지하기 위해, <a href=\"api/common/http/HttpHandler\"><code>HttpHandler</code></a> 인터페이스로 받은 <code>next</code> 인자의 <code>handle()</code> 메소드를 호출합니다.</p>\n<code-example language=\"javascript\">\nexport abstract class <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a> {\n  abstract handle(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>>;\n}\n</code-example>\n<p><code>intercept()</code>와 비슷하게, <code>handle()</code> 메소드도 HTTP 요청으로 받은 옵저버블을 <a href=\"guide/http#interceptor-events\"><code>HttpEvents</code></a> 타입의 옵저버블로 변환하며, 이 타입이 서버의 최종 응답을 표현하는 타입입니다. <code>intercept()</code> 메소드는 이렇게 받은 서버의 응답을 확인할 수 있으며, HTTP 요청을 시작한 컨텍스트로 돌아가기 전까지 옵저버블의 내용을 조작할 수 있습니다.</p>\n<p>원래 HTTP 요청이나 응답을 조작하지 않고 그대로 통과시키려면 단순하게 <code>next.handle()</code>을 실행하면 됩니다.</p>\n<!--\n### The _next_ object\n-->\n<h3 id=\"next-객체\"><em>next</em> 객체<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#next-객체\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `next` object represents the next interceptor in the chain of interceptors.\nThe final `next` in the chain is the `HttpClient` backend handler that sends the request to the server and receives the server's response.\n\n\nMost interceptors call `next.handle()` so that the request flows through to the next interceptor and, eventually, the backend handler.\nAn interceptor _could_ skip calling `next.handle()`, short-circuit the chain, and [return its own `Observable`](#caching) with an artificial server response.\n\nThis is a common middleware pattern found in frameworks such as Express.js.\n-->\n<p><code>next</code> 객체는 체이닝되는 인터셉터 중 다음으로 실행될 인터셉터를 의미합니다.\n그리고 인터셉터 체인 중 마지막 인터셉터가 받는 <code>next</code> 객체는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 백엔드 핸들러이며, 이 핸들러가 실제로 HTTP 요청을 보내고 서버의 응답을 첫번째로 받는 핸들러입니다.</p>\n<p>인터셉터는 대부분 HTTP 요청이 진행되는 흐름을 그대로 유지하기 위해 <code>next.handle()</code>를 실행하며, 최종적으로는 백엔드 핸들러가 실행됩니다.\n하지만 서버의 응답을 시뮬레이션하는 경우라면 <code>next.handle()</code>을 실행하지 않고 <a href=\"guide/http#caching\">바로 <code>Observable</code></a>을 반환하면서 인터셉터 체인을 멈출 수도 있습니다.</p>\n<p>이 방식은 Express.js와 같은 프레임워크에서 미들웨어 패턴으로 자주 사용하는 방식입니다.</p>\n<!--\n### Provide the interceptor\n-->\n<h3 id=\"인터셉터-적용하기\">인터셉터 적용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#인터셉터-적용하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe `NoopInterceptor` is a service managed by Angular's [dependency injection (DI)](guide/dependency-injection) system.\nLike other services, you must provide the interceptor class before the app can use it.\n\nBecause interceptors are (optional) dependencies of the `HttpClient` service,\nyou must provide them in the same injector (or a parent of the injector) that provides `HttpClient`.\nInterceptors provided _after_ DI creates the `HttpClient` are ignored.\n\nThis app provides `HttpClient` in the app's root injector, as a side-effect of importing the `HttpClientModule` in `AppModule`.\nYou should provide interceptors in `AppModule` as well.\n\nAfter importing the `HTTP_INTERCEPTORS` injection token from `@angular/common/http`,\nwrite the `NoopInterceptor` provider like this:\n\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"noop-provider\">\n{ provide: HTTP_INTERCEPTORS, useClass: NoopInterceptor, multi: true },\n\n</code-example>\n\nNote the `multi: true` option.\nThis required setting tells Angular that `HTTP_INTERCEPTORS` is a token for a _multiprovider_\nthat injects an array of values, rather than a single value.\n\nYou _could_ add this provider directly to the providers array of the `AppModule`.\nHowever, it's rather verbose and there's a good chance that\nyou'll create more interceptors and provide them in the same way.\nYou must also pay [close attention to the order](#interceptor-order)\nin which you provide these interceptors.\n\nConsider creating a \"barrel\" file that gathers all the interceptor providers into an `httpInterceptorProviders` array, starting with this first one, the `NoopInterceptor`.\n\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"interceptor-providers\" header=\"app/http-interceptors/index.ts\">\n/* Http Interceptor를 한 번에 관리합니다. */\nimport { HTTP_INTERCEPTORS } from &#39;@angular/common/http&#39;;\n\nimport { NoopInterceptor } from &#39;./noop-interceptor&#39;;\n\n/** Http interceptor 프로바이더를 실행 순서대로 등록합니다. */\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: NoopInterceptor, multi: true },\n];\n\n</code-example>\n\nThen import and add it to the `AppModule` _providers array_ like this:\n\n<code-example path=\"http/src/app/app.module.ts\" region=\"interceptor-providers\" header=\"app/app.module.ts (interceptor providers)\">\nproviders: [\n  httpInterceptorProviders\n],\n\n</code-example>\n\nAs you create new interceptors, add them to the `httpInterceptorProviders` array and\nyou won't have to revisit the `AppModule`.\n\n<div class=\"alert is-helpful\">\n\nThere are many more interceptors in the complete sample code.\n\n</div>\n-->\n<p>인터셉터를 등록하려면 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>에서 <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> 의존성 주입 토큰을 불러와서 다음과 같이 작성합니다:</p>\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"noop-provider\">\n{ provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n\n</code-example>\n<p>이 때 <code>multi: true</code> 옵션을 지정했습니다.\n이 옵션을 지정하면 <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> 토큰으로 적용되는 인터셉터가 하나만 있는 것이 아니라, <em>여러 개</em> 있다는 것을 의미합니다.</p>\n<p>이 프로바이더 설정은 <code>AppModule</code>의 프로바이더 배열에 바로 추가할 수 있습니다.\n하지만 인터셉터가 여러개 있다면, 이 프로바이더 설정을 한 번에 묶어서 사용하는 방법도 좋습니다.\n이렇게 인터셉터 여러 개를 동시에 적용한다면, <a href=\"guide/http#%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C\">인터셉터가 실행되는 순서</a>에 주의해야 합니다.</p>\n<p>인터셉터 프로바이더를 모두 파일 하나로 모으고, <code>httpInterceptorProviders</code> 배열로 관리해 봅시다. 먼저, 위에서 만든 <code>NoopInterceptor</code>를 다음과 같이 추가합니다.</p>\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"interceptor-providers\" header=\"app/http-interceptors/index.ts\">\n/* Http Interceptor를 한 번에 관리합니다. */\nimport { <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { NoopInterceptor } from './noop-interceptor';\n\n/** Http interceptor 프로바이더를 실행 순서대로 등록합니다. */\nexport const httpInterceptorProviders = [\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, useClass: NoopInterceptor, multi: true },\n];\n\n</code-example>\n<p>그리고 <code>AppModule</code>에 작성했던 <em>프로바이더 배열</em> 을 다음과 같이 수정합니다:</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"interceptor-providers\" header=\"app/app.module.ts (인터셉터 프로바이더 등록하기)\">\nproviders: [\n  httpInterceptorProviders\n],\n\n</code-example>\n<p>이제 새로운 인터셉터를 추가했을 때 <code>httpInterceptorProviders</code>에 등록하기만 하면, <code>AppModule</code>은 따로 수정하지 않아도 됩니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서의 최종 예제 코드에는 더 많은 인터셉터가 사용되었습니다.</p>\n</div>\n<!--\n### Interceptor order\n-->\n<h3 id=\"인터셉터-실행-순서\">인터셉터 실행 순서<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#인터셉터-실행-순서\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAngular applies interceptors in the order that you provide them.\nIf you provide interceptors _A_, then _B_, then _C_,  requests flow in _A->B->C_ and\nresponses flow out _C->B->A_.\n\nYou cannot change the order or remove interceptors later.\nIf you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.\n-->\n<p>인터셉터는 등록한 순서대로 적용됩니다.\n그래서 인터셉터 <em>A</em>, <em>B</em>, <em>C</em> 순서대로 지정하면, HTTP 요청이 <em>A->B->C</em> 순서로 처리되고 HTTP 응답은 <em>C->B->A</em> 순서로 처리됩니다.</p>\n<p>인터셉터를 등록한 이후에 실행 순서를 변경하거나 특정 인터셉터를 건너뛸 수는 없습니다.\n인터셉터를 적용할지 건너뛰어야 할지 지정하려면 인터셉터 안에 동적으로 로직을 작성해야 합니다.</p>\n<a id=\"interceptor-events\"></a>\n<h3 id=\"handling-interceptor-events\">Handling interceptor events<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#handling-interceptor-events\"><i class=\"material-icons\">link</i></a></h3>\n<p>Most <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> methods return observables of <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;any></code>.\nThe <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> class itself is actually an event, whose type is <code><a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a></code>.\nA single HTTP request can, however, generate multiple events of other types, including upload and download progress events.\nThe methods <code>HttpInterceptor.intercept()</code> and <code>HttpHandler.handle()</code> return observables of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any></code>.</p>\n<p>Many interceptors are only concerned with the outgoing request and return the event stream from <code>next.handle()</code> without modifying it.\nSome interceptors, however, need to examine and modify the response from <code>next.handle()</code>; these operations can see all of these events in the stream.</p>\n<a id=\"immutability\"></a>\n<p>Although interceptors are capable of modifying requests and responses,\nthe <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> and <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> instance properties are <code>readonly</code>,\nrendering them largely immutable.\nThey are immutable for a good reason: an app might retry a request several times before it succeeds, which means that the interceptor chain can re-process the same request multiple times.\nIf an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.</p>\n<div class=\"alert is-helpful\">\n<p>   Your interceptor should return every event without modification unless it has a compelling reason to do otherwise.</p>\n</div>\n<p>TypeScript prevents you from setting <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> read-only properties.</p>\n<code-example language=\"javascript\">\n  // Typescript disallows the following assignment because req.url is readonly\n  req.url = req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://');\n</code-example>\n<p>If you must alter a request, clone it first and modify the clone before passing it to <code>next.handle()</code>.\nYou can clone and modify the request in a single step, as shown in the following example.</p>\n<code-example path=\"http/src/app/http-interceptors/ensure-https-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/ensure-https-interceptor.ts (excerpt)\">\n// HTTP 인스턴스을 복사하면서 '<a href=\"api/common/http\" class=\"code-anchor\">http</a>://'를 'https://'로 변경합니다.\nconst secureReq = req.clone({\n  url: req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://')\n});\n// 다음 핸들러에는 수정된 인스턴스를 전달합니다.\nreturn next.handle(secureReq);\n\n</code-example>\n<p>The <code>clone()</code> method's hash argument allows you to mutate specific properties of the request while copying the others.</p>\n<h4 id=\"modifying-a-request-body\">Modifying a request body<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#modifying-a-request-body\"><i class=\"material-icons\">link</i></a></h4>\n<p>The <code>readonly</code> assignment guard can't prevent deep updates and, in particular,\nit can't prevent you from modifying a property of a request body object.</p>\n<code-example language=\"javascript\">\n  req.body.name = req.body.name.trim(); // bad idea!\n</code-example>\n<p>If you must modify the request body, follow these steps.</p>\n<ol>\n<li>Copy the body and make your change in the copy.</li>\n<li>Clone the request object, using its <code>clone()</code> method.</li>\n<li>Replace the clone's body with the modified copy.</li>\n</ol>\n<code-example path=\"http/src/app/http-interceptors/trim-name-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/trim-name-interceptor.ts (excerpt)\">\n// HTTP 바디를 복사하면서 name 필드의 공백을 제거합니다.\nconst newBody = { ...body, name: body.name.trim() };\n// HTTP 요청 객체의 인스턴스를 복제하면서 새로운 바디를 적용합니다.\nconst newReq = req.clone({ body: newBody });\n// 수정한 HTTP 요청을 다음 핸들러에 전달합니다.\nreturn next.handle(newReq);\n\n</code-example>\n<h4 id=\"clearing-the-request-body-in-a-clone\">Clearing the request body in a clone<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#clearing-the-request-body-in-a-clone\"><i class=\"material-icons\">link</i></a></h4>\n<p>Sometimes you need to clear the request body rather than replace it.\nTo do this, set the cloned request body to <code>null</code>.</p>\n<div class=\"alert is-helpful\">\n<p><strong>Tip</strong>: If you set the cloned request body to <code>undefined</code>, Angular assumes you intend to leave the body as is.</p>\n</div>\n<code-example language=\"javascript\">\n  newReq = req.clone({ ... }); // body not mentioned => preserve original body\n  newReq = req.clone({ body: undefined }); // preserve original body\n  newReq = req.clone({ body: null }); // clear the body\n</code-example>\n<!--\n### Setting default headers\n-->\n<h3 id=\"기본-헤더-설정하기\">기본 헤더 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#기본-헤더-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nApps often use an interceptor to set default headers on outgoing requests.\n\nThe sample app has an `AuthService` that produces an authorization token.\nHere is its `AuthInterceptor` that injects that service to get the token and\nadds an authorization header with that token to every outgoing request:\n\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" header=\"app/http-interceptors/auth-interceptor.ts\">\nimport { AuthService } from &#39;../auth.service&#39;;\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler) {\n    // 서비스에서 인증 토큰을 가져옵니다.\n    const authToken = this.auth.getAuthorizationToken();\n\n    // HTTP 요청을 복제하면서, 원래 헤더에 인증 토큰을 추가한 새 헤더를 적용합니다.\n    const authReq = req.clone({\n      headers: req.headers.set(&#39;Authorization&#39;, authToken)\n    });\n\n    // 수정한 HTTP 요청을 다음 핸들러에 전달합니다.\n    return next.handle(authReq);\n  }\n}\n\n</code-example>\n\nThe practice of cloning a request to set new headers is so common that\nthere's a `setHeaders` shortcut for it:\n\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" region=\"set-header-shortcut\">\n// HTTP 요청을 복제하면서 헤더를 지정하는 로직을 한번에 실행할 수도 있습니다.\nconst authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n</code-example>\n\nAn interceptor that alters headers can be used for a number of different operations, including:\n\n* Authentication/authorization\n* Caching behavior; for example, `If-Modified-Since`\n* XSRF protection\n-->\n<p>인터셉터는 애플리케이션에서 보내는 HTTP 요청에 기본 헤더를 설정하는 용도로도 자주 사용합니다.</p>\n<p>이번에 다루는 앱에는 인증 토큰을 생성하는 <code>AuthService</code>가 있습니다.\n그리고 <code>AuthInterceptor</code>는 이 서비스를 주입받아 토큰을 받아오고, 애플리케이션에서 보내는 모든 HTTP 요청에 인증 헤더를 추가합니다:</p>\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" header=\"app/http-interceptors/auth-interceptor.ts\">\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // 서비스에서 인증 토큰을 가져옵니다.\n    const authToken = this.auth.getAuthorizationToken();\n\n    // HTTP 요청을 복제하면서, 원래 헤더에 인증 토큰을 추가한 새 헤더를 적용합니다.\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    // 수정한 HTTP 요청을 다음 핸들러에 전달합니다.\n    return next.handle(authReq);\n  }\n}\n\n</code-example>\n<p>이 때 헤더를 설정하기 위해 HTTP 요청을 복제하는 것은 자주 사용되는 로직이기 때문에, <code>setHeaders</code> 옵션을 사용할 수도 있습니다.</p>\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" region=\"set-header-shortcut\">\n// HTTP 요청을 복제하면서 헤더를 지정하는 로직을 한번에 실행할 수도 있습니다.\nconst authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n</code-example>\n<p>인터셉터가 헤더를 수정하는 동작은 다음과 같은 경우에도 다양하게 적용할 수 있습니다:</p>\n<ul>\n<li>인증 발급/확인</li>\n<li><code>If-Modified-Since</code>을 활용한 캐싱</li>\n<li>XSRF 보안</li>\n</ul>\n<h3 id=\"using-interceptors-for-logging\">Using interceptors for logging<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#using-interceptors-for-logging\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nBecause interceptors can process the request and response _together_, they can perform tasks such as timing and logging an entire HTTP operation.\n\nConsider the following `LoggingInterceptor`, which captures the time of the request,\nthe time of the response, and logs the outcome with the elapsed time\nwith the injected `MessageService`.\n\n<code-example path=\"http/src/app/http-interceptors/logging-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/logging-interceptor.ts)\">\nimport { finalize, tap } from &#39;rxjs/operators&#39;;\nimport { MessageService } from &#39;../message.service&#39;;\n\n@Injectable()\nexport class LoggingInterceptor implements HttpInterceptor {\n  constructor(private messenger: MessageService) {}\n\n  intercept(req: HttpRequest&lt;any&gt;, next: HttpHandler) {\n    const started = Date.now();\n    let ok: string;\n\n    // 서버에서 받은 응답 옵저버블을 체이닝합니다.\n    return next.handle(req)\n      .pipe(\n        tap(\n          // 서버에서 응답을 받으면 성공한 것으로 판단합니다.\n          event =&gt; ok = event instanceof HttpResponse ? &#39;succeeded&#39; : &#39;&#39;,\n          // 요청이 실패한 경우를 처리합니다. error 객체는 HttpErrorResponse 타입입니다.\n          error =&gt; ok = &#39;failed&#39;\n        ),\n        // HTTP 요청이 성공한 경우와 실패한 경우 모두 응답 시간을 로그로 출력합니다.\n        finalize(() =&gt; {\n          const elapsed = Date.now() - started;\n          const msg = `${req.method} &quot;${req.urlWithParams}&quot;\n             ${ok} in ${elapsed} ms.`;\n          this.messenger.add(msg);\n        })\n      );\n  }\n}\n\n</code-example>\n\nThe RxJS `tap` operator captures whether the request succeeded or failed.\nThe RxJS `finalize` operator is called when the response observable either errors or completes (which it must),\nand reports the outcome to the `MessageService`.\n\nNeither `tap` nor `finalize` touch the values of the observable stream returned to the caller.\n-->\n<p>인터셉터는 HTTP 요청과 응답에 <em>모두</em> 관여하기 때문에, HTTP 응답 시간이나 HTTP 동작에 대한 내용을 모두 확인할 수 있습니다.</p>\n<p>HTTP 요청이 발생한 시간과 응답이 도착한 시간을 확인하고, 최종 HTTP 통신에 걸린 시간을 <code>MessageService</code>로 출력하는 인터셉터를 구현해 봅시다. 이 인터셉터는 <code>LoggingInterceptor</code>라는 이름으로 구현합니다.</p>\n<code-example path=\"http/src/app/http-interceptors/logging-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/logging-interceptor.ts)\">\nimport { finalize, tap } from 'rxjs/operators';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class LoggingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private messenger: MessageService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    const started = Date.now();\n    let ok: string;\n\n    // 서버에서 받은 응답 옵저버블을 체이닝합니다.\n    return next.handle(req)\n      .pipe(\n        tap(\n          // 서버에서 응답을 받으면 성공한 것으로 판단합니다.\n          event => ok = event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a> ? 'succeeded' : '',\n          // 요청이 실패한 경우를 처리합니다. error 객체는 <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a> 타입입니다.\n          error => ok = 'failed'\n        ),\n        // HTTP 요청이 성공한 경우와 실패한 경우 모두 응답 시간을 로그로 출력합니다.\n        finalize(() => {\n          const elapsed = Date.now() - started;\n          const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n          this.messenger.add(msg);\n        })\n      );\n  }\n}\n\n</code-example>\n<p>RxJS가 제공하는 <code>tap</code> 연산자와 <code>finalize</code>는 HTTP 요청이 성공하거나 실패하는 것에 관계없이 모든 응답에 대해 실행됩니다.\n이 코드에서는 <code>finalize</code>가 실행될 때 <code>MessageService</code>로 로그를 보냅니다.</p>\n<p><code>tap</code> 연산자와 <code>finalize</code> 연산자 모두 옵저버블의 값을 확인하기만 하고, 옵저버블의 내용은 변경하지 않습니다.</p>\n<a id=\"caching\"></a>\n<h3 id=\"using-interceptors-for-caching\">Using interceptors for caching<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#using-interceptors-for-caching\"><i class=\"material-icons\">link</i></a></h3>\n<p>Interceptors can handle requests by themselves, without forwarding to <code>next.handle()</code>.</p>\n<p>For example, you might decide to cache certain requests and responses to improve performance.\nYou can delegate caching to an interceptor without disturbing your existing data services.</p>\n<p>The <code>CachingInterceptor</code> in the following example demonstrates this approach.</p>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"v1\" header=\"app/http-interceptors/caching-interceptor.ts)\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CachingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private cache: RequestCache) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // 캐싱 대상이 아니면 그대로 진행합니다.\n    if (!isCacheable(req)) { return next.handle(req); }\n\n    const cachedResponse = this.cache.get(req);\n    return cachedResponse ?\n      of(cachedResponse) : sendRequest(req, next, this.cache);\n  }\n}\n\n</code-example>\n<ul>\n<li>\n<p>The <code>isCacheable()</code> function determines if the request is cacheable.\nIn this sample, only GET requests to the npm package search api are cacheable.</p>\n</li>\n<li>\n<p>If the request is not cacheable, the interceptor simply forwards the request\nto the next handler in the chain.</p>\n</li>\n<li>\n<p>If a cacheable request is found in the cache, the interceptor returns an <code>of()</code> <em>observable</em> with\nthe cached response, by-passing the <code>next</code> handler (and all other interceptors downstream).</p>\n</li>\n<li>\n<p>If a cacheable request is not in cache, the code calls <code>sendRequest()</code>.\nThis function creates a <a href=\"guide/http#immutability\">request clone</a> without headers, because the npm API forbids them.\nThe function then forwards the clone of the request to <code>next.handle()</code> which ultimately calls the server and returns the server's response.</p>\n</li>\n</ul>\n<a id=\"send-request\"></a>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"send-request\">\n/**\n * `next()` 함수를 실행해서 서버로 요청을 보냅니다.\n * 서버에서 받은 응답은 캐싱합니다.\n */\nfunction sendRequest(\n  req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>,\n  next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>,\n  cache: RequestCache): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n\n  // npm 검색 API에는 헤더가 필요 없습니다.\n  const noHeaderReq = req.clone({ headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>() });\n\n  return next.handle(noHeaderReq).pipe(\n    tap(event => {\n      // 서버의 응답은 <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a> 타입이 아닐 수도 있습니다.\n      if (event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>) {\n        cache.put(req, event); // 캐시를 업데이트합니다.\n      }\n    })\n  );\n}\n\n</code-example>\n<p>Note how <code>sendRequest()</code> intercepts the response on its way back to the application.\nThis method pipes the response through the <code>tap()</code> operator, whose callback adds the response to the cache.</p>\n<p>The original response continues untouched back up through the chain of interceptors\nto the application caller.</p>\n<p>Data services, such as <code>PackageSearchService</code>, are unaware that\nsome of their <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> requests actually return cached responses.</p>\n<a id=\"cache-refresh\"></a>\n<h3 id=\"using-interceptors-to-request-multiple-values\">Using interceptors to request multiple values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#using-interceptors-to-request-multiple-values\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> method normally returns an observable that emits a single value, either the data or an error.\nAn interceptor can change this to an observable that emits <a href=\"guide/observables\">multiple values</a>.</p>\n<p>The following revised version of the <code>CachingInterceptor</code> optionally returns an observable that\nimmediately emits the cached response, sends the request on to the npm web API,\nand emits again later with the updated search results.</p>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"intercept-refresh\">\n// 커스텀 헤더가 설정되면 업데이트 방식으로 동작합니다.\nif (req.headers.get('x-refresh')) {\n  const results$ = sendRequest(req, next, this.cache);\n  return cachedResponse ?\n    results$.pipe( startWith(cachedResponse) ) :\n    results$;\n}\n// 업데이트 방식을 사용하지 않고 기존 방식으로 동작합니다.\nreturn cachedResponse ?\n  of(cachedResponse) : sendRequest(req, next, this.cache);\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The <em>cache-then-refresh</em> option is triggered by the presence of a custom <code>x-refresh</code> header.</p>\n<p>A checkbox on the <code>PackageSearchComponent</code> toggles a <code>withRefresh</code> flag,\nwhich is one of the arguments to <code>PackageSearchService.search()</code>.\nThat <code>search()</code> method creates the custom <code>x-refresh</code> header\nand adds it to the request before calling <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code>.</p>\n</div>\n<p>The revised <code>CachingInterceptor</code> sets up a server request\nwhether there's a cached value or not,\nusing the same <code>sendRequest()</code> method described <a href=\"guide/http#send-request\">above</a>.\nThe <code>results$</code> observable makes the request when subscribed.</p>\n<ul>\n<li>\n<p>If there's no cached value, the interceptor returns <code>results$</code>.</p>\n</li>\n<li>\n<p>If there is a cached value, the code <em>pipes</em> the cached response onto\n<code>results$</code>, producing a recomposed observable that emits twice,\nthe cached response first (and immediately), followed later\nby the response from the server.\nSubscribers see a sequence of two responses.</p>\n</li>\n</ul>\n<a id=\"report-progress\"></a>\n<h2 id=\"tracking-and-showing-request-progress\">Tracking and showing request progress<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#tracking-and-showing-request-progress\"><i class=\"material-icons\">link</i></a></h2>\n<p>Sometimes applications transfer large amounts of data and those transfers can take a long time.\nFile uploads are a typical example.\nYou can give the users a better experience by providing feedback on the progress of such transfers.</p>\n<p>To make a request with progress events enabled, you can create an instance of <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>\nwith the <code>reportProgress</code> option set true to enable tracking of progress events.</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-request\" header=\"app/uploader/uploader.service.ts (upload request)\">\nconst req = new <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>('POST', '/upload/file', file, {\n  reportProgress: true\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<p><strong>Tip</strong>: Every progress event triggers change detection, so only turn them on if you need to report progress in the UI.</p>\n<p>When using <a href=\"api/common/http/HttpClient#request\"><code>HttpClient.request()</code></a> with an HTTP method, configure the method with\n<a href=\"api/common/http/HttpClient#request\"><code>observe: 'events'</code></a> to see all events, including the progress of transfers.</p>\n</div>\n<p>Next, pass this request object to the <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> method, which\nreturns an <code>Observable</code> of <code>HttpEvents</code> (the same events processed by <a href=\"guide/http#interceptor-events\">interceptors</a>).</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-body\" header=\"app/uploader/uploader.service.ts (upload body)\">\n// `HttpClient.request` API는 `<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>`에서 제공하는 다른 메소드보다\n// 더 낮은 레벨의 이벤트 스트림을 생성합니다.\n// 이 이벤트 스트림은 요청 시작, 진행률, 응답 이벤트를 전달됩니다.\nreturn this.http.request(req).pipe(\n  map(event => this.getEventMessage(event, file)),\n  tap(message => this.showProgress(message)),\n  last(), // 최종 메시지는 실행한 컨텍스트로 반환합니다.\n  catchError(this.handleError(file))\n);\n\n</code-example>\n<p>The <code>getEventMessage</code> method interprets each type of <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code> in the event stream.</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"getEventMessage\" header=\"app/uploader/uploader.service.ts (getEventMessage)\">\n/** 요청 시작, 업로드 진행률, 응답 이벤트를 사용자가 확인할 수 있는 메시지로 변환합니다. */\nprivate getEventMessage(event: <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>, file: File) {\n  switch (event.type) {\n    case <a href=\"api/common/http/HttpEventType#Sent\" class=\"code-anchor\">HttpEventType.Sent</a>:\n      return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n    case <a href=\"api/common/http/HttpEventType#UploadProgress\" class=\"code-anchor\">HttpEventType.UploadProgress</a>:\n      // 진행률을 % 형식으로 변환합니다.\n      const percentDone = Math.round(100 * event.loaded / event.total);\n      return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n    case <a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a>:\n      return `File \"${file.name}\" was completely uploaded!`;\n\n    default:\n      return `File \"${file.name}\" surprising upload event: ${event.type}.`;\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>The sample app for this guide doesn't have a server that accepts uploaded files.\nThe <code>UploadInterceptor</code> in <code>app/http-interceptors/upload-interceptor.ts</code>\nintercepts and short-circuits upload requests\nby returning an observable of simulated events.</p>\n</div>\n<h2 id=\"optimizing-server-interaction-with-debouncing\">Optimizing server interaction with debouncing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#optimizing-server-interaction-with-debouncing\"><i class=\"material-icons\">link</i></a></h2>\n<p>If you need to make an HTTP request in response to user input, it's not efficient to send a request for every keystroke.\nIt's better to wait until the user stops typing and then send a request.\nThis technique is known as debouncing.</p>\n<p>Consider the following template, which lets a user enter a search term to find an npm package by name.\nWhen the user enters a name in a search-box, the <code>PackageSearchComponent</code> sends\na search request for a package with that name to the npm web API.</p>\n<code-example path=\"http/src/app/package-search/package-search.component.html\" region=\"search\" header=\"app/package-search/package-search.component.html (search)\">\n&#x3C;input (keyup)=\"search($event.target.value)\" id=\"name\" placeholder=\"Search\"/>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let package of packages$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\">\n    &#x3C;b>{{package.name}} v.{{package.version}}&#x3C;/b> -\n    &#x3C;i>{{package.description}}&#x3C;/i>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>Here, the <code>keyup</code> event binding sends every keystroke to the component's <code>search()</code> method.\nThe following snippet implements debouncing for this input using RxJS operators.</p>\n<code-example path=\"http/src/app/package-search/package-search.component.ts\" region=\"debounce\" header=\"app/package-search/package-search.component.ts (excerpt)\">\nwithRefresh = false;\npackages$: Observable&#x3C;NpmPackageInfo[]>;\nprivate searchText$ = new Subject&#x3C;string>();\n\nsearch(packageName: string) {\n  this.searchText$.next(packageName);\n}\n\nngOnInit() {\n  this.packages$ = this.searchText$.pipe(\n    debounceTime(500),\n    distinctUntilChanged(),\n    switchMap(packageName =>\n      this.searchService.search(packageName, this.withRefresh))\n  );\n}\n\nconstructor(private searchService: PackageSearchService) { }\n\n\n</code-example>\n<p>The <code>searchText$</code> is the sequence of search-box values coming from the user.\nIt's defined as an RxJS <code>Subject</code>, which means it is a multicasting <code>Observable</code>\nthat can also emit values for itself by calling <code>next(value)</code>,\nas happens in the <code>search()</code> method.</p>\n<p>Rather than forward every <code>searchText</code> value directly to the injected <code>PackageSearchService</code>,\nthe code in <code>ngOnInit()</code> pipes search values through three operators, so that a search value reaches the service only if it's a new value and the user has stopped typing.</p>\n<ul>\n<li>\n<p><code>debounceTime(500)</code>&#x26;emdash;Wait for the user to stop typing (1/2 second in this case).</p>\n</li>\n<li>\n<p><code>distinctUntilChanged()</code>&#x26;emdash;Wait until the search text changes.</p>\n</li>\n<li>\n<p><code>switchMap()</code>&#x26;emdash;Send the search request to the service.</p>\n</li>\n</ul>\n<p>The code sets <code>packages$</code> to this re-composed <code>Observable</code> of search results.\nThe template subscribes to <code>packages$</code> with the <a href=\"api/common/AsyncPipe\">AsyncPipe</a>\nand displays search results as they arrive.</p>\n<div class=\"alert is-helpful\">\n<p>See <a href=\"guide/http#cache-refresh\">Using interceptors to request multiple values</a> for more about the <code>withRefresh</code> option.</p>\n</div>\n<h3 id=\"using-the-switchmap-operator\">Using the <em>switchMap()</em> operator<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#using-the-switchmap-operator\"><i class=\"material-icons\">link</i></a></h3>\n<p>The <code>switchMap()</code> operator takes a function argument that returns an <code>Observable</code>.\nIn the example, <code>PackageSearchService.search</code> returns an <code>Observable</code>, as other data service methods do.\nIf a previous search request is still in-flight (as when the network connection is poor),\nthe operator cancels that request and sends a new one.</p>\n<p>Note that <code>switchMap()</code> returns service responses in their original request order, even if the\nserver returns them out of order.</p>\n<div class=\"alert is-helpful\">\n<p>If you think you'll reuse this debouncing logic,\nconsider moving it to a utility function or into the <code>PackageSearchService</code> itself.</p>\n</div>\n<!--\n## Security: XSRF protection\n-->\n<h2 id=\"보안--xsrf-방어\">보안 : XSRF 방어<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#보안--xsrf-방어\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n[Cross-Site Request Forgery (XSRF or CSRF)](https://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by which the attacker can trick an authenticated user into unknowingly executing actions on your website.\n`HttpClient` supports a [common mechanism](https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token) used to prevent XSRF attacks.\nWhen performing HTTP requests, an interceptor reads a token from a cookie, by default `XSRF-TOKEN`, and sets it as an HTTP header, `X-XSRF-TOKEN`.\nSince only code that runs on your domain could read the cookie, the backend can be certain that the HTTP request came from your client application and not an attacker.\n\nBy default, an interceptor sends this header on all mutating requests (such as POST)\nto relative URLs, but not on GET/HEAD requests or on requests with an absolute URL.\n\nTo take advantage of this, your server needs to set a token in a JavaScript readable session cookie called `XSRF-TOKEN` on either the page load or the first GET request.\nOn subsequent requests the server can verify that the cookie matches the `X-XSRF-TOKEN` HTTP header, and therefore be sure that only code running on your domain could have sent the request.\nThe token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens.\nSet the token to a digest of your site's authentication cookie with a salt for added security.\n\nIn order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.\n\n<div class=\"alert is-important\">\n\n*`HttpClient` supports only the client half of the XSRF protection scheme.*\nYour backend service must be configured to set the cookie for your page, and to verify that\nthe header is present on all eligible requests.\nFailing to do so renders Angular's default protection ineffective.\n\n</div>\n-->\n<p><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">사이트간 요청 위조 (Cross-Site Request Forgery (XSRF))</a>는 인증받지 않은 사용자가 웹사이트를 공격하는 방법 중 하나입니다.\nAngular에서 제공하는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>는 <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\">XSRF 공격을 방어하는 기능</a>을 탑재하고 있습니다.\n그래서 HTTP 요청이 발생했을 때 쿠키에서 토큰을 읽는 인터셉터가 자동으로 동작하며, <code>XSRF-TOKEN</code>으로 설정된 HTTP 헤더를 <code>X-XSRF-TOKEN</code>으로 변경합니다.\n결국 현재 도메인에 유효한 쿠키만 읽을 수 있으며, 백엔드가 HTTP 요청을 좀 더 안전하게 처리할 수 있습니다.</p>\n<p>기본적으로 이 인터셉터는 상대주소로 요청되는 모든 요청에 적용되며, 절대 주소로 요청되는 GET/HEAD 요청에는 적용되지 않습니다.</p>\n<p>그래서 모든 요청에 사이트간 위조된 요청을 방어하려면, 페이지가 로드되거나 처음 발생하는 GET 요청에 대해서 쿠키에 <code>XSRF-TOKEN</code>이 있는지 확인해야 합니다.\n그리고 이후에 발생한 요청의 헤더에 <code>X-XSRF-TOKEN</code>이 있으면 요청이 유효한 것으로 판단하며, 유효한 도메인에서 제대로 보내진 요청이라는 것으로 최종 판단할 수 있습니다.\n이 때 사용하는 토큰은 사용자마다 달라야 하며, 서버에서 반드시 인증되어야 합니다.\n그래야 클라이언트에서 토큰을 위조하는 것도 방어할 수 있습니다.\n서버에서 토큰을 생성할 때 인증키를 활용하면 좀 더 확실합니다.</p>\n<p>Angular 앱 여러개가 같은 도메인이나 서브도메인을 사용해서 이 부분에 충돌이 발생한다면 애플리케이션마다 유일한 쿠키 이름을 사용해야 합니다.</p>\n<div class=\"alert is-important\">\n<p><em><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 제공하는 XSRF 방어 동작은 클라이언트에만 적용되는 내용입니다.</em>\n백엔드에서도 페이지에 쿠키를 설정해야 하며, 클라이언트에서 발생하는 모든 요청이 유효한지 확인해야 합니다.\nFailing to do so renders Angular's default protection ineffective.</p>\n</div>\n<!--\n### Configuring custom cookie/header names\n-->\n<h3 id=\"커스텀-쿠키헤더-이름-지정하기\">커스텀 쿠키/헤더 이름 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#커스텀-쿠키헤더-이름-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIf your backend service uses different names for the XSRF token cookie or header,\nuse `HttpClientXsrfModule.withOptions()` to override the defaults.\n-->\n<p>백엔드에서 XSRF 토큰 쿠키나 헤더를 다른 이름으로 사용하고 있다면 <code><a href=\"api/common/http/HttpClientXsrfModule#withOptions\" class=\"code-anchor\">HttpClientXsrfModule.withOptions()</a></code> 를 사용해서 이름을 변경할 수 있습니다.</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"xsrf\">\nimports: [\n  <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  HttpClientXsrfModule.withOptions({\n    cookieName: 'My-Xsrf-Cookie',\n    headerName: 'My-Xsrf-Header',\n  }),\n],\n\n</code-example>\n<a id=\"testing-requests\"></a>\n<!--\n## Testing HTTP requests\n-->\n<h2 id=\"http-요청-테스트하기\">HTTP 요청 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-테스트하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nAs for any external dependency, you must mock the HTTP backend so your tests can simulate interaction with a remote server.\nThe `@angular/common/http/testing` library makes it straightforward to set up such mocking.\n\nAngular's HTTP testing library is designed for a pattern of testing in which the app executes code and makes requests first.\nThe test then expects that certain requests have or have not been made,\nperforms assertions against those requests,\nand finally provides responses by \"flushing\" each expected request.\n\nAt the end, tests can verify that the app has made no unexpected requests.\n\n<div class=\"alert is-helpful\">\n\nYou can run <live-example stackblitz=\"specs\">these sample tests</live-example>\nin a live coding environment.\n\nThe tests described in this guide are in `src/testing/http-client.spec.ts`.\nThere are also tests of an application data service that call `HttpClient` in\n`src/app/heroes/heroes.service.spec.ts`.\n\n</div>\n-->\n<p>리모트 서버와 통신하는 로직을 테스트하려면 HTTP 백엔드를 목킹해야 합니다.\n그리고 Angular는 이런 작업을 위해 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> 라이브러리를 제공합니다.</p>\n<p>Angular가 제공하는 HTTP 테스트 라이브러리를 사용할 때는 먼저 리모트 서버로 요청을 보내야 합니다.\n그러면 이 요청을 가져와서 어떤 내용이 담겨있는지 검사하고, 정해진 형식으로 응답을 보냅니다(flushing).</p>\n<p>그리고 마지막으로 의도하지 않은 요청이 발생했는지 검사합니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문단에서 다루는 내용은 <live-example stackblitz=\"specs\">샘플 테스트</live-example>를 직접 실행해서 결과를 확인할 수 있습니다.</p>\n<p>이 테스트들은 <code>src/testing/http-client.spec.ts</code> 파일에 작성되어 있으며, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 사용하는 서비스를 테스트하는 코드는 <code>src/app/heroes/heroes.service.spec.ts</code> 파일에 작성되어 잇습니다.</p>\n</div>\n<!--\n### Setup for testing\n-->\n<h3 id=\"테스트-환경설정\">테스트 환경설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#테스트-환경설정\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo begin testing calls to `HttpClient`,\nimport the `HttpClientTestingModule` and the mocking controller, `HttpTestingController`,\nalong with the other symbols your tests require.\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"imports\" header=\"app/testing/http-client.spec.ts (imports)\">\n// Http 테스트 모듈과 목업 컨트롤러를 로드합니다.\nimport { HttpClientTestingModule, HttpTestingController } from &#39;@angular/common/http/testing&#39;;\n\n// 다른 심볼도 로드합니다.\nimport { TestBed } from &#39;@angular/core/testing&#39;;\nimport { HttpClient, HttpErrorResponse } from &#39;@angular/common/http&#39;;\n\n\n</code-example>\n\nThen add the `HttpClientTestingModule` to the `TestBed` and continue with\nthe setup of the _service-under-test_.\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"setup\" header=\"app/testing/http-client.spec.ts(setup)\">\ndescribe(&#39;HttpClient testing&#39;, () =&gt; {\n  let httpClient: HttpClient;\n  let httpTestingController: HttpTestingController;\n\n  beforeEach(() =&gt; {\n    TestBed.configureTestingModule({\n      imports: [ HttpClientTestingModule ]\n    });\n\n    // http 서비스와 테스트 컨트롤러를 각 테스트 케이스에 주입합니다.\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n  });\n  /// 테스트 케이스 시작 ///\n});\n\n</code-example>\n\nNow requests made in the course of your tests hit the testing backend instead of the normal backend.\n\nThis setup also calls `TestBed.inject()` to inject the `HttpClient` service and the mocking controller\nso they can be referenced during the tests.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 테스트하려면 먼저 테스트용 모듈인 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>과 목업 환경을 구성하는 <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>를 로드해야 합니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"imports\" header=\"app/testing/http-client.spec.ts (심볼 로드)\">\n// Http 테스트 모듈과 목업 컨트롤러를 로드합니다.\nimport { <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a>, <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing';\n\n// 다른 심볼도 로드합니다.\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n\n</code-example>\n<p>그리고 나면 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>에 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>를 추가하면서 테스트 환경을 구성합니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"setup\" header=\"app/testing/http-client.spec.ts(환경 설정)\">\ndescribe('<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> testing', () => {\n  let httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>;\n  let httpTestingController: <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [ <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a> ]\n    });\n\n    // <a href=\"api/common/http\" class=\"code-anchor\">http</a> 서비스와 테스트 컨트롤러를 각 테스트 케이스에 주입합니다.\n    httpClient = TestBed.inject(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>);\n    httpTestingController = TestBed.inject(<a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>);\n  });\n  /// 테스트 케이스 시작 ///\n});\n\n</code-example>\n<p>이제 테스트 케이스에서 HTTP 요청이 발생하면 실제 백엔드가 아니라 테스팅 백엔드로 전달됩니다.</p>\n<p>이 코드에서는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스와 목업 컨트롤러를 테스트 케이스마다 동적으로 주입하기 위해 <code>TestBed.inject()</code>을 사용했습니다.</p>\n<!--\n### Expecting and answering requests\n-->\n<h3 id=\"요청-확인하기-요청에-응답하기\">요청 확인하기, 요청에 응답하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#요청-확인하기-요청에-응답하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nNow you can write a test that expects a GET Request to occur and provides a mock response.\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"get-test\" header=\"app/testing/http-client.spec.ts(httpClient.get)\">\nit(&#39;can test HttpClient.get&#39;, () =&gt; {\n  const testData: Data = {name: &#39;Test Data&#39;};\n\n  // HTTP GET 요청을 발생시킵니다.\n  httpClient.get&lt;Data&gt;(testUrl)\n    .subscribe(data =&gt;\n      // 옵저버블이 처리되고 받은 응답이 테스트 데이터와 같은지 검사합니다.\n      expect(data).toEqual(testData)\n    );\n\n  // `expectOne()`은 HTTP 요청의 URL과 매칭됩니다.\n  // 이 주소로 HTTP 요청이 발생하지 않거나 여러번 요청되면 에러를 반환합니다.\n  const req = httpTestingController.expectOne(&#39;/data&#39;);\n\n  // HTTP 요청 방식이 GET인지 검사합니다.\n  expect(req.request.method).toEqual(&#39;GET&#39;);\n\n  // 목업 데이터로 응답을 보내면 옵저버블이 종료됩니다.\n  // 옵저버블로 받은 데이터는 구독 함수에서 검사합니다.\n  req.flush(testData);\n\n  // 마지막으로, 보내지 않고 남아있는 HTTP 요청이 있는지 검사합니다.\n  httpTestingController.verify();\n});\n\n</code-example>\n\nThe last step, verifying that no requests remain outstanding, is common enough for you to move it into an `afterEach()` step:\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"afterEach\">\nafterEach(() =&gt; {\n  // 각 테스트 케이스가 끝나기 전에, 보내지 않고 남아있는 HTTP 요청이 없는지 확인합니다.\n  httpTestingController.verify();\n});\n\n</code-example>\n-->\n<p>이제 GET 요청이 발생하는지 확인하고 목업 응답을 보내는 테스트 케이스를 작성해 봅시다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"get-test\" header=\"app/testing/http-client.spec.ts(httpClient.get())\">\nit('can test HttpClient.get', () => {\n  const testData: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a> = {name: 'Test <a href=\"api/router/Data\" class=\"code-anchor\">Data</a>'};\n\n  // HTTP GET 요청을 발생시킵니다.\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(testUrl)\n    .subscribe(data =>\n      // 옵저버블이 처리되고 받은 응답이 테스트 데이터와 같은지 검사합니다.\n      expect(data).toEqual(testData)\n    );\n\n  // `expectOne()`은 HTTP 요청의 URL과 매칭됩니다.\n  // 이 주소로 HTTP 요청이 발생하지 않거나 여러번 요청되면 에러를 반환합니다.\n  const req = httpTestingController.expectOne('/data');\n\n  // HTTP 요청 방식이 GET인지 검사합니다.\n  expect(req.request.method).toEqual('GET');\n\n  // 목업 데이터로 응답을 보내면 옵저버블이 종료됩니다.\n  // 옵저버블로 받은 데이터는 구독 함수에서 검사합니다.\n  req.flush(testData);\n\n  // 마지막으로, 보내지 않고 남아있는 HTTP 요청이 있는지 검사합니다.\n  httpTestingController.verify();\n});\n\n</code-example>\n<p>모든 응답이 처리되었는지 마지막으로 검사하는 로직은 <code>afterEach()</code>로 옮겨도 됩니다:</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"afterEach\">\nafterEach(() => {\n  // 각 테스트 케이스가 끝나기 전에, 보내지 않고 남아있는 HTTP 요청이 없는지 확인합니다.\n  httpTestingController.verify();\n});\n\n</code-example>\n<!--\n#### Custom request expectations\n-->\n<h4 id=\"http-요청-객체-검사하기\">HTTP 요청 객체 검사하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-객체-검사하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nIf matching by URL isn't sufficient, it's possible to implement your own matching function.\nFor example, you could look for an outgoing request that has an authorization header:\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"predicate\">\n// 헤더에 인증 토큰이 있는지 검사합니다.\nconst req = httpTestingController.expectOne(\n  req =&gt; req.headers.has(&#39;Authorization&#39;)\n);\n\n</code-example>\n\nAs with the previous `expectOne()`,\nthe test fails if 0 or 2+ requests satisfy this predicate.\n-->\n<p>지정된 URL로 HTTP 요청이 왔는지 검사하는 것만으로는 충분하지 않다면, 검사 로직을 직접 작성할 수도 있습니다.\n예를 들어 HTTP 요청 헤더에 인증 토큰이 있는지 검사하는 로직은 다음과 같이 구현할 수 있습니다:</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"predicate\">\n// 헤더에 인증 토큰이 있는지 검사합니다.\nconst req = httpTestingController.expectOne(\n  req => req.headers.has('Authorization')\n);\n\n</code-example>\n<p>그러면 이전에 살펴본 <code>expectOne()</code>과 마찬가지로, HTTP 요청이 발생하지 않거나 2번 이상 발생한 경우에도 마찬가지로 에러를 발생시킵니다.</p>\n<!--\n#### Handling more than one request\n-->\n<h4 id=\"여러번-요청되는-http-테스트하기\">여러번 요청되는 HTTP 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#여러번-요청되는-http-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nIf you need to respond to duplicate requests in your test, use the `match()` API instead of `expectOne()`.\nIt takes the same arguments but returns an array of matching requests.\nOnce returned, these requests are removed from future matching and\nyou are responsible for flushing and verifying them.\n-->\n<p>테스트 케이스가 실행되는 중에 HTTP 요청이 같은 주소로 여러번 발생한다면, <code>expectOne()</code> 대신 <code>match()</code> API를 사용할 수도 있습니다.\n이 함수는 <code>expectOne()</code>를 사용하는 방법과 같지만, 주소와 매칭되는 HTTP 요청을 배열로 반환합니다.\n그러면 이 배열을 한 번에 테스트할 수도 있고, 배열의 항목을 각각 테스트할 수도 있습니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"multi-request\">\n// 지정된 URL과 매칭되는 HTTP 요청을 모두 가져옵니다.\nconst requests = httpTestingController.match(testUrl);\nexpect(requests.length).toEqual(3);\n\n// 각각의 요청에 서로 다른 응답을 보냅니다.\nrequests[0].flush([]);\nrequests[1].flush([testData[0]]);\nrequests[2].flush(testData);\n\n</code-example>\n<!--\n### Testing for errors\n-->\n<h3 id=\"에러-테스트하기\">에러 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#에러-테스트하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou should test the app's defenses against HTTP requests that fail.\n\nCall `request.flush()` with an error message, as seen in the following example.\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"404\">\nit(&#39;can test for 404 error&#39;, () =&gt; {\n  const emsg = &#39;deliberate 404 error&#39;;\n\n  httpClient.get&lt;Data[]&gt;(testUrl).subscribe(\n    data =&gt; fail(&#39;should have failed with the 404 error&#39;),\n    (error: HttpErrorResponse) =&gt; {\n      expect(error.status).toEqual(404, &#39;status&#39;);\n      expect(error.error).toEqual(emsg, &#39;message&#39;);\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // 에러 응답을 보냅니다.\n  req.flush(emsg, { status: 404, statusText: &#39;Not Found&#39; });\n});\n\n</code-example>\n\nAlternatively, you can call `request.error()` with an `ErrorEvent`.\n\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"network-error\">\nit(&#39;can test for network error&#39;, () =&gt; {\n  const emsg = &#39;simulated network error&#39;;\n\n  httpClient.get&lt;Data[]&gt;(testUrl).subscribe(\n    data =&gt; fail(&#39;should have failed with the network error&#39;),\n    (error: HttpErrorResponse) =&gt; {\n      expect(error.error.message).toEqual(emsg, &#39;message&#39;);\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // ErrorEvent 객체를 생성합니다. 이 에러는 네트워크 계층에서 발생하는 에러를 의미합니다.\n  // 타임아웃, DNS 에러, 오프라인 상태일 때 발생하는 에러가 이런 종류에 해당합니다.\n  const mockError = new ErrorEvent(&#39;Network error&#39;, {\n    message: emsg,\n  });\n\n  // 에러 응답을 보냅니다.\n  req.error(mockError);\n});\n\n</code-example>\n-->\n<p>HTTP 요청이 실패한 경우에 애플리케이션의 방어 로직이 제대로 동작하는지도 테스트해야 합니다.</p>\n<p>이 때 <code>request.flush()</code>에 에러 객체를 보내면 HTTP 통신에 실패한 상황을 테스트할 수 있습니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"404\">\nit('can test for 404 error', () => {\n  const emsg = 'deliberate 404 error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the 404 error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.status).toEqual(404, 'status');\n      expect(error.error).toEqual(emsg, 'message');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // 에러 응답을 보냅니다.\n  req.flush(emsg, { status: 404, statusText: 'Not Found' });\n});\n\n</code-example>\n<p>그리고 이 방식은 <code>ErrorEvent</code> 객체를 <code>request.error()</code> 함수에 전달하는 방식으로도 구현할 수 있습니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"network-error\">\nit('can test for network error', () => {\n  const emsg = 'simulated network error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the network error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.error.message).toEqual(emsg, 'message');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // ErrorEvent 객체를 생성합니다. 이 에러는 네트워크 계층에서 발생하는 에러를 의미합니다.\n  // 타임아웃, DNS 에러, 오프라인 상태일 때 발생하는 에러가 이런 종류에 해당합니다.\n  const mockError = new ErrorEvent('Network error', {\n    message: emsg,\n  });\n\n  // 에러 응답을 보냅니다.\n  req.error(mockError);\n});\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpInterceptor\n - guide/architecture-next-steps\n - guide/browser-support\n - guide/npm-packages\n - guide/testing\n - start/start-data\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgForOf\n - api/common/http\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpBackend\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#put\n - api/common/http/HttpClient#request\n - api/common/http/HttpClientJsonpModule\n - api/common/http/HttpClientModule\n - api/common/http/HttpClientXsrfModule#withOptions\n - api/common/http/HttpErrorResponse\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpEventType#Sent\n - api/common/http/HttpEventType#UploadProgress\n - api/common/http/HttpHandler\n - api/common/http/HttpHeaders\n - api/common/http/HttpInterceptor\n - api/common/http/HttpParams\n - api/common/http/HttpRequest\n - api/common/http/HttpResponse\n - api/common/http/testing/HttpClientTestingModule\n - api/common/http/testing/HttpTestingController\n - api/core/Injectable\n - api/core/NgModule\n - api/core/testing/TestBed\n - api/core/testing/async\n - api/platform-browser/BrowserModule\n - api/router/Data\n - guide/architecture\n - guide/glossary#observable\n - guide/glossary#service\n - guide/http#%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C\n - guide/http#adding-and-updating-headers\n - guide/http#adding-headers\n - guide/http#always-subscribe\n - guide/http#cache-refresh\n - guide/http#caching\n - guide/http#clearing-the-request-body-in-a-clone\n - guide/http#communicating-with-backend-services-using-http\n - guide/http#config-service\n - guide/http#configuring-http-url-parameters\n - guide/http#delete-요청-보내기\n - guide/http#error-details\n - guide/http#error-handling\n - guide/http#getting-error-details\n - guide/http#handling-interceptor-events\n - guide/http#handling-request-errors\n - guide/http#http-요청-객체-검사하기\n - guide/http#http-요청-테스트하기\n - guide/http#http-요청응답-가로채기\n - guide/http#immutability\n - guide/http#intercepting-requests-and-responses\n - guide/http#interceptor-events\n - guide/http#json-형식이-아닌-응답-처리하기\n - guide/http#jsonp-요청-보내기\n - guide/http#modifying-a-request-body\n - guide/http#next-객체\n - guide/http#optimizing-server-interaction-with-debouncing\n - guide/http#post-요청-보내기\n - guide/http#prerequisites\n - guide/http#put-요청-보내기\n - guide/http#reading-the-full-response\n - guide/http#report-progress\n - guide/http#requesting-a-typed-response\n - guide/http#retry\n - guide/http#retrying-a-failed-request\n - guide/http#send-request\n - guide/http#setup-for-server-communication\n - guide/http#testing-requests\n - guide/http#tracking-and-showing-request-progress\n - guide/http#typed-response\n - guide/http#updating-headers\n - guide/http#url-params\n - guide/http#using-interceptors-for-caching\n - guide/http#using-interceptors-for-logging\n - guide/http#using-interceptors-to-request-multiple-values\n - guide/http#using-the-switchmap-operator\n - guide/http#기본-헤더-설정하기\n - guide/http#보안--xsrf-방어\n - guide/http#서버에-데이터-보내기\n - guide/http#서버에서-데이터-받아오기\n - guide/http#에러-테스트하기\n - guide/http#여러번-요청되는-http-테스트하기\n - guide/http#요청-확인하기-요청에-응답하기\n - guide/http#인터셉터-구현하기\n - guide/http#인터셉터-실행-순서\n - guide/http#인터셉터-적용하기\n - guide/http#커스텀-쿠키헤더-이름-지정하기\n - guide/http#테스트-환경설정\n - guide/observables\n - guide/pipes\n - guide/rx-library\n - guide/rx-library#operators\n - https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\n - https://en.wikipedia.org/wiki/JSONP\n - https://github.com/angular/angular/edit/master/aio/content/guide/http.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/in-memory-web-api/blob/master/README.md\n-->"
}