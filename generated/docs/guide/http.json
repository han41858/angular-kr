{
  "id": "guide/http",
  "title": "HttpClient",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/http.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"httpclient\">HttpClient<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#httpclient\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nMost front-end applications communicate with backend services over the HTTP protocol. Modern browsers support two different APIs for making HTTP requests: the `XMLHttpRequest` interface and the `fetch()` API.\n-->\n<p>프론트엔드 애플리케이션은 대부분 HTTP 프로토콜을 사용해서 백엔드 서비스와 통신을 합니다. 그리고 최신 브라우저들은 이 HTTP 요청을 처리하는 API를 두 종류로 제공하는데, 하나는 <code>XMLHttpRequest</code> 인터페이스이고 다른 하나는 <code>fetch()</code> API 입니다.</p>\n<!--\nThe `HttpClient` in `@angular/common/http` offers a simplified client HTTP API for Angular applications\nthat rests on the `XMLHttpRequest` interface exposed by browsers.\nAdditional benefits of `HttpClient` include testability features, typed request and response objects, request and response interception, `Observable` apis, and streamlined error handling.\n-->\n<p><code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code> 라이브러리에서 제공하는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>는 Angular 애플리케이션에서 HTTP 요청을 간단하게 보낼 수 있도록 API를 제공하는데, 이 때 브라우저의 <code>XMLHttpRequest</code> 인터페이스를 활용합니다.\n그리고 <code>XMLHttpRequest</code> 기능 외에 테스트 지원 기능, HTTP 요청과 응답에 대한 객체 정보, HTTP 요청과 응답을 가로채는 인터셉트 기능, <code>Observable</code> API, 스트림라인 에러 처리 로직을 추가로 제공합니다.</p>\n<!--\nYou can run the <live-example></live-example> that accompanies this guide.\n-->\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe sample app does not require a data server.\nIt relies on the \n[Angular _in-memory-web-api_](https://github.com/angular/in-memory-web-api/blob/master/README.md),\nwhich replaces the _HttpClient_ module's `HttpBackend`.\nThe replacement service simulates the behavior of a REST-like backend.\n\nLook at the `AppModule` _imports_ to see how it is configured.\n-->\n<p>이 문서에서 다루는 예제는 데이터 서버가 따로 필요하지 않습니다.\n이 문서의 예제는 <em>HttpClient</em> 모듈에서 제공하는 <code><a href=\"api/common/http/HttpBackend\" class=\"code-anchor\">HttpBackend</a></code>를 활용해서, 데이터 서버 대신 <a href=\"https://github.com/angular/in-memory-web-api/blob/master/README.md\">Angular <em>인 메모리 웹 API(in-memory-web-api)</em></a>를 사용할 것입니다.\n이 방식은 REST API 백엔드의 동작을 대신하기에 충분합니다.</p>\n<p>이 서비스 설정은 <code>AppModule</code> 파일에서 하며, 이 문서에서는 따로 설명하지 않습니다.</p>\n</div>\n<!--\n## Setup\n-->\n<h2 id=\"환경설정\">환경설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#환경설정\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nBefore you can use the `HttpClient`, you need to import the Angular `HttpClientModule`. \nMost apps do so in the root `AppModule`.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 사용하기 전에, <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 로드해야 합니다.\n특별한 경우가 아니라면 이 모듈은 <code>AppModule</code>에서 불러옵니다.</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"sketch\" header=\"app/app.module.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> }         from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }    from '@angular/platform-browser';\nimport { <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n    // <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> 뒤에 <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>을 로드합니다.\n    <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  ],\n  declarations: [\n    AppComponent,\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {}\n\n</code-example>\n<!--\nHaving imported `HttpClientModule` into the `AppModule`, you can inject the `HttpClient`\ninto an application class as shown in the following `ConfigService` example.\n-->\n<p><code>AppModule</code>에 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 불러오고 나면 애플리케이션 클레스에 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 의존성으로 주입할 수 있습니다. 예를 들어 <code>ConfigService</code>에서 사용한다면 다음과 같이 작성합니다.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"proto\" header=\"app/config/config.service.ts (excerpt)\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class ConfigService {\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n}\n\n</code-example>\n<!--\n## Getting JSON data\n-->\n<h2 id=\"json-데이터-받기\">JSON 데이터 받기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#json-데이터-받기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nApplications often request JSON data from the server. \nFor example, the app might need a configuration file on the server, `config.json`, \nthat specifies resource URLs.\n-->\n<p>서버에서 받는 데이터는 JSON 형식인 경우가 많습니다.\n예를 들어 다음과 같은 애플리케이션 설정 파일을 서버에서 <code>config.json</code> 파일로 받아온다고 합시다.</p>\n<code-example path=\"http/src/assets/config.json\" header=\"assets/config.json\" linenums=\"false\">\n{\n  \"heroesUrl\": \"api/heroes\",\n  \"textfile\": \"assets/textfile.txt\"\n}\n\n\n</code-example>\n<!--\nThe `ConfigService` fetches this file with a `get()` method on `HttpClient`.\n-->\n<p>그러면 <code>ConfigService</code>에서 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스의 <code>get()</code> 메소드를 사용해서 이 파일을 받아올 수 있습니다.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_1\" header=\"app/config/config.service.ts (getConfig v.1)\" linenums=\"false\">\nconfigUrl = 'assets/config.json';\n\ngetConfig() {\n  return this.http.get(this.configUrl);\n}\n\n</code-example>\n<!--\nA component, such as `ConfigComponent`, injects the `ConfigService` and calls\nthe `getConfig` service method.\n-->\n<p>그리고 <code>ConfigComponent</code>와 같은 컴포넌트에서 <code>ConfigService</code>를 주입받아서 <code>getConfig()</code> 메소드를 실행하면, 서버에서 가져온 설정 파일의 내용을 확인할 수 있습니다.</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v1\" header=\"app/config/config.component.ts (showConfig v.1)\" linenums=\"false\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe((data: Config) => this.config = {\n        heroesUrl: data['heroesUrl'],\n        textfile:  data['textfile']\n    });\n}\n\n</code-example>\n<!--\nBecause the service method returns an `Observable` of configuration data,\nthe component **subscribes** to the method's return value.\nThe subscription callback copies the data fields into the component's `config` object,\nwhich is data-bound in the component template for display.\n-->\n<p>서비스에 정의한 메소드는 데이터를 <code>Observable</code> 객체로 반환하기 때문에, 컴포넌트에서는 이 메소드를 구독해야 반환값을 확인할 수 있습니다.\n컴포넌트의 구독 함수에서는 이렇게 가져온 데이터로 컴포넌트의 <code><a href=\"api/router/Router#config\" class=\"code-anchor\">config</a></code> 객체를 설정하기 때문에, 템플릿에서 이 객체의 데이터를 확인할 수 있습니다.</p>\n<!--\n### Why write a service\n-->\n<h3 id=\"왜-서비스를-한-번-거치나요\">왜 서비스를 한 번 거치나요?<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#왜-서비스를-한-번-거치나요\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThis example is so simple that it is tempting to write the `Http.get()` inside the\ncomponent itself and skip the service.\n-->\n<p>이렇게 살펴본 예제는 아주 간단하기 때문에, 서비스를 생략하고 컴포넌트에 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 주입하고 바로 <code>get()</code> 메소드를 사용하는 것이 낫지 않을까 하는 생각이 들 수도 있습니다.</p>\n<!--\nHowever, data access rarely stays this simple.\nYou typically post-process the data, add error handling, and maybe some retry logic to\ncope with intermittent connectivity.\n-->\n<p>하지만 서버에서 데이터를 가져오는 과정은 이렇게 간단하지 않습니다.\n일반적으로 데이터를 가져오면 가공해야 하고, 에러를 처리해야 하며, 연결이 실패한 경우에는 재시도하는 로직도 필요합니다.</p>\n<!--\nThe component quickly becomes cluttered with data access minutia.\nThe component becomes harder to understand, harder to test, and the data access logic can't be re-used or standardized.\n-->\n<p>그러면 데이터를 처리하는 로직만으로도 컴포넌트는 빠르게 복잡해질 것입니다.\n컴포넌트 코드는 점점 이해하기 힘들어 질 것이고, 테스트하기도 어려워지며, 데이터를 가져오는 로직은 재활용하기도 어려워집니다.</p>\n<!--\nThat's why it is a best practice to separate presentation of data from data access by\nencapsulating data access in a separate service and delegating to that service in\nthe component, even in simple cases like this one.\n-->\n<p>그래서 서버에서 가져온 데이터를 처리하는 로직은 서비스에 작성해서 컴포넌트와 분리하고, 컴포넌트에서는 이 데이터를 받아서 활용하는 로직만 작성하는 것이 좋습니다.</p>\n<!--\n### Type-checking the response\n-->\n<h3 id=\"응답으로-받은-객체에-타입-지정하기\">응답으로 받은 객체에 타입 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#응답으로-받은-객체에-타입-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe subscribe callback above requires bracket notation to extract the data values.\n-->\n<p>데이터의 타입을 확실하게 지정하기 위해 구독 함수에 다음과 같이 타입을 지정해 봅시다.</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v1_callback\" linenums=\"false\">\n.subscribe((data: Config) => this.config = {\n    heroesUrl: data['heroesUrl'],\n    textfile:  data['textfile']\n});\n\n</code-example>\n<!--\nYou can't write `data.heroesUrl` because TypeScript correctly complains that the `data` object from the service does not have a `heroesUrl` property. \n-->\n<p>하지만 지금은 <code>data.heroesUrl</code>과 같이 사용할 수 없습니다. 왜냐하면 서비스에서 받은 <code>data</code> 객체에 <code>heroesUrl</code> 프로퍼티가 있는지 TypeScript가 알 수 없기 때문입니다.</p>\n<!--\nThe `HttpClient.get()` method parsed the JSON server response into the anonymous `Object` type. It doesn't know what the shape of that object is.\n-->\n<p><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 메소드는 서버에서 받은 JSON 데이터를 그냥 <code>Object</code> 타입으로 변환합니다. 이 객체에 어떤 데이터가 있는지는 알지 못합니다.</p>\n<!--\nYou can tell `HttpClient` the type of the response to make consuming the output easier and more obvious.\n-->\n<p>이 때 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 가져올 데이터의 타입을 지정할 수 있습니다. 서버에서 받아온 데이터의 타입을 명확하게 지정하면 이 데이터를 활용하기도 편해집니다.</p>\n<!--\nFirst, define an interface with the correct shape:\n-->\n<p>먼저, 데이터를 표현하는 인터페이스를 다음과 같이 정의합니다:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"config-interface\" linenums=\"false\">\nexport interface Config {\n  heroesUrl: string;\n  textfile: string;\n}\n\n</code-example>\n<!--\nThen, specify that interface as the `HttpClient.get()` call's type parameter in the service:\n-->\n<p>그리고 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 함수를 실행할 때, 데이터 타입을 지정합니다:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_2\" header=\"app/config/config.service.ts (getConfig v.2)\" linenums=\"false\">\ngetConfig() {\n  // 이제 HTTP 요청 결과는 Config 타입의 Observable로 반환합니다.\n  return this.http.get&#x3C;Config>(this.configUrl);\n}\n\n</code-example>\n<!--\nThe callback in the updated component method receives a typed data object, which is\neasier and safer to consume:\n-->\n<p>이제 컴포넌트에서는 정확한 타입을 지정할 수 있고, 이 객체를 활용하기도 더 쉬워집니다:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v2\" header=\"app/config/config.component.ts (showConfig v.2)\" linenums=\"false\">\n<a href=\"api/router/Router#config\" class=\"code-anchor\">config</a>: Config;\n\nshowConfig() {\n  this.configService.getConfig()\n    // Config 타입을 알기 때문에 클래스 프로퍼티로 바로 할당할 수 있습니다.\n    .subscribe((data: Config) => this.config = { ...data });\n}\n\n</code-example>\n<!--\n### Reading the full response\n-->\n<h2 id=\"전체-서버-응답-확인하기\">전체 서버 응답 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#전체-서버-응답-확인하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe response body doesn't return all the data you may need. Sometimes servers return special headers or status codes to indicate certain conditions that are important to the application workflow. \n-->\n<p>응답으로 받은 데이터만으로는 충분하지 않은 경우가 있습니다. 어떤 경우에는 헤더에 있는 정보나 HTTP 상태 코드를 확인해서 애플리케이션의 동작을 제어해야 하는 경우도 있습니다.</p>\n<!--\nTell `HttpClient` that you want the full response with the `observe` option:\n-->\n<p>이 때 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 서버에서 가져오는 데이터 전체를 확인하려면 <code>observe</code> 옵션을 사용합니다:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfigResponse\" linenums=\"false\">\ngetConfigResponse(): Observable&#x3C;<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>> {\n  return this.http.get&#x3C;Config>(\n    this.configUrl, { observe: 'response' });\n}\n\n</code-example>\n<!--\nNow `HttpClient.get()` returns an `Observable` of typed `HttpResponse` rather than just the JSON data.\n-->\n<p>그러면 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 메소드는 지정된 타입의 JSON 데이터 대신 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 타입 객체를 <code>Observable</code>로 전달합니다.</p>\n<!--\nThe component's `showConfigResponse()` method displays the response headers as well as the configuration:\n-->\n<p>그리고 컴포넌트에서 <code>showConfigResponse()</code> 메소드를 다음처럼 작성하면 HTTP 통신에서 받은 응답의 헤더를 확인할 수 있습니다:</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"showConfigResponse\" header=\"app/config/config.component.ts (showConfigResponse)\" linenums=\"false\">\nshowConfigResponse() {\n  this.configService.getConfigResponse()\n    // 반환 형식은 `<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;Config>` 입니다.\n    .subscribe(resp => {\n      // 헤더를 확인합니다.\n      const <a href=\"api/router/ParamMap#keys\" class=\"code-anchor\">keys</a> = resp.headers.keys();\n      this.headers = keys.map(key =>\n        `${key}: ${resp.headers.get(key)}`);\n\n      // `<a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>` 객체의 body 프로퍼티는 `Config` 타입입니다.\n      this.config = { ... resp.body };\n    });\n}\n\n</code-example>\n<!--\nAs you can see, the response object has a `body` property of the correct type.\n-->\n<p>이 때 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 객체의 <code>body</code> 프로퍼티는 이전에 지정했던 타입과 같습니다.</p>\n<!--\n## Error handling\n-->\n<h2 id=\"에러-처리\">에러 처리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#에러-처리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWhat happens if the request fails on the server, or if a poor network connection prevents it from even reaching the server? `HttpClient` will return an _error_ object instead of a successful response.\n-->\n<p>서버에 문제가 있어서 HTTP 요청이 실패하거나, 네트워크 연결이 끊어져서 서버에 접근할 수 없다면 어떻게 될까요? 이런 오류가 발생하면 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>는 정상적인 응답 대신 <em>에러</em> 객체를 반환합니다.</p>\n<!--\nYou _could_ handle in the component by adding a second callback to the `.subscribe()`:\n-->\n<p>그리고 이 에러 객체는 <code>.subscribe()</code> 함수에 지정하는 두 번째 콜백 함수로 처리할 수 있습니다.</p>\n<code-example path=\"http/src/app/config/config.component.ts\" region=\"v3\" header=\"app/config/config.component.ts (showConfig v.3 with error handling)\" linenums=\"false\">\nshowConfig() {\n  this.configService.getConfig()\n    .subscribe(\n      (data: Config) => this.config = { ...data }, // 성공한 경우 실행되는 함수\n      error => this.error = error // 에러가 발생한 경우 실행되는 함수\n    );\n}\n\n</code-example>\n<!--\nIt's certainly a good idea to give the user some kind of feedback when data access fails.\nBut displaying the raw error object returned by `HttpClient` is far from the best way to do it.\n-->\n<p>데이터 통신이 실패하면 사용자에게 어떤 방식으로든 알리는 것이 좋습니다.\n하지만 이 때 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 받은 에러 객체를 그대로 노출하는 것이 최선은 아닙니다.</p>\n<a id=\"error-details\"></a>\n<!--\n### Getting error details\n-->\n<h3 id=\"에러-분석하기\">에러 분석하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#에러-분석하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nDetecting that an error occurred is one thing.\nInterpreting that error and composing a user-friendly response is a bit more involved.\n-->\n<p>에러가 발생한 것을 확인하는 것만으로는 에러 처리를 했다고 할 수 없습니다.\n이 에러는 사용자가 알아볼 수 있는 형태로 변형되어야 합니다.</p>\n<!--\nTwo types of errors can occur. The server backend might reject the request, returning an HTTP response with a status code such as 404 or 500. These are error _responses_.\n-->\n<p>에러는 두 가지 이유로 발생할 수 있습니다. 하나는 서버에서 요청을 거부하거나, HTTP 응답 코드를 404나 500으로 보낸 경우입니다. 이런 경우를 <em>에러 응답(error response)</em> 이라고 합니다.</p>\n<!--\nOr something could go wrong on the client-side such as a network error that prevents the request from completing successfully or an exception thrown in an RxJS operator. These errors produce JavaScript `ErrorEvent` objects.\n-->\n<p>또 다른 경우는 클라이언트에서 발생하는 네트워크 에러 때문에 요청이 완료되지 못했거나, RxJS 연산자에서 예외가 발생해서 발생하는 에러가 있습니다. 이런 에러는 JavaScript <code>ErrorEvent</code> 객체를 생성합니다.</p>\n<!--\nThe `HttpClient` captures both kinds of errors in its `HttpErrorResponse` and you can inspect that response to figure out what really happened.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>는 두 종류의 에러를 모두 <code><a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a></code> 타입으로 받을 수 있으며, 이 객체를 확인하면 HTTP 요청이 어떤 이유로 잘못되었는지 확인할 수 있습니다.</p>\n<!--\nError inspection, interpretation, and resolution is something you want to do in the _service_, \nnot in the _component_.  \n-->\n<p>에러를 분석하고 변환한 후에 해결하는 것은 <em>서비스</em> 안에서 해야 합니다. <em>컴포넌트</em> 가 아닙니다.</p>\n<!--\nYou might first devise an error handler like this one:\n-->\n<p>에러 처리 프로토타입은 다음과 같이 작성할 수 있습니다:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"handleError\" header=\"app/config/config.service.ts (handleError)\" linenums=\"false\">\nprivate handleError(error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) {\n  if (error.error instanceof ErrorEvent) {\n    // 클라이언트나 네트워크 문제로 발생한 에러.\n    console.error('An error occurred:', error.error.message);\n  } else {\n    // 백엔드에서 실패한 것으로 보낸 에러.\n    // 요청으로 받은 에러 객체를 확인하면 원인을 확인할 수 있습니다.\n    console.error(\n      `Backend returned code ${error.status}, ` +\n      `body was: ${error.error}`);\n  }\n  // 사용자가 이해할 수 있는 에러 메시지를 반환합니다.\n  return throwError(\n    'Something bad happened; please try again later.');\n};\n\n</code-example>\n<!--\nNotice that this handler returns an RxJS [`ErrorObservable`](#rxjs) with a user-friendly error message.\nConsumers of the service expect service methods to return an `Observable` of some kind,\neven a \"bad\" one.\n-->\n<p>이 함수는 사용자에게 표시할 메시지를 RxJS <a href=\"guide/http#rxjs\"><code>ErrorObservable</code></a> 타입으로 반환합니다.\n그래서 이 서비스에서 에러를 반환하더라도 서비스를 사용하는 쪽에서는 결국 <code>Observable</code>을 받을 수 있게 됩니다.</p>\n<!--\nNow you take the `Observables` returned by the `HttpClient` methods\nand _pipe them through_ to the error handler.\n-->\n<p>이제 컴포넌트에서 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>의 결과를 받을 때 <em>파이프를 사용하면</em> 에러를 처리할 수 있습니다.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig_3\" header=\"app/config/config.service.ts (getConfig v.3 with error handler)\" linenums=\"false\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      catchError(this.handleError)\n    );\n}\n\n</code-example>\n<h3 id=\"retry\"><code>retry()</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#retry\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nSometimes the error is transient and will go away automatically if you try again.\nFor example, network interruptions are common in mobile scenarios, and trying again\nmay produce a successful result.\n-->\n<p>어떤 경우에는 에러를 일시적인 것으로 판단하고 자동으로 재시도해야 하는 경우가 있습니다.\n특히 모바일 디바이스인 경우에는 연결이 잠시 끊어지는 경우가 자주 발생하며, 실패한 요청을 다시 보냈을 때 바로 성공하는 경우도 자주 있습니다.</p>\n<!--\nThe [RxJS library](#rxjs) offers several _retry_ operators that are worth exploring.\nThe simplest is called `retry()` and it automatically re-subscribes to a failed `Observable` a specified number of times. _Re-subscribing_ to the result of an `HttpClient` method call has the effect of reissuing the HTTP request.\n-->\n<p><a href=\"guide/http#rxjs\">RxJS library</a>에서 이런 경우에 활용할 수 있는 <em>재시도</em> 연산자를 여러가지로 제공합니다.\n그 중 가장 간단한 것은 <code>retry()</code> 연산자이며, 이 연산자는 <code>Observable</code>이 실패했을 때 지정된 횟수만큼 자동으로 다시 구독합니다. 그리고 이 구독이 다시 시작되면 HTTP 요청이 다시 실행됩니다.</p>\n<!--\n_Pipe_ it onto the `HttpClient` method result just before the error handler.\n-->\n<p>에러 처리 파이프는 다음과 같이 작성합니다:</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"getConfig\" header=\"app/config/config.service.ts (getConfig with retry)\" linenums=\"false\">\ngetConfig() {\n  return this.http.get&#x3C;Config>(this.configUrl)\n    .pipe(\n      retry(3), // HTTP 요청이 실패하면 3번 더 시도합니다.\n      catchError(this.handleError) // 재시도한 후에도 발생한 에러를 처리합니다.\n    );\n}\n\n</code-example>\n<a id=\"rxjs\"></a>\n<!--\n## Observables and operators\n-->\n<h2 id=\"옵저버블과-연산자\">옵저버블과 연산자<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#옵저버블과-연산자\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe previous sections of this guide referred to RxJS `Observables` and operators such as `catchError` and `retry`.\nYou will encounter more RxJS artifacts as you continue below.\n-->\n<p>이전 문단에서 설명한 것처럼, Angular 애플리케이션에서 HTTP 요청을 보내거나 데이터를 받아서 처리할 때 RxJS가 제공하는 <code>Observable</code>과 연산자를 활용할 수 있습니다.\nRxJS에서 제공하는 기능을 좀 더 알아봅시다.</p>\n<!--\n[RxJS](http://reactivex.io/rxjs/) is a library for composing asynchronous and callback-based code\nin a _functional, reactive style_.\nMany Angular APIs, including `HttpClient`, produce and consume RxJS `Observables`. \n-->\n<p><a href=\"http://reactivex.io/rxjs/\">RxJS</a>는 비동기 로직과 콜백 코드를 <em>반응형(reactive)</em> 스타일로 구현할 때 사용하는 라이브러리 입니다.\nAngular는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>외에도 많은 곳에서 RxJS의 <code>Observable</code>을 사용합니다.</p>\n<!--\nRxJS itself is out-of-scope for this guide. You will find many learning resources on the web.\nWhile you can get by with a minimum of RxJS knowledge, you'll want to grow your RxJS skills over time in order to use `HttpClient` effectively.\n-->\n<p>RxJS 자체는 이 문서에서 다루는 범위가 아닙니다. RxJS 사용방법은 웹에서 쉽게 찾아볼 수 있으며, 이 문서에서는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 효율적으로 사용할 수 있을 정도로만 RxJS를 알아봅시다.</p>\n<!--\nIf you're following along with these code snippets, note that you must import the RxJS observable and operator symbols that appear in those snippets. These `ConfigService` imports are typical.\n-->\n<p>예제 코드를 작성할 때는 RxJS를 사용하는 코드에 RxJS 옵저버블과 연산자 심볼을 로드해야 합니다. 예를 들어 <code>ConfigService</code>라면 다음과 같이 작성합니다.</p>\n<code-example path=\"http/src/app/config/config.service.ts\" region=\"rxjs-imports\" header=\"app/config/config.service.ts (RxJS imports)\" linenums=\"false\">\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n</code-example>\n<!--\n## Requesting non-JSON data\n-->\n<h2 id=\"json-형식이-아닌-데이터-요청하기\">JSON 형식이 아닌 데이터 요청하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#json-형식이-아닌-데이터-요청하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nNot all APIs return JSON data. In this next example,\na `DownloaderService` method reads a text file from the server\nand logs the file contents, before returning those contents to the caller\nas an `Observable<string>`. \n-->\n<p>모든 API가 JSON 데이터를 반환하는 것은 아닙니다. 이번에 살펴볼 <code>DownloaderService</code>에 정의된 메소드는 서버에서 받아온 텍스트 파일의 내용을 로그에 출력하고 <code>Observable&#x3C;string></code> 타입으로 반환합니다.</p>\n<code-example path=\"http/src/app/downloader/downloader.service.ts\" region=\"getTextFile\" header=\"app/downloader/downloader.service.ts (getTextFile)\" linenums=\"false\">\ngetTextFile(filename: string) {\n  // 반환 형식을 지정하면 get() 함수가 반환하는 타입을 Observable&#x3C;string>으로 변경할 수 있습니다.\n  // 이 때 get() 함수에 제네릭으로 &#x3C;string> 타입을 지정할 필요는 없습니다.\n  return this.http.get(filename, {<a href=\"api/common/http/HttpRequest#responseType\" class=\"code-anchor\">responseType</a>: 'text'})\n    .pipe(\n      tap( // HTTP 응답이나 에러를 로그로 출력합니다.\n        data => this.log(filename, data),\n        error => this.logError(filename, error)\n      )\n    );\n}\n\n</code-example>\n<!--\n`HttpClient.get()` returns a string rather than the default JSON because of the `responseType` option.\n-->\n<p>이제 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 메소드는 <code><a href=\"api/common/http/HttpRequest#responseType\" class=\"code-anchor\">responseType</a></code>을 지정했기 때문에 JSON 타입 대신 문자열 타입을 반환합니다.</p>\n<!--\nThe RxJS `tap` operator (as in \"wiretap\") lets the code inspect good and error values passing through the observable without disturbing them. \n-->\n<p>그리고 이 때 옵저버블이 실행되는 흐름을 방해하지 않으면서 코드를 실행할 때 RxJS <code>tap</code> 연산자를 사용합니다.</p>\n<!--\nA `download()` method in the `DownloaderComponent` initiates the request by subscribing to the service method.\n-->\n<p>서비스의 코드는 <code>DownloaderComponent</code>에 정의된 <code>download()</code> 메소드에서 구독을 시작할 때 실행되며, 이 때 HTTP 요청도 시작됩니다.</p>\n<code-example path=\"http/src/app/downloader/downloader.component.ts\" region=\"download\" header=\"app/downloader/downloader.component.ts (download)\" linenums=\"false\">\ndownload() {\n  this.downloaderService.getTextFile('assets/textfile.txt')\n    .subscribe(results => this.contents = results);\n}\n\n</code-example>\n<!--\n## Sending data to the server\n-->\n<h2 id=\"서버에-데이터-보내기\">서버에 데이터 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#서버에-데이터-보내기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nIn addition to fetching data from the server, `HttpClient` supports mutating requests, that is, sending data to the server with other HTTP methods such as PUT, POST, and DELETE.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>로 서버에 데이터를 요청할 때 사용하는 HTTP 메소드가 PUT, POST, DELETE라면 서버로 추가 데이터를 보낼 수 있습니다.</p>\n<!--\nThe sample app for this guide includes a simplified version of the \"Tour of Heroes\" example\nthat fetches heroes and enables users to add, delete, and update them.\n-->\n<p>이번 문단에서는 \"히어로들의 여행\" 튜토리얼에서 히어로의 목록을 가져오고 추가, 삭제, 수정했던 예제를 간단하게 다시 구현해 봅니다.</p>\n<!--\nThe following sections excerpt methods of the sample's `HeroesService`.\n-->\n<p>예제에서 다루는 코드는 <code>HeroesService</code>만 해당됩니다.</p>\n<!--\n### Adding headers\n-->\n<h3 id=\"헤더-추가하기\">헤더 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#헤더-추가하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nMany servers require extra headers for save operations.\nFor example, they may require a \"Content-Type\" header to explicitly declare \nthe MIME type of the request body.\nOr perhaps the server requires an authorization token.\n-->\n<p>데이터를 저장하는 HTTP 요청이라면 헤더에 추가 내용을 보내야 하는 경우가 많습니다.\n보내는 데이터의 MIME 타입이 어떤 것인지 지정하는 \"Content-Type\" 헤더도 이 중 하나입니다.\n아니면 클라이언트의 인증 정보에 대한 헤더를 요청할 수도 있습니다.</p>\n<!--\nThe `HeroesService` defines such headers in an `httpOptions` object that will be passed\nto every `HttpClient` save method.\n-->\n<p><code>HeroesService</code>가 저장과 관련된 HTTP 요청에 사용할 옵션을 <code>httpOptions</code> 객체로 정의합시다. 이 옵션에 헤더를 지정하려면 다음과 같이 작성합니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"http-options\" header=\"app/heroes/heroes.service.ts (httpOptions)\" linenums=\"false\">\nimport { <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nconst httpOptions = {\n  headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>({\n    'Content-Type':  'application/json',\n    'Authorization': 'my-auth-token'\n  })\n};\n\n</code-example>\n<!--\n### Making a POST request\n-->\n<h3 id=\"post-요청-보내기\">POST 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#post-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nApps often POST data to a server. They POST when submitting a form. \nIn the following example, the `HeroesService` posts when adding a hero to the database.\n-->\n<p>데이터는 POST 방식으로 보낼 수도 있습니다. 일반적으로 POST 메소드는 폼을 제출할 때도 사용하며, 우리가 살펴보고 있는 <code>HeroesService</code>에서는 히어로를 DB에 추가할 때 사용합니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"addHero\" header=\"app/heroes/heroes.service.ts (addHero)\" linenums=\"false\">\n/** POST: DB에 새로운 히어로를 추가합니다. */\naddHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.post&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('addHero', hero))\n    );\n}\n\n</code-example>\n<!--\nThe `HttpClient.post()` method is similar to `get()` in that it has a type parameter\n(you're expecting the server to return the new hero)\nand it takes a resource URL.\n-->\n<p><code><a href=\"api/common/http/HttpClient#post\" class=\"code-anchor\">HttpClient.post()</a></code> 메소드는 <code>get()</code>메소드와 비슷합니다. 서버로부터 받아올 데이터의 타입을 제네릭으로 지정하고, 첫번째 인자로 서버 API의 URL을 받는 것도 같습니다.</p>\n<!--\nIt takes two more parameters:\n\n1. `hero` - the data to POST in the body of the request.\n1. `httpOptions` - the method options which, in this case, [specify required headers](#adding-headers).\n-->\n<p>여기에 인자를 두 개 더 추가합니다.</p>\n<ol>\n<li><code>hero</code> - POST 메소드일 때 요청으로 보낼 body 데이터를 지정합니다.</li>\n<li><code>httpOptions</code> - HTTP 요청에 대한 옵션을 지정합니다. <a href=\"guide/http#%ED%97%A4%EB%8D%94-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">헤더 추가하기</a>에서 지정한 옵션입니다.</li>\n</ol>\n<!--\nOf course it catches errors in much the same manner [described above](#error-details).\n-->\n<p>그리고 에러를 처리하는 방식도 <a href=\"guide/http#error-details\">위에서 설명한 내용</a>과 같습니다.</p>\n<!--\nThe `HeroesComponent` initiates the actual POST operation by subscribing to \nthe `Observable` returned by this service method.\n-->\n<p>이제 <code>HeroesComponent</code>가 옵저버블을 구독하면 POST 요청이 발생하며, 서버의 응답으로 받은 내용은 <code>Observable</code> 타입으로 전달됩니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"add-hero-subscribe\" header=\"app/heroes/heroes.component.ts (addHero)\" linenums=\"false\">\nthis.heroesService.addHero(newHero)\n  .subscribe(hero => this.heroes.push(hero));\n\n</code-example>\n<!--\nWhen the server responds successfully with the newly added hero, the component adds\nthat hero to the displayed `heroes` list.\n-->\n<p>그러면 새로운 히어로가 정상적으로 추가되었다는 것을 컴포넌트가 알 수 있고, <code>heroes</code> 배열에 이 히어로를 추가해서 새로운 목록으로 화면에 표시할 수 있습니다.</p>\n<!--\n### Making a DELETE request\n-->\n<h3 id=\"delete-요청-보내기\">DELETE 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#delete-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThis application deletes a hero with the `HttpClient.delete` method by passing the hero's id\nin the request URL.\n-->\n<p>이 서비스는 히어로를 삭제할 때 <code>HttpClient.delete</code> 메소드를 활용하며, 삭제하려는 히어로의 ID는 url에 포함시켜 보냅니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"deleteHero\" header=\"app/heroes/heroes.service.ts (deleteHero)\" linenums=\"false\">\n/** DELETE: DB에서 히어로를 삭제합니다. */\ndeleteHero (id: number): Observable&#x3C;{}> {\n  const url = `${this.heroesUrl}/${id}`; // DELETE api/heroes/42\n  return this.http.delete(url, httpOptions)\n    .pipe(\n      catchError(this.handleError('deleteHero'))\n    );\n}\n\n</code-example>\n<!--\nThe `HeroesComponent` initiates the actual DELETE operation by subscribing to \nthe `Observable` returned by this service method.\n-->\n<p>이 메소드도 <code>HeroesComponent</code>가 구독할 때 실행되기 시작하며, 메소드가 실행되면서 DELETE 요청도 시작됩니다. 그리고 메소드 실행결과는 <code>Observable</code> 타입으로 반환됩니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-subscribe\" header=\"app/heroes/heroes.component.ts (deleteHero)\" linenums=\"false\">\nthis.heroesService.deleteHero(hero.id).subscribe();\n\n</code-example>\n<!--\nThe component isn't expecting a result from the delete operation, so it subscribes without a callback. Even though you are not using the result, you still have to subscribe. Calling the `subscribe()` method _executes_ the observable, which is what initiates the DELETE request. \n-->\n<p>컴포넌트는 삭제 동작의 결과값을 활용하지 않기 때문에 콜백함수 없이 구독을 시작했습니다. 옵저버블 구독은 이렇게 옵저버를 지정하지 않으면서 시작할 수도 있습니다. <code>subscribe()</code> 메소드가 실행되면 옵저버블이 실행되고, DELETE 요청도 시작됩니다.</p>\n<div class=\"alert is-important\">\n<!--\nYou must call _subscribe()_ or nothing happens. Just calling `HeroesService.deleteHero()` **does not initiate the DELETE request.**\n-->\n<p>옵저버블은 <em>subscribe()</em> 함수를 실행해야 시작됩니다. <code>HeroesService.deleteHero()</code>를 호출하는 것만으로는 <strong>DELETE 요청이 시작되지 않습니다.</strong></p>\n</div>\n<code-example path=\"http/src/app/heroes/heroes.component.ts\" region=\"delete-hero-no-subscribe\" linenums=\"false\">\n// subscribe()가 없으면 아무것도 시작되지 않습니다.\nthis.heroesService.deleteHero(hero.id);\n\n</code-example>\n<a id=\"always-subscribe\"></a>\n<!--\n**Always _subscribe_!**\n-->\n<p><strong><em>subscribe()</em> 가 꼭 있어야 합니다!</strong></p>\n<!--\nAn `HttpClient` method does not begin its HTTP request until you call `subscribe()` on the observable returned by that method. This is true for _all_ `HttpClient` _methods_.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 제공하는 모든 메소드는 <code>subscribe()</code> 없이 HTTP 요청이 시작되지 않습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe [`AsyncPipe`](api/common/AsyncPipe) subscribes (and unsubscribes) for you automatically.\n-->\n<p>템플릿에서 <a href=\"api/common/AsyncPipe\"><code>AsyncPipe</code></a>를 사용하면 옵저버블을 자동으로 구독하고 해지합니다.</p>\n</div>\n<!--\nAll observables returned from `HttpClient` methods are _cold_ by design.\nExecution of the HTTP request is _deferred_, allowing you to extend the\nobservable with additional operations such as  `tap` and `catchError` before anything actually happens.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 메소드가 반환하는 옵저버블은 모두 <em>콜드 옵저버블(cold observable)</em> 입니다.\n옵저버블을 구독하는 객체가 없으면 HTTP 요청이 시작되지 않으며, <code>tap</code>이나 <code>catchError</code>와 같은 RxJS 연산자를 연결해도 구독 전에는 아무것도 실행되지 않습니다.</p>\n<!--\nCalling `subscribe(...)` triggers execution of the observable and causes\n`HttpClient` to compose and send the HTTP request to the server.\n-->\n<p>그리고 <code>subscribe(...)</code>를 실행해야 옵저버블이 시작되고 HTTP 요청도 발생합니다.</p>\n<!--\nYou can think of these observables as _blueprints_ for actual HTTP requests.\n-->\n<p>옵저버블은 실제 HTTP 요청을 표현한다고 이해할 수도 있습니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nIn fact, each `subscribe()` initiates a separate, independent execution of the observable.\nSubscribing twice results in two HTTP requests.\n-->\n<p><code>subscribe()</code> 함수는 실행될 때마다 새로운 옵저버블을 구성합니다.\n그래서 이 함수가 두 번 실행되면 HTTP 요청도 두 번 발생합니다.</p>\n<!--\n```javascript\nconst req = http.get<Heroes>('/api/heroes');\n// 0 requests made - .subscribe() not called.\nreq.subscribe();\n// 1 request made.\nreq.subscribe();\n// 2 requests made.\n```\n-->\n<code-example language=\"javascript\">\nconst req = http.get&#x3C;Heroes>('/api/heroes');\n// 요청 횟수 0 - .subscribe() 는 아직 실행되지 않았습니다.\nreq.subscribe();\n// 요청 횟수 1\nreq.subscribe();\n// 요청 횟수 2\n</code-example>\n</div>\n<!--\n### Making a PUT request\n-->\n<h3 id=\"put-요청-보내기\">PUT 요청 보내기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#put-요청-보내기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAn app will send a PUT request to completely replace a resource with updated data.\nThe following `HeroesService` example is just like the POST example.\n-->\n<p>데이터를 교체하는 경우라면 PUT 메소드를 활용할 수 있습니다.\n<code>HeroesService</code> 에서 PUT 메소드를 사용하는 코드는 POST에서 살펴봤던 것과 비슷합니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"updateHero\" header=\"app/heroes/heroes.service.ts (updateHero)\" linenums=\"false\">\n/** PUT: DB 데이터를 수정합니다. HTTP 요청이 성공하면 새로운 히어로 데이터를 반환합니다. */\nupdateHero (hero: Hero): Observable&#x3C;Hero> {\n  return this.http.put&#x3C;Hero>(this.heroesUrl, hero, httpOptions)\n    .pipe(\n      catchError(this.handleError('updateHero', hero))\n    );\n}\n\n</code-example>\n<!--\nFor the reasons [explained above](#always-subscribe), the caller (`HeroesComponent.update()` in this case) must `subscribe()` to the observable returned from the `HttpClient.put()`\nin order to initiate the request.\n-->\n<p><a href=\"guide/http#always-subscribe\">위에서 설명했던 것처럼</a>, 이 메소드도 옵저버블의 <code>subscribe()</code>가 실행되어야 HTTP 요청이 시작됩니다.</p>\n<!--\n## Advanced usage\n-->\n<h2 id=\"더-활용하기\">더 활용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#더-활용하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nWe have discussed the basic HTTP functionality in `@angular/common/http`, but sometimes you need to do more than make simple requests and get data back.\n-->\n<p>지금까지 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>에서 제공하는 기본 HTTP 기능을 살펴봤습니다. 이제부터는 HttpClient를 실제 상황에 맞게 좀 더 활용하는 방법에 대해 알아봅시다.</p>\n<!--\n### Configuring the request\n-->\n<h3 id=\"http-요청-설정하기\">HTTP 요청 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-설정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nOther aspects of an outgoing request can be configured via the options object\npassed as the last argument to the `HttpClient` method.\n-->\n<p>HTTP 요청을 보낼 때 활용하는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 메소드에 마지막 인자를 지정하면 요청에 대한 옵션을 지정할 수 있습니다.</p>\n<!--\nYou [saw earlier](#adding-headers) that the `HeroesService` sets the default headers by\npassing an options object (`httpOptions`) to its save methods.\nYou can do more.\n-->\n<p><a href=\"guide/http#%ED%97%A4%EB%8D%94-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\">이미 이전에 봤던 것처럼</a> <code>HeroesService</code>는 <code>httpOptions</code> 객체를 사용해서 헤더를 지정하고 있습니다.\n헤더 외에 다른 옵션을 더 지정해 봅시다.</p>\n<!--\n#### Update headers\n-->\n<h4 id=\"헤더-수정하기\">헤더 수정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#헤더-수정하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou can't directly modify the existing headers within the previous options\nobject because instances of the `HttpHeaders` class are immutable.\n-->\n<p>이전에 헤어를 지정하면서 만든 Httpheaders 객체의 프로퍼티는 직접 수정할 수 없습니다. 왜냐하면 <code><a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a></code> 클래스는 이뮤터블(immutable)이기 때문입니다.</p>\n<!--\nUse the `set()` method instead. \nIt returns a clone of the current instance with the new changes applied.\n-->\n<p>대신 <code>set()</code> 메소드를 활용합니다. 이 메소드를 실행하면 새로운 값이 적용된 인스턴스를 반환합니다.</p>\n<!--\nHere's how you might update the authorization header (after the old token expired) \nbefore making the next request.\n-->\n<p>이전에 발급받은 인증 토큰이 만료되었다고 가정하고, 새로운 요청을 위해 헤더의 <code>Authorization</code> 필드를 수정하는 코드는 다음과 같이 작성합니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"update-headers\" linenums=\"false\">\nhttpOptions.headers =\n  httpOptions.headers.set('Authorization', 'my-new-auth-token');\n\n</code-example>\n<!--\n#### URL Parameters\n-->\n<h4 id=\"url-인자\">URL 인자<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#url-인자\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nAdding URL search parameters works a similar way.\nHere is a `searchHeroes` method that queries for heroes whose names contain the search term.\n-->\n<p>URL을 활용하면 검색어와 같은 인자를 추가로 전달할 수 있습니다.\n다음 살펴보는 <code>searchHeroes</code> 메소드는 입력된 단어가 이름에 포함된 히어로를 찾는 함수입니다.</p>\n<code-example path=\"http/src/app/heroes/heroes.service.ts\" region=\"searchHeroes\" linenums=\"false\">\n/* 입력된 단어가 포함된 히어로 목록을 GET 방식으로 요청합니다. */\nsearchHeroes(term: string): Observable&#x3C;Hero[]> {\n  term = term.trim();\n\n  // 전달된 인자로 <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a> 객체를 생성합니다.\n  const options = term ?\n   { params: new <a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a>().set('name', term) } : {};\n\n  return this.http.get&#x3C;Hero[]>(this.heroesUrl, options)\n    .pipe(\n      catchError(this.handleError&#x3C;Hero[]>('searchHeroes', []))\n    );\n}\n\n</code-example>\n<!--\nIf there is a search term, the code constructs an options object with an HTML URL-encoded search parameter. If the term were \"foo\", the GET request URL would be `api/heroes/?name=foo`.\n-->\n<p>이 함수가 인자를 받으면 HTML URL 방식으로 인코딩 된 객체를 생성합니다. 만약 \"foo\"라는 인자가 전달되면, 이 인자를 포함해서 요청하는 GET 주소는 <code>api/heroes/?name=foo</code>가 될 것입니다.</p>\n<!--\nThe `HttpParams` are immutable so you'll have to use the `set()` method to update the options.\n-->\n<p><code><a href=\"api/common/http/HttpParams\" class=\"code-anchor\">HttpParams</a></code>도 이뮤터블 클래스이기 때문에, 값을 수정하려면 <code>set()</code> 메소드를 사용해야 합니다.</p>\n<!--\n### Debouncing requests\n-->\n<h3 id=\"연속된-요청-처리하기-debouncing-request\">연속된 요청 처리하기 (debouncing request)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#연속된-요청-처리하기-debouncing-request\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe sample includes an _npm package search_ feature.\n-->\n<p>이번에는 <em>npm 패키지를 검색하는 기능</em> 을 구현해 봅시다.</p>\n<!--\nWhen the user enters a name in a search-box, the `PackageSearchComponent` sends\na search request for a package with that name to the NPM web API.\n-->\n<p>사용자가 <code>PackageSearchComponent</code>에 있는 검색 필드에 텍스트를 입력하면, 이 값을 NPM 웹 API로 보내서 해당 패키지가 있는지 검색하려고 합니다.</p>\n<!--\nHere's a pertinent excerpt from the template:\n-->\n<p>먼저, 템플릿은 이렇게 구성합니다:</p>\n<code-example path=\"http/src/app/package-search/package-search.component.html\" region=\"search\" header=\"app/package-search/package-search.component.html (search)\">\n&#x3C;input (keyup)=\"search($event.target.value)\" id=\"name\" placeholder=\"Search\"/>\n\n&#x3C;ul>\n  &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let package of packages$ | <a href=\"api/core/testing/async\" class=\"code-anchor\">async</a>\">\n    &#x3C;b>{{package.name}} v.{{package.version}}&#x3C;/b> -\n    &#x3C;i>{{package.description}}&#x3C;/i>\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<!--\nThe `(keyup)` event binding sends every keystroke to the component's `search()` method.\n-->\n<p>그러면 <code>(keyup)</code> 이벤트가 바인딩 되었기 떄문에, 키 입력이 발생할 때마다 컴포넌트의 <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> 메소드가 실행됩니다.</p>\n<!---\nSending a request for every keystroke could be expensive.\nIt's better to wait until the user stops typing and then send a request.\nThat's easy to implement with RxJS operators, as shown in this excerpt.\n-->\n<p>하지만 키입력이 있을 때마다 HTTP 요청을 보내는 것은 효율적이지 않습니다.\n이런 경우는 사용자가 입력을 멈추기를 기다렸다가 요청을 보내는 것이 더 좋습니다.\n이 동작은 RxJS 연산자를 활용하면 쉽게 구현할 수 있습니다.</p>\n<code-example path=\"http/src/app/package-search/package-search.component.ts\" region=\"debounce\" header=\"app/package-search/package-search.component.ts (excerpt)\">\nwithRefresh = false;\npackages$: Observable&#x3C;NpmPackageInfo[]>;\nprivate searchText$ = new Subject&#x3C;string>();\n\nsearch(packageName: string) {\n  this.searchText$.next(packageName);\n}\n\nngOnInit() {\n  this.packages$ = this.searchText$.pipe(\n    debounceTime(500),\n    distinctUntilChanged(),\n    switchMap(packageName =>\n      this.searchService.search(packageName, this.withRefresh))\n  );\n}\n\nconstructor(private searchService: PackageSearchService) { }\n\n\n</code-example>\n<!--\nThe `searchText$` is the sequence of search-box values coming from the user.\nIt's defined as an RxJS `Subject`, which means it is a multicasting `Observable`\nthat can also produce values for itself by calling `next(value)`,\nas happens in the `search()` method.\n-->\n<p><code>searchText$</code>는 검색 필드에서 사용자가 입력하는 문자열을 표현합니다.\n이 프로퍼티는 RxJS <code>Subject</code> 타입으로 정의되었는데, 이 객체는 <code>Observable</code>을 상속받아 만든 객체이며, <code>next(값)</code> 메소드를 실행하면 다음 값을 직접 보낼 수 있도록 확장된 객체입니다. 이 코드에서는 <code>next()</code>가 실행될 때마다 <code><a href=\"api/common/upgrade/$locationShim#search\" class=\"code-anchor\">search()</a></code> 메소드가 실행됩니다.</p>\n<!--\nRather than forward every `searchText` value directly to the injected `PackageSearchService`,\nthe code in `ngOnInit()` _pipes_ search values through three operators:\n-->\n<p>모든 입력값을 <code>PackageSearchService</code>로 보내는 대신, 이 코드에서는 <code>ngOnInit()</code> 메소드에 <em>파이프</em> 를 사용해서 연산자 3개를 연결합니다:</p>\n<!--\n1. `debounceTime(500)` - wait for the user to stop typing (1/2 second in this case).\n1. `distinctUntilChanged()` - wait until the search text changes.\n1. `switchMap()` - send the search request to the service.\n-->\n<ol>\n<li><code>debounceTime(500)</code> - 사용자의 입력이 멈추는 것을 기다립니다. 이 코드의 경우는 500ms 기다립니다.</li>\n<li><code>distinctUntilChanged()</code> - 입력 필드의 값이 실제로 변경되는 것을 기다립니다.</li>\n<li><code>switchMap()</code> - 서비스로 요청을 보냅니다.</li>\n</ol>\n<!--\nThe code sets `packages$` to this re-composed `Observable` of search results.\nThe template subscribes to `packages$` with the [AsyncPipe](api/common/AsyncPipe)\nand displays search results as they arrive.\n-->\n<p>위 코드에서 <code>packages$</code>는 검색 결과로 받는 <code>Observable</code>을 표현합니다.\n그리고 이 프로퍼티는 템플릿에서 <a href=\"api/common/AsyncPipe\">AsyncPipe</a>를 사용해서 구독하기 때문에, 응답이 올때 자동으로 템플릿도 갱신됩니다.</p>\n<!--\nA search value reaches the service only if it's a new value and the user has stopped typing.\n-->\n<p>이렇게 작성하면 사용자가 멈췄을 때, 새로운 값일 때만 서비스로 검색어가 전달됩니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThe `withRefresh` option is explained [below](#cache-refresh).\n-->\n<p><code>withRefresh</code> 옵션은 <a href=\"guide/http#cache-refresh\">아래</a>에서 다시 알아봅니다.</p>\n</div>\n<h4 id=\"switchmap\"><em>switchMap()</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#switchmap\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `switchMap()` operator has three important characteristics.\n-->\n<p><code>switchMap()</code> 연산자에는 중요한 특징이 3가지 있습니다.</p>\n<!--\n1. It takes a function argument that returns an `Observable`.\n`PackageSearchService.search` returns an `Observable`, as other data service methods do.\n-->\n<ol>\n<li>이 연산자는 인자로 <code>Observable</code>을 반환하는 함수를 받습니다.\n<code>PackageSearchService.search</code> 함수도 옵저버블을 반환하기 때문에 이 코드에 사용했습니다.</li>\n</ol>\n<!--\n2. If a previous search request is still _in-flight_ (as when the connection is poor),\nit cancels that request and sends a new one.\n-->\n<ol start=\"2\">\n<li>이전에 시작한 검색 요청이 <em>아직 완료되지 않았으면</em> 이전 요청을 취소하고 새로운 요청을 보냅니다. </li>\n</ol>\n<!--\n3. It returns service responses in their original request order, even if the\nserver returns them out of order. \n-->\n<ol start=\"3\">\n<li>이 연산자는 연산자에 전달된 스트림 순서로 결과를 반환합니다. 서버에서 어떤 순서로 반환하는지는 관계없습니다.</li>\n</ol>\n<div class=\"alert is-helpful\">\n<!--\nIf you think you'll reuse this debouncing logic,\nconsider moving it to a utility function or into the `PackageSearchService` itself.\n-->\n<p>이 로직을 재활용하려면 이 로직의 위치를 컴포넌트 대신 <code>PackageSearchService</code>로 옮기는 것이 좋습니다.</p>\n</div>\n<a id=\"intercepting-requests-and-responses\"></a>\n<!--\n### Intercepting requests and responses\n-->\n<h3 id=\"http-요청응답-가로채기\">HTTP 요청/응답 가로채기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청응답-가로채기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\n_HTTP Interception_ is a major feature of `@angular/common/http`. \nWith interception, you declare _interceptors_ that inspect and transform HTTP requests from your application to the server.\nThe same interceptors may also inspect and transform the server's responses on their way back to the application.\nMultiple interceptors form a _forward-and-backward_ chain of request/response handlers.\n-->\n<p><em>HTTP 요청과 응답을 가로채는 동작</em> 은 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>에서 제공하는 주요 기능 중 하나입니다.\nHTTP 요청을 가로채려면, 먼저 애플리케이션에서 서버로 보내는 HTTP 요청을 확인하고 조작할 수 있는 <em>인터셉터(interceptor)</em> 를 정의해야 합니다.\n그리고 이렇게 구현한 인터셉터로 서버에서 애플리케이션으로 향하는 HTTP 응답도 확인하고 조작할 수 있습니다.\n인터셉터는 여러 개가 순서대로 실행되도록 체이닝할 수도 있습니다.</p>\n<!--\nInterceptors can perform a variety of  _implicit_ tasks, from authentication to logging, in a routine, standard way, for every HTTP request/response. \n-->\n<p>인터셉터는 다양한 기능을 수행할 수 있습니다. 일반적으로는 HTTP 요청/응답에 대해 사용자 인증 정보를 확인하고 로그를 출력하기 위해 사용합니다.</p>\n<!--\nWithout interception, developers would have to implement these tasks _explicitly_ \nfor each `HttpClient` method call.\n-->\n<p>만약 인터셉터를 사용하지 않는다면, 모든 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 메소드가 실행될 때마다 필요한 작업을 <em>직접</em> 처리해야 합니다.</p>\n<!--\n#### Write an interceptor\n-->\n<h4 id=\"인터셉터-구현하기\">인터셉터 구현하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#인터셉터-구현하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nTo implement an interceptor, declare a class that implements the `intercept()` method of the `HttpInterceptor` interface.\n-->\n<p>인터셉터를 구현하려면, <code><a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a></code> 인터페이스를 사용하는 클래스를 정의하고 이 클래스 안에 <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> 메소드를 정의하면 됩니다.</p>\n<!--\n Here is a do-nothing _noop_ interceptor that simply passes the request through without touching it:\n-->\n<p>다음 코드는 기존 HTTP 요청을 변형하지 않고 그대로 통과시키는 인터셉터 기본 코드입니다:</p>\n<code-example path=\"http/src/app/http-interceptors/noop-interceptor.ts\" header=\"app/http-interceptors/noop-interceptor.ts\" linenums=\"false\">\nimport { <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport {\n  <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>, <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a>, <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>, <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>\n} from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { Observable } from 'rxjs';\n\n/** 인자로 받은 HTTP 요청을 조작하지 않고, 다음 핸들러로 전달합니다. */\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class NoopInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>):\n    Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n    return next.handle(req);\n  }\n}\n\n\n</code-example>\n<!--\nThe `intercept` method transforms a request into an `Observable` that eventually returns the HTTP response. \nIn this sense, each interceptor is fully capable of handling the request entirely by itself.\n-->\n<p><code>intercept</code> 메소드는 <code>Observable</code> 타입으로 HTTP 요청을 받아서 HTTP 응답을 반환합니다.\n이것만 봐도, 각각의 인터셉터는 HTTP 요청에 대해 모든 것을 조작할 수 있습니다.</p>\n<!--\nMost interceptors inspect the request on the way in and forward the (perhaps altered) request to the `handle()` method of the `next` object which implements the [`HttpHandler`](api/common/http/HttpHandler) interface.\n-->\n<p>일반적으로 인터셉터는 요청을 보내거나 응답을 받는 방향을 그대로 유지하기 위해, <a href=\"api/common/http/HttpHandler\"><code>HttpHandler</code></a> 인터페이스로 받은 <code>next</code> 인자의 <code>handle()</code> 메소드를 호출합니다.</p>\n<code-example language=\"javascript\">\nexport abstract class <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a> {\n  abstract handle(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>>;\n}\n</code-example>\n<!--\nLike `intercept()`, the `handle()` method transforms an HTTP request into an `Observable` of [`HttpEvents`](#httpevents) which ultimately include the server's response. The `intercept()` method could inspect that observable and alter it before returning it to the caller.\n-->\n<p><code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code>와 비슷하게, <code>handle()</code> 메소드도 HTTP 요청으로 받은 옵저버블을 <a href=\"guide/http#httpevents\"><code>HttpEvents</code></a> 타입의 옵저버블로 변환하며, 이 타입이 서버의 최종 응답을 표현하는 타입입니다. <code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code> 메소드는 이렇게 받은 서버의 응답을 확인할 수 있으며, HTTP 요청을 시작한 컨텍스트로 돌아가기 전까지 옵저버블의 내용을 조작할 수 있습니다.</p>\n<!--\nThis _no-op_ interceptor simply calls `next.handle()` with the original request and returns the observable without doing a thing.\n-->\n<p>원래 HTTP 요청이나 응답을 조작하지 않고 그대로 통과시키려면 단순하게 <code>next.handle()</code>을 실행하면 됩니다.</p>\n<!--\n#### The _next_ object\n-->\n<h4 id=\"next-객체\"><em>next</em> 객체<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#next-객체\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `next` object represents the next interceptor in the chain of interceptors. \nThe final `next` in the chain is the `HttpClient` backend handler that sends the request to the server and receives the server's response.\n-->\n<p><code>next</code> 객체는 체이팅되는 인터셉터 중 다음으로 실행될 인터셉터를 의미합니다.\n그리고 인터셉터 체인 중 마지막 인터셉터가 받는 <code>next</code> 객체는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 백엔드 핸들러이며, 이 핸들러가 실제로 HTTP 요청을 보내고 서버의 응답을 첫번째로 받는 핸들러입니다.</p>\n<!--\nMost interceptors call `next.handle()` so that the request flows through to the next interceptor and, eventually, the backend handler.\nAn interceptor _could_ skip calling `next.handle()`, short-circuit the chain, and [return its own `Observable`](#caching) with an artificial server response. \n-->\n<p>인터셉터는 대부분 HTTP 요청이 진행되는 흐름을 그대로 유지하기 위해 <code>next.handle()</code>를 실행하며, 최종적으로는 백엔드 핸들러가 실행됩니다.\n하지만 서버의 응답을 시뮬레이션하는 경우라면 <code>next.handle()</code>을 실행하지 않고 <a href=\"guide/http#%EC%BA%90%EC%8B%B1\">바로 <code>Observable</code></a>을 반환하면서 인터셉터 체인을 멈출 수도 있습니다.</p>\n<!--\nThis is a common middleware pattern found in frameworks such as Express.js.\n-->\n<p>이 방식은 Express.js와 같은 프레임워크에서 미들웨어 패턴으로 자주 사용하는 방식입니다.</p>\n<!--\n#### Provide the interceptor\n-->\n<h4 id=\"인터셉터-적용하기\">인터셉터 적용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#인터셉터-적용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `NoopInterceptor` is a service managed by Angular's [dependency injection (DI)](guide/dependency-injection) system. \nLike other services, you must provide the interceptor class before the app can use it.\n-->\n<p>이렇게 정의한 <code>NoopInterceptor</code>는 Angular <a href=\"guide/dependency-injection\">의존성 주입 (DI)</a> 체계에서 관리되는 Angular 서비스 입니다.\n그래서 다른 서비스와 비슷하게, 애플리케이션에 사용하기 위해 프로바이더를 등록해야 합니다.</p>\n<!--\nBecause interceptors are (optional) dependencies of the `HttpClient` service, \nyou must provide them in the same injector (or a parent of the injector) that provides `HttpClient`. \nInterceptors provided _after_ DI creates the `HttpClient` are ignored.\n-->\n<p>인터셉터는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스에 의존적이기 때문에, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 존재하는 인젝터나 이 인젝터의 상위 인젝터에 등록되어야 합니다.\n<code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 이미 생성된 <em>이후에</em> 등록되는 인터셉터는 동작하지 않습니다.</p>\n<!--\nThis app provides `HttpClient` in the app's root injector, as a side-effect of importing the `HttpClientModule` in `AppModule`.\nYou should provide interceptors in `AppModule` as well.\n-->\n<p>예제에서 다루는 앱은 <code>AppModule</code>에 <code><a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a></code>을 로드하고 있기 때문에 애플리케이션의 최상위 인젝터에 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>가 로드 됩니다. 따라서, 이 경우라면 <code>AppModule</code>에 인터셉터를 등록해야 합니다.</p>\n<!--\nAfter importing the `HTTP_INTERCEPTORS` injection token from `@angular/common/http`,\nwrite the `NoopInterceptor` provider like this:\n-->\n<p>인터셉터를 등록하려면 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a></code>에서 <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> 의존성 주입 토큰을 불러와서 다음과 같이 작성합니다:</p>\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"noop-provider\" linenums=\"false\">\n{ provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, <a href=\"api/core/ClassSansProvider#useClass\" class=\"code-anchor\">useClass</a>: NoopInterceptor, multi: true },\n\n</code-example>\n<!--\nNote the `multi: true` option. \nThis required setting tells Angular that `HTTP_INTERCEPTORS` is a token for a _multiprovider_ \nthat injects an array of values, rather than a single value.\n-->\n<p>이 때 <code>multi: true</code> 옵션을 지정했습니다.\n이 옵션을 지정하면 <code><a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a></code> 토큰으로 적용되는 인터셉터가 하나만 있는 것이 아니라, <em>여러 개</em> 있다는 것을 의미합니다.</p>\n<!--\nYou _could_ add this provider directly to the providers array of the `AppModule`.\nHowever, it's rather verbose and there's a good chance that \nyou'll create more interceptors and provide them in the same way.\nYou must also pay [close attention to the order](#interceptor-order) \nin which you provide these interceptors.\n-->\n<p>이 프로바이더 설정은 <code>AppModule</code>의 프로바이더 배열에 바로 추가할 수 있습니다.\n하지만 인터셉터가 여러개 있다면, 이 프로바이더 설정을 한 번에 묶어서 사용하는 방법도 좋습니다.\n이렇게 인터셉터 여러 개를 동시에 적용한다면, <a href=\"guide/http#%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C\">인터셉터가 실행되는 순서</a>에 주의해야 합니다.</p>\n<!--\nConsider creating a \"barrel\" file that gathers all the interceptor providers into an `httpInterceptorProviders` array, starting with this first one, the `NoopInterceptor`.\n-->\n<p>인터셉터 프로바이더를 모두 파일 하나로 모으고, <code>httpInterceptorProviders</code> 배열로 관리해 봅시다. 먼저, 위에서 만든 <code>NoopInterceptor</code>를 다음과 같이 추가합니다.</p>\n<code-example path=\"http/src/app/http-interceptors/index.ts\" region=\"interceptor-providers\" header=\"app/http-interceptors/index.ts\" linenums=\"false\">\n/* Http Interceptor를 한 번에 관리합니다. */\nimport { <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\nimport { NoopInterceptor } from './noop-interceptor';\n\n/** Http interceptor 프로바이더를 실행 순서대로 등록합니다. */\nexport const httpInterceptorProviders = [\n  { provide: <a href=\"api/common/http/HTTP_INTERCEPTORS\" class=\"code-anchor\">HTTP_INTERCEPTORS</a>, <a href=\"api/core/ClassSansProvider#useClass\" class=\"code-anchor\">useClass</a>: NoopInterceptor, multi: true },\n];\n\n</code-example>\n<!--\nThen import and add it to the `AppModule` _providers array_ like this:\n-->\n<p>그리고 <code>AppModule</code>에 작성했던 <em>프로바이더 배열</em> 을 다음과 같이 수정합니다:</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"interceptor-providers\" header=\"app/app.module.ts (interceptor providers)\" linenums=\"false\">\nproviders: [\n  httpInterceptorProviders\n],\n\n</code-example>\n<!--\nAs you create new interceptors, add them to the `httpInterceptorProviders` array and\nyou won't have to revisit the `AppModule`.\n-->\n<p>이제 새로운 인터셉터를 추가했을 때 <code>httpInterceptorProviders</code>에 등록하기만 하면, <code>AppModule</code>은 따로 수정하지 않아도 됩니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nThere are many more interceptors in the complete sample code.\n-->\n<p>이 문서의 최종 예제 코드에는 더 많은 인터셉터가 사용되었습니다.</p>\n</div>\n<!--\n#### Interceptor order\n-->\n<h4 id=\"인터셉터-실행-순서\">인터셉터 실행 순서<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#인터셉터-실행-순서\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nAngular applies interceptors in the order that you provide them.\nIf you provide interceptors _A_, then _B_, then _C_,  requests will flow in _A->B->C_ and\nresponses will flow out _C->B->A_.\n-->\n<p>인터셉터는 등록한 순서대로 적용됩니다.\n그래서 인터셉터 <em>A</em>, <em>B</em>, <em>C</em> 순서대로 지정하면, HTTP 요청이 <em>A->B->C</em> 순서로 처리되고 HTTP 응답은 <em>C->B->A</em> 순서로 처리됩니다.</p>\n<!--\nYou cannot change the order or remove interceptors later.\nIf you need to enable and disable an interceptor dynamically, you'll have to build that capability into the interceptor itself.\n-->\n<p>인터셉터를 등록한 이후에 실행 순서를 변경하거나 특정 인터셉터를 건너뛸 수는 없습니다.\n인터셉터를 적용할지 건너뛰어야 할지 지정하려면 인터셉터 안에 동적으로 로직을 작성해야 합니다.</p>\n<h4 id=\"httpevents\"><em>HttpEvents</em><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#httpevents\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nYou may have expected the `intercept()` and `handle()` methods to return observables of `HttpResponse<any>` as most `HttpClient` methods do.\n-->\n<p><code><a href=\"api/common/http/JsonpInterceptor#intercept\" class=\"code-anchor\">intercept()</a></code>나 <code>handle()</code> 메소드는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 제공하는 다른 메소드들처럼 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>&#x3C;any></code> 타입의 옵저버블을 반환할 것이라고 생각할 수 있습니다.</p>\n<!--\nInstead they return observables of `HttpEvent<any>`.\n-->\n<p>하지만 이 예상과 다르게, 인터셉터에서 사용하는 함수들은 <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any></code> 타입의 옵저버블을 반환합니다.</p>\n<!--\nThat's because interceptors work at a lower level than those `HttpClient` methods. A single HTTP request can generate multiple _events_, including upload and download progress events. The `HttpResponse` class itself is actually an event, whose type is `HttpEventType.HttpResponseEvent`.\n-->\n<p>반환형식이 다른 이유는 인터셉터가 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 제공하는 메소드들보다 더 낮은 레벨에서 동작하기 때문입니다. HTTP 요청이 한 번 실행되는 동안 <em>이벤트</em> 는 여러번 발생할 수 있는데, 업로드 진행률이나 다운로드 진행률에 대한 이벤트도 이런 이벤트에 포함됩니다. <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 클래스도 이런 이벤트 중 하나를 의미하며, 실제로도 <code>HttpEventType.HttpResponseEvent</code>으로 정의되어 있습니다.</p>\n<!--\nMany interceptors are only concerned with the outgoing request and simply return the event stream from `next.handle()` without modifying it.\n-->\n<p>한 인터셉터에서 그 단계에서 필요한 로직을 끝내고 나면 마지막으로 대부분 <code>next.handle()</code> 함수를 실행합니다.</p>\n<!--\nBut interceptors that examine and modify the response from `next.handle()` \nwill see all of these events. \nYour interceptor should return _every event untouched_ unless it has a _compelling reason to do otherwise_.\n-->\n<p>하지만 <code>next.handle()</code> 에서 처리되는 내용을 이벤트로 간주하고 이 내용을 직접 확인하고 조작할 수도 있습니다.\n물론 <em>특별한 이유가 없다면</em> HTTP 요청을 보내고 응답으로 받는 흐름을 유지하기 위해 <em>기존 흐름을 유지하는 것</em> 이 좋습니다.</p>\n<!--\n#### Immutability\n-->\n<a id=\"불변성\"></a>\n<h4 id=\"불변성-immutability\">불변성 (Immutability)<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#불변성-immutability\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nAlthough interceptors are capable of mutating requests and responses,\nthe `HttpRequest` and `HttpResponse` instance properties are `readonly`,\nrendering them largely immutable.\n-->\n<p>인터셉터는 HTTP 요청과 응답을 조작할 수 있지만, <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>와 <code><a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a></code> 인스턴스의 프로퍼티들은 대부분 <code>readonly</code>로 지정되어 있으며, 이 프로퍼티 자체는 모두 이뮤터블입니다.</p>\n<!--\nThey are immutable for a good reason: the app may retry a request several times before it succeeds, which means that the interceptor chain may re-process the same request multiple times.\nIf an interceptor could modify the original request object, the re-tried operation would start from the modified request rather than the original. Immutability ensures that interceptors see the same request for each try.\n-->\n<p>프로퍼티들이 이뮤터블로 지정된 이유가 있습니다. 애플리케이션에서 보내는 HTTP 요청은 성공하기까지 몇차례 재시도될 수 있는데, 이 말은 동일한 HTTP 요청과 인터셉터 체이닝이 몇차례 반복된다는 것을 의미합니다.\n만약 인터셉터가 처음 요청된 객체를 바꿔버린다면, 재시도했을 때 보내는 요청은 처음과 달라진다는 말이 됩니다. HTTP 요청이 재시도 되더라도 같은 조건에서 실행되기 위해 인터셉터에 전달되는 객체는 불변성이 보장되어야 합니다.</p>\n<!--\nTypeScript will prevent you from setting `HttpRequest` readonly properties. \n-->\n<p>그래서 다음과 같이 읽기 전용으로 지정된 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code>의 프로퍼티로 변경하는 것은 TypeScript에서도 유효하지 않습니다.</p>\n<!--\n```javascript\n  // Typescript disallows the following assignment because req.url is readonly\n  req.url = req.url.replace('http://', 'https://');\n```\n-->\n<code-example language=\"javascript\">\n  // req.url은 읽기 전용 프로퍼티이기 때문에 다음과 같은 문법은 TypeScript에서 유효하지 않습니다.\n  req.url = req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://');\n</code-example>\n<!--\nTo alter the request, clone it first and modify the clone before passing it to `next.handle()`. \nYou can clone and modify the request in a single step as in this example.\n-->\n<p>그래서 요청으로 보내는 객체를 수정하려면, 이 객체의 인스턴스를 복사한 후에 <code>next.handle()</code> 메소드로 전달해야 합니다.\n위에서 실패한 문법은 다음과 같이 수정할 수 있습니다.</p>\n<code-example path=\"http/src/app/http-interceptors/ensure-https-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/ensure-https-interceptor.ts (excerpt)\" linenums=\"false\">\n// HTTP 인스턴스을 복사하면서 '<a href=\"api/common/http\" class=\"code-anchor\">http</a>://'를 'https://'로 변경합니다.\nconst secureReq = req.clone({\n  url: req.url.replace('<a href=\"api/common/http\" class=\"code-anchor\">http</a>://', 'https://')\n});\n// 다음 핸들러에는 수정된 인스턴스를 전달합니다.\nreturn next.handle(secureReq);\n\n</code-example>\n<!--\nThe `clone()` method's hash argument allows you to mutate specific properties of the request while copying the others.\n-->\n<p><code>clone()</code> 메소드를 사용하면 특정 프로퍼티의 값을 원하는 값으로 수정한 인스턴스를 생성할 수 있고, 다음 실행되는 핸들러에 새로운 인스턴스를 전달할 수 있습니다.</p>\n<!--\n##### The request body\n-->\n<h4 id=\"http-요청-바디\">HTTP 요청 바디<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-바디\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `readonly` assignment guard can't prevent deep updates and, in particular, \nit can't prevent you from modifying a property of a request body object.\n-->\n<p><code>readonly</code>로 지정된 프로퍼티 값은 직접 수정할 수 없습니다. 그래서 다음과 같이 HTTP 요청 바디를 직접 수정하는 구문도 유효하지 않습니다.</p>\n<!--\n```javascript\n  req.body.name = req.body.name.trim(); // bad idea!\n```\n-->\n<code-example language=\"javascript\">\n  req.body.name = req.body.name.trim(); // 오류가 발생합니다!\n</code-example>\n<!--\nIf you must mutate the request body, copy it first, change the copy, \n`clone()` the request, and set the clone's body with the new body, as in the following example.\n-->\n<p>그래서 HTTP 바디를 수정하려면, 이 인스턴스를 수정해서 복제한 인스턴스를 사용해야 합니다.\n이 때 <code>clone()</code> 메소드를 다음과 같이 사용합니다.</p>\n<code-example path=\"http/src/app/http-interceptors/trim-name-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/trim-name-interceptor.ts (excerpt)\" linenums=\"false\">\n// HTTP 바디를 복사하면서 name 필드의 공백을 제거합니다.\nconst newBody = { ...body, name: body.name.trim() };\n// HTTP 요청 객체의 인스턴스를 복제하면서 새로운 바디를 적용합니다.\nconst newReq = req.clone({ body: newBody });\n// 수정한 HTTP 요청을 다음 핸들러에 전달합니다.\nreturn next.handle(newReq);\n\n</code-example>\n<!--\n##### Clearing the request body\n-->\n<h5 id=\"http-요청-바디-비우기\">HTTP 요청 바디 비우기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-바디-비우기\"><i class=\"material-icons\">link</i></a></h5>\n<!--\nSometimes you need to clear the request body rather than replace it.\nIf you set the cloned request body to `undefined`, Angular assumes you intend to leave the body as is.\nThat is not what you want.\nIf you set the cloned request body to `null`, Angular knows you intend to clear the request body.\n-->\n<p>어떤 경우에는 HTTP 요청 바디를 수정하지 않고 모두 비우는 로직이 필요할 수도 있습니다.\n하지만 이전처럼 HTTP 요청을 복제하면서 바디의 내용을 <code>undefined</code>로 설정하면, Angular는 바디를 수정하지 않습니다.\n원하던 것은 이게 아니죠.\n이 때 HTTP 요청을 복제할 때 <code>undefined</code> 대신 <code>null</code>을 지정하면 Angular가 HTTP 요청 바디를 모두 비웁니다.</p>\n<!--\n```javascript\n  newReq = req.clone({ ... }); // body not mentioned => preserve original body\n  newReq = req.clone({ body: undefined }); // preserve original body\n  newReq = req.clone({ body: null }); // clear the body\n```\n-->\n<code-example language=\"javascript\">\n  newReq = req.clone({ ... }); // 바디는 언급되지 않았습니다 => 기존 바디를 유지합니다.\n  newReq = req.clone({ body: undefined }); // 기존 바디가 유지됩니다.\n  newReq = req.clone({ body: null }); // 바디를 모두 비웁니다.\n</code-example>\n<!--\n#### Set default headers\n-->\n<h4 id=\"기본-헤더-설정하기\">기본 헤더 설정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#기본-헤더-설정하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nApps often use an interceptor to set default headers on outgoing requests. \n-->\n<p>인터셉터는 애플리케이션에서 보내는 HTTP 요청에 기본 헤더를 설정하는 용도로도 자주 사용합니다.</p>\n<!--\nThe sample app has an `AuthService` that produces an authorization token.\nHere is its `AuthInterceptor` that injects that service to get the token and\nadds an authorization header with that token to every outgoing request:\n-->\n<p>이번에 다루는 앱에는 인증 토큰을 생성하는 <code>AuthService</code>가 있습니다.\n그리고 <code>AuthInterceptor</code>는 이 서비스를 주입받아 토큰을 받아오고, 애플리케이션에서 보내는 모든 HTTP 요청에 인증 헤더를 추가합니다:</p>\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" header=\"app/http-interceptors/auth-interceptor.ts\">\nimport { AuthService } from '../auth.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class AuthInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n\n  constructor(private auth: AuthService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // 서비스에서 인증 토큰을 가져옵니다.\n    const authToken = this.auth.getAuthorizationToken();\n\n    // HTTP 요청을 복제하면서, 원래 헤더에 인증 토큰을 추가한 새 헤더를 적용합니다.\n    const authReq = req.clone({\n      headers: req.headers.set('Authorization', authToken)\n    });\n\n    // 수정한 HTTP 요청을 다음 핸들러에 전달합니다.\n    return next.handle(authReq);\n  }\n}\n\n</code-example>\n<!--\nThe practice of cloning a request to set new headers is so common that \nthere's a `setHeaders` shortcut for it:\n-->\n<p>이 때 헤더를 설정하기 위해 HTTP 요청을 복제하는 것은 자주 사용되는 로직이기 때문에, <code>setHeaders</code> 옵션을 사용할 수도 있습니다.</p>\n<code-example path=\"http/src/app/http-interceptors/auth-interceptor.ts\" region=\"set-header-shortcut\">\n// HTTP 요청을 복제하면서 헤더를 지정하는 로직을 한번에 실행할 수도 있습니다.\nconst authReq = req.clone({ setHeaders: { Authorization: authToken } });\n\n</code-example>\n<!--\nAn interceptor that alters headers can be used for a number of different operations, including:\n\n* Authentication/authorization\n* Caching behavior; for example, `If-Modified-Since`\n* XSRF protection\n-->\n<p>인터셉터가 헤더를 수정하는 동작은 다음과 같은 경우에도 다양하게 적용할 수 있습니다:</p>\n<ul>\n<li>인증 발급/확인</li>\n<li><code>If-Modified-Since</code>을 활용한 캐싱</li>\n<li>XSRF 보안</li>\n</ul>\n<!--\n#### Logging\n-->\n<h4 id=\"로그\">로그<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#로그\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nBecause interceptors can process the request and response _together_, they can do things like time and log \nan entire HTTP operation. \n-->\n<p>인터셉터는 HTTP 요청과 응답에 <em>모두</em> 관여하기 때문에, HTTP 응답 시간이나 HTTP 동작에 대한 내용을 모두 확인할 수 있습니다.</p>\n<!--\nConsider the following `LoggingInterceptor`, which captures the time of the request,\nthe time of the response, and logs the outcome with the elapsed time\nwith the injected `MessageService`.\n-->\n<p>HTTP 요청이 발생한 시간과 응답이 도착한 시간을 확인하고, 최종 HTTP 통신에 걸린 시간을 <code>MessageService</code>로 출력하는 인터셉터를 구현해 봅시다. 이 인터셉터는 <code>LoggingInterceptor</code>라는 이름으로 구현합니다.</p>\n<code-example path=\"http/src/app/http-interceptors/logging-interceptor.ts\" region=\"excerpt\" header=\"app/http-interceptors/logging-interceptor.ts)\">\nimport { finalize, tap } from 'rxjs/operators';\nimport { MessageService } from '../message.service';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class LoggingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private messenger: MessageService) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    const started = Date.now();\n    let ok: string;\n\n    // 서버에서 받은 응답 옵저버블을 체이닝합니다.\n    return next.handle(req)\n      .pipe(\n        tap(\n          // 서버에서 응답을 받으면 성공한 것으로 판단합니다.\n          event => ok = event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a> ? 'succeeded' : '',\n          // 요청이 실패한 경우를 처리합니다. error 객체는 <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a> 타입입니다.\n          error => ok = 'failed'\n        ),\n        // HTTP 요청이 성공한 경우와 실패한 경우 모두 응답 시간을 로그로 출력합니다.\n        finalize(() => {\n          const elapsed = Date.now() - started;\n          const msg = `${req.method} \"${req.urlWithParams}\"\n             ${ok} in ${elapsed} ms.`;\n          this.messenger.add(msg);\n        })\n      );\n  }\n}\n\n</code-example>\n<!--\nThe RxJS `tap` operator captures whether the request succeeded or failed.\nThe RxJS `finalize` operator is called when the response observable either errors or completes (which it must),\nand reports the outcome to the `MessageService`.\n-->\n<p>RxJS가 제공하는 <code>tap</code> 연산자와 <code>finalize</code>는 HTTP 요청이 성공하거나 실패하는 것에 관계없이 모든 응답에 대해 실행됩니다.\n이 코드에서는 <code>finalize</code>가 실행될 때 <code>MessageService</code>로 로그를 보냅니다.</p>\n<!--\nNeither `tap` nor `finalize` touch the values of the observable stream returned to the caller.\n-->\n<p><code>tap</code> 연산자와 <code>finalize</code> 연산자 모두 옵저버블의 값을 확인하기만 하고, 옵저버블의 내용은 변경하지 않습니다.</p>\n<!--\n#### Caching\n-->\n<h4 id=\"캐싱\">캐싱<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#캐싱\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nInterceptors can handle requests by themselves, without forwarding to `next.handle()`.\n\nFor example, you might decide to cache certain requests and responses to improve performance.\nYou can delegate caching to an interceptor without disturbing your existing data services. \n\nThe `CachingInterceptor` demonstrates this approach.\n-->\n<p>인터셉터는 <code>next.handle()</code>을 사용하지 않고 그 단계에서 바로 응답을 보낼 수도 있습니다.</p>\n<p>이 동작은 HTTP 요청에 대한 성능을 향상시키기 위해 특정 요청을 캐싱하는 용도로 사용할 수 있습니다.\n그러면 기존에 있던 서비스 로직을 수정하지 않고도 인터셉터에 캐싱 기능을 구현할 수 있습니다.</p>\n<p><code>CachingInterceptor</code>는 다음과 같이 구현합니다.</p>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"v1\" header=\"app/http-interceptors/caching-interceptor.ts)\" linenums=\"false\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CachingInterceptor implements <a href=\"api/common/http/HttpInterceptor\" class=\"code-anchor\">HttpInterceptor</a> {\n  constructor(private cache: RequestCache) {}\n\n  intercept(req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>, next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>) {\n    // 캐싱 대상이 아니면 그대로 진행합니다.\n    if (!isCachable(req)) { return next.handle(req); }\n\n    const cachedResponse = this.cache.get(req);\n    return cachedResponse ?\n      of(cachedResponse) : sendRequest(req, next, this.cache);\n  }\n}\n\n</code-example>\n<!--\nThe `isCachable()` function determines if the request is cachable.\nIn this sample, only GET requests to the npm package search api are cachable.\n-->\n<p><code>isCachable()</code> 함수는 이 요청이 캐싱 대상인지 판단합니다.\n이 예제에서는 npm 패키지를 GET 방식으로 검색하는 요청이 캐싱 대상입니다.</p>\n<!--\nIf the request is not cachable, the interceptor simply forwards the request \nto the next handler in the chain.\n-->\n<p>HTTP 요청이 캐싱 대상이 아니면, 인터셉터는 이 요청을 다음 핸들러로 그냥 통과시킵니다.</p>\n<!--\nIf a cachable request is found in the cache, the interceptor returns an `of()` _observable_ with\nthe cached response, by-passing the `next` handler (and all other interceptors downstream).\n-->\n<p>그리고 HTTP 요청이 캐싱 대상이고 이 응답이 캐싱되어 있으면, 인터셉터가 <code>of()</code> 연산자를 사용해서 캐싱된 응답을 바로 반환하면서 <code>next</code> 핸들러를 실행하지 않습니다.</p>\n<!--\nIf a cachable request is not in cache, the code calls `sendRequest`.\n-->\n<p>캐싱 대상인 HTTP 요청이 캐싱되어 있지 않으면 <code>sendRequest</code> 함수를 실행해서 HTTP 요청을 보냅니다.</p>\n<a id=\"send-request\"></a>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"send-request\">\n/**\n * `next()` 함수를 실행해서 서버로 요청을 보냅니다.\n * 서버에서 받은 응답은 캐싱합니다.\n */\nfunction sendRequest(\n  req: <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>&#x3C;any>,\n  next: <a href=\"api/common/http/HttpHandler\" class=\"code-anchor\">HttpHandler</a>,\n  cache: RequestCache): Observable&#x3C;<a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>> {\n\n  // npm 검색 API에는 헤더가 필요 없습니다.\n  const noHeaderReq = req.clone({ headers: new <a href=\"api/common/http/HttpHeaders\" class=\"code-anchor\">HttpHeaders</a>() });\n\n  return next.handle(noHeaderReq).pipe(\n    tap(event => {\n      // 서버의 응답은 <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a> 타입이 아닐 수도 있습니다.\n      if (event instanceof <a href=\"api/common/http/HttpResponse\" class=\"code-anchor\">HttpResponse</a>) {\n        cache.put(req, event); // 캐시를 업데이트합니다.\n      }\n    })\n  );\n}\n\n</code-example>\n<!--\nThe `sendRequest` function creates a [request clone](#immutability) without headers\nbecause the npm api forbids them.\n-->\n<p>npm에서 제공하는 API는 헤더를 사용하지 않기 때문에 <code>sendRequest</code> 함수에서 <a href=\"guide/http#%EB%B6%88%EB%B3%80%EC%84%B1\">HTTP 요청을 복제한 인스턴스</a>를 생성할 때 헤더를 모두 비웁니다.</p>\n<!--\nIt forwards that request to `next.handle()` which ultimately calls the server and\nreturns the server's response.\n-->\n<p>그리고 <code>next.handle()</code>을 실행하면 서버로 HTTP 요청을 보고 응답을 받습니다.</p>\n<!--\nNote how `sendRequest` _intercepts the response_ on its way back to the application.\nIt _pipes_ the response through the `tap()` operator,\nwhose callback adds the response to the cache.\n-->\n<p><code>sendRequest</code>가 응답을 어떻게 반환하는지 확인해 보세요.\n이 함수는 서버에서 받은 응답을 체이닝하는데, 이 때 <code>tap()</code> 연산자를 사용해서 서버의 응답을 캐싱합니다.</p>\n<!--\nThe original response continues untouched back up through the chain of interceptors\nto the application caller. \n-->\n<p>서버에서 받은 원래 응답은 수정되지 않은 채로 HTTP 요청을 시작한 컨텍스트로 반환됩니다.</p>\n<!--\nData services, such as `PackageSearchService`, are unaware that \nsome of their `HttpClient` requests actually return cached responses.\n-->\n<p>이 예제에서는 <code>PackageSearchService</code>가 서버의 응답을 받으며, 이 때 받은 응답이 실제 HTTP 요청으로 받은 것인지 캐싱된 것을 받은 것인지는 신경쓰지 않아도 됩니다.</p>\n<a id=\"cache-refresh\"></a>\n<!--\n#### Return a multi-valued _Observable_\n-->\n<h4 id=\"옵저버블-여러번-활용하기\">옵저버블 여러번 활용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#옵저버블-여러번-활용하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nThe `HttpClient.get()` method normally returns an _observable_ \nthat either emits the data or an error. \nSome folks describe it as a \"_one and done_\" observable.\n-->\n<p><code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 메소드는 일반적으로 서버에서 받은 데이터나 에러를 <em>옵저버블</em> 하나로 반환합니다.\n그래서 이 옵저버블은 \"<em>한 번 사용하면 끝나는</em>\" 옵저버블이라고도 합니다.</p>\n<!--\nBut an interceptor can change this to an _observable_ that emits more than once.\n-->\n<p>인터셉터는 이 옵저버블을 여러번 활용할 수도 있습니다.</p>\n<!--\nA revised version of the `CachingInterceptor` optionally returns an _observable_ that\nimmediately emits the cached response, sends the request to the NPM web API anyway,\nand emits again later with the updated search results.\n-->\n<p>이번에는 캐싱된 서버 응답을 한 번 반환하고 끝내는 대신, NPM 웹 API로 요청을 한 번 더 보내고 이렇게 받은 서버의 응답을 다시 한 번 보내는 방식으로 <code>CachingInterceptor</code>를 수정해 봅시다.</p>\n<code-example path=\"http/src/app/http-interceptors/caching-interceptor.ts\" region=\"intercept-refresh\">\n// 커스텀 헤더가 설정되면 업데이트 방식으로 동작합니다.\nif (req.headers.get('x-refresh')) {\n  const results$ = sendRequest(req, next, this.cache);\n  return cachedResponse ?\n    results$.pipe( startWith(cachedResponse) ) :\n    results$;\n}\n// 업데이트 방식을 사용하지 않고 기존 방식으로 동작합니다.\nreturn cachedResponse ?\n  of(cachedResponse) : sendRequest(req, next, this.cache);\n\n</code-example>\n<!--\nThe _cache-then-refresh_ option is triggered by the presence of a **custom `x-refresh` header**.\n-->\n<p>이 때 업데이트 방식으로 동작하는지는 <strong><code>x-refresh</code>라는 커스텀 헤더</strong>로 설정합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nA checkbox on the `PackageSearchComponent` toggles a `withRefresh` flag,\nwhich is one of the arguments to `PackageSearchService.search()`.\nThat `search()` method creates the custom `x-refresh` header\nand adds it to the request before calling `HttpClient.get()`.\n-->\n<p>그리고 <code>PackageSearchComponent</code> 컴포넌트에는 <code>withRefresh</code> 플래그와 연결된 체크박스를 추가합니다. 이 체크박스의 값이 true이면 <code>PackageSearchService.search()</code>에서 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code> 함수를 실행하기 전에 <code>x-refresh</code> 헤더를 추가합니다.</p>\n</div>\n<!--\nThe revised `CachingInterceptor` sets up a server request \nwhether there's a cached value or not, \nusing the same `sendRequest()` method described [above](#send-request).\nThe `results$` observable will make the request when subscribed.\n-->\n<p>이렇게 수정한 <code>CachingInterceptor</code>는 캐싱된 서버 응답이 있는 것과 관계없이 <code>sendRequest()</code> 메소드로 서버 요청을 보냅니다.\n그리고 서버에서 받은 응답은 <code>results$</code> 옵저버블로 처리합니다.</p>\n<!--\nIf there's no cached value, the interceptor returns `results$`.\n-->\n<p>캐싱된 서버 응답이 없으면 인터셉터는 <code>results$</code>를 바로 반환합니다.</p>\n<!--\nIf there is a cached value, the code _pipes_ the cached response onto\n`results$`, producing a recomposed observable that emits twice,\nthe cached response first (and immediately), followed later\nby the response from the server.\nSubscribers see a sequence of _two_ responses.\n-->\n<p>그리고 캐싱된 서버 응답이 있는 경우에는 캐싱된 서버 응답을 <em>파이프</em> 로 연결해서 <code>results$</code>와 합치는데, 이 때 캐싱된 서버 응답이 즉시 반환되고, 서버에서 응답이 왔을 때 추가 응답이 다음으로 반환됩니다.\nHTTP 요청을 시작한 쪽에서는 서버 응답을 <em>두 번</em> 받게 됩니다.</p>\n<!--\n### Listening to progress events\n-->\n<h3 id=\"진행률-이벤트-확인하기\">진행률 이벤트 확인하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#진행률-이벤트-확인하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nSometimes applications transfer large amounts of data and those transfers can take a long time.\nFile uploads are a typical example. \nGive the users a better experience by providing feedback on the progress of such transfers.\n-->\n<p>애플리케이션이 대용량 데이터를 보내거나 받는 경우에는 HTTP 통신 시간이 오래 걸릴 수 있으며,\n파일을 업로드하는 경우에 흔히 발생하는 현상입니다.\n이 때 사용자에게 진행상황에 대한 정보를 알려주면 더 나은 UX를 제공할 수 있습니다.</p>\n<!--\nTo make a request with progress events enabled, you can create an instance of `HttpRequest` \nwith the `reportProgress` option set true to enable tracking of progress events.\n-->\n<p>요청을 보내면서 진행률 이벤트를 활성화 하려면 <code><a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a></code> 인스턴스를 생성할 때 <code><a href=\"api/common/http/HttpRequest#reportProgress\" class=\"code-anchor\">reportProgress</a></code> 옵션을 <code>true</code>로 설정하면 됩니다.</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-request\" header=\"app/uploader/uploader.service.ts (upload request)\">\nconst req = new <a href=\"api/common/http/HttpRequest\" class=\"code-anchor\">HttpRequest</a>('POST', '/upload/file', file, {\n  <a href=\"api/common/http/HttpRequest#reportProgress\" class=\"code-anchor\">reportProgress</a>: true\n});\n\n</code-example>\n<div class=\"alert is-important\">\n<!--\nEvery progress event triggers change detection, so only turn them on if you truly intend to report progress in the UI.\n-->\n<p>진행률 이벤트가 발생할 때마다 변화 감지 싸이클이 동작하기 때문에, 실제로 UI에서 활용할 필요가 있을 때만 이 옵션을 사용하세요.</p>\n<p>When using <a href=\"api/common/http/HttpClient#request\"><code>HttpClient#request()</code></a> with an HTTP method, configure with\n<a href=\"api/common/http/HttpClient#request\"><code>observe: 'events'</code></a> to see all events, including the progress of transfers.</p>\n</div>\n<!--\nNext, pass this request object to the `HttpClient.request()` method, which\nreturns an `Observable` of `HttpEvents`, the same events processed by interceptors:\n-->\n<p>그리고 이 인스턴스를 <code><a href=\"api/common/http/HttpClient#request\" class=\"code-anchor\">HttpClient.request()</a></code> 메소드로 전달합니다. 그러면 <code>HttpEvents</code> 타입의 <code>Observable</code>이 반환되며, 인터셉터를 사용하는 것과 비슷한 방식으로 처리하면 됩니다:</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"upload-body\" header=\"app/uploader/uploader.service.ts (upload body)\" linenums=\"false\">\n// `HttpClient.request` API는 `<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>`에서 제공하는 다른 메소드보다\n// 더 낮은 레벨의 이벤트 스트림을 생성합니다.\n// 이 이벤트 스트림은 요청 시작, 진행률, 응답 이벤트를 전달됩니다.\nreturn this.http.request(req).pipe(\n  map(event => this.getEventMessage(event, file)),\n  tap(<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a> => this.showProgress(<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>)),\n  last(), // 최종 메시지는 실행한 컨텍스트로 반환합니다.\n  catchError(this.handleError(file))\n);\n\n</code-example>\n<!--\nThe `getEventMessage` method interprets each type of `HttpEvent` in the event stream.\n-->\n<p>이 코드에서 사용한 <code>getEventMessage</code> 메소드는 이벤트 스트림에서 발생한 <code><a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a></code>를 처리합니다.</p>\n<code-example path=\"http/src/app/uploader/uploader.service.ts\" region=\"getEventMessage\" header=\"app/uploader/uploader.service.ts (getEventMessage)\" linenums=\"false\">\n/** 요청 시작, 업로드 진행률, 응답 이벤트를 사용자가 확인할 수 있는 메시지로 변환합니다. */\nprivate getEventMessage(event: <a href=\"api/common/http/HttpEvent\" class=\"code-anchor\">HttpEvent</a>&#x3C;any>, file: File) {\n  switch (event.type) {\n    case <a href=\"api/common/http/HttpEventType#Sent\" class=\"code-anchor\">HttpEventType.Sent</a>:\n      return `Uploading file \"${file.name}\" of size ${file.size}.`;\n\n    case <a href=\"api/common/http/HttpEventType#UploadProgress\" class=\"code-anchor\">HttpEventType.UploadProgress</a>:\n      // 진행률을 % 형식으로 변환합니다.\n      const percentDone = Math.round(100 * event.loaded / event.total);\n      return `File \"${file.name}\" is ${percentDone}% uploaded.`;\n\n    case <a href=\"api/common/http/HttpEventType#Response\" class=\"code-anchor\">HttpEventType.Response</a>:\n      return `File \"${file.name}\" was completely uploaded!`;\n\n    default:\n      return `File \"${file.name}\" surprising upload event: ${event.type}.`;\n  }\n}\n\n</code-example>\n<div class=\"alert is-helpful\">\n<!--\nThe sample app for this guide doesn't have a server that accepts uploaded files.\nThe `UploadInterceptor` in `app/http-interceptors/upload-interceptor.ts` \nintercepts and short-circuits upload requests\nby returning an observable of simulated events.\n-->\n<p>예제에서 다룬 앱은 업로드한 파일을 처리하는 실제 서버가 없습니다.\n그래서 <code>app/http-interceptors/upload-interceptor.ts</code>에 정의한 <code>UploadInterceptor</code>가 이 요청을 가로채서 서버가 동작하는 것을 흉내냅니다.</p>\n</div>\n<!--\n## Security: XSRF Protection\n-->\n<h2 id=\"보안--xsrf-방어\">보안 : XSRF 방어<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#보안--xsrf-방어\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n[Cross-Site Request Forgery (XSRF)](https://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by which the attacker can trick an authenticated user into unknowingly executing actions on your website. `HttpClient` supports a [common mechanism](https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token) used to prevent XSRF attacks. When performing HTTP requests, an interceptor reads a token from a cookie, by default `XSRF-TOKEN`, and sets it as an HTTP header, `X-XSRF-TOKEN`. Since only code that runs on your domain could read the cookie, the backend can be certain that the HTTP request came from your client application and not an attacker.\n-->\n<p><a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">사이트간 요청 위조 (Cross-Site Request Forgery (XSRF))</a>는 인증받지 않은 사용자가 웹사이트를 공격하는 방법 중 하나입니다.\nAngular에서 제공하는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>는 <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\">XSRF 공격을 방어하는 기능</a>을 탑재하고 있습니다.\n그래서 HTTP 요청이 발생했을 때 쿠키에서 토큰을 읽는 인터셉터가 자동으로 동작하며, <code>XSRF-TOKEN</code>으로 설정된 HTTP 헤더를 <code>X-XSRF-TOKEN</code>으로 변경합니다.\n결국 현재 도메인에 유효한 쿠키만 읽을 수 있으며, 백엔드가 HTTP 요청을 좀 더 안전하게 처리할 수 있습니다.</p>\n<!--\nBy default, an interceptor sends this cookie on all mutating requests (POST, etc.)\nto relative URLs but not on GET/HEAD requests or\non requests with an absolute URL.\n-->\n<p>기본적으로 이 인터셉터는 상대주소로 요청되는 모든 요청에 적용되며, 절대 주소로 요청되는 GET/HEAD 요청에는 적용되지 않습니다.</p>\n<!--\nTo take advantage of this, your server needs to set a token in a JavaScript readable session cookie called `XSRF-TOKEN` on either the page load or the first GET request. On subsequent requests the server can verify that the cookie matches the `X-XSRF-TOKEN` HTTP header, and therefore be sure that only code running on your domain could have sent the request. The token must be unique for each user and must be verifiable by the server; this prevents the client from making up its own tokens. Set the token to a digest of your site's authentication\ncookie with a salt for added security.\n-->\n<p>그래서 모든 요청에 사이트간 위조된 요청을 방어하려면, 페이지가 로드되거나 처음 발생하는 GET 요청에 대해서 쿠키에 <code>XSRF-TOKEN</code>이 있는지 확인해야 합니다.\n그리고 이후에 발생한 요청의 헤더에 <code>X-XSRF-TOKEN</code>이 있으면 요청이 유효한 것으로 판단하며, 유효한 도메인에서 제대로 보내진 요청이라는 것으로 최종 판단할 수 있습니다.\n이 때 사용하는 토큰은 사용자마다 달라야 하며, 서버에서 반드시 인증되어야 합니다.\n그래야 클라이언트에서 토큰을 위조하는 것도 방어할 수 있습니다.\n서버에서 토큰을 생성할 때 인증키를 활용하면 좀 더 확실합니다.</p>\n<!--\nIn order to prevent collisions in environments where multiple Angular apps share the same domain or subdomain, give each application a unique cookie name.\n-->\n<p>만약 도메인과 서브 도메인을 공유하면서 서로 다른 환경으로 Angular 애플리케이션을 사용하면 충돌이 발생할 수도 있습니다. 각각의 환경에 유일한 쿠키 이름을 사용하세요.</p>\n<div class=\"alert is-important\">\n<!--\n*Note that `HttpClient` supports only the client half of the XSRF protection scheme.* \nYour backend service must be configured to set the cookie for your page, and to verify that \nthe header is present on all eligible requests. \nIf not, Angular's default protection will be ineffective.\n-->\n<p><em><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>에서 제공하는 XSRF 방어 동작은 클라이언트에만 적용되는 내용입니다.</em>\n백엔드에서도 페이지에 쿠키를 설정해야 하며, 클라이언트에서 발생하는 모든 요청이 유효한지 확인해야 합니다.\n백엔드에서 이 과정을 처리하지 않으면 Angular가 제공하는 기본 방어 로직도 제대로 동작하지 않을 수 있습니다.</p>\n</div>\n<!--\n### Configuring custom cookie/header names\n-->\n<h3 id=\"커스텀-쿠키헤더-이름-지정하기\">커스텀 쿠키/헤더 이름 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#커스텀-쿠키헤더-이름-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIf your backend service uses different names for the XSRF token cookie or header, \nuse `HttpClientXsrfModule.withOptions()` to override the defaults.\n-->\n<p>백엔드에서 XSRF 토큰 쿠키나 헤더를 다른 이름으로 사용하고 있다면 <code><a href=\"api/common/http/HttpClientXsrfModule#withOptions\" class=\"code-anchor\">HttpClientXsrfModule.withOptions()</a></code> 를 사용해서 이름을 변경할 수 있습니다.</p>\n<code-example path=\"http/src/app/app.module.ts\" region=\"xsrf\" linenums=\"false\">\nimports: [\n  <a href=\"api/common/http/HttpClientModule\" class=\"code-anchor\">HttpClientModule</a>,\n  HttpClientXsrfModule.withOptions({\n    cookieName: 'My-Xsrf-Cookie',\n    headerName: 'My-Xsrf-Header',\n  }),\n],\n\n</code-example>\n<!--\n## Testing HTTP requests\n-->\n<h2 id=\"http-요청-테스트하기\">HTTP 요청 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-테스트하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nLike any external dependency, the HTTP backend needs to be mocked\nso your tests can simulate interaction with a remote server. \nThe `@angular/common/http/testing` library makes \nsetting up such mocking straightforward.\n-->\n<p>다른 외부 의존성 객체와 마찬가지로, HTTP 요청을 테스트하려면 외부 서버의 동작을 흉내내는 HTTP 백엔드의 목업이 필요합니다.\n이 목업은 <code>@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing</code> 라이브러리를 활용해서 구성할 수 있습니다.</p>\n<!--\n### Mocking philosophy\n-->\n<h3 id=\"목업-라이브러리-활용-방법\">목업 라이브러리 활용 방법<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#목업-라이브러리-활용-방법\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAngular's HTTP testing library is designed for a pattern of testing wherein \nthe app executes code and makes requests first.\n-->\n<p>Angular의 HTTP 테스팅 라이브러리를 활용하면 목업으로 만든 애플리케이션이 실행 환경에서 HTTP 코드가 동작하는지 확인할 수 있으며, HTTP 요청도 실제로 발생합니다.</p>\n<!--\nThen a test expects that certain requests have or have not been made, \nperforms assertions against those requests, \nand finally provide responses by \"flushing\" each expected request.\n-->\n<p>각 테스트 케이스에서는 특정 요청이 발생해야 하는지, 발생하지 않아야 하는지 검사할 수 있으며, 검사를 끝내고 난 후에는 이 요청들을 모두 비워야(flushing) 합니다.</p>\n<!--\nAt the end, tests may verify that the app has made no unexpected requests.\n-->\n<p>그리고 나면 마지막으로 의도하지 않은 요청이 발생했는지 검사합니다.</p>\n<div class=\"alert is-helpful\">\n<!--\nYou can run <live-example stackblitz=\"specs\">these sample tests</live-example> \nin a live coding environment.\n\nThe tests described in this guide are in `src/testing/http-client.spec.ts`.\nThere are also tests of an application data service that call `HttpClient` in\n`src/app/heroes/heroes.service.spec.ts`.\n-->\n<p>이 문단에서 다루는 내용은 <live-example stackblitz=\"specs\">샘플 테스트</live-example>를 직접 실행해서 결과를 확인할 수 있습니다.</p>\n<p>이 테스트들은 <code>src/testing/http-client.spec.ts</code> 파일에 작성되어 있으며, <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 사용하는 서비스를 테스트하는 코드는 <code>src/app/heroes/heroes.service.spec.ts</code> 파일에 작성되어 잇습니다.</p>\n</div>\n<!--\n### Setup\n-->\n<h3 id=\"환경설정-1\">환경설정<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#환경설정-1\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo begin testing calls to `HttpClient`, \nimport the `HttpClientTestingModule` and the mocking controller, `HttpTestingController`,\nalong with the other symbols your tests require.\n-->\n<p><code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code>를 테스트하려면 먼저 테스트용 모듈인 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>과 목업 환경을 구성하는 <code><a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a></code>를 로드해야 합니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"imports\" header=\"app/testing/http-client.spec.ts (imports)\" linenums=\"false\">\n// Http 테스트 모듈과 목업 컨트롤러를 로드합니다.\nimport { <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a>, <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>/testing';\n\n// 다른 심볼도 로드합니다.\nimport { <a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a> } from '@angular/core/testing';\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>, <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\n\n\n</code-example>\n<!--\nThen add the `HttpClientTestingModule` to the `TestBed` and continue with\nthe setup of the _service-under-test_.\n-->\n<p>그리고 나면 <code><a href=\"api/core/testing/TestBed\" class=\"code-anchor\">TestBed</a></code>에 <code><a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a></code>를 추가하면서 테스트 환경을 구성합니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"setup\" header=\"app/testing/http-client.spec.ts(setup)\" linenums=\"false\">\ndescribe('<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> testing', () => {\n  let httpClient: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>;\n  let httpTestingController: <a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [ <a href=\"api/common/http/testing/HttpClientTestingModule\" class=\"code-anchor\">HttpClientTestingModule</a> ]\n    });\n\n    // <a href=\"api/common/http\" class=\"code-anchor\">http</a> 서비스와 테스트 컨트롤러를 각 테스트 케이스에 주입합니다.\n    httpClient = TestBed.get(<a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>);\n    httpTestingController = TestBed.get(<a href=\"api/common/http/testing/HttpTestingController\" class=\"code-anchor\">HttpTestingController</a>);\n  });\n  /// 테스트 케이스 시작 ///\n});\n\n</code-example>\n<!--\nNow requests made in the course of your tests will hit the testing backend instead of the normal backend.\n-->\n<p>이제 테스트 케이스에서 HTTP 요청이 발생하면 실제 백엔드가 아니라 테스팅 백엔드로 전달됩니다.</p>\n<!--\nThis setup also calls `TestBed.get()` to inject the `HttpClient` service and the mocking controller\nso they can be referenced during the tests.\n-->\n<p>이 코드에서는 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스와 목업 컨트롤러를 테스트 케이스마다 동적으로 주입하기 위해 <code>TestBed.get()</code>을 사용했습니다.</p>\n<!--\n### Expecting and answering requests\n-->\n<h3 id=\"요청-확인하기-요청에-응답하기\">요청 확인하기, 요청에 응답하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#요청-확인하기-요청에-응답하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nNow you can write a test that expects a GET Request to occur and provides a mock response. \n-->\n<p>이제 GET 요청이 발생하는지 확인하고 목업 응답을 보내는 테스트 케이스를 작성해 봅시다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"get-test\" header=\"app/testing/http-client.spec.ts(httpClient.get)\" linenums=\"false\">\nit('can test HttpClient.get', () => {\n  const testData: <a href=\"api/router/Data\" class=\"code-anchor\">Data</a> = {name: 'Test <a href=\"api/router/Data\" class=\"code-anchor\">Data</a>'};\n\n  // HTTP GET 요청을 발생시킵니다.\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>>(testUrl)\n    .subscribe(data =>\n      // 옵저버블이 처리되고 받은 응답이 테스트 데이터와 같은지 검사합니다.\n      expect(data).toEqual(testData)\n    );\n\n  // `expectOne()`은 HTTP 요청의 <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a>과 매칭됩니다.\n  // 이 주소로 HTTP 요청이 발생하지 않거나 여러번 요청되면 에러를 반환합니다.\n  const req = httpTestingController.expectOne('/data');\n\n  // HTTP 요청 방식이 GET인지 검사합니다.\n  expect(req.request.method).toEqual('GET');\n\n  // 목업 데이터로 응답을 보내면 옵저버블이 종료됩니다.\n  // 옵저버블로 받은 데이터는 구독 함수에서 검사합니다.\n  req.flush(testData);\n\n  // 마지막으로, 보내지 않고 남아있는 HTTP 요청이 있는지 검사합니다.\n  httpTestingController.verify();\n});\n\n</code-example>\n<!--\nThe last step, verifying that no requests remain outstanding, is common enough for you to move it into an `afterEach()` step:\n-->\n<p>모든 응답이 처리되었는지 마지막으로 검사하는 로직은 <code>afterEach()</code>로 옮겨도 됩니다:</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"afterEach\" linenums=\"false\">\nafterEach(() => {\n  // 각 테스트 케이스가 끝나기 전에, 보내지 않고 남아있는 HTTP 요청이 없는지 확인합니다.\n  httpTestingController.verify();\n});\n\n</code-example>\n<!--\n#### Custom request expectations\n-->\n<h4 id=\"http-요청-객체-검사하기\">HTTP 요청 객체 검사하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#http-요청-객체-검사하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nIf matching by URL isn't sufficient, it's possible to implement your own matching function. \nFor example, you could look for an outgoing request that has an authorization header:\n-->\n<p>지정된 URL로 HTTP 요청이 왔는지 검사하는 것만으로는 충분하지 않다면, 검사 로직을 직접 작성할 수도 있습니다.\n예를 들어 HTTP 요청 헤더에 인증 토큰이 있는지 검사하는 로직은 다음과 같이 구현할 수 있습니다:</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"predicate\" linenums=\"false\">\n// 헤더에 인증 토큰이 있는지 검사합니다.\nconst req = httpTestingController.expectOne(\n  req => req.headers.has('Authorization')\n);\n\n</code-example>\n<!--\nAs with the previous `expectOne()`, \nthe test will fail if 0 or 2+ requests satisfy this predicate.\n-->\n<p>그러면 이전에 살펴본 <code>expectOne()</code>과 마찬가지로, HTTP 요청이 발생하지 않거나 2번 이상 발생한 경우에도 마찬가지로 에러를 발생시킵니다.</p>\n<!--\n#### Handling more than one request\n-->\n<h4 id=\"여러번-요청되는-http-테스트하기\">여러번 요청되는 HTTP 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#여러번-요청되는-http-테스트하기\"><i class=\"material-icons\">link</i></a></h4>\n<!--\nIf you need to respond to duplicate requests in your test, use the `match()` API instead of `expectOne()`.\nIt takes the same arguments but returns an array of matching requests. \nOnce returned, these requests are removed from future matching and \nyou are responsible for flushing and verifying them.\n-->\n<p>테스트 케이스가 실행되는 중에 HTTP 요청이 같은 주소로 여러번 발생한다면, <code>expectOne()</code> 대신 <code>match()</code> API를 사용할 수도 있습니다.\n이 함수는 <code>expectOne()</code>를 사용하는 방법과 같지만, 주소와 매칭되는 HTTP 요청을 배열로 반환합니다.\n그러면 이 배열을 한 번에 테스트할 수도 있고, 배열의 항목을 각각 테스트할 수도 있습니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"multi-request\" linenums=\"false\">\n// 지정된 <a href=\"api/core/SecurityContext#URL\" class=\"code-anchor\">URL</a>과 매칭되는 HTTP 요청을 모두 가져옵니다.\nconst requests = httpTestingController.match(testUrl);\nexpect(requests.length).toEqual(3);\n\n// 각각의 요청에 서로 다른 응답을 보냅니다.\nrequests[0].flush([]);\nrequests[1].flush([testData[0]]);\nrequests[2].flush(testData);\n\n</code-example>\n<!--\n### Testing for errors\n-->\n<h3 id=\"에러-테스트하기\">에러 테스트하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/http#에러-테스트하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou should test the app's defenses against HTTP requests that fail.\n-->\n<p>HTTP 요청이 실패한 경우에 애플리케이션의 방어 로직이 제대로 동작하는지도 테스트해야 합니다.</p>\n<!--\nCall `request.flush()` with an error message, as seen in the following example.\n-->\n<p>이 때 <code>request.flush()</code>에 에러 객체를 보내면 HTTP 통신에 실패한 상황을 테스트할 수 있습니다.</p>\n<!--\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"404\" linenums=\"false\">\nit(&#39;can test for 404 error&#39;, () =&gt; {\n  const emsg = &#39;deliberate 404 error&#39;;\n\n  httpClient.get&lt;Data[]&gt;(testUrl).subscribe(\n    data =&gt; fail(&#39;should have failed with the 404 error&#39;),\n    (error: HttpErrorResponse) =&gt; {\n      expect(error.status).toEqual(404, &#39;status&#39;);\n      expect(error.error).toEqual(emsg, &#39;message&#39;);\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // 에러 응답을 보냅니다.\n  req.flush(emsg, { status: 404, statusText: &#39;Not Found&#39; });\n});\n\n</code-example>\n-->\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"404\" linenums=\"false\">\nit('can test for 404 error', () => {\n  const emsg = 'deliberate 404 error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the 404 error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.status).toEqual(404, 'status');\n      expect(error.error).toEqual(emsg, '<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // 에러 응답을 보냅니다.\n  req.flush(emsg, { status: 404, <a href=\"api/common/http/HttpResponseBase#statusText\" class=\"code-anchor\">statusText</a>: 'Not Found' });\n});\n\n</code-example>\n<!--\nAlternatively, you can call `request.error()` with an `ErrorEvent`.\n-->\n<p>그리고 이 방식은 <code>ErrorEvent</code> 객체를 <code>request.error()</code> 함수에 전달하는 방식으로도 구현할 수 있습니다.</p>\n<code-example path=\"http/src/testing/http-client.spec.ts\" region=\"network-error\" linenums=\"false\">\nit('can test for network error', () => {\n  const emsg = 'simulated network error';\n\n  httpClient.get&#x3C;<a href=\"api/router/Data\" class=\"code-anchor\">Data</a>[]>(testUrl).subscribe(\n    data => fail('should have failed with the network error'),\n    (error: <a href=\"api/common/http/HttpErrorResponse\" class=\"code-anchor\">HttpErrorResponse</a>) => {\n      expect(error.error.message).toEqual(emsg, '<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>');\n    }\n  );\n\n  const req = httpTestingController.expectOne(testUrl);\n\n  // ErrorEvent 객체를 생성합니다. 이 에러는 네트워크 계층에서 발생하는 에러를 의미합니다.\n  // 타임아웃, DNS 에러, 오프라인 상태일 때 발생하는 에러가 이런 종류에 해당합니다.\n  const mockError = new ErrorEvent('Network error', {\n    <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>: emsg,\n  });\n\n  // 에러 응답을 보냅니다.\n  req.error(mockError);\n});\n\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpInterceptor\n - guide/architecture-next-steps\n - guide/browser-support\n - guide/deprecations\n - guide/npm-packages\n - guide/pipes\n - guide/testing\n - start/data\n - tutorial/toh-pt4\n-->\n<!-- links from this doc:\n - api/common/AsyncPipe\n - api/common/NgForOf\n - api/common/http\n - api/common/http/HTTP_INTERCEPTORS\n - api/common/http/HttpBackend\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/common/http/HttpClient#post\n - api/common/http/HttpClient#request\n - api/common/http/HttpClientModule\n - api/common/http/HttpClientXsrfModule#withOptions\n - api/common/http/HttpErrorResponse\n - api/common/http/HttpErrorResponse#message\n - api/common/http/HttpEvent\n - api/common/http/HttpEventType#Response\n - api/common/http/HttpEventType#Sent\n - api/common/http/HttpEventType#UploadProgress\n - api/common/http/HttpHandler\n - api/common/http/HttpHeaders\n - api/common/http/HttpInterceptor\n - api/common/http/HttpParams\n - api/common/http/HttpRequest\n - api/common/http/HttpRequest#reportProgress\n - api/common/http/HttpRequest#responseType\n - api/common/http/HttpResponse\n - api/common/http/HttpResponseBase#statusText\n - api/common/http/JsonpInterceptor#intercept\n - api/common/http/testing/HttpClientTestingModule\n - api/common/http/testing/HttpTestingController\n - api/common/upgrade/$locationShim#search\n - api/core/ClassSansProvider#useClass\n - api/core/Injectable\n - api/core/NgModule\n - api/core/SecurityContext#URL\n - api/core/testing/TestBed\n - api/core/testing/async\n - api/platform-browser/BrowserModule\n - api/router/Data\n - api/router/ParamMap#keys\n - api/router/Router#config\n - guide/dependency-injection\n - guide/http#%EB%B6%88%EB%B3%80%EC%84%B1\n - guide/http#%EC%9D%B8%ED%84%B0%EC%85%89%ED%84%B0-%EC%8B%A4%ED%96%89-%EC%88%9C%EC%84%9C\n - guide/http#%EC%BA%90%EC%8B%B1\n - guide/http#%ED%97%A4%EB%8D%94-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\n - guide/http#always-subscribe\n - guide/http#cache-refresh\n - guide/http#delete-요청-보내기\n - guide/http#error-details\n - guide/http#http-요청-객체-검사하기\n - guide/http#http-요청-바디\n - guide/http#http-요청-바디-비우기\n - guide/http#http-요청-설정하기\n - guide/http#http-요청-테스트하기\n - guide/http#http-요청응답-가로채기\n - guide/http#httpclient\n - guide/http#httpevents\n - guide/http#json-데이터-받기\n - guide/http#json-형식이-아닌-데이터-요청하기\n - guide/http#next-객체\n - guide/http#post-요청-보내기\n - guide/http#put-요청-보내기\n - guide/http#retry\n - guide/http#rxjs\n - guide/http#switchmap\n - guide/http#url-인자\n - guide/http#기본-헤더-설정하기\n - guide/http#더-활용하기\n - guide/http#로그\n - guide/http#목업-라이브러리-활용-방법\n - guide/http#보안--xsrf-방어\n - guide/http#불변성-immutability\n - guide/http#서버에-데이터-보내기\n - guide/http#에러-분석하기\n - guide/http#에러-처리\n - guide/http#에러-테스트하기\n - guide/http#여러번-요청되는-http-테스트하기\n - guide/http#연속된-요청-처리하기-debouncing-request\n - guide/http#옵저버블-여러번-활용하기\n - guide/http#옵저버블과-연산자\n - guide/http#왜-서비스를-한-번-거치나요\n - guide/http#요청-확인하기-요청에-응답하기\n - guide/http#응답으로-받은-객체에-타입-지정하기\n - guide/http#인터셉터-구현하기\n - guide/http#인터셉터-실행-순서\n - guide/http#인터셉터-적용하기\n - guide/http#전체-서버-응답-확인하기\n - guide/http#진행률-이벤트-확인하기\n - guide/http#캐싱\n - guide/http#커스텀-쿠키헤더-이름-지정하기\n - guide/http#헤더-수정하기\n - guide/http#헤더-추가하기\n - guide/http#환경설정\n - guide/http#환경설정-1\n - http://reactivex.io/rxjs/\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery\n - https://en.wikipedia.org/wiki/Cross-site_request_forgery#Cookie-to-Header_Token\n - https://github.com/angular/angular/edit/master/aio/content/guide/http.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/in-memory-web-api/blob/master/README.md\n-->"
}