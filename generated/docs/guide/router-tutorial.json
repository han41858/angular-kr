{
  "id": "guide/router-tutorial",
  "title": "Using Angular routes in a single-page application",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/router-tutorial.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"using-angular-routes-in-a-single-page-application\">Using Angular routes in a single-page application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#using-angular-routes-in-a-single-page-application\"><i class=\"material-icons\">link</i></a></h1>\n<p>This tutorial describes how you can build a single-page application, SPA that uses multiple Angular routes.</p>\n<p>In an SPA, all of your application's functions exist in a single HTML page.\nAs users access your application's features, the browser needs to render only the parts that matter to the user, instead of loading a new page. This pattern can significantly improve your application's user exprience.</p>\n<p>To define how users navigate through your application, you use routes. You can add routes to define how users navigate from one part of your application to another.\nYou can also configure routes to guard against unexpected or unauthorized behavior.</p>\n<p>To explore a sample app featuring the contents of this tutorial, see the <live-example></live-example>.</p>\n<h2 id=\"objectives\">Objectives<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#objectives\"><i class=\"material-icons\">link</i></a></h2>\n<ul>\n<li>Organize a sample application's features into modules.</li>\n<li>Define how to navigate to a component.</li>\n<li>Pass information to a component using a parameter.</li>\n<li>Structure routes by nesting several routes.</li>\n<li>Check whether users can access a route.</li>\n<li>Control whether the application can discard unsaved changes.</li>\n<li>Improve performance by pre-fetching route data and lazy loading feature modules.</li>\n<li>Require specific criteria to load components.</li>\n</ul>\n<h2 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n<p>To complete this tutorial, you should have a basic understanding of the following concepts:</p>\n<ul>\n<li>JavaScript</li>\n<li>HTML</li>\n<li>CSS</li>\n<li><a href=\"/cli\">Angular CLI</a></li>\n</ul>\n<p>You might find the <a href=\"/tutorial\">Tour of Heroes tutorial</a> helpful, but it is not required.</p>\n<h2 id=\"create-a-sample-application\">Create a sample application<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#create-a-sample-application\"><i class=\"material-icons\">link</i></a></h2>\n<p>Using the Angular CLI, create a new application, <em>angular-router-sample</em>. This application will have two components: <em>crisis-list</em> and <em>heroes-list</em>.</p>\n<ol>\n<li>\n<p>Create a new Angular project, <em>angular-router-sample</em>.</p>\n<code-example language=\"sh\">\nng new angular-router-sample\n</code-example>\n<p>When prompted with <code>Would you like to add Angular routing?</code>, select <code>N</code>.</p>\n<p>When prompted with <code>Which stylesheet format would you like to use?</code>, select <code>CSS</code>.</p>\n<p>After a few moments, a new project, <code>angular-router-sample</code>, is ready.</p>\n</li>\n<li>\n<p>From your terminal, navigate to the <code>angular-router-sample</code> directory.</p>\n</li>\n<li>\n<p>Create a component, <em>crisis-list</em>.</p>\n<code-example language=\"sh\">\n ng generate component crisis-list\n</code-example>\n</li>\n<li>\n<p>In your code editor, locate the file, <code>crisis-list.component.html</code> and replace\nthe placeholder content with the following HTML.</p>\n<code-example header=\"src/app/crisis-list/crisis-list.component.html\" path=\"router-tutorial/src/app/crisis-list/crisis-list.component.html\">\n&#x3C;h3>CRISIS CENTER&#x3C;/h3>\n&#x3C;p>Get your crisis here&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>Create a second component, <em>heroes-list</em>.</p>\n<code-example language=\"sh\">\n ng generate component heroes-list\n</code-example>\n</li>\n<li>\n<p>In your code editor, locate the file, <code>heroes-list.component.html</code> and replace the placeholder content with the following HTML.</p>\n<code-example header=\"src/app/heroes-list/heroes-list.component.html\" path=\"router-tutorial/src/app/heroes-list/heroes-list.component.html\">\n&#x3C;h3>HEROES&#x3C;/h3>\n&#x3C;p>Get your heroes here&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>In your code editor, open the file, <code>app.component.html</code> and replace its contents with the following HTML.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"setup\">\n&#x3C;h1>Angular <a href=\"api/router/Router\" class=\"code-anchor\">Router</a> Sample&#x3C;/h1>\n&#x3C;app-crisis-list>&#x3C;/app-crisis-list>\n&#x3C;app-heroes-list>&#x3C;/app-heroes-list>\n\n</code-example>\n</li>\n<li>\n<p>Verify that your new application runs as expected by running the <code>ng serve</code> command.</p>\n<code-example language=\"sh\">\n ng serve\n</code-example>\n</li>\n<li>\n<p>Open a browser to <code>http://localhost:4200</code>.</p>\n<p>You should see a single web page, consisting of a title and the HTML of your two components.</p>\n</li>\n</ol>\n<h2 id=\"import-routermodule-from-angularrouter\">Import <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> from <code>@angular/router</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#import-routermodule-from-angularrouter\"><i class=\"material-icons\">link</i></a></h2>\n<p>Routing allows you to display specific views of your application depending on the URL path.\nTo add this functionality to your sample application, you need to update the <code>app.module.ts</code> file to use the module, <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>.\nYou import this module from <code>@angular/router</code>.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.module.ts</code> file.</p>\n</li>\n<li>\n<p>Add the following <code>import</code> statement.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"router-import\">\nimport { <a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a> } from '@angular/router';\n\n</code-example>\n</li>\n</ol>\n<h2 id=\"define-your-routes\">Define your routes<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#define-your-routes\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this section, you'll define two routes:</p>\n<ul>\n<li>The route <code>/crisis-center</code> opens the <code>crisis-center</code> component.</li>\n<li>The route <code>/heroes-list</code> opens the <code>heroes-list</code> component.</li>\n</ul>\n<p>A route definition is a JavaScript object. Each route typically has two propteries. The first property, <code>path</code>, is a string\nthat specifies the URL path for the route. The second property, <code>component</code>, is a string that specifies\nwhat component your application should display for that path.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.module.ts</code> file.</p>\n</li>\n<li>\n<p>Locate the <code>@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>()</code> section.</p>\n</li>\n<li>\n<p>Replace the <code>imports</code> array in that section with the following.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"import-basic\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  RouterModule.forRoot([\n    {path: 'crisis-list', component: CrisisListComponent},\n    {path: 'heroes-list', component: HeroesListComponent},\n  ]),\n],\n\n</code-example>\n</li>\n</ol>\n<p>This code adds the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to the <code>imports</code> array. Next, the code uses the <code>forRoot()</code> method of the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> to\ndefine your two routes. This method takes an array of JavaScript objects, with each object defining the proprties of a route.\nThe <code>forRoot()</code> method ensures that your application only instantiates one <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code>. For more information, see\n<a href=\"guide/singleton-services#forroot-and-the-router\">Singleton Services</a>.</p>\n<h2 id=\"update-your-component-with-router-outlet\">Update your component with <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#update-your-component-with-router-outlet\"><i class=\"material-icons\">link</i></a></h2>\n<p>At this point, you have defined two routes for your application. However, your application\nstill has both the <code>crisis-list</code> and <code>heroes-list</code> components hard-coded in your <code>app.component.html</code> template. For your routes to\nwork, you need to update your template to dynamically load a component based on the URL path.</p>\n<p>To implement this functionality, you add the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> directive to your template file.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.component.html</code> file.</p>\n</li>\n<li>\n<p>Delete the following lines.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"components\">\n&#x3C;app-crisis-list>&#x3C;/app-crisis-list>\n&#x3C;app-heroes-list>&#x3C;/app-heroes-list>\n\n</code-example>\n</li>\n<li>\n<p>Add the <code><a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a></code> directive.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"router-outlet\">\n&#x3C;<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>&#x3C;/<a href=\"api/router/RouterOutlet\" class=\"code-anchor\">router-outlet</a>>\n\n</code-example>\n</li>\n</ol>\n<p>View your updated application in your browser. You should see only the application title. To\nview the <code>crisis-list</code> component, add <code>crisis-list</code> to the end of the path in your browser's\naddress bar. For example:</p>\n<code-example language=\"none\">\nhttp://localhost:4200/crisis-list\n</code-example>\n<p>Notice that the <code>crisis-list</code> component displays. Angular is using the route you defined to dynamically load the\ncomponent. You can load the <code>heroes-list</code> component the same way:</p>\n<code-example language=\"none\">\nhttp://localhost:4200/heroes-list\n</code-example>\n<h2 id=\"control-navigation-with-ui-elements\">Control navigation with UI elements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#control-navigation-with-ui-elements\"><i class=\"material-icons\">link</i></a></h2>\n<p>Currently, your application supports two routes. However, the only way to use those routes\nis for the user to manually type the path in the browser's address bar. In this section, you'll\nadd two links that users can click to navigate between the <code>heroes-list</code> and <code>crisis-list</code>\ncomponents. You'll also add some CSS styles. While these styles are not required, they make\nit easier to identify the link for the currently-displayed component. You'll add that functionality\nin the next section.</p>\n<ol>\n<li>\n<p>Open the <code>app.component.html</code> file and add the following HTML below the title.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"nav\">\n&#x3C;nav>\n  &#x3C;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\">Crisis Center&#x3C;/a> |\n  &#x3C;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\">Heroes&#x3C;/a>\n&#x3C;/nav>\n\n</code-example>\n<p>This HTML uses an Angular directive, <code><a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a></code>. This directive connects the routes\nyou defined to your template files.</p>\n</li>\n<li>\n<p>Open the <code>app.component.css</code> file and add the following styles.</p>\n<code-example header=\"src/app/app.component.css\" path=\"router-tutorial/src/app/app.component.css\">\n.button {\n    box-shadow: inset 0px 1px 0px 0px #ffffff;\n    background: linear-gradient(to bottom, #ffffff 5%, #f6f6f6 100%);\n    background-color: #ffffff;\n    border-radius: 6px;\n    border: 1px solid #dcdcdc;\n    display: inline-block;\n    cursor: pointer;\n    color: #666666;\n    font-family: Arial;\n    font-size: 15px;\n    font-weight: bold;\n    padding: 6px 24px;\n    text-decoration: none;\n    text-shadow: 0px 1px 0px #ffffff;\n    outline: 0;\n}\n.activebutton {\n    box-shadow: inset 0px 1px 0px 0px #dcecfb;\n    background: linear-gradient(to bottom, #bddbfa 5%, #80b5ea 100%);\n    background-color: #bddbfa;\n    border-radius: 6px;\n    border: 1px solid #84bbf3;\n    display: inline-block;\n    cursor: pointer;\n    color: #ffffff;\n    font-family: Arial;\n    font-size: 15px;\n    font-weight: bold;\n    padding: 6px 24px;\n    text-decoration: none;\n    text-shadow: 0px 1px 0px #528ecc;\n    outline: 0;\n}\n\n</code-example>\n</li>\n</ol>\n<p>If you view your application in the browser, you should see these two links. When you click\non a link, the corresponding component appears.</p>\n<h2 id=\"identify-the-active-route\">Identify the active route<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#identify-the-active-route\"><i class=\"material-icons\">link</i></a></h2>\n<p>While users can navigate your application using the links you added in the previous section,\nthey don't have an easy way to identify what the active route is. You can add this functionality\nusing Angular's <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.component.html</code> file.</p>\n</li>\n<li>\n<p>Update the anchor tags to include the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code> directive.</p>\n<code-example header=\"src/app/app.component.html\" path=\"router-tutorial/src/app/app.component.html\" region=\"routeractivelink\">\n&#x3C;nav>\n  &#x3C;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/crisis-list\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\">Crisis Center&#x3C;/a> |\n  &#x3C;a class=\"button\" <a href=\"api/router/RouterLink\" class=\"code-anchor\">routerLink</a>=\"/heroes-list\" <a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a>=\"activebutton\">Heroes&#x3C;/a>\n&#x3C;/nav>\n\n</code-example>\n</li>\n</ol>\n<p>View your application again. As you click one of the buttons, the style for that button updates\nautomatically, identifying the active component to the user. By adding the <code><a href=\"api/router/RouterLinkActive\" class=\"code-anchor\">routerLinkActive</a></code>\ndirective, you inform your application to apply a specific CSS class to the active route. In this\ntutorial, that CSS class is <code>activebutton</code>, but you could use any class that you want.</p>\n<h2 id=\"adding-a-redirect\">Adding a redirect<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-redirect\"><i class=\"material-icons\">link</i></a></h2>\n<p>In this step of the tutorial, you add a route that redirects the user to display the <code>/heroes-list</code> component.</p>\n<ol>\n<li>\n<p>From your code editor, open the <code>app.module.ts</code> file.</p>\n</li>\n<li>\n<p>In the <code>imports</code> array, update the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> section as follows.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"import-redirect\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  RouterModule.forRoot([\n    {path: 'crisis-list', component: CrisisListComponent},\n    {path: 'heroes-list', component: HeroesListComponent},\n    {path: '', redirectTo: '/heroes-list', pathMatch: 'full'},\n  ]),\n],\n\n</code-example>\n<p>Notice that this new route uses an empty string as its path. In addition, it replaces the <code>component</code> property with two new ones:</p>\n<ul>\n<li><code>redirectTo</code>. This property instructs Angular to redirect from an empty path to the\n<code>heroes-list</code> path.</li>\n<li><code>pathMatch</code>. This property instructs Angular on how much of the URL to match. For this\ntutorial, you should set this property to <code>full</code>. This strategy is recommended when\nyou have an empty string for a path. For more information about this property,\nsee the <a href=\"/api/router/Route\">Route API documentation</a>.</li>\n</ul>\n</li>\n</ol>\n<p>Now when you open your application, it displays the <code>heroes-list</code> component by default.</p>\n<h2 id=\"adding-a-404-page\">Adding a 404 page<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#adding-a-404-page\"><i class=\"material-icons\">link</i></a></h2>\n<p>It is possible for a user to try to access a route that you have not defined. To account for\nthis behavior, a best practice is to display a 404 page. In this section, you'll create a 404 page and\nupdate your route configuration to show that page for any unspecified routes.</p>\n<ol>\n<li>\n<p>From the terminal, create a new component, <code>PageNotFound</code>.</p>\n<code-example language=\"sh\">\nng generate component page-not-found\n</code-example>\n</li>\n<li>\n<p>From your code editor, open the <code>page-not-found.component.html</code> file and replace its contents\nwith the following HTML.</p>\n<code-example header=\"src/app/page-not-found/page-not-found.component.html\" path=\"router-tutorial/src/app/page-not-found/page-not-found.component.html\">\n&#x3C;h2>Page Not Found&#x3C;/h2>\n&#x3C;p>We couldn't find that page! Not even with x-ray vision.&#x3C;/p>\n\n\n</code-example>\n</li>\n<li>\n<p>Open the <code>app.module.ts</code> file. In the <code>imports</code> array, update the <code><a href=\"api/router/RouterModule\" class=\"code-anchor\">RouterModule</a></code> section as follows.</p>\n<code-example header=\"src/app/app.module.ts\" path=\"router-tutorial/src/app/app.module.ts\" region=\"import-wildcard\">\nimports: [\n  <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>,\n  RouterModule.forRoot([\n    {path: 'crisis-list', component: CrisisListComponent},\n    {path: 'heroes-list', component: HeroesListComponent},\n    {path: '', redirectTo: '/heroes-list', pathMatch: 'full'},\n    {path: '**', component: PageNotFoundComponent}\n  ]),\n],\n\n</code-example>\n<p>The new route uses a path, <code>**</code>. This path is how Angular identifies a wildcard route. Any route\nthat does not match an existing route in your configuration will use this route.</p>\n<div class=\"alert is-important\">\n Notice that the wildcard route is placed at the end of the array. The order of your\n routes is important, as Angular applies routes in order and uses the first match it finds.\n</div>\n</li>\n</ol>\n<p>Try navigating to a non-existing route on your application, such as <code>http://localhost:4200/powers</code>.\nThis route doesn't match anything defined in your <code>app.module.ts</code> file. However, because you\ndefined a wildcard route, the application automatically displays your <code>PageNotFound</code> component.</p>\n<h2 id=\"next-steps\">Next steps<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/router-tutorial#next-steps\"><i class=\"material-icons\">link</i></a></h2>\n<p>At this point, you have a basic application that uses Angular's routing feature to change\nwhat components the user can see based on the URL address. You have extended these features\nto include a redirect, as well as a wildcard route to display a custom 404 page.</p>\n<p>For more information about routing, see the following topics:</p>\n<ul>\n<li><a href=\"/guide/router\">In-app Routing and Navigation</a></li>\n<li><a href=\"/api/router\">Router API</a></li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - /api/router\n - /api/router/Route\n - /cli\n - /guide/router\n - /tutorial\n - api/core/NgModule\n - api/platform-browser/BrowserModule\n - api/router/Router\n - api/router/RouterLink\n - api/router/RouterLinkActive\n - api/router/RouterModule\n - api/router/RouterOutlet\n - guide/router-tutorial#adding-a-404-page\n - guide/router-tutorial#adding-a-redirect\n - guide/router-tutorial#control-navigation-with-ui-elements\n - guide/router-tutorial#create-a-sample-application\n - guide/router-tutorial#define-your-routes\n - guide/router-tutorial#identify-the-active-route\n - guide/router-tutorial#import-routermodule-from-angularrouter\n - guide/router-tutorial#next-steps\n - guide/router-tutorial#objectives\n - guide/router-tutorial#prerequisites\n - guide/router-tutorial#update-your-component-with-router-outlet\n - guide/router-tutorial#using-angular-routes-in-a-single-page-application\n - guide/singleton-services#forroot-and-the-router\n - https://github.com/angular/angular/edit/master/aio/content/guide/router-tutorial.md?message=docs%3A%20describe%20your%20change...\n-->"
}