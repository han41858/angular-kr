{
  "id": "guide/pipes",
  "title": "파이프로 데이터 표시형식 변환하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/pipes.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Transforming Data Using Pipes\n-->\n<h1 id=\"파이프로-데이터-표시형식-변환하기\">파이프로 데이터 표시형식 변환하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#파이프로-데이터-표시형식-변환하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nUse [pipes](guide/glossary#pipe \"Definition of a pipe\") to transform strings, currency amounts, dates, and other data for display.\nPipes are simple functions you can use in [template expressions](/guide/glossary#template-expression \"Definition of template expression\") to accept an input value and return a transformed value. Pipes are useful because you can use them throughout your application, while only declaring each pipe once.\nFor example, you would use a pipe to show a date as **April 15, 1988** rather than the raw string format.\n\n<div class=\"alert is-helpful\">\n\n  For the sample app used in this topic, see the <live-example></live-example>.\n\n</div>\n\nAngular provides built-in pipes for typical data transformations, including transformations for internationalization (i18n), which use locale information to format data.\nThe following are commonly used built-in pipes for data formatting:\n\n* [`DatePipe`](api/common/DatePipe): Formats a date value according to locale rules.\n* [`UpperCasePipe`](api/common/UpperCasePipe): Transforms text to all upper case.\n* [`LowerCasePipe`](api/common/LowerCasePipe): Transforms text to all lower case.\n* [`CurrencyPipe`](api/common/CurrencyPipe): Transforms a number to a currency string, formatted according to locale rules.\n* [`DecimalPipe`](/api/common/DecimalPipe): Transforms a number into a string with a decimal point, formatted according to locale rules.\n* [`PercentPipe`](api/common/PercentPipe): Transforms a number to a percentage string, formatted according to locale rules.\n\n<div class=\"alert is-helpful\">\n\n* For a complete list of built-in pipes, see the [pipes API documentation](/api/common#pipes \"Pipes API reference summary\").\n* To learn more about using pipes for internationalization (i18n) efforts, see [formatting data based on locale](/guide/i18n#i18n-pipes \"Formatting data based on locale\").\n\n</div>\n\nYou can also create pipes to encapsulate custom transformations and use your custom pipes in template expressions.\n-->\n<p><a href=\"guide/glossary#pipe\" title=\"Definition of a pipe\">파이프</a>를 사용하면 문자열, 통화, 일자와 같은 데이터를 원하는 형태로 화면에 표시할 수 있습니다.\n파이프는 <a href=\"/guide/glossary#template-expression\" title=\"Definition of template expression\">템플릿 표현식</a>과 마찬가지로 어떤 값을 입력받아서 변환된 데이터를 반환하는 함수입니다.\n특히 파이프는 한번만 선언해두면 애플리케이션 어느곳이든 자유롭게 사용할 수 있기 때문에 유용합니다.\n문자열을 <code>toString()</code>으로 변환해서 화면에 표시하는 것보다는 <em>April 15, 1988</em> 이라고 표시하는 것이 사용자가 알아보기 편하기 때문에 파이프는 Angular 앱 곳곳에 자주 사용합니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 설명하는 내용은 <live-example></live-example>에서 직접 확인하거나 다운받아 확인할 수 있습니다.</p>\n</div>\n<p>Angular는 일반적인 데이터 변환용으로 사용할 수 있는 기본 파이프를 몇가지 지원하며, 이 때 지역이나 국가에서 자주 사용하는 형식에 맞는 국제화(internationalization, i18n)도 지원합니다.\n자주 사용하는 기본 파이프는 이런 것들이 있습니다:</p>\n<ul>\n<li><a href=\"api/common/DatePipe\"><code>DatePipe</code></a>: 날짜 데이터를 원하는 형식으로 변환합니다.</li>\n<li><a href=\"api/common/UpperCasePipe\"><code>UpperCasePipe</code></a>: 문자열을 모두 대문자로 변환합니다.</li>\n<li><a href=\"api/common/LowerCasePipe\"><code>LowerCasePipe</code></a>: 문자열을 모두 소문자로 변환합니다.</li>\n<li><a href=\"api/common/CurrencyPipe\"><code>CurrencyPipe</code></a>: 숫자를 통화 단위로 변환합니다. 지역에 맞는 표시 형식도 적용할 수 있습니다.</li>\n<li><a href=\"/api/common/DecimalPipe\"><code>DecimalPipe</code></a>: 숫자가 표시되는 자릿수를 지정합니다. 지역에 맞는 표시 형식도 적용할 수 있습니다.</li>\n<li><a href=\"api/common/PercentPipe\"><code>PercentPipe</code></a>: 숫자를 백분율로 변환합니다. 지역에 맞는 표시 형식도 적용할 수 있습니다.</li>\n</ul>\n<div class=\"alert is-helpful\">\n<ul>\n<li>Angular가 제공하는 기본 파이프를 살펴보려면 <a href=\"/api/common#pipes\" title=\"Pipes API reference summary\">파이프 API 문서</a>를 참고하세요.</li>\n<li>파이프에 국제화(internationalization, i18n)가 적용되는 과정을 자세하게 확인하려면 <a href=\"/guide/i18n#i18n-pipes\" title=\"Formatting data based on locale\">지역에 맞게 데이터 변환하기</a> 문서를 참고하세요.</li>\n</ul>\n</div>\n<p>기본 파이프가 제공하는 기능 외에 데이터를 변환하는 로직이 별도로 필요하면 커스텀 파이프를 만들어서 활용할 수 있습니다.</p>\n<!--\n## Prerequisites\n-->\n<h2 id=\"사전지식\">사전지식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#사전지식\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo use pipes you should have a basic understanding of the following:\n\n* [Typescript](guide/glossary#typescript \"Definition of Typescript\") and HTML5 programming\n* [Templates](guide/glossary#template \"Definition of a template\") in HTML with CSS styles\n* [Components](guide/glossary#component \"Definition of a component\")\n-->\n<p>파이프에 대해 이해하려면 다음 내용들을 먼저 이해하고 있는 것이 좋습니다:</p>\n<ul>\n<li><a href=\"guide/glossary#typescript\" title=\"Definition of Typescript\">Typescript</a>와 HTML5 문법</li>\n<li><a href=\"guide/glossary#template\" title=\"Definition of a template\">템플릿</a>에서 HTML과 CSS 스타일을 구성하는 방법</li>\n<li><a href=\"guide/glossary#component\" title=\"Definition of a component\">컴포넌트</a></li>\n</ul>\n<!--\n## Using a pipe in a template\n-->\n<h2 id=\"템플릿에-파이프-사용하기\">템플릿에 파이프 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#템플릿에-파이프-사용하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo apply a pipe, use the pipe operator (`|`) within a template expression as shown in the following code example, along with the *name* of the pipe, which is `date` for the built-in [`DatePipe`](api/common/DatePipe).\nThe tabs in the example show the following:\n\n* `app.component.html` uses `date` in a separate template to display a birthday.\n* `hero-birthday1.component.ts` uses the same pipe as part of an in-line template in a component that also sets the birthday value.\n\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" region=\"hero-birthday-template\" path=\"pipes/src/app/app.component.html\">\n&lt;p&gt;The hero&#39;s birthday is {{ birthday | date }}&lt;/p&gt;\n\n</code-pane>\n  <code-pane header=\"src/app/hero-birthday1.component.ts\" path=\"pipes/src/app/hero-birthday1.component.ts\">\nimport { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-hero-birthday&#39;,\n  template: `&lt;p&gt;The hero&#39;s birthday is {{ birthday | date }}&lt;/p&gt;`\n})\nexport class HeroBirthdayComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- 월은 0부터 시작합니다.\n}\n\n\n</code-pane>\n</code-tabs>\n\nThe component's `birthday` value flows through the\n[pipe operator](guide/template-expression-operators#pipe) ( | ) to the [`date`](api/common/DatePipe)\nfunction.\n-->\n<p>파이프를 사용하려면 템플릿 표현식에 파이프 연산자(<code>|</code>)를 사용하고 파이프 <em>이름</em>을 지정하면 됩니다.\n<code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 프로퍼티에 <a href=\"api/common/DatePipe\"><code>DatePipe</code></a>를 적용해 봅시다:</p>\n<ul>\n<li><code>app.component.html</code>에 있는 <code>birthday</code> 프로퍼티는 템플릿에 생일을 표시할 때 사용하는 프로퍼티입니다.</li>\n<li><code>hero-birthday1.component.ts</code> 파일에서도 인라인 템플릿에 날짜 파이프를 사용해서 생일이 표시되는 형식을 변환합니다.</li>\n</ul>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" region=\"hero-birthday-template\" path=\"pipes/src/app/app.component.html\">\n&#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> }}&#x3C;/p>\n\n</code-pane>\n  <code-pane header=\"src/app/hero-birthday1.component.ts\" path=\"pipes/src/app/hero-birthday1.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-birthday',\n  template: `&#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> }}&#x3C;/p>`\n})\nexport class HeroBirthdayComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- 월은 0부터 시작합니다.\n}\n\n\n</code-pane>\n</code-tabs>\n<p>컴포넌트 <code>birthday</code> 값은 <a href=\"guide/template-expression-operators#pipe\">파이프 연산자 (<code>|</code>)</a>를 거쳐 <a href=\"api/common/DatePipe\">DatePipe</a>로 전달됩니다.</p>\n<a id=\"parameterizing-a-pipe\"></a>\n<!--\n## Transforming data with parameters and chained pipes\n-->\n<h2 id=\"추가-형식-지정하기-체이닝하기\">추가 형식 지정하기, 체이닝하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#추가-형식-지정하기-체이닝하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nUse optional parameters to fine-tune a pipe's output.\nFor example, you can use the [`CurrencyPipe`](api/common/CurrencyPipe \"API reference\") with a country code such as EUR as a parameter.\nThe template expression `{{ amount | currency:'EUR' }}` transforms the `amount` to currency in euros.\nFollow the pipe name (`currency`) with a colon (`:`) and the parameter value (`'EUR'`).\n\nIf the pipe accepts multiple parameters, separate the values with colons.\nFor example, `{{ amount | currency:'EUR':'Euros '}}` adds the second parameter, the string literal `'Euros '`, to the output string. You can use any valid template expression as a parameter, such as a string literal or a component property.\n\nSome pipes require at least one parameter and allow more optional parameters, such as [`SlicePipe`](/api/common/SlicePipe \"API reference for SlicePipe\"). For example, `{{ slice:1:5 }}` creates a new array or string containing a subset of the elements starting with element `1` and ending with element `5`.\n-->\n<p>파이프에는 추가 형식을 인자로 전달할 수 있습니다.\n그래서 <a href=\"api/common/CurrencyPipe\" title=\"API reference\"><code>CurrencyPipe</code></a>를 사용할 때 EUR 같은 통화 단위를 직접 지정할 수 있습니다.\n템플릿 표현식에  <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR' }}</code> 라고 사용하면 <code>amount</code>에 있는 숫자가 유로 단위로 표시됩니다.\n파이프 이름(<code>current</code>) 뒤에 붙은 콜론(<code>:</code>) 다음에 전달하는 것이 추가 형식 인자(<code>'EUR'</code>) 입니다.</p>\n<p>파이프에 인자를 여러개 전달할 수 있다면 이 인자들은 콜론으로 구분합니다.\n그래서 <code>{{ amount | <a href=\"api/common/CurrencyPipe\" class=\"code-anchor\">currency</a>:'EUR':'Euros '}}</code> 와 같이 사용하면 두번째 인자로 전달한 <code>'Euros '</code>가 문자열 뒤에 붙습니다.\n템플릿 표현식 문법에 맞기만 하면 템플릿에 선언한 문자열 리터럴이나 컴포넌트 프로퍼티에 모두 파이프를 적용할 수 있습니다.</p>\n<p>파이프 중에는 인자 하나는 반드시 지정해야 하는 경우가 있습니다.\n<a href=\"/api/common/SlicePipe\" title=\"API reference for SlicePipe\"><code>SlicePipe</code></a>가 그런데, <code>{{ slice:1:5 }}</code>라고 사용하면 배열이나 문자열에서 <code>1</code>번째 엘리먼트부터 <code>5</code>번째 엘리먼트까지를 반환합니다.</p>\n<!--\n### Example: Formatting a date\n-->\n<h3 id=\"예제-날짜-형식-지정하기\">예제: 날짜 형식 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#예제-날짜-형식-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe tabs in the following example demonstrates toggling between two different formats (`'shortDate'` and `'fullDate'`):\n\n* The `app.component.html` template uses a format parameter for the [`DatePipe`](api/common/DatePipe) (named `date`) to show the date as **04/15/88**.\n* The `hero-birthday2.component.ts` component binds the pipe's format parameter to the component's `format` property in the `template` section, and adds a button for a click event bound to the component's `toggleFormat()` method.\n* The `hero-birthday2.component.ts` component's `toggleFormat()` method toggles the component's `format` property between a short form\n(`'shortDate'`) and a longer form (`'fullDate'`).\n\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" region=\"format-birthday\" path=\"pipes/src/app/app.component.html\">\n&lt;p&gt;The hero&#39;s birthday is {{ birthday | date:&quot;MM/dd/yy&quot; }} &lt;/p&gt;\n\n</code-pane>\n  <code-pane header=\"src/app/hero-birthday2.component.ts (template)\" region=\"template\" path=\"pipes/src/app/hero-birthday2.component.ts\">\ntemplate: `\n  &lt;p&gt;The hero&#39;s birthday is {{ birthday | date:format }}&lt;/p&gt;\n  &lt;button (click)=&quot;toggleFormat()&quot;&gt;Toggle Format&lt;/button&gt;\n`\n\n</code-pane>\n  <code-pane header=\"src/app/hero-birthday2.component.ts (class)\" region=\"class\" path=\"pipes/src/app/hero-birthday2.component.ts\">\nexport class HeroBirthday2Component {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- 월은 0부터 시작합니다.\n  toggle = true; // 기본 형식을 shortDate로 지정하기 위해 true 값을 할당합니다.\n\n  get format()   { return this.toggle ? &#39;shortDate&#39; : &#39;fullDate&#39;; }\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n\nClicking the **Toggle Format** button alternates the date format between **04/15/1988** and **Friday, April 15, 1988** as shown in Figure 1.\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/pipes/date-format-toggle-anim.gif' alt=\"Date Format Toggle\">\n</div>\n\n**Figure 1.** Clicking the button toggles the date format\n\n<div class=\"alert is-helpful\">\n\nFor `date` pipe format options, see [DatePipe](api/common/DatePipe \"DatePipe API Reference page\").\n\n</div>\n-->\n<p>아래 예제에서 탭을 변경해보면 두 종류 형식(<code>'shortDate'</code>, <code>'fullDate'</code>)으로 날짜 형식을 지정한 것을 확인할 수 있습니다.</p>\n<ul>\n<li><code>app.component.html</code> 템플릿에는 <strong>04/15/88</strong>이라는 형식으로 표시하기 위해 <a href=\"api/common/DatePipe\"><code>DatePipe</code></a>를 사용했습니다.</li>\n<li><code>hero-birthday2.componen.ts</code>에는 컴포넌트에 있는 <code>format</code> 프로퍼티를 사용해서 파이프의 날짜 형식을 지정합니다. 그리고 화면에서 버튼을 클릭하면 <code>toggleFormat()</code> 메소드가 실행되면서 날짜 형식을 변경합니다.</li>\n<li><code>hero-birthday2.component.ts</code>에 정의된 <code>toggleFormat()</code>는 컴포넌트 <code>format</code> 프로퍼티를 두 종류 날짜 형식(<code>'shortDate'</code>, <code>'fullDate'</code>)으로 변경합니다.</li>\n</ul>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html\" region=\"format-birthday\" path=\"pipes/src/app/app.component.html\">\n&#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:\"MM/dd/yy\" }} &#x3C;/p>\n\n</code-pane>\n  <code-pane header=\"src/app/hero-birthday2.component.ts (템플릿)\" region=\"template\" path=\"pipes/src/app/hero-birthday2.component.ts\">\ntemplate: `\n  &#x3C;p>The hero's birthday is {{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:format }}&#x3C;/p>\n  &#x3C;button (click)=\"toggleFormat()\">Toggle Format&#x3C;/button>\n`\n\n</code-pane>\n  <code-pane header=\"src/app/hero-birthday2.component.ts (클래스)\" region=\"class\" path=\"pipes/src/app/hero-birthday2.component.ts\">\nexport class HeroBirthday2Component {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- 월은 0부터 시작합니다.\n  toggle = true; // 기본 형식을 shortDate로 지정하기 위해 true 값을 할당합니다.\n\n  get format()   { return this.toggle ? 'shortDate' : 'fullDate'; }\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>이제 화면에서 <strong>Toggle Format</strong> 버튼을 클릭하면 날짜 형식이 <strong>04/15/1988</strong>이라고 표시되거나 <strong>Friday, April 15, 1988</strong>라고 표시되는 것을 확인할 수 있습니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/pipes/date-format-toggle-anim.gif\" alt=\"Date Format Toggle\" width=\"300\" height=\"62\">\n</div>\n<p><strong>그림 1.</strong> 날짜 형식을 변경하는 모습</p>\n<div class=\"alert is-helpful\">\n<p><code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 파이프에 사용할 수 있는 형식에 대해 알아보려면 <a href=\"api/common/DatePipe\" title=\"DatePipe API Reference page\">DatePipe</a> 문서를 참고하세요.</p>\n</div>\n<!--\n### Example: Applying two formats by chaining pipes\n-->\n<h3 id=\"예제-파이프-체이닝\">예제: 파이프 체이닝<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#예제-파이프-체이닝\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can chain pipes so that the output of one pipe becomes the input to the next.\n\nIn the following example, chained pipes first apply a format to a date value, then convert the formatted date to uppercase characters.\nThe first tab for the `src/app/app.component.html` template chains `DatePipe` and `UpperCasePipe` to display the birthday as **APR 15, 1988**.\nThe second tab for the `src/app/app.component.html` template passes the `fullDate` parameter to `date` before chaining to `uppercase`, which produces **FRIDAY, APRIL 15, 1988**.\n\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html (1)\" region=\"chained-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero&#39;s birthday is\n{{ birthday | date | uppercase}}\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.html (2)\" region=\"chained-parameter-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero&#39;s birthday is\n{{  birthday | date:&#39;fullDate&#39; | uppercase}}\n\n</code-pane>\n</code-tabs>\n-->\n<p>파이프는 하나를 통과한 결과를 다른 파이프로 전달하는 방식으로 체이닝할 수 있습니다.</p>\n<p>아래 예제는 첫번째 파이프로 날짜 데이터의 형식을 지정한 후에, 이렇게 변환된 문자열을 다른 파이프로 전달해서 대문자로 변환하는 예제입니다.\n첫번째 탭은 <code>src/app/app.component.html</code> 템플릿 파일에서 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">DatePipe</a></code>와 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">UpperCasePipe</a></code>를 사용해서 <strong>APR 15, 1988</strong>이라고 표시하는 코드입니다.\n그리고 두번째 탭은 <code>src/app/app.component.html</code> 템플릿 파일에서 <code><a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a></code> 프로퍼티를 <code>fullDate</code> 형식으로 변환한 후에 <code><a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a></code> 파이프를 한 번 더 사용해서 <strong>FRIDAY, APRIL 15, 1988</strong>이라고 표시하는 코드입니다.</p>\n<code-tabs>\n  <code-pane header=\"src/app/app.component.html (1)\" region=\"chained-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero's birthday is\n{{ birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a> | <a href=\"api/common/UpperCasePipe\" class=\"code-anchor\">uppercase</a>}}\n\n</code-pane>\n  <code-pane header=\"src/app/app.component.html (2)\" region=\"chained-parameter-birthday\" path=\"pipes/src/app/app.component.html\">\nThe chained hero's birthday is\n{{  birthday | <a href=\"api/common/DatePipe\" class=\"code-anchor\">date</a>:'fullDate' | uppercase}}\n\n</code-pane>\n</code-tabs>\n<a id=\"Custom-pipes\"></a>\n<!--\n## Creating pipes for custom data transformations\n-->\n<h2 id=\"커스텀-파이프-만들기\">커스텀 파이프 만들기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#커스텀-파이프-만들기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nCreate custom pipes to encapsulate transformations that are not provided with the built-in pipes.\nYou can then use your custom pipe in template expressions, the same way you use built-in pipes—to transform input values to output values for display.\n-->\n<p>Angular 기본 파이프로 원하는 변환작업을 수행할 수 없다면 커스텀 파이프를 만들어서 활용하면 됩니다.\n커스텀 파이프는 기본 파이프와 같은 방식으로 템플릿 표현식에 사용할 수 있으며, 데이터를 화면에 원하는 형태로 표시하기 위해 어떤 값을 받아서 가공하고 반환한다는 점도 같습니다.</p>\n<!--\n### Marking a class as a pipe\n-->\n<h3 id=\"클래스를-파이프로-지정하기\">클래스를 파이프로 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#클래스를-파이프로-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo mark a class as a pipe and supply configuration metadata, apply the [`@Pipe`](/api/core/Pipe \"API reference for Pipe\") [decorator](/guide/glossary#decorator--decoration \"Definition for decorator\") to the class.\nUse [UpperCamelCase](guide/glossary#case-types \"Definition of case types\") (the general convention for class names) for the pipe class name, and [camelCase](guide/glossary#case-types \"Definition of case types\") for the corresponding `name` string.\nDo not use hyphens in the `name`.\nFor details and more examples, see [Pipe names](guide/styleguide#pipe-names \"Pipe names in the Angular coding style guide\").\n\nUse `name` in template expressions as you would for a built-in pipe.\n\n<div class=\"alert is-important\">\n\n* Include your pipe in the `declarations` field of the `NgModule` metadata in order for it to be available to a template. See the `app.module.ts` file in the example app (<live-example></live-example>). For details, see [NgModules](guide/ngmodules \"NgModules introduction\").\n* Register your custom pipes. The [Angular CLI](cli \"CLI Overview and Command Reference\") [`ng generate pipe`](cli/generate#pipe \"ng generate pipe in the CLI Command Reference\") command registers the pipe automatically.\n\n</div>\n-->\n<p>클래스에 <a href=\"/api/core/Pipe\" title=\"API reference for Pipe\"><code>@Pipe</code></a> <a href=\"/guide/glossary#decorator--decoration\" title=\"Definition for decorator\">데코레이터</a>를 지정하고 필요한 내용을 메타데이터에 작성하면 클래스를 파이프로 만들 수 있습니다.\n이 때 파이프 클래스 이름은 일반적인 스타일로 <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">대문자 캐멀 케이스(UpperCamelCase)</a>로 작성하며 메타데이터 <code>name</code>에 해당하는 문자열은 <a href=\"guide/glossary#case-types\" title=\"Definition of case types\">캐멀 케이스(camelCase)</a>로 지정합니다.\n<code>name</code>에 하이픈(<code>-</code>)을 사용하지 마세요.\n자세한 내용은 코딩스타일 가이드 <a href=\"guide/styleguide#pipe-names\" title=\"Pipe names in the Angular coding style guide\">Pipe 이름</a> 섹션을 참고하세요.</p>\n<p>파이프의 <code>name</code>으로 지정한 문자열은 Angular 기본 파이프와 같은 방식으로 템플릿 표현식에 사용할 수 있습니다.</p>\n<div class=\"alert is-important\">\n<ul>\n<li>\n<p>클래스에 파이프 데코레이터를 붙여서 파이프로 선언한 후에는 <code><a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a></code> 메타데이터의 <code>declarations</code> 필드에 이 파이프를 등록해야 템플릿에 사용할 수 있습니다. 예제 앱(<live-example></live-example>)의 <code>app.module.ts</code> 파일에서 이 내용을 확인할 수 있으며 자세한 내용은 <a href=\"guide/ngmodules\" title=\"NgModules introduction\">NgModules</a> 문서를 참고하세요.</p>\n</li>\n<li>\n<p><a href=\"cli\" title=\"CLI Overview and Command Reference\">Angular CLI</a>로 <a href=\"cli/generate#pipe\" title=\"ng generate pipe in the CLI Command Reference\"><code>ng generate pipe</code></a> 명령을 실행하면 파이프가 자동으로 등록됩니다.</p>\n</li>\n</ul>\n</div>\n<!--\n### Using the PipeTransform interface\n-->\n<h3 id=\"pipetransform-인터페이스-적용하기\">PipeTransform 인터페이스 적용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#pipetransform-인터페이스-적용하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nImplement the [`PipeTransform`](/api/core/PipeTransform \"API reference for PipeTransform\") interface in your custom pipe class to perform the transformation.\n\nAngular invokes the `transform` method with the value of a binding as the first argument, and any parameters as the second argument in list form, and returns the transformed value.\n-->\n<p>커스텀 파이프 클래스가 제대로 동작하려면 <a href=\"/api/core/PipeTransform\" title=\"API reference for PipeTransform\"><code>PipeTransform</code></a> 인터페이스를 받아서(<code>implements</code>) 구현해야 합니다.</p>\n<p>템플릿 표현식에 커스텀 파이프가 사용되면 Angular가 <code>transform()</code> 메소드를 실행하며 이 때 인자가 함께 전달되면 <code>transform()</code> 메소드가 실행될 때 인자로 전달됩니다.</p>\n<!--\n### Example: Transforming a value exponentially\n-->\n<h3 id=\"예제-지수-변환하기\">예제: 지수 변환하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#예제-지수-변환하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIn a game, you may want to implement a transformation that raises a value exponentially to increase a hero's power.\nFor example, if the hero's score is 2, boosting the hero's power exponentially by 10 produces a score of 1024.\nYou can use a custom pipe for this transformation.\n\nThe following code example shows two component definitions:\n\n* The `exponential-strength.pipe.ts` component defines a custom pipe named `exponentialStrength` with the `transform` method that performs the transformation.\nIt defines an argument to the `transform` method (`exponent`) for a parameter passed to the pipe.\n\n* The `power-booster.component.ts` component demonstrates how to use the pipe, specifying a value (`2`) and the exponent parameter (`10`).\nFigure 2 shows the output.\n\n<code-tabs>\n  <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { Pipe, PipeTransform } from &#39;@angular/core&#39;;\n/*\n * 히어로의 힘을 증폭합니다.\n * 증폭값은 파이프 인자로 전달하며, 기본값은 1입니다.\n * 사용방법:\n *   값 | exponentialStrength:증폭값\n * 사용예:\n *   {{ 2 | exponentialStrength:10 }}\n *   변환 결과: 1024\n*/\n@Pipe({name: &#39;exponentialStrength&#39;})\nexport class ExponentialStrengthPipe implements PipeTransform {\n  transform(value: number, exponent?: number): number {\n    return Math.pow(value, isNaN(exponent) ? 1 : exponent);\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-power-booster&#39;,\n  template: `\n    &lt;h2&gt;Power Booster&lt;/h2&gt;\n    &lt;p&gt;Super power boost: {{2 | exponentialStrength: 10}}&lt;/p&gt;\n  `\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/pipes/power-booster.png' alt=\"Power Booster\">\n</div>\n\n**Figure 2.** Output from the `exponentialStrength` pipe\n\n<div class=\"alert is-helpful\">\n\nTo examine the behavior the `exponentialStrength` pipe in the <live-example></live-example>, change the value and optional exponent in the template.\n\n</div>\n-->\n<p>게임을 만드는데 어떤 히어로의 파워를 제곱해서 표현하는 기능을 구현한다고 합시다.\n히어로 점수가 2라면 파워는 2의 10제곱인 1024라고 표현하는 식입니다.\n이런 데이터 변환은 커스텀 파이프를 활용하면 구현할 수 있습니다.</p>\n<p>아래 두 파일의 내용을 확인해 보세요:</p>\n<ul>\n<li>\n<p><code>exponential-strength.pipe.ts</code>에는  <code>exponentialStrength</code>라는 이름으로 커스텀 파이프가 정의되어 있으며, 변환 로직은 이 파이프 클래스의 <code>transform()</code> 메소드에 구현되어 있습니다.</p>\n</li>\n<li>\n<p>이 커스텀 파이프는 <code>power-booster.component.ts</code> 파일 템플릿에서 사용합니다. 이 때 <code>2</code> 값을 <code>10</code> 제곱하도록 파이프 인자를 지정했습니다. 이렇게 지정한 인자는 커스텀 파이프의 <code>transform()</code> 메소드로 전달됩니다.</p>\n</li>\n</ul>\n<p>어떻게 처리되는지 그림 2에서 확인해 보세요.</p>\n<code-tabs>\n  <code-pane header=\"src/app/exponential-strength.pipe.ts\" path=\"pipes/src/app/exponential-strength.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n/*\n * 히어로의 힘을 증폭합니다.\n * 증폭값은 파이프 인자로 전달하며, 기본값은 1입니다.\n * 사용방법:\n *   값 | exponentialStrength:증폭값\n * 사용예:\n *   {{ 2 | exponentialStrength:10 }}\n *   변환 결과: 1024\n*/\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({name: 'exponentialStrength'})\nexport class ExponentialStrengthPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(value: number, exponent?: number): number {\n    return Math.pow(value, isNaN(exponent) ? 1 : exponent);\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/power-booster.component.ts\" path=\"pipes/src/app/power-booster.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-power-booster',\n  template: `\n    &#x3C;h2>Power Booster&#x3C;/h2>\n    &#x3C;p>Super power boost: {{2 | exponentialStrength: 10}}&#x3C;/p>\n  `\n})\nexport class PowerBoosterComponent { }\n\n\n</code-pane>\n</code-tabs>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/pipes/power-booster.png\" alt=\"Power Booster\" width=\"300\" height=\"105\">\n</div>\n<p><strong>그림 2.</strong> <code>exponentialStrength</code> 파이프 실행 결과</p>\n<div class=\"alert is-helpful\">\n<p><code>exponentialStrength</code> 파이프가 직접 동작하는 것을 확인하려면 <live-example></live-example>를 참고하세요. 템플릿에 지정한 파이프 인자 값을 바꾸면 결과값도 변경됩니다.</p>\n</div>\n<a id=\"change-detection\"></a>\n<!--\n## Detecting changes with data binding in pipes\n-->\n<h2 id=\"파이프에-바인딩된-데이터-변화감지\">파이프에 바인딩된 데이터 변화감지<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#파이프에-바인딩된-데이터-변화감지\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou use [data binding](/guide/glossary#data-binding \"Definition of data binding\") with a  pipe to display values and respond to user actions.\nIf the data is a primitive input value, such as `String` or `Number`, or an object reference as input, such as `Date` or `Array`, Angular executes the pipe whenever it detects a change for the input value or reference.\n\nFor example, you could change the previous custom pipe example to use two-way data binding with `ngModel` to input the amount and boost factor, as shown in the following code example.\n\n<code-example path=\"pipes/src/app/power-boost-calculator.component.ts\" header=\"src/app/power-boost-calculator.component.ts\">\nimport { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-power-boost-calculator&#39;,\n  template: `\n    &lt;h2&gt;Power Boost Calculator&lt;/h2&gt;\n    &lt;div&gt;Normal power: &lt;input [(ngModel)]=&quot;power&quot;&gt;&lt;/div&gt;\n    &lt;div&gt;Boost factor: &lt;input [(ngModel)]=&quot;factor&quot;&gt;&lt;/div&gt;\n    &lt;p&gt;\n      Super Hero Power: {{power | exponentialStrength: factor}}\n    &lt;/p&gt;\n  `\n})\nexport class PowerBoostCalculatorComponent {\n  power = 5;\n  factor = 1;\n}\n\n\n</code-example>\n\nThe `exponentialStrength` pipe executes every time the user changes the \"normal power\" value or the \"boost factor\", as shown in Figure 3.\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/pipes/power-boost-calculator-anim.gif' alt=\"Power Boost Calculator\">\n</div>\n\n**Figure 3.** Changing the amount and boost factor for the `exponentialStrength` pipe\n\nAngular detects each change and immediately runs the pipe.\nThis is fine for primitive input values.\nHowever, if you change something *inside* a composite object (such as the month of a date, an element of an array, or an object property), you need to understand how change detection works, and how to use an `impure` pipe.\n-->\n<p>파이프에 <a href=\"/guide/glossary#data-binding\" title=\"Definition of data binding\">데이터를 바인딩</a>하면 사용자의 동작에 반응하는 방식으로 파이프를 실행할 수 있습니다.\n이 때 파이프에 전달되는 인자가 <code>String</code>, <code>Number</code>와 같은 기본 자료형이라면 값이 변경될 때, <code>Date</code>, <code>Array</code>와 같은 객체 참조 형태라면 참조하는 객체가 변경될 때마다 파이프의 변환로직이 실행됩니다.</p>\n<p>그래서 이전 섹션에서 구현했던 커스텀 파이프에 <code><a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a></code>로 양방향 바인딩을 연결하면 다음과 같이 구현할 수 있습니다.</p>\n<code-example path=\"pipes/src/app/power-boost-calculator.component.ts\" header=\"src/app/power-boost-calculator.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-power-boost-calculator',\n  template: `\n    &#x3C;h2>Power Boost Calculator&#x3C;/h2>\n    &#x3C;div>Normal power: &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"power\">&#x3C;/div>\n    &#x3C;div>Boost factor: &#x3C;input [(<a href=\"api/forms/NgModel\" class=\"code-anchor\">ngModel</a>)]=\"factor\">&#x3C;/div>\n    &#x3C;p>\n      Super Hero Power: {{power | exponentialStrength: factor}}\n    &#x3C;/p>\n  `\n})\nexport class PowerBoostCalculatorComponent {\n  power = 5;\n  factor = 1;\n}\n\n\n</code-example>\n<p>이제 <code>exponentialStrength</code> 파이프는 그림 3처럼 사용자가 \"normal power\" 값이나 \"boost factor\" 값을 변경할 때마다 실행되는 것을 확인할 수 있습니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/pipes/power-boost-calculator-anim.gif\" alt=\"Power Boost Calculator\" width=\"296\" height=\"136\">\n</div>\n<p><strong>그림 3.</strong> 파이프 인자 값을 변경할 때 <code>exponentialStrength</code> 파이프가 동작하는 모습</p>\n<p>Angular는 인자값이 변경되거나 참조 객체가 변경되는 것을 감지할 때마다 파이프 함수를 다시 실행합니다.\n인자가 기본 자료형인 경우에는 크게 문제되지 않습니다.\n하지만 Date 객체의 월이 바뀌거나 배열 안에 있는 엘리먼트가 변경되는 경우, 오브젝트 프로퍼티가 변경되는 경우와 같이 객체 <em>안에 있는</em> 데이터가 변경되는 경우에는 파이프가 변화를 어떻게 감지하고 동작하는지 제대로 이해해야 합니다.\n그런 다음에는 순수하지 않은(impure) 파이프를 어떻게 사용하는지 알아봅시다.</p>\n<!--\n### How change detection works\n-->\n<h3 id=\"변화를-감지하는-방식\">변화를 감지하는 방식<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#변화를-감지하는-방식\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAngular looks for changes to data-bound values in a [change detection](guide/glossary#change-detection \"Definition of change detection\") process that runs after every DOM event: every keystroke, mouse move, timer tick, and server response.\nThe following example, which doesn't use a pipe, demonstrates how Angular uses its default change detection strategy to monitor and update its display of every hero in the `heroes` array.\nThe example tabs show the following:\n\n* In the `flying-heroes.component.html (v1)` template, the `*ngFor` repeater displays the hero names.\n* Its companion component class `flying-heroes.component.ts (v1)` provides heroes, adds heroes into the array, and resets the array.\n\n<code-tabs>\n  <code-pane header=\"src/app/flying-heroes.component.html (v1)\" region=\"template-1\" path=\"pipes/src/app/flying-heroes.component.html\">\nNew hero:\n  &lt;input type=&quot;text&quot; #box\n          (keyup.enter)=&quot;addHero(box.value); box.value=&#39;&#39;&quot;\n          placeholder=&quot;hero name&quot;&gt;\n  &lt;button (click)=&quot;reset()&quot;&gt;Reset&lt;/button&gt;\n  &lt;div *ngFor=&quot;let hero of heroes&quot;&gt;\n    {{hero.name}}\n  &lt;/div&gt;\n\n</code-pane>\n  <code-pane header=\"src/app/flying-heroes.component.ts (v1)\" region=\"v1\" path=\"pipes/src/app/flying-heroes.component.ts\">\nexport class FlyingHeroesComponent {\n  heroes: any[] = [];\n  canFly = true;\n  constructor() { this.reset(); }\n\n  addHero(name: string) {\n    name = name.trim();\n    if (!name) { return; }\n    const hero = {name, canFly: this.canFly};\n    this.heroes.push(hero);\n  }\n\n  reset() { this.heroes = HEROES.slice(); }\n}\n\n</code-pane>\n</code-tabs>\n\nAngular updates the display every time the user adds a hero.\nIf the user clicks the **Reset** button, Angular replaces `heroes` with a new array of the original heroes and updates the display.\nIf you add the ability to remove or change a hero, Angular would detect those changes and update the display as well.\n\nHowever, executing a pipe to update the display with every change would slow down your app's performance.\nSo Angular uses a faster change-detection algorithm for executing a pipe, as described in the next section.\n-->\n<p>Angular는 키입력, 마우스 이동, 타이머 만료, 서버 응답과 같은 DOM 이벤트가 발생할 때마다 <a href=\"guide/glossary#change-detection\" title=\"Definition of change detection\">변화 감지 동작</a>을 실행하고 바인딩된 데이터가 변경되었는지 검사합니다.\n아래 예제는 파이프를 사용하지 않았지만 Angular의 기본 변화 감지 로직이 어떻게 동작하는지 확인할 수 있는 예제 코드입니다.\n이런 내용을 확인해 보세요:</p>\n<ul>\n<li><code>flying-heroes.component.html (v1)</code> 템플릿에는 <code>heroes</code> 배열을 순회하기 위해 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 사용했습니다.</li>\n<li>컴포넌트 클래스 파일 <code>flying-heroes.component.ts (v1)</code>에는 템플릿에 사용할 <code>heroes</code> 배열이 선언되어 있으며, 이 배열에 히어로를 추가하거나 배열을 초기화하는 메서드도 정의되어 있습니다.</li>\n</ul>\n<code-tabs>\n  <code-pane header=\"src/app/flying-heroes.component.html (v1)\" region=\"template-1\" path=\"pipes/src/app/flying-heroes.component.html\">\nNew hero:\n  &#x3C;input type=\"text\" #box\n          (keyup.enter)=\"addHero(box.value); box.value=''\"\n          placeholder=\"hero name\">\n  &#x3C;button (click)=\"reset()\">Reset&#x3C;/button>\n  &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n    {{hero.name}}\n  &#x3C;/div>\n\n</code-pane>\n  <code-pane header=\"src/app/flying-heroes.component.ts (v1)\" region=\"v1\" path=\"pipes/src/app/flying-heroes.component.ts\">\nexport class FlyingHeroesComponent {\n  heroes: any[] = [];\n  canFly = true;\n  constructor() { this.reset(); }\n\n  addHero(name: string) {\n    name = name.trim();\n    if (!name) { return; }\n    const hero = {name, canFly: this.canFly};\n    this.heroes.push(hero);\n  }\n\n  reset() { this.heroes = HEROES.slice(); }\n}\n\n</code-pane>\n</code-tabs>\n<p>이제 사용자가 히어로를 추가하면 그 때마다 Angular가 화면을 갱신합니다.\n사용자가 <strong>Reset</strong> 버튼을 클릭하면 Angular가 <code>heroes</code> 배열을 새 배열로 교체하면서 이 때 변경된 내용도 화면에 표시됩니다.\n히어로 한명을 제거하거나 추가하는 경우에도 변경된 내용이 화면에 표시됩니다.</p>\n<p>그런데 화면이 갱신될때마다 파이프가 계속 실행되면 앱 성능을 저하할 수 있습니다.\n그래서 Angular는 파이프를 실행할 때 조금 다른 변화 감지 알고리즘을 사용합니다.\n다음 섹션에서 이 내용에 대해 알아봅시다.</p>\n<a id=\"pure-and-impure-pipes\"></a>\n<!--\n### Detecting pure changes to primitives and object references\n-->\n<h3 id=\"기본-자료형의-값이-변경되었는지-객체-참조가-변경되었는지-감지하기\">기본 자료형의 값이 변경되었는지, 객체 참조가 변경되었는지 감지하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#기본-자료형의-값이-변경되었는지-객체-참조가-변경되었는지-감지하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nBy default, pipes are defined as *pure* so that Angular executes the pipe only when it detects a *pure change* to the input value.\nA pure change is either a change to a primitive input value (such as `String`, `Number`, `Boolean`, or `Symbol`), or a changed object reference (such as `Date`, `Array`, `Function`, or `Object`).\n\n<a id=\"pure-pipe-pure-fn\"></a>\n\nA pure pipe must use a pure function, which is one that processes inputs and returns values without side effects.\nIn other words, given the same input, a pure function should always return the same output.\n\nWith a pure pipe, Angular ignores changes within composite objects, such as a newly added element of an existing array, because checking a primitive value or object reference is much faster than performing a deep check for differences within objects.\nAngular can quickly determine if it can skip executing the pipe and updating the view.\n\nHowever, a pure pipe with an array as input may not work the way you want.\nTo demonstrate this issue, change the previous example to filter the list of heroes to just those heroes who can fly.\nUse the `FlyingHeroesPipe` in the `*ngFor` repeater as shown in the following code.\nThe tabs for the example show the following:\n\n* The template (`flying-heroes.component.html (flyers)`) with the new pipe.\n* The `FlyingHeroesPipe` custom pipe implementation (`flying-heroes.pipe.ts`).\n\n<code-tabs>\n  <code-pane header=\"src/app/flying-heroes.component.html (flyers)\" region=\"template-flying-heroes\" path=\"pipes/src/app/flying-heroes.component.html\">\n&lt;div *ngFor=&quot;let hero of (heroes | flyingHeroes)&quot;&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-pane>\n  <code-pane header=\"src/app/flying-heroes.pipe.ts\" region=\"pure\" path=\"pipes/src/app/flying-heroes.pipe.ts\">\nimport { Pipe, PipeTransform } from &#39;@angular/core&#39;;\n\nimport { Flyer } from &#39;./heroes&#39;;\n\n@Pipe({ name: &#39;flyingHeroes&#39; })\nexport class FlyingHeroesPipe implements PipeTransform {\n  transform(allHeroes: Flyer[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n\nThe app now shows unexpected behavior: When the user adds flying heroes, none of them appear under \"Heroes who fly.\"\nThis happens because the code that adds a hero does so by pushing it onto the `heroes` array:\n\n<code-example path=\"pipes/src/app/flying-heroes.component.ts\" region=\"push\" header=\"src/app/flying-heroes.component.ts\">\nthis.heroes.push(hero);\n\n</code-example>\n\nThe change detector ignores changes to elements of an array, so the pipe doesn't run.\n\nThe reason Angular ignores the changed array element is that the *reference* to the array hasn't changed.\nSince the array is the same, Angular does not update the display.\n\nOne way to get the behavior you want is to change the object reference itself.\nYou can replace the array with a new array containing the newly changed elements, and then input the new array to the pipe.\nIn the above example, you can create an array with the new hero appended, and assign that to `heroes`. Angular detects the change in the array reference and executes the pipe.\n\nTo summarize, if you mutate the input array, the pure pipe doesn't execute.\nIf you *replace* the input array, the pipe executes and the display is updated, as shown in Figure 4.\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/pipes/flying-heroes-anim.gif' alt=\"Flying Heroes\">\n</div>\n\n**Figure 4.** The `flyingHeroes` pipe filtering the display to flying heroes\n\nThe above example demonstrates changing a component's code to accommodate a pipe.\n\nTo keep your component simpler and independent of HTML templates that use pipes, you can, as an alternative, use an *impure* pipe to detect changes within composite objects such as arrays, as described in the next section.\n-->\n<p>기본적으로 파이프는 <em>순수한(pure)</em> 상태로 정의되며 Angular는 이 파이프로 입력받는 값이 <em>정말 변경된 것(pure change)</em>을 감지할 때만 파이프 로직을 실행합니다.\n이 때 값이 정말 변경되었다는 것은 <code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Symbol</code>과 같은 기본 자료형의 값이 변경되었거나, <code>Date</code>, <code>Array</code>, <code>Function</code>, <code>Object</code>와 같은 객체 참조가 변경된 것을 의미합니다.</p>\n<a id=\"pure-pipe-pure-fn\"></a>\n<p>순수한 파이프(pure pipe)는 순수 함수(pure function)로 구현해야 하며, 이 말은 입력값을 받고 값을 반환할 때까지 외부의 영향을 받지 않아야 한다는 것을 의미합니다.\n이를 다르게 표현하면, 어떤 값이 입력된다면 언제나 값을 반환해야 한다는 것을 의미합니다.</p>\n<p>순수한 파이프를 사용하면 Angular는 객체 안에서 발생한 변화는 무시합니다.\n그래서 배열 참조가 그대로인 상태로 항목이 추가되는 것을 감지하지 않는데, 이는 객체를 깊이 검사(deep check)하는 것보다 객체 참조가 변경되는 것만 감지하는 것이 훨씬 빠르기 때문입니다.\n이 과정에서 변화가 감지되지 않으면 파이프 실행을 생략하고 넘어갑니다.</p>\n<p>하지만 이 때문에 순수한 파이프에 배열을 인자로 전달하면 예상한 대로 파이프가 실행되지 않습니다.\n이 현상을 확인하기 위해 이전에 만들었던 예제 코드를 살짝 바꿔서, 히어로 중에 날 수 있는 히어로만 필터링하는 파이프를 만들어 봅시다.\n<code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>로 <code>heroes</code> 배열을 순회할 때 <code>FlyingHeroesPipe</code>를 사용해서 다음과 같이 구현합니다:</p>\n<ul>\n<li>\n<p>새로 만드는 파이프는 템플릿 파일 <code>flying-heroes.component.html</code>에 사용합니다.</p>\n</li>\n<li>\n<p>커스텀 파이프 <code>FlyingHeroesPipe</code>는 <code>flying-heroes.pipe.ts</code> 파일에 구현합니다.</p>\n</li>\n</ul>\n<code-tabs>\n  <code-pane header=\"src/app/flying-heroes.component.html (비행할 수 있는 히어로)\" region=\"template-flying-heroes\" path=\"pipes/src/app/flying-heroes.component.html\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroes)\">\n  {{hero.name}}\n&#x3C;/div>\n\n</code-pane>\n  <code-pane header=\"src/app/flying-heroes.pipe.ts\" region=\"pure\" path=\"pipes/src/app/flying-heroes.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Flyer } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'flyingHeroes' })\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Flyer[]) {\n    return allHeroes.filter(hero => hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p>이렇게 구현하면 앱이 이상하게 동작합니다.\n사용자가 비행할 수 있는 히어로를 추가해도 이 히어로는 \"Heroes who fly.\" 아래에 표시되지 않습니다:</p>\n<code-example path=\"pipes/src/app/flying-heroes.component.ts\" region=\"push\" header=\"src/app/flying-heroes.component.ts\">\nthis.heroes.push(hero);\n\n</code-example>\n<p>Angular 변화 감지기(change detector)는 배열의 항목이 변경된 것을 감지하지 않기 때문에 파이프도 실행되지 않습니다.</p>\n<p>원인은 이전에 설명했듯이 <code>heroes</code> 배열을 <em>참조</em>하는 것은 그대로인 채로 배열 안에 항목을 추가했기 때문입니다.\n그래서 파이프 인자가 변경되지 않은 것으로 간주하고 화면을 갱신하지 않습니다.</p>\n<p>이 예제에서 참조하는 객체를 바꾸면 처음 의도한 대로 동작합니다.\n원래 배열에 있던 항목과 새로 추가된 항목을 더해서 새로운 배열을 생성하고 이 배열을 <code>heroes</code>에 할당한 후에 파이프의 인자로 전달하면 됩니다.\n그러면 파이프가 참조하는 배열이 변경되었기 때문에 Angular도 파이프 로직을 실행합니다.</p>\n<p>정리하자면, 순수한 파이프에 입력 배열을 인자로 전달하면 이 배열 참조가 변경되지 않는 이상 파이프가 동작하지 않습니다.\n이 경우에는 인자로 전달되는 배열 자체를 교체해야 합니다.\n그림 4에서 어떻게 동작하는지 확인해 보세요.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/pipes/flying-heroes-anim.gif\" alt=\"Flying Heroes\" width=\"360\" height=\"412\">\n</div>\n<p><strong>그림 4.</strong> <code>flyingHeroes</code> 파이프가 동작하는 모습</p>\n<p>이 예제를 통해 파이프와 컴포넌트가 어떻게 연동되는지 알아봤습니다.</p>\n<p>하지만 컴포넌트를 간단하게 유지하면서 HTML 템플릿과 분리된 상태를 유지하려는 용도로 파이프를 사용한다면, <em>순수하지 않은(impure)</em> 파이프를 사용해서 변화를 감지하는 방식이 더 나을 수 있습니다.\n이 내용은 다음 섹션에서 살펴봅시다.</p>\n<a id=\"impure-flying-heroes\"></a>\n<!--\n### Detecting impure changes within composite objects\n-->\n<h3 id=\"객체-안에서-변경된-내용-감지하기\">객체 안에서 변경된 내용 감지하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#객체-안에서-변경된-내용-감지하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nTo execute a custom pipe after a change *within* a composite object, such as a change to an element of an array, you need to define your pipe as `impure` to detect impure changes.\nAngular executes an impure pipe every time it detects a change with every keystroke or mouse movement.\n\n<div class=\"alert is-important\">\n\nWhile an impure pipe can be useful, be careful using one. A long-running impure pipe could dramatically slow down your app.\n\n</div>\n\nMake a pipe impure by setting its `pure` flag to `false`:\n\n<code-example path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pipe-decorator\" header=\"src/app/flying-heroes.pipe.ts\">\n@Pipe({\n  name: &#39;flyingHeroesImpure&#39;,\n  pure: false\n})\n\n</code-example>\n\nThe following code shows the complete implementation of `FlyingHeroesImpurePipe`, which extends `FlyingHeroesPipe` to inherit its characteristics.\nThe example shows that you don't have to change anything else—the only difference is setting the `pure` flag as `false` in the pipe metadata.\n\n<code-tabs>\n  <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesImpurePipe)\" region=\"impure\" path=\"pipes/src/app/flying-heroes.pipe.ts\">\n@Pipe({\n  name: &#39;flyingHeroesImpure&#39;,\n  pure: false\n})\nexport class FlyingHeroesImpurePipe extends FlyingHeroesPipe {}\n\n</code-pane>\n  <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesPipe)\" region=\"pure\" path=\"pipes/src/app/flying-heroes.pipe.ts\">\nimport { Pipe, PipeTransform } from &#39;@angular/core&#39;;\n\nimport { Flyer } from &#39;./heroes&#39;;\n\n@Pipe({ name: &#39;flyingHeroes&#39; })\nexport class FlyingHeroesPipe implements PipeTransform {\n  transform(allHeroes: Flyer[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n\n`FlyingHeroesImpurePipe` is a good candidate for an impure pipe because the `transform` function is trivial and fast:\n\n<code-example path=\"pipes/src/app/flying-heroes.pipe.ts\" header=\"src/app/flying-heroes.pipe.ts (filter)\" region=\"filter\">\nreturn allHeroes.filter(hero =&gt; hero.canFly);\n\n</code-example>\n\nYou can derive a `FlyingHeroesImpureComponent` from `FlyingHeroesComponent`.\nAs shown in the code below, only the pipe in the template changes.\n\n<code-example path=\"pipes/src/app/flying-heroes-impure.component.html\" header=\"src/app/flying-heroes-impure.component.html (excerpt)\" region=\"template-flying-heroes\">\n&lt;div *ngFor=&quot;let hero of (heroes | flyingHeroesImpure)&quot;&gt;\n  {{hero.name}}\n&lt;/div&gt;\n\n</code-example>\n\n<div class=\"alert is-helpful\">\n\n  To confirm that the display updates as the user adds heroes, see the <live-example></live-example>.\n\n</div>\n-->\n<p>배열 안에 있는 항목이 변경되는 것과 같이 객체 <em>안에서</em> 변경된 것을 감지해서 커스텀 파이프가 실행되려면 파이프를 순수하지 않게(impure) 선언해야 합니다.\n그러면 Angular 변화 감지가 동작하는 시점마다 순수하지 않은 파이프도 항상 실행됩니다.</p>\n<div class=\"alert is-important\">\n<p>순수하지 않은 파이프가 유용하긴 하지만 사용에 주의해야 합니다.\n이런 파이프 안에서 무거운 로직을 실행하면 앱 성능이 급격하게 저하될 수 있습니다.</p>\n</div>\n<p>순수하지 않은 파이프를 정의하려면 <code>pure</code> 플래그에 <code>false</code> 값을 지정하면 됩니다:</p>\n<code-example path=\"pipes/src/app/flying-heroes.pipe.ts\" region=\"pipe-decorator\" header=\"src/app/flying-heroes.pipe.ts\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  name: 'flyingHeroesImpure',\n  pure: false\n})\n\n</code-example>\n<p>아래 코드에서 <code>FlyingHeroesImpurePipe</code>는 <code>FlyingHeroesPipe</code>를 상속받도록 구현했습니다.\n따라서 파이프가 동작하는 로직은 모두 똑같고 파이프 메타데이터의 <code>pure</code> 플래그에 <code>false</code> 값을 지정한 것만 다릅니다.</p>\n<code-tabs>\n  <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesImpurePipe)\" region=\"impure\" path=\"pipes/src/app/flying-heroes.pipe.ts\">\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  name: 'flyingHeroesImpure',\n  pure: false\n})\nexport class FlyingHeroesImpurePipe extends FlyingHeroesPipe {}\n\n</code-pane>\n  <code-pane header=\"src/app/flying-heroes.pipe.ts (FlyingHeroesPipe)\" region=\"pure\" path=\"pipes/src/app/flying-heroes.pipe.ts\">\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\nimport { Flyer } from './heroes';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({ name: 'flyingHeroes' })\nexport class FlyingHeroesPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  transform(allHeroes: Flyer[]) {\n    return allHeroes.filter(hero => hero.canFly);\n  }\n}\n\n</code-pane>\n</code-tabs>\n<p>이 정도라면 <code>FlyingHeroesImpurePipe</code>에 있는 <code>transform()</code> 함수가 간단하고 실행도 빨리 끝나기 때문에 사용하기에 문제가 없습니다:</p>\n<code-example path=\"pipes/src/app/flying-heroes.pipe.ts\" header=\"src/app/flying-heroes.pipe.ts (필터)\" region=\"filter\">\nreturn allHeroes.filter(hero => hero.canFly);\n\n</code-example>\n<p><code>FlyingHeroesImpureComponent</code>는 <code>FlyingHeroesComponent</code>에 사용할 수 있습니다.\n아래 코드처럼 템플릿에서 사용하는 파이프를 변경하기만 하면 됩니다.</p>\n<code-example path=\"pipes/src/app/flying-heroes-impure.component.html\" header=\"src/app/flying-heroes-impure.component.html (일부)\" region=\"template-flying-heroes\">\n&#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of (heroes | flyingHeroesImpure)\">\n  {{hero.name}}\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><live-example></live-example>에서 히어로를 추가했을 때 화면이 갱신되는 것을 확인해 보세요.</p>\n</div>\n<a id=\"async-pipe\"></a>\n<!--\n## Unwrapping data from an observable\n-->\n<h2 id=\"옵저버블에서-데이터-추출하기\">옵저버블에서 데이터 추출하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#옵저버블에서-데이터-추출하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n[Observables](/guide/glossary#observable \"Definition of observable\") let you pass messages between parts of your application.\nObservables are recommended for event handling, asynchronous programming, and handling multiple values.\nObservables can deliver single or multiple values of any type, either synchronously (as a function delivers a value to its caller) or asynchronously on a schedule.\n\n<div class=\"alert is-helpful\">\n\nFor details and examples of observables, see the [Observables Overview](/guide/observables#using-observables-to-pass-values \"Using observables to pass values\"\").\n\n</div>\n\nUse the built-in [`AsyncPipe`](/api/common/AsyncPipe \"API description of AsyncPipe\") to accept an observable as input and subscribe to the input automatically.\nWithout this pipe, your component code would have to subscribe to the observable to consume its values, extract the resolved values, expose them for binding, and unsubscribe when the observable is destroyed in order to prevent memory leaks. `AsyncPipe` is an impure pipe that saves boilerplate code in your component to maintain the subscription and keep delivering values from that observable as they arrive.\n\nThe following code example binds an observable of message strings\n(`message$`) to a view with the `async` pipe.\n\n<code-example path=\"pipes/src/app/hero-async-message.component.ts\" header=\"src/app/hero-async-message.component.ts\">\nimport { Component } from &#39;@angular/core&#39;;\n\nimport { Observable, interval } from &#39;rxjs&#39;;\nimport { map, take } from &#39;rxjs/operators&#39;;\n\n@Component({\n  selector: &#39;app-hero-message&#39;,\n  template: `\n    &lt;h2&gt;Async Hero Message and AsyncPipe&lt;/h2&gt;\n    &lt;p&gt;Message: {{ message$ | async }}&lt;/p&gt;\n    &lt;button (click)=&quot;resend()&quot;&gt;Resend&lt;/button&gt;`,\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable&lt;string&gt;;\n\n  private messages = [\n    &#39;You are my hero!&#39;,\n    &#39;You are the best hero!&#39;,\n    &#39;Will you be my hero?&#39;\n  ];\n\n  constructor() { this.resend(); }\n\n  resend() {\n    this.message$ = interval(500).pipe(\n      map(i =&gt; this.messages[i]),\n      take(this.messages.length)\n    );\n  }\n}\n\n</code-example>\n-->\n<p><a href=\"/guide/glossary#observable\" title=\"Definition of observable\">옵저버블</a>은 애플리케이션 안에서 메시지를 전달하는 용도로 활용할 수 있습니다.\n그리고 옵저버블은 동기/비동기 방식을 선택해서 실행할 수 있으며 데이터를 여러번 전달할 수도 있기 때문에 이벤트를 처리할 때 자주 사용됩니다.</p>\n<div class=\"alert is-helpful\">\n<p>옵저버블에 대해 자세하게 알아보려면 <a href=\"/guide/observables#using-observables-to-pass-values\" title=\"Using observables to pass values&#x22;\">옵저버블 개요</a> 섹션을 참고하세요.</p>\n</div>\n<p>Angular가 제공하는 <a href=\"/api/common/AsyncPipe\" title=\"API description of AsyncPipe\"><code>AsyncPipe</code></a>를 사용하면서 파이프 인자로 옵저버블을 지정하면, 이 파이프는 옵저버블을 자동으로 구독하고 데이터를 추출해서 파이프 로직을 실행합니다.\n원래는 컴포넌트 코드에서 옵저버블을 구독해야 하고, 옵저버블로 전달되는 데이터를 추출해야 하며, 이 데이터를 템플릿에 바인딩해야 하고 옵저버블이 종료되었을 때 메모리 누수를 방지하기 위해 옵저버블 구독을 해지해야 합니다.\n<code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>는 사용하면 이 과정을 자동으로 처리하며, 옵저버블 객체를 처리할 수 있도록 순수하지 않은 파이프로 구현되었습니다.</p>\n<p>아래 예제 코드는 옵저버블 메시지 스트림 <code>message$</code>로 데이터를 전달받기 위해 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">async</a></code> 파이프를 사용하는 예제 코드입니다.</p>\n<code-example path=\"pipes/src/app/hero-async-message.component.ts\" header=\"src/app/hero-async-message.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Observable, interval } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-message',\n  template: `\n    &#x3C;h2>Async Hero Message and <a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a>&#x3C;/h2>\n    &#x3C;p>Message: {{ message$ | async }}&#x3C;/p>\n    &#x3C;button (click)=\"resend()\">Resend&#x3C;/button>`,\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable&#x3C;string>;\n\n  private messages = [\n    'You are my hero!',\n    'You are the best hero!',\n    'Will you be my hero?'\n  ];\n\n  constructor() { this.resend(); }\n\n  resend() {\n    this.message$ = interval(500).pipe(\n      map(i => this.messages[i]),\n      take(this.messages.length)\n    );\n  }\n}\n\n</code-example>\n<a id=\"no-filter-pipe\"></a>\n<!--\n## Caching HTTP requests\n-->\n<h2 id=\"http-요청-캐싱하기\">HTTP 요청 캐싱하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/pipes#http-요청-캐싱하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nTo [communicate with backend services using HTTP](/guide/http \"Communicating with backend services using HTTP\"), the `HttpClient` service uses observables and offers the `HTTPClient.get()` method to fetch data from a server.\nThe aynchronous method sends an HTTP request, and returns an observable that emits the requested data for the response.\n\nAs shown in the previous section, you can use the impure `AsyncPipe` to accept an observable as input and subscribe to the input automatically.\nYou can also create an impure pipe to make and cache an HTTP request.\n\nImpure pipes are called whenever change detection runs for a component, which could be every few milliseconds for `CheckAlways`.\nTo avoid performance problems, call the server only when the requested URL changes, as shown in the following example, and use the pipe to cache the server response.\nThe tabs show the following:\n\n* The `fetch` pipe (`fetch-json.pipe.ts`).\n* A harness component (`hero-list.component.ts`) for demonstrating the request, using a template that defines two bindings to the pipe requesting the heroes from the `heroes.json` file. The second binding chains the `fetch` pipe with the built-in `JsonPipe` to display the same hero data in JSON format.\n\n<code-tabs>\n  <code-pane header=\"src/app/fetch-json.pipe.ts\" path=\"pipes/src/app/fetch-json.pipe.ts\">\nimport { HttpClient } from &#39;@angular/common/http&#39;;\nimport { Pipe, PipeTransform } from &#39;@angular/core&#39;;\n\n@Pipe({\n  name: &#39;fetch&#39;,\n  pure: false\n})\nexport class FetchJsonPipe implements PipeTransform {\n  private cachedData: any = null;\n  private cachedUrl = &#39;&#39;;\n\n  constructor(private http: HttpClient) { }\n\n  transform(url: string): any {\n    if (url !== this.cachedUrl) {\n      this.cachedData = null;\n      this.cachedUrl = url;\n      this.http.get(url).subscribe(result =&gt; this.cachedData = result);\n    }\n\n    return this.cachedData;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/hero-list.component.ts\" path=\"pipes/src/app/hero-list.component.ts\">\nimport { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-hero-list&#39;,\n  template: `\n    &lt;h2&gt;Heroes from JSON File&lt;/h2&gt;\n\n    &lt;div *ngFor=&quot;let hero of (&#39;assets/heroes.json&#39; | fetch) &quot;&gt;\n      {{hero.name}}\n    &lt;/div&gt;\n\n    &lt;p&gt;Heroes as JSON:\n      {{&#39;assets/heroes.json&#39; | fetch | json}}\n    &lt;/p&gt;`\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n</code-tabs>\n\nIn the above example, a breakpoint on the pipe's request for data shows the following:\n\n* Each binding gets its own pipe instance.\n* Each pipe instance caches its own URL and data and calls the server only once.\n\nThe `fetch` and `fetch-json` pipes display the heroes as shown in Figure 5.\n\n<div class=\"lightbox\">\n  <img src='generated/images/guide/pipes/hero-list.png' alt=\"Hero List\">\n</div>\n\n**Figure 5.** The `fetch` and `fetch-json` pipes displaying the heroes\n\n<div class=\"alert is-helpful\">\n\nThe built-in [JsonPipe](api/common/JsonPipe \"API description for JsonPipe\") provides a way to diagnose a mysteriously failing data binding or to inspect an object for future binding.\n\n</div>\n-->\n<p><a href=\"/guide/http\" title=\"Communicating with backend services using HTTP\">백엔드 서비스와 HTTP로 통신</a>하려면 <code><a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a></code> 서비스가 제공하는 <code><a href=\"api/common/http/HttpClient#get\" class=\"code-anchor\">HttpClient.get()</a></code>와 같은 함수로 서버에서 데이터를 받아와야 하는데 이런 함수는 옵저버블을 반환합니다.</p>\n<p>이전 섹션에서 알아본 것처럼 <code><a href=\"api/common/AsyncPipe\" class=\"code-anchor\">AsyncPipe</a></code>는 순수하지 않은 파이프이며, 파이프 인자로 받은 옵저버블을 자동으로 구독하며 옵저버블로 전달된 데이터를 추출하는 것도 자동으로 합니다.\n이 방식을 활용하면 HTTP 요청을 보내고 캐싱하는 파이프를 만들 수 있습니다.</p>\n<p>순수하지 않은 파이프는 컴포넌트에서 변화감지 로직이 동작할 때마다 실행되기 때문에 몇 밀리초마다 실행될 수도 있습니다.\n이 때 성능이 저하되는 것을 피하려면 서버로 요청하는 URL이 변경될 때만 파이프 로직을 실행하고 서버에서 받은 응답을 캐싱하는 방법을 사용하는 것이 좋습니다.\n이 내용을 확인해 봅시다:</p>\n<ul>\n<li><code>fetch-json.pipe.ts</code> 파일에 <code>fetch</code> 파이프를 구현합니다.</li>\n<li>파이프를 사용해서 요청을 보내는 컴포넌트는 <code>hero-list.component.ts</code> 입니다. 이 컴포넌트 템플릿은 <code>heroes.json</code> 파일에서 히어로 목록을 파이프로 불러오는 코드가 두 번 사용되었는데, 두번째 사용된 코드에는 <code>fetch</code> 파이와 기본 파이프 <code><a href=\"api/common/JsonPipe\" class=\"code-anchor\">JsonPipe</a></code>를 사용해서 데이터를 JSON 형식으로 화면에 표시합니다.</li>\n</ul>\n<code-tabs>\n  <code-pane header=\"src/app/fetch-json.pipe.ts\" path=\"pipes/src/app/fetch-json.pipe.ts\">\nimport { <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a> } from '@angular/common/<a href=\"api/common/http\" class=\"code-anchor\">http</a>';\nimport { <a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>, <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> } from '@angular/core';\n\n@<a href=\"api/core/Pipe\" class=\"code-anchor\">Pipe</a>({\n  name: 'fetch',\n  pure: false\n})\nexport class FetchJsonPipe implements <a href=\"api/core/PipeTransform\" class=\"code-anchor\">PipeTransform</a> {\n  private cachedData: any = null;\n  private cachedUrl = '';\n\n  constructor(private <a href=\"api/common/http\" class=\"code-anchor\">http</a>: <a href=\"api/common/http/HttpClient\" class=\"code-anchor\">HttpClient</a>) { }\n\n  transform(url: string): any {\n    if (url !== this.cachedUrl) {\n      this.cachedData = null;\n      this.cachedUrl = url;\n      this.http.get(url).subscribe(result => this.cachedData = result);\n    }\n\n    return this.cachedData;\n  }\n}\n\n\n</code-pane>\n  <code-pane header=\"src/app/hero-list.component.ts\" path=\"pipes/src/app/hero-list.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-list',\n  template: `\n    &#x3C;h2>Heroes from JSON File&#x3C;/h2>\n\n    &#x3C;div *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of ('assets/heroes.json' | fetch) \">\n      {{hero.name}}\n    &#x3C;/div>\n\n    &#x3C;p>Heroes as JSON:\n      {{'assets/heroes.json' | fetch | <a href=\"api/common/JsonPipe\" class=\"code-anchor\">json</a>}}\n    &#x3C;/p>`\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n</code-tabs>\n<p>이 예제를 실행했을 때 파이프는 다음과 같이 동작합니다:</p>\n<ul>\n<li>파이프가 사용된 곳마다 개별 파이프 인스턴스가 생성됩니다.</li>\n<li>개별 파이프 인스턴스는 URL과 데이터를 캐싱하기 때문에 서버로 요청을 한 번만 보냅니다.</li>\n</ul>\n<p>그래서 그림 5와 같은 화면을 확인할 수 있습니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/pipes/hero-list.png\" alt=\"Hero List\" width=\"400\" height=\"232\">\n</div>\n<p><strong>그림 5.</strong> 파이프로 히어로 목록을 표시한 모습</p>\n<div class=\"alert is-helpful\">\n<p><a href=\"api/common/JsonPipe\" title=\"API description for JsonPipe\">JsonPipe</a>는 데이터 바인딩이 왜 실패했는지 확인하거나 바인딩할 객체를 미리 확인하는 용도로도 활용할 수 있습니다.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/bootstrapping\n - guide/glossary\n - guide/http\n - guide/template-expression-operators\n - guide/testing-pipes\n - start/start-data\n - tutorial/toh-pt1\n-->\n<!-- links from this doc:\n - /api/common#pipes\n - /api/common/AsyncPipe\n - /api/common/DecimalPipe\n - /api/common/SlicePipe\n - /api/core/Pipe\n - /api/core/PipeTransform\n - /guide/glossary#data-binding\n - /guide/glossary#decorator--decoration\n - /guide/glossary#observable\n - /guide/glossary#template-expression\n - /guide/http\n - /guide/i18n#i18n-pipes\n - /guide/observables#using-observables-to-pass-values\n - api/common/AsyncPipe\n - api/common/CurrencyPipe\n - api/common/DatePipe\n - api/common/JsonPipe\n - api/common/LowerCasePipe\n - api/common/NgForOf\n - api/common/PercentPipe\n - api/common/UpperCasePipe\n - api/common/http\n - api/common/http/HttpClient\n - api/common/http/HttpClient#get\n - api/core/Component\n - api/core/NgModule\n - api/core/Pipe\n - api/core/PipeTransform\n - api/forms/NgModel\n - cli\n - cli/generate#pipe\n - guide/glossary#case-types\n - guide/glossary#change-detection\n - guide/glossary#component\n - guide/glossary#pipe\n - guide/glossary#template\n - guide/glossary#typescript\n - guide/ngmodules\n - guide/pipes#http-요청-캐싱하기\n - guide/pipes#pipetransform-인터페이스-적용하기\n - guide/pipes#객체-안에서-변경된-내용-감지하기\n - guide/pipes#기본-자료형의-값이-변경되었는지-객체-참조가-변경되었는지-감지하기\n - guide/pipes#변화를-감지하는-방식\n - guide/pipes#사전지식\n - guide/pipes#예제-날짜-형식-지정하기\n - guide/pipes#예제-지수-변환하기\n - guide/pipes#예제-파이프-체이닝\n - guide/pipes#옵저버블에서-데이터-추출하기\n - guide/pipes#추가-형식-지정하기-체이닝하기\n - guide/pipes#커스텀-파이프-만들기\n - guide/pipes#클래스를-파이프로-지정하기\n - guide/pipes#템플릿에-파이프-사용하기\n - guide/pipes#파이프로-데이터-표시형식-변환하기\n - guide/pipes#파이프에-바인딩된-데이터-변화감지\n - guide/styleguide#pipe-names\n - guide/template-expression-operators#pipe\n - https://github.com/angular/angular/edit/master/aio/content/guide/pipes.md?message=docs%3A%20describe%20your%20change...\n-->"
}