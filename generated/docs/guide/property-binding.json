{
  "id": "guide/property-binding",
  "title": "Property binding [property]",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/property-binding.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"property-binding-property\">Property binding <code>[property]</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#property-binding-property\"><i class=\"material-icons\">link</i></a></h1>\n<p>Use property binding to <em>set</em> properties of target elements or\ndirective <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code> decorators.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example></live-example> for a working example containing the code snippets in this guide.</p>\n</div>\n<h2 id=\"one-way-in\">One-way in<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#one-way-in\"><i class=\"material-icons\">link</i></a></h2>\n<p>Property binding flows a value in one direction,\nfrom a component's property into a target element property.</p>\n<p>You can't use property\nbinding to read or pull values out of target elements. Similarly, you cannot use\nproperty binding to call a method on the target element.\nIf the element raises events, you can listen to them with an <a href=\"guide/event-binding\">event binding</a>.</p>\n<p>If you must read a target element property or call one of its methods,\nsee the API reference for <a href=\"api/core/ViewChild\">ViewChild</a> and\n<a href=\"api/core/ContentChild\">ContentChild</a>.</p>\n<h2 id=\"examples\">Examples<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#examples\"><i class=\"material-icons\">link</i></a></h2>\n<p>The most common property binding sets an element property to a component\nproperty value. An example is\nbinding the <code>src</code> property of an image element to a component's <code>itemImageUrl</code> property:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p>Here's an example of binding to the <code>colSpan</code> property. Notice that it's not <code>colspan</code>,\nwhich is the attribute, spelled with a lowercase <code>s</code>.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"colSpan\" header=\"src/app/app.component.html\">\n&#x3C;!-- colSpan 프로퍼티는 캐멀 케이스입니다. -->\n&#x3C;tr>&#x3C;td [colSpan]=\"2\">Span 2 columns&#x3C;/td>&#x3C;/tr>\n\n</code-example>\n<p>For more details, see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\">MDN HTMLTableCellElement</a> documentation.</p>\n<p>For more information about <code>colSpan</code> and <code>colspan</code>, see the <a href=\"guide/attribute-binding#colspan\">Attribute binding</a> guide.</p>\n<p>Another example is disabling a button when the component says that it <code>isUnchanged</code>:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"disabled-button\" header=\"src/app/app.component.html\">\n&#x3C;!-- 버튼의 활성화 여부를 `isUnchanged` 프로퍼티와 바인딩합니다. -->\n&#x3C;button [disabled]=\"isUnchanged\">Disabled Button&#x3C;/button>\n\n</code-example>\n<p>Another is setting a property of a directive:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"classes\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the classes property making this blue&#x3C;/p>\n\n</code-example>\n<p>Yet another is setting the model property of a custom component—a great way\nfor parent and child components to communicate:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<h2 id=\"binding-targets\">Binding targets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#binding-targets\"><i class=\"material-icons\">link</i></a></h2>\n<p>An element property between enclosing square brackets identifies the target property.\nThe target property in the following code is the image element's <code>src</code> property.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"itemImageUrl\">\n\n</code-example>\n<p>There's also the <code>bind-</code> prefix alternative:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"bind-prefix\" header=\"src/app/app.component.html\">\n&#x3C;img bind-src=\"itemImageUrl\">\n\n</code-example>\n<p>In most cases, the target name is the name of a property, even\nwhen it appears to be the name of an attribute.\nSo in this case, <code>src</code> is the name of the <code>&#x3C;img></code> element property.</p>\n<p>Element properties may be the more common targets,\nbut Angular looks first to see if the name is a property of a known directive,\nas it is in the following example:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"class-binding\" header=\"src/app/app.component.html\">\n&#x3C;p [<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>]=\"classes\">[<a href=\"api/common/NgClass\" class=\"code-anchor\">ngClass</a>] binding to the classes property making this blue&#x3C;/p>\n\n</code-example>\n<p>Technically, Angular is matching the name to a directive <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>,\none of the property names listed in the directive's <code>inputs</code> array\nor a property decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>.\nSuch inputs map to the directive's own properties.</p>\n<p>If the name fails to match a property of a known directive or element, Angular reports an “unknown directive” error.</p>\n<div class=\"alert is-helpful\">\n<p>Though the target name is usually the name of a property,\nthere is an automatic attribute-to-property mapping in Angular for\nseveral common attributes. These include <code>class</code>/<code>className</code>, <code>innerHtml</code>/<code>innerHTML</code>, and\n<code>tabindex</code>/<code>tabIndex</code>.</p>\n</div>\n<h2 id=\"avoid-side-effects\">Avoid side effects<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#avoid-side-effects\"><i class=\"material-icons\">link</i></a></h2>\n<p>Evaluation of a template expression should have no visible side effects.\nThe expression language itself, or the way you write template expressions,\nhelps to a certain extent;\nyou can't assign a value to anything in a property binding expression\nnor use the increment and decrement operators.</p>\n<p>For example, you could have an expression that invoked a property or method that had\nside effects. The expression could call something like <code>getFoo()</code> where only you\nknow what <code>getFoo()</code> does. If <code>getFoo()</code> changes something\nand you happen to be binding to that something,\nAngular may or may not display the changed value. Angular may detect the\nchange and throw a warning error.\nAs a best practice, stick to properties and to methods that return\nvalues and avoid side effects.</p>\n<h2 id=\"return-the-proper-type\">Return the proper type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#return-the-proper-type\"><i class=\"material-icons\">link</i></a></h2>\n<p>The template expression should evaluate to the type of value\nthat the target property expects.\nReturn a string if the target property expects a string, a number if it\nexpects a number, an object if it expects an object, and so on.</p>\n<p>In the following example, the <code>childItem</code> property of the <code>ItemDetailComponent</code> expects a string, which is exactly what you're sending in the property binding:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"model-property-binding\" header=\"src/app/app.component.html\">\n&#x3C;app-item-detail [childItem]=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>You can confirm this by looking in the <code>ItemDetailComponent</code> where the <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a></code> type is set to a string:\n<code-example path=\"property-binding/src/app/item-detail/item-detail.component.ts\" region=\"input-type\" header=\"src/app/item-detail/item-detail.component.ts (setting the @Input() type)\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() childItem: string;\n\n</code-example></p>\n<p>As you can see here, the <code>parentItem</code> in <code>AppComponent</code> is a string, which the <code>ItemDetailComponent</code> expects:\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"parent-data-type\" header=\"src/app/app.component.ts\">\nparentItem = 'lamp';\n\n</code-example></p>\n<h3 id=\"passing-in-an-object\">Passing in an object<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#passing-in-an-object\"><i class=\"material-icons\">link</i></a></h3>\n<p>The previous simple example showed passing in a string. To pass in an object,\nthe syntax and thinking are the same.</p>\n<p>In this scenario, <code>ItemListComponent</code> is nested within <code>AppComponent</code> and the <code>items</code> property expects an array of objects.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"pass-object\" header=\"src/app/app.component.html\">\n&#x3C;app-item-list [items]=\"currentItems\">&#x3C;/app-item-list>\n\n</code-example>\n<p>The <code>items</code> property is declared in the <code>ItemListComponent</code> with a type of <code>Item</code> and decorated with <code>@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>()</code>:</p>\n<code-example path=\"property-binding/src/app/item-list/item-list.component.ts\" region=\"item-input\" header=\"src/app/item-list.component.ts\">\n@<a href=\"api/core/Input\" class=\"code-anchor\">Input</a>() items: Item[];\n\n</code-example>\n<p>In this sample app, an <code>Item</code> is an object that has two properties; an <code>id</code> and a <code>name</code>.</p>\n<code-example path=\"property-binding/src/app/item.ts\" region=\"item-class\" header=\"src/app/item.ts\">\nexport interface Item {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p>While a list of items exists in another file, <code>mock-items.ts</code>, you can\nspecify a different item in <code>app.component.ts</code> so that the new item will render:</p>\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"pass-object\" header=\"src/app.component.ts\">\ncurrentItems = [{\n  id: 21,\n  name: 'phone'\n}];\n\n</code-example>\n<p>You just have to make sure, in this case, that you're supplying an array of objects because that's the type of <code>Item</code> and is what the nested component, <code>ItemListComponent</code>, expects.</p>\n<p>In this example, <code>AppComponent</code> specifies a different <code>item</code> object\n(<code>currentItems</code>) and passes it to the nested <code>ItemListComponent</code>. <code>ItemListComponent</code> was able to use <code>currentItems</code> because it matches what an <code>Item</code> object is according to <code>item.ts</code>. The <code>item.ts</code> file is where\n<code>ItemListComponent</code> gets its definition of an <code>item</code>.</p>\n<h2 id=\"remember-the-brackets\">Remember the brackets<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#remember-the-brackets\"><i class=\"material-icons\">link</i></a></h2>\n<p>The brackets, <code>[]</code>, tell Angular to evaluate the template expression.\nIf you omit the brackets, Angular treats the string as a constant\nand <em>initializes the target property</em> with that string:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"no-evaluation\" header=\"src/app.component.html\">\n&#x3C;app-item-detail childItem=\"parentItem\">&#x3C;/app-item-detail>\n\n</code-example>\n<p>Omitting the brackets will render the string\n<code>parentItem</code>, not the value of <code>parentItem</code>.</p>\n<h2 id=\"one-time-string-initialization\">One-time string initialization<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#one-time-string-initialization\"><i class=\"material-icons\">link</i></a></h2>\n<p>You <em>should</em> omit the brackets when all of the following are true:</p>\n<ul>\n<li>The target property accepts a string value.</li>\n<li>The string is a fixed value that you can put directly into the template.</li>\n<li>This initial value never changes.</li>\n</ul>\n<p>You routinely initialize attributes this way in standard HTML, and it works\njust as well for directive and component property initialization.\nThe following example initializes the <code>prefix</code> property of the <code>StringInitComponent</code> to a fixed string,\nnot a template expression. Angular sets it and forgets about it.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"string-init\" header=\"src/app/app.component.html\">\n&#x3C;app-string-init prefix=\"This is a one-time initialized string.\">&#x3C;/app-string-init>\n\n</code-example>\n<p>The <code>[item]</code> binding, on the other hand, remains a live binding to the component's <code>currentItems</code> property.</p>\n<h2 id=\"property-binding-vs-interpolation\">Property binding vs. interpolation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#property-binding-vs-interpolation\"><i class=\"material-icons\">link</i></a></h2>\n<p>You often have a choice between interpolation and property binding.\nThe following binding pairs do the same thing:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"property-binding-interpolation\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;img src=\"{{itemImageUrl}}\"> is the &#x3C;i>interpolated&#x3C;/i> image.&#x3C;/p>\n&#x3C;p>&#x3C;img [src]=\"itemImageUrl\"> is the &#x3C;i>property bound&#x3C;/i> image.&#x3C;/p>\n\n&#x3C;p>&#x3C;span>\"{{interpolationTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> title.&#x3C;/span>&#x3C;/p>\n&#x3C;p>\"&#x3C;span [innerHTML]=\"propertyTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation is a convenient alternative to property binding in\nmany cases. When rendering data values as strings, there is no\ntechnical reason to prefer one form to the other, though readability\ntends to favor interpolation. However, <em>when setting an element\nproperty to a non-string data value, you must use property binding</em>.</p>\n<h2 id=\"content-security\">Content security<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/property-binding#content-security\"><i class=\"material-icons\">link</i></a></h2>\n<p>Imagine the following malicious content.</p>\n<code-example path=\"property-binding/src/app/app.component.ts\" region=\"malicious-content\" header=\"src/app/app.component.ts\">\nevilTitle = 'Template &#x3C;script>alert(\"evil never sleeps\")&#x3C;/script> Syntax';\n\n</code-example>\n<p>In the component template, the content might be used with interpolation:</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-interpolated\" header=\"src/app/app.component.html\">\n&#x3C;p>&#x3C;span>\"{{evilTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> evil title.&#x3C;/span>&#x3C;/p>\n\n</code-example>\n<p>Fortunately, Angular data binding is on alert for dangerous HTML. In the above case,\nthe HTML displays as is, and the Javascript does not execute. Angular <strong>does not</strong>\nallow HTML with script tags to leak into the browser, neither with interpolation\nnor property binding.</p>\n<p>In the following example, however, Angular <a href=\"guide/security#sanitization-and-security-contexts\">sanitizes</a>\nthe values before displaying them.</p>\n<code-example path=\"property-binding/src/app/app.component.html\" region=\"malicious-content\" header=\"src/app/app.component.html\">\n &#x3C;!--\n Angular가 아래와 같이 위험한 코드를 발견하면 경고를 표시합니다.\n WARNING: 안전성 검사를 우회하는 방법은 http://g.co/ng/security#xss 를 참고하세요.\n-->\n &#x3C;p>\"&#x3C;span [innerHTML]=\"evilTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> evil title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation handles the <code>&#x3C;script></code> tags differently than\nproperty binding but both approaches render the\ncontent harmlessly. The following is the browser output\nof the <code>evilTitle</code> examples.</p>\n<code-example language=\"bash\">\n\"Template <script>alert(\"evil never sleeps\")</script> Syntax\" is the interpolated evil title.\n\"Template alert(\"evil never sleeps\")Syntax\" is the property bound evil title.\n</code-example>\n\n</div>\n\n<!-- links to this doc:\n - guide/ajs-quick-reference\n - guide/architecture-components\n - guide/attribute-binding\n - guide/event-binding\n - guide/glossary\n - guide/inputs-outputs\n - guide/router\n - guide/template-syntax\n - tutorial/toh-pt3\n-->\n<!-- links from this doc:\n - api/common/NgClass\n - api/core/ContentChild\n - api/core/Input\n - api/core/ViewChild\n - guide/attribute-binding#colspan\n - guide/event-binding\n - guide/property-binding#avoid-side-effects\n - guide/property-binding#binding-targets\n - guide/property-binding#content-security\n - guide/property-binding#examples\n - guide/property-binding#one-time-string-initialization\n - guide/property-binding#one-way-in\n - guide/property-binding#passing-in-an-object\n - guide/property-binding#property-binding-property\n - guide/property-binding#property-binding-vs-interpolation\n - guide/property-binding#remember-the-brackets\n - guide/property-binding#return-the-proper-type\n - guide/security#sanitization-and-security-contexts\n - https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement\n - https://github.com/angular/angular/edit/master/aio/content/guide/property-binding.md?message=docs%3A%20describe%20your%20change...\n-->"
}