{
  "id": "guide/web-worker",
  "title": "Angular CLI로 웹 워커 사용하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/web-worker.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Using web workers with Angular CLI\n-->\n<h1 id=\"angular-cli로-웹-워커-사용하기\">Angular CLI로 웹 워커 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#angular-cli로-웹-워커-사용하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\n[Web workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) allow you to run CPU intensive computations in a background thread, freeing the main thread to update the user interface.\n\nIf you find your application becomes unresponsive while processing data, using web workers can help.\n-->\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\">웹 워커(Web workers)</a>를 사용하면 CPU 연산이 많은 작업을 백그라운드 스레드에서 실행할 수 있습니다.\n따라서 사용자가 머무는 메인 스레드는 이 연산의 영향을 받지 않고 제 성능을 유지할 수 있습니다.</p>\n<p>데이터를 처리하느라 애플리케이션이 멈추는 현상이 있으면 웹 워커를 사용하는 것을 검토해 보세요.</p>\n<!--\n## Adding a web worker\n-->\n<h2 id=\"웹-워커-추가하기\">웹 워커 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#웹-워커-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nYou can add a web worker anywhere in your application. If the file that contains your expensive computation is `src/app/app.component.ts`, you can add a web worker using `ng generate web-worker app`.\n\nRunning this command will:\n\n- configure your project to use web workers, if it isn't already.\n- add `src/app/app.worker.ts` with scaffolded code to receive messages:\n\n  <code-example language=\"typescript\" header=\"src/app/app.worker.ts\">\n  addEventListener('message', ({ data }) => {\n    const response = `worker response to ${data}`;\n    postMessage(response);\n  });\n </code-example>\n\n- add scaffolded code to `src/app/app.component.ts` to use the worker:\n\n  <code-example language=\"typescript\" header=\"src/app/app.component.ts\">\n  if (typeof Worker !== 'undefined') {\n    // Create a new\n    const worker = new Worker('./app.worker', { type: 'module' });\n    worker.onmessage = ({ data }) => {\n      console.log(`page got message: ${data}`);\n    };\n    worker.postMessage('hello');\n  } else {\n    // Web workers are not supported in this environment.\n    // You should add a fallback so that your program still executes correctly.\n  }\n  </code-example>\n\nAfter the initial scaffolding, you will need to refactor your code to use the web worker by sending messages to and from.\n-->\n<p>웹 워커는 애플리케이션 아래 어디든 둘 수 있습니다.\n예를 들면, 복잡한 작업을 하는 파일이 <code>src/app/app.component.ts</code> 파일이라면 <code>ng generate web-worker app</code> 명령을 실행해서 추가할 수 있습니다.</p>\n<p>이 명령을 실행하면:</p>\n<ul>\n<li>\n<p>프로젝트에 웹 워커 설정이 추가됩니다. 이미 설정되어 있다면 변경하지 않습니다.</p>\n</li>\n<li>\n<p><code>src/app/app.worker.ts</code> 파일이 생성됩니다. 이 파일의 내용은 이렇습니다:</p>\n <code-example language=\"typescript\" header=\"src/app/app.worker.ts\">\n addEventListener('<a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>', ({ data }) => {\n   const response = `worker response to ${data}`;\n   postMessage(response);\n });\n</code-example>\n</li>\n<li>\n<p>이 코드는 <code>src/app/app.component.ts</code> 파일이 다음과 같이 로드해서 실행합니다:</p>\n<code-example language=\"typescript\" header=\"src/app/app.component.ts\">\nif (typeof Worker !== 'undefined') {\n  // 웹 워커를 새로 만듭니다.\n  const worker = new Worker('./app.worker', { type: 'module' });\n  worker.onmessage = ({ data }) => {\n    console.log(`page got <a href=\"api/common/http/HttpErrorResponse#message\" class=\"code-anchor\">message</a>: ${data}`);\n  };\n  worker.postMessage('hello');\n} else {\n  // 웹워커를 지원하지 않는 환경에서 실행할 로직을 작성합니다.\n}\n</code-example>\n</li>\n</ul>\n<p>기본 코드가 이렇게 구성되고 나면 이제부터 애플리케이션 코드와 웹 워커가 메시지를 주고 받는 방식으로 원하는 로직을 구현하면 됩니다.</p>\n<!--\n## Caveats\n-->\n<h2 id=\"주의할-점\">주의할 점<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/web-worker#주의할-점\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThere are two important things to keep in mind when using web workers in Angular projects:\n\n- Some environments or platforms, like `@angular/platform-server` used in [Server-side Rendering](guide/universal), don't support web workers. You have to provide a fallback mechanism to perform the computations that the worker would perform to ensure your application will work in these environments.\n- Running Angular itself in a web worker via [**@angular/platform-webworker**](api/platform-webworker) is not yet supported in Angular CLI.\n-->\n<p>Angular 프로젝트에서 웹 워커를 사용할 때 주의할 점이 두 가지 있습니다:</p>\n<ul>\n<li>\n<p>일부 실행환경이나 플랫폼은 웹 워커를 지원하지 않습니다. <a href=\"guide/universal\">서버-사이드 렌더링</a> 할 때 사용하는<code>@angular/platform-server</code>도 그렇습니다. 이런 환경에서도 애플리케이션이 제대로 동작할 수 있도록 웹 워커를 사용하지 않는 로직을 준비해야 합니다.</p>\n</li>\n<li>\n<p><a href=\"api/platform-webworker\"><strong>@angular/platform-webworker</strong></a>를 사용해서 웹 워커 안에 다시 Angular를 실행하는 방식은 아직 지원하지 않습니다.</p>\n</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/deprecations\n-->\n<!-- links from this doc:\n - api/common/http/HttpErrorResponse#message\n - api/platform-webworker\n - guide/universal\n - guide/web-worker#angular-cli로-웹-워커-사용하기\n - guide/web-worker#웹-워커-추가하기\n - guide/web-worker#주의할-점\n - https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\n - https://github.com/angular/angular/edit/master/aio/content/guide/web-worker.md?message=docs%3A%20describe%20your%20change...\n-->"
}