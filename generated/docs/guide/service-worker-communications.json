{
  "id": "guide/service-worker-communications",
  "title": "Service worker communication",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/service-worker-communications.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"service-worker-communication\">Service worker communication<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#service-worker-communication\"><i class=\"material-icons\">link</i></a></h1>\n<p>Importing <code><a href=\"api/service-worker/ServiceWorkerModule\" class=\"code-anchor\">ServiceWorkerModule</a></code> into your <code>AppModule</code> doesn't just register the service worker, it also provides a few services you can use to interact with the service worker and control the caching of your app.</p>\n<h4 id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#prerequisites\"><i class=\"material-icons\">link</i></a></h4>\n<p>A basic understanding of the following:</p>\n<ul>\n<li><a href=\"guide/service-worker-getting-started\">Getting Started with Service Workers</a>.</li>\n</ul>\n<hr>\n<h2 id=\"swupdate-service\"><code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code> service<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#swupdate-service\"><i class=\"material-icons\">link</i></a></h2>\n<p>The <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code> service gives you access to events that indicate when the service worker has discovered an available update for your app or when it has activated such an updateâ€”meaning it is now serving content from that update to your app.</p>\n<p>The <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code> service supports four separate operations:</p>\n<ul>\n<li>Getting notified of <em>available</em> updates. These are new versions of the app to be loaded if the page is refreshed.</li>\n<li>Getting notified of update <em>activation</em>. This is when the service worker starts serving a new version of the app immediately.</li>\n<li>Asking the service worker to check the server for new updates.</li>\n<li>Asking the service worker to activate the latest version of the app for the current tab.</li>\n</ul>\n<h3 id=\"available-and-activated-updates\">Available and activated updates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#available-and-activated-updates\"><i class=\"material-icons\">link</i></a></h3>\n<p>The two update events, <code>available</code> and <code><a href=\"api/service-worker/SwUpdate#activated\" class=\"code-anchor\">activated</a></code>, are <code>Observable</code> properties of <code><a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a></code>:</p>\n<code-example path=\"service-worker-getting-started/src/app/log-update.service.ts\" linenums=\"false\" header=\"log-update.service.ts\" region=\"sw-update\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class LogUpdateService {\n\n  constructor(updates: <a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>) {\n    updates.available.subscribe(event => {\n      console.log('current version is', event.current);\n      console.log('available version is', event.available);\n    });\n    updates.activated.subscribe(event => {\n      console.log('old version was', event.previous);\n      console.log('new version is', event.current);\n    });\n  }\n}\n\n</code-example>\n<p>You can use these events to notify the user of a pending update or to refresh their pages when the code they are running is out of date.</p>\n<h3 id=\"checking-for-updates\">Checking for updates<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#checking-for-updates\"><i class=\"material-icons\">link</i></a></h3>\n<p>It's possible to ask the service worker to check if any updates have been deployed to the server. You might choose to do this if you have a site that changes frequently or want updates to happen on a schedule.</p>\n<p>Do this with the <code><a href=\"api/service-worker/SwUpdate#checkForUpdate\" class=\"code-anchor\">checkForUpdate()</a></code> method:</p>\n<code-example path=\"service-worker-getting-started/src/app/check-for-update.service.ts\" linenums=\"false\" header=\"check-for-update.service.ts\">\nimport { <a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>, <a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a> } from '@angular/core';\nimport { <a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a> } from '@angular/service-worker';\nimport { concat, interval } from 'rxjs';\nimport { first } from 'rxjs/operators';\n\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class CheckForUpdateService {\n\n  constructor(appRef: <a href=\"api/core/ApplicationRef\" class=\"code-anchor\">ApplicationRef</a>, updates: <a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>) {\n    // Allow the app to stabilize first, before starting polling for updates with `interval()`.\n    const appIsStable$ = appRef.isStable.pipe(first(isStable => isStable === true));\n    const everySixHours$ = interval(6 * 60 * 60 * 1000);\n    const everySixHoursOnceAppIsStable$ = concat(appIsStable$, everySixHours$);\n\n    everySixHoursOnceAppIsStable$.subscribe(() => updates.checkForUpdate());\n  }\n}\n\n\n</code-example>\n<p>This method returns a <code>Promise</code> which indicates that the update check has completed successfully, though it does not indicate whether an update was discovered as a result of the check. Even if one is found, the service worker must still successfully download the changed files, which can fail. If successful, the <code>available</code> event will indicate availability of a new version of the app.</p>\n<div class=\"alert is-important\">\n<p>In order to avoid negatively affecting the initial rendering, <code><a href=\"api/service-worker/ServiceWorkerModule\" class=\"code-anchor\">ServiceWorkerModule</a></code> will by default\nwait for the app to stabilize, before registering the ServiceWorker script. Constantly polling for\nupdates, e.g. with <code>interval()</code>, will prevent the app from stabilizing and the ServiceWorker\nscript will never be registered with the browser.</p>\n<p>You can avoid that by waiting for the app to stabilize first, before starting to poll for updates\n(as shown in the example above).</p>\n</div>\n<h3 id=\"forcing-update-activation\">Forcing update activation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#forcing-update-activation\"><i class=\"material-icons\">link</i></a></h3>\n<p>If the current tab needs to be updated to the latest app version immediately, it can ask to do so with the <code><a href=\"api/service-worker/SwUpdate#activateUpdate\" class=\"code-anchor\">activateUpdate()</a></code> method:</p>\n<code-example path=\"service-worker-getting-started/src/app/prompt-update.service.ts\" linenums=\"false\" header=\"prompt-update.service.ts\" region=\"sw-activate\">\n@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a>()\nexport class PromptUpdateService {\n\n  constructor(updates: <a href=\"api/service-worker/SwUpdate\" class=\"code-anchor\">SwUpdate</a>) {\n    updates.available.subscribe(event => {\n      if (promptUser(event)) {\n        updates.activateUpdate().then(() => document.location.reload());\n      }\n    });\n  }\n}\n\n</code-example>\n<p>Doing this could break lazy-loading into currently running apps, especially if the lazy-loaded chunks use filenames with hashes, which change every version.</p>\n<h2 id=\"more-on-angular-service-workers\">More on Angular service workers<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/service-worker-communications#more-on-angular-service-workers\"><i class=\"material-icons\">link</i></a></h2>\n<p>You may also be interested in the following:</p>\n<ul>\n<li><a href=\"guide/service-worker-devops\">Service Worker in Production</a>.</li>\n</ul>\n\n</div>\n\n<!-- links to this doc:\n - guide/service-worker-devops\n - guide/service-worker-getting-started\n-->\n<!-- links from this doc:\n - api/core/ApplicationRef\n - api/core/Injectable\n - api/service-worker/ServiceWorkerModule\n - api/service-worker/SwUpdate\n - api/service-worker/SwUpdate#activateUpdate\n - api/service-worker/SwUpdate#activated\n - api/service-worker/SwUpdate#checkForUpdate\n - guide/service-worker-communications#available-and-activated-updates\n - guide/service-worker-communications#checking-for-updates\n - guide/service-worker-communications#forcing-update-activation\n - guide/service-worker-communications#more-on-angular-service-workers\n - guide/service-worker-communications#prerequisites\n - guide/service-worker-communications#service-worker-communication\n - guide/service-worker-communications#swupdate-service\n - guide/service-worker-devops\n - guide/service-worker-getting-started\n - https://github.com/angular/angular/edit/master/aio/content/guide/service-worker-communications.md?message=docs%3A%20describe%20your%20change...\n-->"
}