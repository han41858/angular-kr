{
  "id": "guide/template-statements",
  "title": "Template statements",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/template-statements.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<h1 id=\"template-statements\">Template statements<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#template-statements\"><i class=\"material-icons\">link</i></a></h1>\n<p>A template <strong>statement</strong> responds to an <strong>event</strong> raised by a binding target\nsuch as an element, component, or directive.</p>\n<div class=\"alert is-helpful\">\n<p>See the <live-example name=\"template-syntax\">Template syntax</live-example> for\nthe syntax and code snippets in this guide.</p>\n</div>\n<p>The following template statement appears in quotes to the right of the <code>=</code>Â symbol as in <code>(event)=\"statement\"</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p>A template statement <em>has a side effect</em>.\nThat's the whole point of an event.\nIt's how you update application state from user action.</p>\n<p>Responding to events is the other side of Angular's \"unidirectional data flow\".\nYou're free to change anything, anywhere, during this turn of the event loop.</p>\n<p>Like template expressions, template <em>statements</em> use a language that looks like JavaScript.\nThe template statement parser differs from the template expression parser and\nspecifically supports both basic assignment (<code>=</code>) and chaining expressions with <code>;</code>.</p>\n<p>However, certain JavaScript and template expression syntax is not allowed:</p>\n<ul>\n<li><code>new</code></li>\n<li>increment and decrement operators, <code>++</code> and <code>--</code></li>\n<li>operator assignment, such as <code>+=</code> and <code>-=</code></li>\n<li>the bitwise operators, such as <code>|</code> and <code>&#x26;</code></li>\n<li>the <a href=\"guide/template-expression-operators#pipe\">pipe operator</a></li>\n</ul>\n<h2 id=\"statement-context\">Statement context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-context\"><i class=\"material-icons\">link</i></a></h2>\n<p>As with expressions, statements can refer only to what's in the statement context\nsuch as an event handling method of the component instance.</p>\n<p>The <em>statement context</em> is typically the component instance.\nThe <em>deleteHero</em> in <code>(click)=\"deleteHero()\"</code> is a method of the data-bound component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p>The statement context may also refer to properties of the template's own context.\nIn the following examples, the template <code>$event</code> object,\na <a href=\"guide/built-in-directives#template-input-variable\">template input variable</a> (<code>let hero</code>),\nand a <a href=\"guide/template-reference-variables\">template reference variable</a> (<code>#heroForm</code>)\nare passed to an event handling method of the component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\" header=\"src/app/app.component.html\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n&#x3C;button *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}&#x3C;/button>\n&#x3C;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... &#x3C;/form>\n\n</code-example>\n<p>Template context names take precedence over component context names.\nIn <code>deleteHero(hero)</code> above, the <code>hero</code> is the template input variable,\nnot the component's <code>hero</code> property.</p>\n<h2 id=\"statement-guidelines\">Statement guidelines<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-statements#statement-guidelines\"><i class=\"material-icons\">link</i></a></h2>\n<p>Template statements cannot refer to anything in the global namespace. They\ncan't refer to <code>window</code> or <code>document</code>.\nThey can't call <code>console.log</code> or <code>Math.max</code>.</p>\n<p>As with expressions, avoid writing complex template statements.\nA method call or simple property assignment should be the norm.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/template-syntax\n - guide/user-input\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - guide/built-in-directives#template-input-variable\n - guide/template-expression-operators#pipe\n - guide/template-reference-variables\n - guide/template-statements#statement-context\n - guide/template-statements#statement-guidelines\n - guide/template-statements#template-statements\n - https://github.com/angular/angular/edit/master/aio/content/guide/template-statements.md?message=docs%3A%20describe%20your%20change...\n-->"
}