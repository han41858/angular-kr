{
  "id": "guide/component-styles",
  "title": "컴포넌트 스타일",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/component-styles.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Component styles\n-->\n<h1 id=\"컴포넌트-스타일\">컴포넌트 스타일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#컴포넌트-스타일\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAngular applications are styled with standard CSS. That means you can apply\neverything you know about CSS stylesheets, selectors, rules, and media queries\ndirectly to Angular applications.\n\nAdditionally, Angular can bundle *component styles*\nwith components, enabling a more modular design than regular stylesheets.\n\nThis page describes how to load and apply these component styles.\n\nYou can run the <live-example></live-example> in Stackblitz and download the code from there.\n-->\n<p>Angular 애플리케이션의 스타일은 표준 CSS를 사용해서 지정합니다.\n따라서 기존에 사용하고 있는 CSS 스타일시트, 셀렉터, 룰, 미디어 쿼리도 Angular 애플리케이션에 그대로 사용할 수 있습니다.</p>\n<p>Angular는 여기에 추가로 개별 컴포넌트에 <em>컴포넌트 스타일</em>을 적용할 수 있으며, CSS 스타일 외에 다른 스타일 도구도 활용할 수 있습니다.</p>\n<p>이 문서는 컴포넌트 스타일을 어떻게 불러오거나 지정할 수 있는지 안내합니다.</p>\n<p>이 문서에서 다루는 예제는 <live-example></live-example>에서 확인하거나 다운받을 수 있습니다.</p>\n<!--\n## Using component styles\n-->\n<h2 id=\"컴포넌트-스타일-사용하기\">컴포넌트 스타일 사용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#컴포넌트-스타일-사용하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nFor every Angular component you write, you may define not only an HTML template,\nbut also the CSS styles that go with that template,\nspecifying any selectors, rules, and media queries that you need.\n\nOne way to do this is to set the `styles` property in the component metadata.\nThe `styles` property takes an array of strings that contain CSS code.\nUsually you give it one string, as in the following example:\n\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" header=\"src/app/hero-app.component.ts\">\n@Component({\n  selector: &#39;app-root&#39;,\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=&quot;hero&quot;&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: [&#39;h1 { font-weight: normal; }&#39;]\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n-->\n<p>개발자가 만드는 모든 Angular 컴포넌트는 HTML 템플릿 외에 CSS 스타일도 지정할 수 있습니다.\n이 스타일 설정에는 기존에 사용하던 셀렉터, 룰, 미디어 쿼리도 그대로 사용할 수 있습니다.</p>\n<p>가장 간단한 방법은 컴포넌트 메타데이터에 <code>styles</code> 프로퍼티를 사용하는 것입니다.\n<code>styles</code> 프로퍼티에는 CSS 코드를 문자열 배열 형태로 지정하며, 다음과 같이 문자열 하나로도 간단하게 지정할 수 있습니다:</p>\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" header=\"src/app/hero-app.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;h1>Tour of Heroes&#x3C;/h1>\n    &#x3C;app-hero-main [hero]=\"hero\">&#x3C;/app-hero-main>\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<!--\n## Style scope\n-->\n<h2 id=\"스타일-적용-범위\">스타일 적용 범위<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#스타일-적용-범위\"><i class=\"material-icons\">link</i></a></h2>\n<!--\n<div class=\"alert is-critical\">\n\nThe styles specified in `@Component` metadata _apply only within the template of that component_.\n\n</div>\n\nThey are _not inherited_ by any components nested within the template nor by any content projected into the component.\n\nIn this example, the `h1` style applies only to the `HeroAppComponent`,\nnot to the nested `HeroMainComponent` nor to `<h1>` tags anywhere else in the application.\n\nThis scoping restriction is a ***styling modularity feature***.\n\n* You can use the CSS class names and selectors that make the most sense in the context of each component.\n\n\n* Class names and selectors are local to the component and don't collide with\n  classes and selectors used elsewhere in the application.\n\n\n* Changes to styles elsewhere in the application don't affect the component's styles.\n\n\n* You can co-locate the CSS code of each component with the TypeScript and HTML code of the component,\n  which leads to a neat and tidy project structure.\n\n\n* You can change or remove component CSS code without searching through the\n  whole application to find where else the code is used.\n-->\n<div class=\"alert is-critical\">\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 메타데이터에 지정한 스타일은 <em>그 컴포넌트의 템플릿에만</em> 적용됩니다.</p>\n</div>\n<p>컴포넌트 스타일은 템플릿 안에 있는 자식 컴포넌트의 템플릿이나 이 컴포넌트에 프로젝트되는 컴포넌트에는 <em>적용되지 않습니다</em>.</p>\n<p>이 예제로 보면 <code>h1</code> 엘리먼트 스타일은 <code>HeroAppComponent</code>에만 적용되며, 자식 컴포넌트 <code>HeroMainComponent</code>나 컴포넌트 외부에 있는 <code>&#x3C;h1></code> 태그에는 적용되지 않습니다.</p>\n<p>그래서 컴포넌트에 적용되는 스타일은 다음과 같은 <strong><em>스타일 모듈 규칙</em></strong>을 따릅니다.</p>\n<ul>\n<li>\n<p>컴포넌트를 구분하기 위해 적절한 CSS 클래스 이름과 셀렉터를 사용할 수 있습니다.</p>\n</li>\n<li>\n<p>클래스 이름과 셀렉터는 컴포넌트 안에서만 유효하며, 컴포넌트 밖에 있는 클래스와 셀렉터에는 적용되지 않습니다.</p>\n</li>\n<li>\n<p>컴포넌트 밖에서 스타일이 동적으로 변경되어도 컴포넌트에는 적용되지 않습니다.</p>\n</li>\n<li>\n<p>프로젝트 규모가 작거나 간단하게 테스트 하려면 CSS 코드를 TypeScript 코드나 HTML에 작성할 수 있습니다.</p>\n</li>\n<li>\n<p>컴포넌트에 적용되는 CSS 코드는 컴포넌트 외부에 적용되지 않기 때문에 걱정없이 변경하거나 제거할 수 있습니다.</p>\n</li>\n</ul>\n<a id=\"special-selectors\"></a>\n<!--\n## Special selectors\n-->\n<h2 id=\"angular-전용-셀렉터\">Angular 전용 셀렉터<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#angular-전용-셀렉터\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nComponent styles have a few special *selectors* from the world of shadow DOM style scoping\n(described in the [CSS Scoping Module Level 1](https://www.w3.org/TR/css-scoping-1) page on the\n[W3C](https://www.w3.org) site).\nThe following sections describe these selectors.\n-->\n<p>컴포넌트에 스타일 문법에는 섀도우 DOM에 적용할 수 있는 특별한 <em>셀렉터</em> 를 몇가지 사용할 수 있습니다.\n이 셀렉터들은 <a href=\"https://www.w3.org\">W3C</a> 사이트의 <a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a>에서 정의하는 표준 셀렉터입니다.</p>\n<h3 id=\"host\">:host<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nUse the `:host` pseudo-class selector to target styles in the element that *hosts* the component (as opposed to\ntargeting elements *inside* the component's template).\n\n\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"host\" header=\"src/app/hero-details.component.css\">\n:host {\n  display: block;\n  border: 1px solid black;\n}\n\n</code-example>\n\nThe `:host` selector is the only way to target the host element. You can't reach\nthe host element from inside the component with other selectors because it's not part of the\ncomponent's own template. The host element is in a parent component's template.\n\nUse the *function form* to apply host styles conditionally by\nincluding another selector inside parentheses after `:host`.\n\nThe next example targets the host element again, but only when it also has the `active` CSS class.\n\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\" header=\"src/app/hero-details.component.css\">\n:host(.active) {\n  border-width: 3px;\n}\n\n</code-example>\n-->\n<p>컴포넌트가 <em>위치하는</em> 엘리먼트(호스트 엘리먼트)에 스타일을 지정하려면 가상 클래스 셀렉터 <code>:host</code>를 사용합니다.\n이 때 컴포넌트가 위치하는 엘리먼트라는 것은 컴포넌트 템플릿 <em>안쪽</em>이 아닌 컴포넌트를 나타내는 엘리먼트 자체를 가리킵니다.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"host\" header=\"src/app/hero-details.component.css\">\n:host {\n  display: block;\n  border: 1px solid black;\n}\n\n</code-example>\n<p>컴포넌트에 스타일을 지정할 때 컴포넌트가 위치한 엘리먼트 자체를 가리키는 방법은 <code>:host</code> 셀렉터를 사용하는 것뿐입니다.\n컴포넌트가 위치하는 엘리먼트는 컴포넌트 템플릿 외부에 있기 때문에 이 방법을 제외하면 컴포넌트 안쪽에서 접근할 수 없습니다.\n호스트 엘리먼트는 부모 컴포넌트의 템플릿에 정의되기 때문입니다.</p>\n<p>그리고 <code>:host</code> 셀렉터에 괄호(<code>(</code>, <code>)</code>)를 함께 사용하면 특정 조건에 맞는 스타일만 지정할 수도 있습니다.</p>\n<p>그래서 아래 예제는 <code>active</code> CSS 클래스가 지정된 호스트 엘리먼트만 가리킵니다.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\" header=\"src/app/hero-details.component.css\">\n:host(.active) {\n  border-width: 3px;\n}\n\n</code-example>\n<h3 id=\"host-context\">:host-context<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host-context\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nSometimes it's useful to apply styles based on some condition *outside* of a component's view.\nFor example, a CSS theme class could be applied to the document `<body>` element, and\nyou want to change how your component looks based on that.\n\nUse the `:host-context()` pseudo-class selector, which works just like the function\nform of `:host()`. The `:host-context()` selector looks for a CSS class in any ancestor of the component host element,\nup to the document root. The `:host-context()` selector is useful when combined with another selector.\n\nThe following example applies a `background-color` style to all `<h2>` elements *inside* the component, only\nif some ancestor element has the CSS class `theme-light`.\n\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\" header=\"src/app/hero-details.component.css\">\n:host-context(.theme-light) h2 {\n  background-color: #eef;\n}\n\n</code-example>\n-->\n<p>어떤 경우에는 컴포넌트 뷰 <em>밖</em>에 있는 스타일을 조건으로 활용해서 컴포넌트 스타일을 적용해야 하는 경우도 있습니다.\n예를 들면 HTML 문서의 <code>&#x3C;body></code> 엘리먼트에 적용된 CSS 테마 클래스에 따라 컴포넌트의 뷰가 어떻게 표시되는지 확인하고 싶다고 합니다.</p>\n<p>이 때 <code>:host-context</code> 가상 클래스 셀렉터를 사용하면 <code>:host()</code> 를 사용할 때와 비슷하게 컴포넌트 밖에 있는 엘리먼트를 가리킬 수 있습니다.\n<code>:host-context()</code> 셀렉터는 컴포넌트가 위치하는 호스트 엘리먼트의 부모 엘리먼트부터 HTML 문서의 루트 노트까지 적용됩니다.\n그리고 이 셀렉터는 다른 셀렉터와 마찬가지로 조합해서 사용할 수도 있습니다.</p>\n<p>아래 예제는 CSS 클래스 <code>theme-light</code>가 지정된 부모 엘리먼트의 자식 엘리먼트 중 이 컴포넌트 <em>안</em>에 있는 <code>&#x3C;h2></code> 엘리먼트에 <code>background-color</code> 스타일을 지정하는 예제 코드입니다.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\" header=\"src/app/hero-details.component.css\">\n:host-context(.theme-light) h2 {\n  background-color: #eef;\n}\n\n</code-example>\n<a id=\"deprecated-deep--and-ng-deep\"></a>\n<!--\n### (deprecated) `/deep/`, `>>>`, and `::ng-deep`\n-->\n<h3 id=\"지원-중단-deep--ng-deep\">(지원 중단) <code>/deep/</code>, <code>>>></code>, <code>::ng-deep</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#지원-중단-deep--ng-deep\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nComponent styles normally apply only to the HTML in the component's own template.\n\nApplying the `::ng-deep` pseudo-class to any CSS rule completely disables view-encapsulation for\nthat rule. Any style with `::ng-deep` applied becomes a global style. In order to scope the specified style\nto the current component and all its descendants, be sure to include the `:host` selector before\n`::ng-deep`. If the `::ng-deep` combinator is used without the `:host` pseudo-class selector, the style\ncan bleed into other components.\n\nThe following example targets all `<h3>` elements, from the host element down\nthrough this component to all of its child elements in the DOM.\n\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\" header=\"src/app/hero-details.component.css\">\n:host /deep/ h3 {\n  font-style: italic;\n}\n\n</code-example>\n\nThe `/deep/` combinator also has the aliases `>>>`, and `::ng-deep`.\n\n<div class=\"alert is-important\">\n\nUse `/deep/`, `>>>` and `::ng-deep` only with *emulated* view encapsulation.\nEmulated is the default and most commonly used view encapsulation. For more information, see the\n[View Encapsulation](guide/view-encapsulation) section.\n\n</div>\n\n<div class=\"alert is-important\">\n\nThe shadow-piercing descendant combinator is deprecated and [support is being removed from major browsers](https://www.chromestatus.com/feature/6750456638341120) and tools.\nAs such we plan to drop support in Angular (for all 3 of `/deep/`, `>>>` and `::ng-deep`).\nUntil then `::ng-deep` should be preferred for a broader compatibility with the tools.\n\n</div>\n-->\n<p>컴포넌트 스타일은 보통 해당 컴포넌트의 템플릿에만 적용합니다.</p>\n<p>가상 클래스 <code>::ng-deep</code>가 적용된 CSS는 컴포넌트의 뷰 캡슐화 정책을 완전히 무시합니다.\n그래서 <code>::ng-deep</code>이 적용된 규칙은 전역 스타일 규칙이 되기 때문에 해당 컴포넌트는 물론이고 이 컴포넌트의 자식 컴포넌트에 모두 적용됩니다.\n그리고 <code>:host</code> 셀렉터 앞에 <code>::ng-deep</code> 클래스를 사용하거나 <code>:host</code> 셀렉터를 사용하지 않으면 해당 CSS 규칙은 다른 컴포넌트에도 모두 적용되니 주의해야 합니다.</p>\n<p>아래 예제는 컴포넌트 뷰 안에 있는 모든 자식 컴포넌트의 <code>&#x3C;h3></code> 엘리먼트에 이탤릭 속성을 지정하는 예제 코드입니다.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\" header=\"src/app/hero-details.component.css\">\n:host /deep/ h3 {\n  font-style: italic;\n}\n\n</code-example>\n<p><code>/deep/</code> 셀렉터는 <code>>>></code>나 <code>::ng-deep</code> 문법으로도 사용할 수 있습니다.</p>\n<div class=\"alert is-important\">\n<p><code>/deep/</code>, <code>>>></code>, <code>::ng-deep</code> 셀렉터는 <em><code>Emulated</code></em> 뷰 캡슐화 정책을 사용할 때만 사용하세요.\n이 정책은 뷰 캡슐화 정책의 기본값입니다. 좀 더 자세한 설명은 <a href=\"guide/view-encapsulation\">뷰 캡슐화 정책</a> 문서를 참고하세요.</p>\n</div>\n<div class=\"alert is-important\">\n<p><code>/deep/</code> 셀렉터는 Angular에서 공식적으로 지원이 중단되었으며 <a href=\"https://www.chromestatus.com/feature/6750456638341120\">대부분의 브라우저에서도 지원이 중단</a>되었습니다.\n따라서 <code>::ng-deep</code>의 호환성 문제에 대한 해결방안이 마련되는 대로 앞으로 배포될 Angular에는 <code>/deep/</code>과 <code>>>></code>, <code>::ng-deep</code>이 모두 제거될 예정입니다.</p>\n</div>\n<a id=\"loading-styles\"></a>\n<!--\n## Loading component styles\n-->\n<h2 id=\"컴포넌트-스타일-지정하기\">컴포넌트 스타일 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#컴포넌트-스타일-지정하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThere are several ways to add styles to a component:\n\n* By setting `styles` or `styleUrls` metadata.\n* Inline in the template HTML.\n* With CSS imports.\n\nThe scoping rules outlined earlier apply to each of these loading patterns.\n-->\n<p>컴포넌트에 스타일을 지정하려면 다음과 같은 방법을 활용할 수 있습니다.</p>\n<ul>\n<li>컴포넌트 메타데이터에 <code><a href=\"api/animations/style\" class=\"code-anchor\">style</a></code>이나 <code>styleUrls</code> 사용하기</li>\n<li>템플릿 HTML에 인라인으로 지정하기</li>\n<li>외부 CSS 파일 불러오기</li>\n</ul>\n<!--\n### Styles in component metadata\n-->\n<h3 id=\"컴포넌트-메타데이터로-스타일-지정하기\">컴포넌트 메타데이터로 스타일 지정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#컴포넌트-메타데이터로-스타일-지정하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can add a `styles` array property to the `@Component` decorator.\n\nEach string in the array defines some CSS for this component.\n\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" header=\"src/app/hero-app.component.ts (CSS inline)\">\n@Component({\n  selector: &#39;app-root&#39;,\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=&quot;hero&quot;&gt;&lt;/app-hero-main&gt;\n  `,\n  styles: [&#39;h1 { font-weight: normal; }&#39;]\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n\n<div class=\"alert is-critical\">\n\nReminder: these styles apply _only to this component_.\nThey are _not inherited_ by any components nested within the template nor by any content projected into the component.\n\n</div>\n\nThe Angular CLI command [`ng generate component`](cli/generate) defines an empty `styles` array when you create the component with the `--inline-style` flag.\n\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component hero-app --inline-style\n</code-example>\n-->\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에는 <code>styles</code> 프로퍼티를 지정할 수 있습니다.</p>\n<p>이 프로퍼티는 문자열 배열을 사용하는데, 컴포넌트에 지정될 CSS 스타일을 문자열로 각각 지정합니다.</p>\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" header=\"src/app/hero-app.component.ts (CSS inline)\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;h1>Tour of Heroes&#x3C;/h1>\n    &#x3C;app-hero-main [hero]=\"hero\">&#x3C;/app-hero-main>\n  `,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<div class=\"alert is-critical\">\n<p>주의 : 이 방법으로 지정하는 스타일은 <em>이 컴포넌트에만</em> 적용됩니다. 템플릿 안에 있는 자식 컴포넌트나, 이 컴포넌트에 프로젝트되는 다른 컨텐츠에도 적용되지 않습니다.</p>\n</div>\n<p>Angular CLI로 <a href=\"cli/generate\"><code>ng generate component</code></a> 명령을 실행할 때 <code>--inline-style</code> 플래그를 지정하면 <code>styles</code> 배열이 비어있는 상태에서 컴포넌트 코드 개발을 시작할 수 있습니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component hero-app --inline-style\n</code-example>\n<!--\n### Style files in component metadata\n-->\n<h3 id=\"컴포넌트-메타데이터에-외부-스타일-파일-불러오기\">컴포넌트 메타데이터에 외부 스타일 파일 불러오기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#컴포넌트-메타데이터에-외부-스타일-파일-불러오기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can load styles from external CSS files by adding a `styleUrls` property\nto a component's `@Component` decorator:\n\n<code-tabs>\n  <code-pane header=\"src/app/hero-app.component.ts (CSS in file)\" path=\"component-styles/src/app/hero-app.component.1.ts\">\n@Component({\n  selector: &#39;app-root&#39;,\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;app-hero-main [hero]=&quot;hero&quot;&gt;&lt;/app-hero-main&gt;\n  `,\n  styleUrls: [&#39;./hero-app.component.css&#39;]\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-pane>\n  <code-pane header=\"src/app/hero-app.component.css\" path=\"component-styles/src/app/hero-app.component.css\">\nh1 {\n  font-weight: normal;\n}\n\n\n</code-pane>\n</code-tabs>\n\n<div class=\"alert is-critical\">\n\nReminder: the styles in the style file apply _only to this component_.\nThey are _not inherited_ by any components nested within the template nor by any content projected into the component.\n\n</div>\n\n<div class=\"alert is-helpful\">\n\n  You can specify more than one styles file or even a combination of `styles` and `styleUrls`.\n\n</div>\n\nWhen you use the Angular CLI command [`ng generate component`](cli/generate) without the `--inline-style` flag, it creates an empty styles file for you and references that file in the component's generated `styleUrls`.\n\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component hero-app\n</code-example>\n-->\n<p>컴포넌트의 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에 <code>styleUrls</code> 프로퍼티를 사용하면 컴포넌트 외부에 있는 CSS 파일을 불러와서 컴포넌트에 적용할 수 있습니다.</p>\n<code-tabs>\n  <code-pane header=\"src/app/hero-app.component.ts (CSS in file)\" path=\"component-styles/src/app/hero-app.component.1.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;h1>Tour of Heroes&#x3C;/h1>\n    &#x3C;app-hero-main [hero]=\"hero\">&#x3C;/app-hero-main>\n  `,\n  styleUrls: ['./hero-app.component.css']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-pane>\n  <code-pane header=\"src/app/hero-app.component.css\" path=\"component-styles/src/app/hero-app.component.css\">\nh1 {\n  font-weight: normal;\n}\n\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-critical\">\n<p>주의 : 이 방법으로 지정하는 스타일은 <em>이 컴포넌트에만</em> 적용됩니다.\n템플릿 안에 있는 자식 컴포넌트나, 이 컴포넌트에 프로젝트되는 다른 컨텐츠에는 적용되지 않습니다.</p>\n</div>\n<div class=\"alert is-helpful\">\n<p>  <code>styles</code>이나 <code>styleUrls</code> 프로퍼티에는 한 번에 여러 스타일을 지정하거나 여러 파일을 지정할 수 있습니다.</p>\n</div>\n<p>Angular CLI로 <a href=\"cli/generate\"><code>ng generate component</code></a> 명령을 실행할 때 <code>--inline-style</code> 플래그를 지정하지 않으면 컴포넌트 이름으로 스타일 파일을 만들고 컴포넌트 메타데이터의 <code>styleUrls</code>에서 이 파일을 참조합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\nng generate component hero-app\n</code-example>\n<!--\n### Template inline styles\n-->\n<h3 id=\"템플릿-인라인-스타일\">템플릿 인라인 스타일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#템플릿-인라인-스타일\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can embed CSS styles directly into the HTML template by putting them\ninside `<style>` tags.\n\n<code-example path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\" header=\"src/app/hero-controls.component.ts\">\n@Component({\n  selector: &#39;app-hero-controls&#39;,\n  template: `\n    &lt;style&gt;\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &lt;/style&gt;\n    &lt;h3&gt;Controls&lt;/h3&gt;\n    &lt;button (click)=&quot;activate()&quot;&gt;Activate&lt;/button&gt;\n  `\n})\n\n</code-example>\n-->\n<p>CSS 스타일은 <code>&#x3C;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>></code> 태그를 사용해서 HTML 템플릿 안에 지정할 수도 있습니다.</p>\n<code-example path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\" header=\"src/app/hero-controls.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-controls',\n  template: `\n    &#x3C;<a href=\"api/animations/style\" class=\"code-anchor\">style</a>>\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &#x3C;/<a href=\"api/animations/style\" class=\"code-anchor\">style</a>>\n    &#x3C;h3>Controls&#x3C;/h3>\n    &#x3C;button (click)=\"activate()\">Activate&#x3C;/button>\n  `\n})\n\n</code-example>\n<!--\n### Template link tags\n-->\n<h3 id=\"템플릿-link-태그\">템플릿 link 태그<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#템플릿-link-태그\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can also write `<link>` tags into the component's HTML template.\n\n<code-example path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\" header=\"src/app/hero-team.component.ts\">\n@Component({\n  selector: &#39;app-hero-team&#39;,\n  template: `\n    &lt;!-- We must use a relative URL so that the AOT compiler can find the stylesheet --&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;../assets/hero-team.component.css&quot;&gt;\n    &lt;h3&gt;Team&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=&quot;let member of hero.team&quot;&gt;\n        {{member}}\n      &lt;/li&gt;\n    &lt;/ul&gt;`\n})\n\n</code-example>\n\n<div class=\"alert is-critical\">\n\nWhen building with the CLI, be sure to include the linked style file among the assets to be copied to the server as described in the [CLI wiki](https://github.com/angular/angular-cli/wiki/stories-asset-configuration).\n<!- 2018-10-16: The link above is still the best source for this information. ->\n\nOnce included, the CLI will include the stylesheet, whether the link tag's href URL is relative to the application root or the component file.\n\n</div>\n-->\n<p>컴포넌트 HTML 템플릿에는 <code>&#x3C;link></code> 태그를 사용할 수도 있습니다.</p>\n<code-example path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\" header=\"src/app/hero-team.component.ts\">\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-hero-team',\n  template: `\n    &#x3C;!-- We must use a relative URL so that the AOT compiler can find the stylesheet -->\n    &#x3C;link rel=\"stylesheet\" href=\"../assets/hero-team.component.css\">\n    &#x3C;h3>Team&#x3C;/h3>\n    &#x3C;ul>\n      &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let member of hero.team\">\n        {{member}}\n      &#x3C;/li>\n    &#x3C;/ul>`\n})\n\n</code-example>\n<div class=\"alert is-critical\">\n<p>Angular CLI가 애플리케이션을 빌드할 때 링크로 연결된 스타일 파일이 <code>assets</code> 폴더에 있고 빌드 결과에 제대로 포함되는지 꼭 확인하세요.\n<code>assets</code> 폴더를 활용하는 방법은 <a href=\"https://github.com/angular/angular-cli/wiki/stories-asset-configuration\">CLI wiki</a>에서 소개합니다.</p>\n<!-- 2018-10-16: The link above is still the best source for this information. -->\n<p>스타일 파일이 <code>assets</code> 폴더에 있다면 CLI가 이 스타일 파일을 빌드 결과물에 포함시키며, 컴포넌트에서는 애플리케이션 최상위 경로나 컴포넌트 파일의 상대경로로 이 스타일 파일을 참조할 수 있습니다.</p>\n</div>\n<h3 id=\"css-imports\">CSS @imports<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-imports\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nYou can also import CSS files into the CSS files using the standard CSS `@import` rule.\nFor details, see [`@import`](https://developer.mozilla.org/en/docs/Web/CSS/@import)\non the [MDN](https://developer.mozilla.org) site.\n\nIn this case, the URL is relative to the CSS file into which you're importing.\n\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"import\" header=\"src/app/hero-details.component.css (excerpt)\">\n/* AOT 컴파일러를 사용한다면 이 파일이 로컬에 있다는 것을 지정하기 위해 주소가 `./`로 시작되어야 합니다. */\n@import &#39;./hero-details-box.css&#39;;\n\n</code-example>\n-->\n<p>외부 CSS 파일을 불러올 때는 CSS 표준인 <code>@import</code>를 사용하는 방법도 있습니다.\n이 문법에 대해 자세하게 알아보려면 <a href=\"https://developer.mozilla.org\">MDN</a> 사이트의 <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code></a> 문서를 참고하세요.</p>\n<p>이 경우에는 CSS 파일을 로드하는 컴포넌트에서 시작하는 상대 경로로 외부 CSS 파일의 URL을 지정합니다.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"import\" header=\"src/app/hero-details.component.css (excerpt)\">\n/* AOT 컴파일러를 사용한다면 이 파일이 로컬에 있다는 것을 지정하기 위해 주소가 `./`로 시작되어야 합니다. */\n@import './hero-details-box.css';\n\n</code-example>\n<!--\n### External and global style files\n-->\n<h3 id=\"전역-스타일-파일\">전역 스타일 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#전역-스타일-파일\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen building with the CLI, you must configure the `angular.json` to include _all external assets_, including external style files.\n\nRegister **global** style files in the `styles` section which, by default, is pre-configured with the global `styles.css` file.\n\nSee the [CLI wiki](https://github.com/angular/angular-cli/wiki/stories-global-styles) to learn more.\n<!- 2018-10-16: The link above is still the best source for this information. ->\n-->\n<p>Angular CLI로 애플리케이션의 빌드 설정 파일인 <code>angular.json</code> 파일은 빌드에 포함될 <em>모든 외부 자원</em> 을 지정하는데, 이 때 외부 스타일 파일을 지정할 수도 있습니다.</p>\n<p>이 때 <code>styles</code> 항목을 활용하면 <strong>전역</strong>으로 지정될 스타일 파일을 지정할 수 있으며, CLI로 생성한 프로젝트라면 <code>styles.css</code> 파일이 초기값으로 지정됩니다.</p>\n<p>더 자세한 내용은 <a href=\"https://github.com/angular/angular-cli/wiki/stories-global-styles\">CLI wiki</a>를 참고하세요.</p>\n<!-- 2018-10-16: The link above is still the best source for this information. -->\n<!--\n### Non-CSS style files\n-->\n<h3 id=\"css-이외의-스타일-파일\">CSS 이외의 스타일 파일<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-이외의-스타일-파일\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nIf you're building with the CLI,\nyou can write style files in [sass](http://sass-lang.com/), [less](http://lesscss.org/), or [stylus](http://stylus-lang.com/) and specify those files in the `@Component.styleUrls` metadata with the appropriate extensions (`.scss`, `.less`, `.styl`) as in the following example:\n\n<code-example>\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n...\n</code-example>\n\nThe CLI build process runs the pertinent CSS preprocessor.\n\nWhen generating a component file with `ng generate component`, the CLI emits an empty CSS styles file (`.css`) by default.\nYou can configure the CLI to default to your preferred CSS preprocessor\nas explained in the [CLI wiki](https://github.com/angular/angular-cli/wiki/stories-css-preprocessors\n\"CSS Preprocessor integration\").\n<!- 2018-10-16: The link above is still the best source for this information. ->\n\n\n<div class=\"alert is-important\">\n\nStyle strings added to the `@Component.styles` array _must be written in CSS_ because the CLI cannot apply a preprocessor to inline styles.\n\n</div>\n-->\n<p>Angular CLI를 사용한다면 <a href=\"http://sass-lang.com/\">sass</a>나 <a href=\"http://lesscss.org/\">less</a>, <a href=\"http://stylus-lang.com/\">stylus</a>를 사용할 수도 있으며, 이렇게 만든 스타일 파일은 <code>@<a href=\"api/core/Component#styleUrls\" class=\"code-anchor\">Component.styleUrls</a></code> 메타데이터에 다음과 같이 지정할 수 있습니다:</p>\n<code-example>\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n...\n</code-example>\n<p>그러면 Angular CLI에 정의된 CSS 프리프로세서를 통해 최종 결과물에는 CSS 스타일로 변환됩니다.</p>\n<p><code>ng generate component</code> 명령으로 컴포넌트를 생성하면 비어있는 CSS 파일(<code>.css</code>)이 기본으로 생성됩니다.\n이 때 스타일 파일을 어떤 확장자로 생성할지 Angular CLI 환경 설정파일에 지정할 수 있으며, 더 자세한 내용은 <a href=\"https://github.com/angular/angular-cli/wiki/stories-css-preprocessors\" title=\"CSS Preprocessor integration\">CLI 문서</a> 문서를 참고하세요.</p>\n<!-- 2018-10-16: The link above is still the best source for this information. -->\n<div class=\"alert is-important\">\n<p><code>@<a href=\"api/core/Component#styles\" class=\"code-anchor\">Component.styles</a></code>에 문자열로 지정하는 스타일은 <em>반드시 CSS 문법으로</em> 지정해야 합니다. Angular CLI는 인라인 스타일을 처리할 때 CSS 프리프로세서를 별도로 사용하지 않습니다.</p>\n</div>\n\n</div>\n\n<!-- links to this doc:\n - guide/component-overview\n - guide/deprecations\n - guide/example-apps-list\n-->\n<!-- links from this doc:\n - api/animations/style\n - api/common/NgForOf\n - api/core/Component\n - api/core/Component#styleUrls\n - api/core/Component#styles\n - cli/generate\n - guide/component-styles#angular-전용-셀렉터\n - guide/component-styles#css-imports\n - guide/component-styles#css-이외의-스타일-파일\n - guide/component-styles#host\n - guide/component-styles#host-context\n - guide/component-styles#스타일-적용-범위\n - guide/component-styles#전역-스타일-파일\n - guide/component-styles#지원-중단-deep--ng-deep\n - guide/component-styles#컴포넌트-메타데이터로-스타일-지정하기\n - guide/component-styles#컴포넌트-메타데이터에-외부-스타일-파일-불러오기\n - guide/component-styles#컴포넌트-스타일\n - guide/component-styles#컴포넌트-스타일-사용하기\n - guide/component-styles#컴포넌트-스타일-지정하기\n - guide/component-styles#템플릿-link-태그\n - guide/component-styles#템플릿-인라인-스타일\n - guide/view-encapsulation\n - http://lesscss.org/\n - http://sass-lang.com/\n - http://stylus-lang.com/\n - https://developer.mozilla.org\n - https://developer.mozilla.org/en/docs/Web/CSS/@import\n - https://github.com/angular/angular-cli/wiki/stories-asset-configuration\n - https://github.com/angular/angular-cli/wiki/stories-css-preprocessors\n - https://github.com/angular/angular-cli/wiki/stories-global-styles\n - https://github.com/angular/angular/edit/master/aio/content/guide/component-styles.md?message=docs%3A%20describe%20your%20change...\n - https://www.chromestatus.com/feature/6750456638341120\n - https://www.w3.org\n - https://www.w3.org/TR/css-scoping-1\n-->"
}