{
  "id": "guide/angular-compiler-options",
  "title": "Angular 컴파일러 옵션",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/angular-compiler-options.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Angular compiler options\n-->\n<h1 id=\"angular-컴파일러-옵션\">Angular 컴파일러 옵션<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#angular-컴파일러-옵션\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nWhen you use [AOT compilation](guide/aot-compiler), you can control how your application is compiled by specifying *template* compiler options in the [TypeScript configuration file](guide/typescript-configuration).\n\nThe template options object, `angularCompilerOptions`, is a sibling to the `compilerOptions` object that supplies standard options to the TypeScript compiler.\n-->\n<p><a href=\"guide/aot-compiler\">AOT 컴파일러</a>를 사용하는 환경이라면 <a href=\"guide/typescript-configuration\">TypeScript 환경설정 파일</a> <code>tsconfig.json</code> 에 컴파일러 옵션을 지정해서 애플리케이션의 템플릿이 어떻게 컴파일될지 지정할 수 있습니다.</p>\n<p>템플릿 컴파일 옵션을 지정하는 객체 <code>angularCompilerOptions</code>는 TypeScript 컴파일러의 기본 옵션을 지정하는 <code>compilerOptions</code> 객체와 같은 계층에 존재합니다.</p>\n<code-example language=\"json\">\n    {\n      \"compilerOptions\": {\n        \"experimentalDecorators\": true,\n                  ...\n      },\n      \"angularCompilerOptions\": {\n        \"fullTemplateTypeCheck\": true,\n        \"preserveWhitespaces\": true,\n                  ...\n      }\n  }\n</code-example>\n<a id=\"tsconfig-extends\"></a>\n<!--\n## Configuration inheritance with extends\n-->\n<h2 id=\"설정값-상속받기\">설정값 상속받기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#설정값-상속받기\"><i class=\"material-icons\">link</i></a></h2>\n<p>Like the TypeScript compiler, The Angular AOT compiler also supports <code>extends</code> in the <code>angularCompilerOptions</code> section of the TypeScript configuration file.</p>\n<!--\nLike the TypeScript compiler, The Angular AOT compiler also supports `extends` in the `angularCompilerOptions` section of the TypeScript configuration file.\nThe `extends` property is at the top level, parallel to `compilerOptions` and `angularCompilerOptions`.\n\nA TypeScript configuration can inherit settings from another file using the `extends` property.\nThe configuration options from the base file are loaded first, then overridden by those in the inheriting configuration file.\n\nFor example:\n\n```json\n{\n  \"extends\": \"../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    ...\n  },\n  \"angularCompilerOptions\": {\n    \"fullTemplateTypeCheck\": true,\n    \"preserveWhitespaces\": true,\n    ...\n  }\n}\n```\n\nFor more information, see the [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html).\n-->\n<p>TypeScript 컴파일러 설정과 마찬가지로 Angular AOT 컴파일러 설정도 <code>extends</code>로 상속받을 수 있습니다.\n아래 예제 코드에서 제일 먼저 선언한 <code>extends</code> 프로퍼티는 <code>compilerOptions</code> 객체나 <code>angularCompilerOptions</code> 객체와 같은 계층에 존재합니다.</p>\n<p>TypeScript 환경설정 파일을 상속하면 상속 대상이 되는 파일을 먼저 로드하고, 그 다음에 새로운 파일에서 선언한 값이 이전 파일의 값을 오버라이드합니다.</p>\n<p>다음과 같이 사용하면 됩니다:</p>\n<code-example language=\"json\">\n{\n  \"extends\": \"../tsconfig.base.json\",\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true,\n    ...\n  },\n  \"angularCompilerOptions\": {\n    \"fullTemplateTypeCheck\": true,\n    \"preserveWhitespaces\": true,\n    ...\n  }\n}\n</code-example>\n<p>더 자세한 내용은 <a href=\"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript 핸드북</a> 문서를 참고하세요.</p>\n<!--\n## Template options\n-->\n<h2 id=\"템플릿-옵션\">템플릿 옵션<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#템플릿-옵션\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe following options are available for configuring the AOT template compiler.\n-->\n<p>AOT 템플릿 컴파일러 옵션에는 이런 항목들을 사용할 수 있습니다.</p>\n<h3 id=\"allowemptycodegenfiles\"><code>allowEmptyCodegenFiles</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#allowemptycodegenfiles\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, generate all possible files even if they are empty. Default is `false`. Used by the Bazel build rules to simplify how Bazel rules track file dependencies. Do not use this option outside of the Bazel rules.\n-->\n<p><code>true</code>로 설정하면 빈 파일도 빌드합니다.\n기본값은 <code>false</code>입니다.\n이 옵션은 파일간 의존성을 추적하는 Bazel 빌드 규칙을 간단하게 만들 때 사용합니다.\nBazel 규칙이 아닌 곳에서는 사용하지 않는 것을 권장합니다.</p>\n<h3 id=\"annotationsas\"><code>annotationsAs</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotationsas\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nModifies how Angular-specific annotations are emitted to improve tree-shaking. Non-Angular annotations are not affected. One of `static fields` (the default) or `decorators`.\n\n* By default, the compiler replaces decorators with a static field in the class, which allows advanced tree-shakers like [Closure compiler](https://github.com/google/closure-compiler) to remove unused classes.\n\n* The `decorators` value leaves the decorators in place, which makes compilation faster. TypeScript emits calls to the` __decorate` helper. Use `--emitDecoratorMetadata` for runtime reflection (but note that the resulting code will not properly tree-shake.\n-->\n<p>Angular용 어노테이션이 트리 셰이킹의 영향을 어떻게 받을지 지정하는 옵션입니다.\n이 옵션값을 변경하더라도 Angular용이 아닌 어노테이션은 영향을 받지 않습니다.\n기본값은 <code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code> 이며 <code>decorators</code> 값을 사용할 수 있습니다.</p>\n<ul>\n<li>\n<p><code><a href=\"api/upgrade/static\" class=\"code-anchor\">static</a> fields</code>: 데코레이터를 클래스 정적 필드로 변환합니다.\n이렇게 설정하면 <a href=\"https://github.com/google/closure-compiler\">Closure 컴파일러</a>처럼 트리 셰이킹 대상이 됩니다.</p>\n</li>\n<li>\n<p><code>decorators</code>: 데코레이터를 그대로 둡니다.\n이렇게 설정하면 TypeScript가 <code>_decorate</code> 헬퍼를 사용하기 때문에 컴파일 시간이 짧아집니다.\n그리고 이렇게 빌드한 코드를 제대로 실행하려면 <code>--emitDecoratorMetadata</code> 옵션을 함께 설정해야 합니다.\nAngular 데코레이터는 트리 셰이킹의 대상이 되지 않습니다.</p>\n</li>\n</ul>\n<h3 id=\"annotateforclosurecompiler\"><code>annotateForClosureCompiler</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#annotateforclosurecompiler\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, use [Tsickle](https://github.com/angular/tsickle) to annotate the emitted JavaScript with [JSDoc](http://usejsdoc.org/) comments needed by the\n[Closure Compiler](https://github.com/google/closure-compiler). Default is `false`.\n-->\n<p><code>true</code>로 설정하면 <a href=\"https://github.com/angular/tsickle\">Tsickle</a>을 사용해서 <a href=\"https://github.com/google/closure-compiler\">Closure 컴파일러</a>용 <a href=\"http://usejsdoc.org/\">JSDoc</a> 주석을 생성합니다.\n기본값은 <code>false</code> 입니다.</p>\n<h3 id=\"disableexpressionlowering\"><code>disableExpressionLowering</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disableexpressionlowering\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true` (the default), transforms code that is or could be used in an annotation, to allow it to be imported from template factory modules. See [metadata rewriting](guide/aot-compiler#metadata-rewriting) for more information.\n\nWhen `false`, disables this rewriting, requiring the rewriting to be done manually.\n-->\n<p><code>true</code>로 설정하면 어노테이션에 사용되거나 사용될 수 있는 코드를 템플릿 팩토리 모듈용으로 변환합니다.\n자세한 내용은 <a href=\"guide/aot-compiler#metadata-rewriting\">메타데이터 재구축</a> 문서를 참고하세요.</p>\n<p>기본값은 <code>true</code>이며 <code>false</code>로 설정하면 메타데이터를 재구축하지 않습니다.\n<code>false</code> 값은 메타데이터 재구축을 수동으로 진행하는 경우에 사용합니다.</p>\n<h3 id=\"disabletypescriptversioncheck\"><code>disableTypeScriptVersionCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#disabletypescriptversioncheck\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, the compiler does not check the TypeScript version and does not report an error when an unsupported version of TypeScript is used. Not recommended, as unsupported versions of TypeScript might have undefined behavior. Default is `false`.\n-->\n<p><code>true</code>로 설정하면 컴파일러가 TypeScript 버전을 검사하지 않습니다.\n그리고 지원되지 않는 TypeScript 버전을 사용하더라도 에러를 발생시키지 않습니다.\n하지만 지원되지 않는 TypeScript 버전은 정상 동작을 보장할 수 없기 때문에 권장하지 않습니다.\n기본값은 <code>false</code>입니다.</p>\n<h3 id=\"enableivy\"><code>enableIvy</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enableivy\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nEnables the [Ivy](guide/ivy) compilation and rendering pipeline. Default is `true`, as of version 9. In version 9, you can [opt out of Ivy](guide/ivy#opting-out-of-angular-ivy) to continue using the previous compiler, View Engine.\n\nFor library projects generated with the CLI, the `prod` configuration default is `false` in version 9.\n-->\n<p><a href=\"guide/ivy\">Ivy</a> 컴파일을 활성화합니다.\n기본값은 <code>true</code>이며 Angular 9 버전부터 사용할 수 있습니다.\n그리고 Angular 9 버전부터는 이전 버전에서 사용하던 View Engine 컴파일러를 사용하기 위해 <a href=\"guide/ivy#opting-out-of-angular-ivy\">Ivy를 제거</a> 할 수도 있습니다.</p>\n<p>Angular 9 버전부터 Angular CLI로 라이브러리 프로젝트를 생성했을 때 <code>prod</code> 환경 기본값은 <code>false</code> 입니다.</p>\n<h3 id=\"enableresourceinlining\"><code>enableResourceInlining</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enableresourceinlining\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, replaces the `templateUrl` and `styleUrls` property in all `@Component` decorators with inlined contents in `template` and `styles` properties.\n\nWhen enabled, the `.js` output of `ngc` does not include any lazy-loaded template or style URLs.\n\nFor library projects generated with the CLI, the dev configuration default is `true`.\n-->\n<p><code>true</code>로 설정하면 <code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에 사용된 <code>templateUrl</code>과 <code>styleUrls</code> 프로퍼티를 인라인 <code>template</code>과 <code>styles</code> 프로퍼티로 변환합니다.</p>\n<p>그리고 <code>ngc</code> 결과물이 만드는 <code>.js</code> 파일도 템플릿 파일과 스타일 파일을 지연로딩하지 않습니다.</p>\n<p>Angular CLI로 라이브러리 프로젝트를 생성했을 때 <code>dev</code> 환경 기본값은 <code>true</code>입니다.</p>\n<a id=\"enablelegacytemplate\"></a>\n<h3 id=\"enablelegacytemplate\"><code>enableLegacyTemplate</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#enablelegacytemplate\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, enables use of the `<template>` element, which was deprecated in Angular 4.0, in favor of `<ng-template>` (to avoid colliding with the DOM's element of the same name). Default is `false`. Might be required by some third-party Angular libraries.\n-->\n<p><code>true</code>로 설정하면 Angular 4.0 부터 <code>&#x3C;ng-template></code>으로 대체된 <code>&#x3C;template></code> 엘리먼트 사용을 허용합니다.\n기본값은 <code>false</code>이며 <code>&#x3C;template></code> 엘리먼트는 DOM 엘리먼트와 이름이 겹치는 것을 막기 위해 지원이 중단되었지만, 서드 파티 Angular 라이브러리가 이 엘리먼트를 사용할 때 <code>true</code>로 설정하면 됩니다.</p>\n<h3 id=\"flatmoduleid\"><code>flatModuleId</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleid\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nThe module ID to use for importing a flat module (when `flatModuleOutFile` is `true`). References generated by the template compiler use this module name when importing symbols\nfrom the flat module. Ignored if `flatModuleOutFile` is `false`.\n-->\n<p><code>flatModuleOutFile</code>을 <code>true</code>로 설정했을 때 사용하는 플랫 모듈의 ID를 지정합니다.\n이 ID는 플랫 모듈에서 심볼을 로드할 때 사용합니다.\n<code>flatModuleOutFile</code>이 <code>false</code> 값이면 이 옵션을 무시합니다.</p>\n<h3 id=\"flatmoduleoutfile\"><code>flatModuleOutFile</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#flatmoduleoutfile\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, generates a flat module index of the given file name and the corresponding flat module metadata. Use to create flat modules that are packaged similarly to `@angular/core` and `@angular/common`. When this option is used, the `package.json` for the library should refer\nto the generated flat module index instead of the library index file.\n\nProduces only one `.metadata.json` file, which contains all the metadata necessary\nfor symbols exported from the library index. In the generated `.ngfactory.js` files, the flat\nmodule index is used to import symbols that includes both the public API from the library index\nas well as shrowded internal symbols.\n\nBy default the `.ts` file supplied in the `files` field is assumed to be the library index.\nIf more than one `.ts` file is specified, `libraryIndex` is used to select the file to use.\nIf more than one `.ts` file is supplied without a `libraryIndex`, an error is produced.\n\nA flat module index `.d.ts` and `.js` is created with the given `flatModuleOutFile` name in the same location as the library index `.d.ts` file.\n\nFor example, if a library uses the `public_api.ts` file as the library index of the module, the `tsconfig.json` `files` field would be `[\"public_api.ts\"]`.\nThe `flatModuleOutFile` option could then be set to (for example) `\"index.js\"`, which produces `index.d.ts` and  `index.metadata.json` files.\nThe `module` field of the library's `package.json` would be `\"index.js\"` and the `typings` field\nwould be `\"index.d.ts\"`.\n-->\n<p><code>true</code>로 설정하면 모듈 파일 이름에 맞게 플랫 모듈의 인덱스와 플랫 모듈 메타데이터를 생성합니다.\n플랫 모듈을 만들면 <code>@angular/core</code>나 <code>@angular/common</code> 패키지와 비슷한 결과물을 생성할 수 있습니다.\n이 옵션을 활성화하면 라이브러리의 <code>package.json</code>는 라이브러리의 인덱스 파일이 아니라 새로 생성된 플랫 모듈의 인덱스 파일을 참조해야 합니다.</p>\n<p><code>.metadata.json</code> 파일은 하나만 생성되는데, 이 파일에는 라이브러리에서 외부로 공개한 심볼이 모두 포함됩니다.\n그리고 컴파일하면서 생성되는 <code>.ngfactory.js</code> 파일 안에서는 이 옵션을 활성화하면서 생성된 모듈 인덱스로 퍼블릭 심볼과 내부 심볼을 참조합니다.</p>\n<p>기본 상태에서는 <code>files</code> 필드에 지정된 <code>.ts</code> 파일을 라이브러리 인덱스 파일로 간주합니다.\n그리고 이 목록에 <code>.ts</code> 파일이 여러개라면 이 중 하나를 인덱스 파일로 참조하기 위해 <code>libraryIndex</code> 필드를 지정해야 합니다.\n<code>files</code> 필드에 <code>.ts</code> 파일이 여러개 등록되었지만 <code>libraryIndex</code> 필드를 지정하지 않으면 에러가 발생합니다.</p>\n<p>플랫 모듈을 생성하면 모듈 인덱스 파일 <code>.d.ts</code> 파일과 <code>.js</code> 파일도 <code>flatModuleOutFile</code>에 지정된 이름으로 생성됩니다.</p>\n<p>예를 들어 봅시다.\n라이브러리 인덱스 파일로 <code>public_api.ts</code> 파일을 사용하는 라이브러리가 있다고 합시다.\n이 라이브러리의 <code>tsconfig.json</code> <code>files</code> 필드는 <code>[\"public_api.ts\"]</code>라고 지정되어 있습니다.\n이 상태에서 <code>flatModuleOutFile</code> 값을 <code>\"index.js\"</code>로 지정하면 <code>index.d.ts</code> 파일과 <code>index.metadata.json</code> 파일이 생성됩니다.\n그리고 라이브러리 <code>package.json</code> 파일의 <code>module</code> 필드는 <code>\"index.js\"</code>로 지정하고 <code>typings</code> 필드는 <code>\"index.d.ts\"</code>로 지정하면 됩니다.</p>\n<h3 id=\"fulltemplatetypecheck\"><code>fullTemplateTypeCheck</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#fulltemplatetypecheck\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true` (recommended), enables the [binding expression validation](guide/aot-compiler#binding-expression-validation) phase of the template compiler, which uses TypeScript to validate binding expressions. For more information, see [Template type checking](guide/template-typecheck).\n\nDefault is `false`, but when you use the CLI command `ng new`, it is set to `true` by default in the generated project's configuration.\n-->\n<p><code>true</code>로 설정하면 템플릿을 컴파일할 때 TypeScript 컴파일러로 <a href=\"guide/aot-compiler#binding-expression-validation\">바인딩 표현식의 유효성을 검사</a>하는 단계가 활성화됩니다.\n이 옵션은 <code>true</code>로 설정하는 것을 권장합니다.\n더 자세한 내용은 <a href=\"guide/template-typecheck\">템플릿 타입 검사</a> 문서를 참고하세요.</p>\n<p>이 옵션의 기본값은 <code>false</code>지만, Angular CLI <code>ng new</code> 명령을 사용하면 프로젝트 환경설정 파일을 수정하면서 <code>true</code>로 변경됩니다.</p>\n<h3 id=\"generatecodeforlibraries\"><code>generateCodeForLibraries</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#generatecodeforlibraries\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true` (the default), generates factory files (`.ngfactory.js` and `.ngstyle.js`)\nfor `.d.ts` files with a corresponding `.metadata.json` file.\n\nWhen `false`, factory files are generated only for `.ts` files. Do this when using factory summaries.\n-->\n<p><code>true</code>로 설정하면 <code>.d.ts</code>파일과 <code>.metadata.json</code> 파일과 연관되는 <code>.ngfactory.js</code>, <code>.ngstyle.js</code>과 같은 팩토리 파일을 생성합니다.\n기본값은 <code>true</code>입니다.</p>\n<p><code>false</code>로 설정하면 팩토리 파일은 <code>.ts</code> 파일만 생성됩니다.\n이 옵션값은 팩토리 요약 파일을 생성할 때 사용합니다.</p>\n<h3 id=\"preservewhitespaces\"><code>preserveWhitespaces</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#preservewhitespaces\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `false` (the default), removes blank text nodes from compiled templates, which results in smaller emitted template factory modules. Set to `true` to preserve blank text nodes.\n-->\n<p><code>false</code>로 설정하면 템플릿을 컴파일 한 후에 템플릿에 존재하는 빈 텍스트 노드를 제거하면서 템플릿 팩토리 모듈의 크기를 줄입니다.\n그리고 <code>true</code>로 설정하면 비어 있는 텍스트 노드를 그대로 유지합니다.</p>\n<p>기본값은 <code>false</code>입니다.</p>\n<h3 id=\"skipmetadataemit\"><code>skipMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skipmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, does not produce `.metadata.json` files. Default is `false`.\n\nThe `.metadata.json` files contain information needed by the template compiler from a `.ts`\nfile that is not included in the `.d.ts` file produced by the TypeScript compiler.\nThis information includes, for example, the content of annotations  (such as a component's template), which TypeScript emits to the `.js` file but not to the `.d.ts` file.\n\nYou can set to `true` when using factory summaries, because the factory summaries\ninclude a copy of the information that is in the `.metadata.json` file.\n\nSet to `true` if you are using TypeScript's `--outFile` option, because the metadata files\nare not valid for this style of TypeScript output. However, we do not recommend using `--outFile` with Angular. Use a bundler, such as [webpack](https://webpack.js.org/), instead.\n-->\n<p><code>true</code>로 설정하면 <code>.metadata.json</code> 파일을 생성하지 않습니다.\n기본값은 <code>false</code>입니다.</p>\n<p><code>.metadata.json</code> 파일에는 <code>.ts</code> 파일을 빌드하면서 생성된 <code>.d.ts</code> 파일에는 포함되지 않는 정보가 담겨 있습니다.\n이 정보는 템플릿을 빌드할 때 필요하지만 TypeScript 컴파일러가 따로 생성하지 않습니다.\n컴포넌트 템플릿과 같이 어노테이션 안에 있는 코드가 이런 정보에 해당됩니다.\nTypeScript는 이 내용을 <code>.js</code> 파일에 생성하지만 <code>.d.ts</code> 파일에는 추가하지 않습니다.</p>\n<p>팩토리 요약 파일을 생성하려면 <code>true</code>로 설정하면 됩니다.\n팩토리 요약 파일에는 <code>.metadata.json</code> 파일에 있는 정보가 이미 담겨 있습니다.</p>\n<p>TypeScript <code>--outFile</code> 옵션을 사용하는 경우에는 TypeScript가 생성하는 결과파일과 메타데이터 파일이 호환되지 않기 때문에 이 옵션값을 <code>true</code>로 설정해야 합니다.\n그래서 Angular 프로젝트를 빌드할 때는 TypeScript <code>--outFile</code> 옵션 사용을 권장하지 않습니다.\n이 기능이 꼭 필요하다면 <a href=\"https://webpack.js.org/\">webpack</a>과 같은 번들러를 사용하는 방식으로 우회할 수 있습니다.</p>\n<h3 id=\"skiptemplatecodegen\"><code>skipTemplateCodegen</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#skiptemplatecodegen\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, does not emit `.ngfactory.js` and `.ngstyle.js` files. This turns off most of the template compiler and disables the reporting of template diagnostics.\n\nCan be used to instruct the template compiler to produce `.metadata.json` files for distribution with an `npm` package while avoiding the production of `.ngfactory.js` and `.ngstyle.js` files that cannot be distributed to `npm`.\n\nFor library projects generated with the CLI, the dev configuration default is `true`.\n-->\n<p><code>true</code>로 설정하면 <code>.ngfactory.js</code> 파일과 <code>.ngstyle.js</code> 파일을 생성하지 않습니다.\n그리고 이 상태에서는 템플릿을 컴파일하면서 확인할 수 있는 분석 기능도 동작하지 않습니다.</p>\n<p>이 옵션은 라이브러리를 npm 저장소에 배포하기 위해 <code>.ngfactory.js</code> 파일과 <code>.ngstyle.js</code> 파일 생성을 생략할 때 사용합니다.</p>\n<p>Angular CLI로 라이브러리 프로젝트를 생성했을 때 <code>dev</code> 환경 기본값은 <code>true</code>입니다.</p>\n<h3 id=\"strictmetadataemit\"><code>strictMetadataEmit</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictmetadataemit\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, reports an error to the `.metadata.json` file if `\"skipMetadataEmit\"` is `false`.\nDefault is `false`. Use only when `\"skipMetadataEmit\"` is `false` and `\"skipTemplateCodeGen\"` is `true`.\n\nThis option is intended to validate the `.metadata.json` files emitted for bundling with an `npm` package. The validation is strict and can emit errors for metadata that would never produce an error when used by the template compiler. You can choose to suppress the error emitted by this option for an exported symbol by including `@dynamic` in the comment documenting the symbol.\n\nIt is valid for `.metadata.json` files to contain errors.\nThe template compiler reports these errors if the metadata is used to determine the contents of an annotation.\nThe metadata collector cannot predict the symbols that are designed for use in an annotation, so it preemptively includes error nodes in the metadata for the exported symbols.\nThe template compiler can then use the error nodes to report an error if these symbols are used.\n\nIf the client of a library intends to use a symbol in an annotation, the template compiler does not normally report this until the client uses the symbol.\nThis option allows detection of these errors during the build phase of\nthe library and is used, for example, in producing Angular libraries themselves.\n\nFor library projects generated with the CLI, the dev configuration default is `true`.\n-->\n<p><code>\"skipMetadataEmit\"</code> 옵션값이 <code>false</code>인 상태에서 <code>true</code>로 설정하면 컴파일하면서 발생한 에러를 <code>.metadata.json</code> 파일에 남깁니다.\n기본값은 <code>false</code> 입니다.\n이 옵션은 <code>\"skipMetadataEmit\"</code> 옵션값이 <code>false</code>이고 <code>\"skipTemplateCodeGen\"</code> 옵션값이 <code>true</code>일 때만 사용하세요.</p>\n<p>이 옵션은 라이브러리를 <code>npm</code> 패키지로 배포하기 위해 번들링할 때 <code>.metadata.json</code> 파일의 유효성을 확인하기 위해 도입되었습니다.\n이 유효성 검사를 활성화하면 이전까지 템플릿 컴파일러가 확인하지 못했던 에러가 추가로 발생할 수 있습니다.\n추가로 확인된 에러는 코드를 수정해서 해결하거나 <code>@dynamic</code> 데코레이터를 심볼에 붙여서 무시할 수 있습니다.</p>\n<p><code>.metadata.json</code> 파일에는 에러가 포함되어도 괜찮습니다.\n템플릿 컴파일러가 감지하는 에러는 어노테이션에 사용된 메타데이터에 관한 것입니다.\n그런데 메타데이터 컬렉터는 어노테이션에 사용될 심볼을 사전에 예측할 수 없기 때문에 실제로 발생하지 않는 문제도 에러라고 감지할 수도 있습니다.\n그렇기 때문에 이 단계에서 발생하는 에러를 반드시 해결해야 하는 것은 아닙니다.</p>\n<p>라이브러리 사용자가 어노테이션에 어떤 심볼을 사용하면, 이 단계에서 발생한 에러가 문제되지 않는 상황이 될 수도 있습니다.\n이 에러들은 나중에 발생할 수도 있는 에러를 빌드 단계에서 미리 확인해보기 위한 것일 뿐입니다.</p>\n<p>Angular CLI로 라이브러리 프로젝트를 생성했을 때 <code>dev</code> 환경 기본값은 <code>true</code>입니다.</p>\n<h3 id=\"strictinjectionparameters\"><code>strictInjectionParameters</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#strictinjectionparameters\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true` (recommended), reports an error for a supplied parameter whose injection type cannot be determined. When `false` (currently the default), constructor parameters of classes marked with `@Injectable` whose type cannot be resolved produce a warning.\n\nWhen you use the CLI command `ng new`, it is set to `true` by default in the generated project's configuration.\n-->\n<p><code>true</code>로 설정하면 의존성으로 주입되는 객체 타입을 인식할 수 없을 때 에러를 발생시킵니다.\n그리고 <code>false</code>로 설정하면 생성자로 주입되는 의존성 객체 중에 <code>@<a href=\"api/core/Injectable\" class=\"code-anchor\">Injectable</a></code>로 지정된 객체의 타입을 확인하지 못해도 단순하게 경고만 표시합니다.</p>\n<p>기본값은 <code>false</code>지만 <code>true</code> 값을 권장합니다.</p>\n<h3 id=\"stricttemplates\"><code>strictTemplates</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#stricttemplates\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, enables [strict template type checking](guide/template-typecheck#strict-mode) in Angular version 9. Strict mode is only available when using [Ivy](guide/ivy).\n\nAdditional strictness flags allow you to enable and disable specific types of strict template type checking. See [troubleshooting template errors](guide/template-typecheck#troubleshooting-template-errors).\n-->\n<p><code>true</code>로 설정하면 <a href=\"guide/template-typecheck#strict-mode\">더 엄격한 템플릿 타입 검사</a>를 활성화 합니다.\n이 기능은 Angular 9버전부터 도입되었으며 <a href=\"guide/ivy\">Ivy</a>를 대상으로 동작합니다.</p>\n<p>세부 검사 옵션은 추가 옵션을 지정해서 제어할 수 있습니다.\n<a href=\"guide/template-typecheck#troubleshooting-template-errors\">템플릿 에러 해결하기</a> 문서를 참고하세요.</p>\n<h3 id=\"trace\"><code>trace</code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/angular-compiler-options#trace\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nWhen `true`, prints extra information while compiling templates. Default is `false`.\n-->\n<p><code>true</code>로 설정하면 템플릿을 컴파일할 때 좀 더 많은 정보를 제공합니다.\n기본값은 <code>false</code>입니다.</p>\n\n</div>\n\n<!-- links to this doc:\n - guide/aot-compiler\n - guide/deprecations\n - guide/file-structure\n - guide/strict-mode\n - guide/typescript-configuration\n-->\n<!-- links from this doc:\n - api/core/Component\n - api/core/Injectable\n - api/upgrade/static\n - guide/angular-compiler-options#allowemptycodegenfiles\n - guide/angular-compiler-options#angular-컴파일러-옵션\n - guide/angular-compiler-options#annotateforclosurecompiler\n - guide/angular-compiler-options#annotationsas\n - guide/angular-compiler-options#disableexpressionlowering\n - guide/angular-compiler-options#disabletypescriptversioncheck\n - guide/angular-compiler-options#enableivy\n - guide/angular-compiler-options#enablelegacytemplate\n - guide/angular-compiler-options#enableresourceinlining\n - guide/angular-compiler-options#flatmoduleid\n - guide/angular-compiler-options#flatmoduleoutfile\n - guide/angular-compiler-options#fulltemplatetypecheck\n - guide/angular-compiler-options#generatecodeforlibraries\n - guide/angular-compiler-options#preservewhitespaces\n - guide/angular-compiler-options#skipmetadataemit\n - guide/angular-compiler-options#skiptemplatecodegen\n - guide/angular-compiler-options#strictinjectionparameters\n - guide/angular-compiler-options#strictmetadataemit\n - guide/angular-compiler-options#stricttemplates\n - guide/angular-compiler-options#trace\n - guide/angular-compiler-options#설정값-상속받기\n - guide/angular-compiler-options#템플릿-옵션\n - guide/aot-compiler\n - guide/aot-compiler#binding-expression-validation\n - guide/aot-compiler#metadata-rewriting\n - guide/ivy\n - guide/ivy#opting-out-of-angular-ivy\n - guide/template-typecheck\n - guide/template-typecheck#strict-mode\n - guide/template-typecheck#troubleshooting-template-errors\n - guide/typescript-configuration\n - http://usejsdoc.org/\n - https://github.com/angular/angular/edit/master/aio/content/guide/angular-compiler-options.md?message=docs%3A%20describe%20your%20change...\n - https://github.com/angular/tsickle\n - https://github.com/google/closure-compiler\n - https://webpack.js.org/\n - https://www.typescriptlang.org/docs/handbook/tsconfig-json.html\n-->"
}