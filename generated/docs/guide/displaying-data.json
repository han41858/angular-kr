{
  "id": "guide/displaying-data",
  "title": "화면에 데이터 표시하기",
  "contents": "\n\n\n  <div class=\"github-links\">\n    <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/displaying-data.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n  </div>\n\n\n<div class=\"content\">\n<!--\n# Displaying data in views\n-->\n<h1 id=\"화면에-데이터-표시하기\">화면에 데이터 표시하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#화면에-데이터-표시하기\"><i class=\"material-icons\">link</i></a></h1>\n<!--\nAngular [components](guide/glossary#component) form the data structure of your application.\nThe HTML [template](guide/glossary#template) associated with a component provides the means to display that data in the context of a web page.\nTogether, a component's class and template form a [view](guide/glossary#view) of your application data.\n\nThe process of combining data values with their representation on the page is called [data binding](guide/glossary#data-binding).\nYou display your data to a user (and collect data from the user) by *binding* controls in the HTML template to the data properties of the component class.\n\nIn addition, you can add logic to the template by including [directives](guide/glossary#directive), which tell Angular how to modify the page as it is rendered.\n\nAngular defines a *template language* that expands HTML notation with syntax that allows you to define various kinds of data binding and logical directives.\nWhen the page is rendered, Angular interprets the template syntax to update the HTML according to your logic and current data state.\nBefore you read the complete [template syntax guide](guide/template-syntax), the exercises on this page give you a quick demonstration of how template syntax works.\n\nIn this demo, you'll create a component with a list of heroes.\nYou'll display the list of hero names and conditionally show a message below the list.\nThe final UI looks like this:\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/final.png\" alt=\"Final UI\">\n</div>\n\n<div class=\"alert is-helpful\">\n\nThe <live-example></live-example> demonstrates all of the syntax and code snippets described in this page.\n\n</div>\n-->\n<p>애플리케이션의 데이터 구조는 Angular <a href=\"guide/glossary#component\">컴포넌트</a>로 구성합니다.\n그리고 컴포넌트 데이터를 웹 페이지로 표시하려면 HTML로 <a href=\"guide/glossary#template\">템플릿</a>을 작성하면 됩니다.\n결국 애플리케이션 데이터를 표시하는 <a href=\"guide/glossary#view\">화면</a>은 컴포넌트 클래스와 템플릿이 합쳐진 결과물입니다.</p>\n<p>컴포넌트 데이터와 화면이 연결지는 과정을 <a href=\"guide/glossary#data-binding\">데이터 바인딩</a>이라고 합니다.\n데이터 바인딩을 활용하면 사용자가 볼 수 있게 데이터를 화면에 표시할 수 있고, 사용자가 입력하는 데이터를 컴포넌트 클래스에 있는 데이터 프로퍼티로 전달할 수 있습니다.</p>\n<p>그리고 템플릿에 <a href=\"guide/glossary#directive\">디렉티브</a>를 활용하면 화면이 렌더링되는 과정을 조작할 수 있습니다.</p>\n<p>Angular는 데이터 바인딩과 디렉티브를 활용할 수 있도록 HTML 문법을 확장한 <em>템플릿 언어(template language)</em>를 제공합니다.\nAngular는 화면이 렌더링되는 시점에 템플릿 문법으로 작성된 대로 HTML 엘리먼트를 조작하거나 컴포넌트 데이터를 템플릿에 연결합니다.\n이 문서의 내용을 진행하면 템플릿 문법이 어떻게 동작하는지 간단하게 확인할 수 있으며, 자세한 내용을 확인하려면 <a href=\"guide/template-syntax\">템플릿 문법</a> 문서를 참고하세요.</p>\n<p>이 문서에서는 히어로 목록을 표시하는 컴포넌트를 생성해 봅니다.\n히어로 목록에 있는 히어로들의 이름을 화면에 표시해 볼 것이며, 조건에 따라 목록 아래에 메시지를 표시해 보기도 합시다.\n이 과정을 끝내고 나면 다음과 같은 화면이 구성될 것입니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/final.png\" alt=\"최종 화면\" width=\"374\" height=\"290\">\n</div>\n<div class=\"alert is-helpful\">\n<p>이 문서에서 설명하는 내용은 <live-example></live-example> 에서 확인하거나 다운받을 수 있습니다.</p>\n</div>\n<a id=\"interpolation\"></a>\n<!--\n## Showing component properties with interpolation\n-->\n<h2 id=\"문자열-바인딩\">문자열 바인딩<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#문자열-바인딩\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe easiest way to display a component property is to bind the property name through interpolation.\nWith interpolation, you put the property name in the view template, enclosed in double curly braces: `{{myHero}}`.\n\nUse the CLI command [`ng new displaying-data`](cli/new) to create a workspace and app named `displaying-data`.\n\nDelete the <code>app.component.html</code> file. It is not needed for this example.\n\nThen modify the <code>app.component.ts</code> file by\nchanging the template and the body of the component.\n\nWhen you're done, it should look like this:\n\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" header=\"src/app/app.component.ts\">\nimport { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-root&#39;,\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n    `\n})\nexport class AppComponent {\n  title = &#39;Tour of Heroes&#39;;\n  myHero = &#39;Windstorm&#39;;\n}\n\n\n</code-example>\n\nYou added two properties to the formerly empty component: `title` and `myHero`.\n\nThe template displays the two component properties using double curly brace\ninterpolation:\n\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n  `\n\n</code-example>\n\n<div class=\"alert is-helpful\">\n\nThe template is a multi-line string within ECMAScript 2015 backticks (<code>\\`</code>).\nThe backtick (<code>\\`</code>)&mdash;which is *not* the same character as a single\nquote (`'`)&mdash;allows you to compose a string over several lines, which makes the\nHTML more readable.\n\n</div>\n\nAngular automatically pulls the value of the `title` and `myHero` properties from the component and\ninserts those values into the browser. Angular updates the display\nwhen these properties change.\n\n<div class=\"alert is-helpful\">\n\nMore precisely, the redisplay occurs after some kind of asynchronous event related to\nthe view, such as a keystroke, a timer completion, or a response to an HTTP request.\n\n</div>\n\nNotice that you don't call **new** to create an instance of the `AppComponent` class.\nAngular is creating an instance for you. How?\n\nThe CSS `selector` in the `@Component` decorator specifies an element named `<app-root>`.\nThat element is a placeholder in the body of your `index.html` file:\n\n<code-example path=\"displaying-data/src/index.html\" header=\"src/index.html (body)\" region=\"body\">\n&lt;body&gt;\n  &lt;app-root&gt;&lt;/app-root&gt;\n&lt;/body&gt;\n\n</code-example>\n\nWhen you bootstrap with the `AppComponent` class (in <code>main.ts</code>), Angular looks for a `<app-root>`\nin the `index.html`, finds it, instantiates an instance of `AppComponent`, and renders it\ninside the `<app-root>` tag.\n\nNow run the app. It should display the title and hero name:\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/title-and-hero.png\" alt=\"Title and Hero\">\n</div>\n\nThe next few sections review some of the coding choices in the app.\n-->\n<p>컴포넌트 프로퍼티를 화면에 표시하는 방법 중 가장 간단한 방법은\n문자열 바인딩(interpolation)을 사용하는 것입니다.\n문자열 바인딩은 프로퍼티 이름을 이중 중괄호로 감싸서 템플릿에 <code>{{myHero}}</code> 와 같은 형태로 넣는 방법입니다.</p>\n<p>워크스페이스를 생성하면서 <code>displaying-data</code>라는 이름으로 앱을 생성하기 위해 <a href=\"cli/new\"><code>ng new displaying-data</code></a> 명령을 실행합니다.</p>\n<p>그리고 이번 예제에서는 <code>app.component.html</code> 파일을 사용하지 않으니 삭제하고,\n화면에 히어로의 이름을 표시하도록 <code>app.component.ts</code> 파일을 다음과 같이 작성합니다:</p>\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" header=\"src/app/app.component.ts\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  myHero = 'Windstorm';\n}\n\n\n</code-example>\n<p>컴포넌트 프로퍼티에는 <code>title</code> 과 <code>myHero</code>를 선언했습니다.</p>\n<p>그리고 두 프로퍼티 값을 화면에 표시하도록 다음과 같이 템플릿에 문자열 바인딩 합니다:</p>\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" header=\"src/app/app.component.ts (템플릿)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n  `\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>템플릿에 사용된 역따옴표(<code>`</code>)는 문자열을 여러 줄에 걸쳐 선언하는 ECMAScript 2015 표준 문법이며,\n역따옴표를 사용하면 HTML 코드의 가독성을 더 높일 수 있습니다.\n역따옴표(<code>`</code>)와 홑따옴표(<code>'</code>)를 혼동하지 않도록 주의하세요.</p>\n</div>\n<p>그러면 컴포넌트에 있는 <code>title</code> 과 <code>myHero</code> 프로퍼티 값을 Angular가 끌어와서 템플릿에 표시합니다.\n이렇게 바인딩 된 프로퍼티는 값이 변경될 때마다 Angular가 감지해서 화면을 갱신합니다.</p>\n<div class=\"alert is-helpful\">\n<p>조금 더 정확하게 이야기하면, 키 입력이나 타이머, HTTP 응답과 같은 비동기 이벤트가 발생했을 때 화면이 갱신됩니다.</p>\n</div>\n<p>Angular에서는 <code>new</code> 키워드를 사용하지 않아도 알아서 컴포넌트의 인스턴스를 생성하고 DOM에 추가합니다. 이 과정이 어떻게 이루어 질까요?</p>\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에 지정된 메타데이터를 보면 <code>selector</code> 항목에 <code>&#x3C;app-root></code> 가 지정되어 있고,\n<code>index.html</code> 파일에는 <code>&#x3C;app-root></code> 가 다음과 같이 작성되어 있습니다:</p>\n<code-example path=\"displaying-data/src/index.html\" header=\"src/index.html (body)\" region=\"body\">\n&#x3C;body>\n  &#x3C;app-root>&#x3C;/app-root>\n&#x3C;/body>\n\n</code-example>\n<p>Angular 애플리케이션이 시작되면서 <code>AppComponent</code> 클래스가 부트스트랩 될 때, Angular는 <code>index.html</code> 파일에서 <code>&#x3C;app-root></code> 엘리먼트를 찾습니다.\n그리고 이 엘리먼트를 찾은 위치에 <code>AppComponent</code> 인스턴스를 생성하고 화면에 렌더링합니다.</p>\n<p>여기까지 작성하고 애플리케이션을 시작하면, 페이지 제목과 히어로 이름이 다음과 같이 표시됩니다:</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/title-and-hero.png\" alt=\"페이지 제목과 히어로가 표시된 화면\" width=\"348\" height=\"108\">\n</div>\n<p>다음 섹션에서는 앱을 개발할때 고민해 볼만한 문제에 대해 생각해 봅시다.</p>\n<!--\n## Choosing the template source\n-->\n<h2 id=\"템플릿-구성방식-결정하기\">템플릿 구성방식 결정하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#템플릿-구성방식-결정하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `@Component` metadata tells Angular where to find the component's template.\nYou can store your component's template in one of two places.\n\n* You can define the template *inline* using the `template` property of the `@Component` decorator. An inline template is useful for a small demo or test.\n* Alternatively, you can define the template in a separate HTML file and link to that file in the `templateUrl` property of the `@Component` decorator. This configuration is typical for anything more complex than a small test or demo, and is the default when you generate a new component.\n\nIn either style, the template data bindings have the same access to the component's properties.\nHere the app uses inline HTML because the template is small and the demo is simpler without the additional HTML file.\n\n<div class=\"alert is-helpful\">\n\n  By default, the Angular CLI command [`ng generate component`](cli/generate) generates components with a template file.\n  You can override that by adding the \"-t\" (short for `inlineTemplate=true`) option:\n\n  <code-example hideCopy language=\"sh\" class=\"code-shell\">\n    ng generate component hero -t\n  </code-example>\n\n</div>\n-->\n<p><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 메타데이터의 내용을 변경하면 컴포넌트 템플릿을 구성하는 두가지 방식 중 하나를 선택할 수 있습니다.</p>\n<ul>\n<li><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에 <code>template</code> 프로퍼티를 사용하면 템플릿을 <em>인라인(inline)</em>으로 구성할 수 있습니다. 이 방식은 간단한 데모용, 테스트용 컴포넌트를 만들때 유용합니다.</li>\n<li><code>@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a></code> 데코레이터에 <code>templateUrl</code> 프로퍼티를 사용하면 HTML 파일을 불러와서 템플릿으로 구성할 수 있습니다. 이 방식은 데모용이나 테스트용 컴포넌트보다 템플릿이 좀 더 복잡할 때 사용할 수 있으며, Angular 컴포넌트 템플릿을 사용하는 일반적인 방식입니다. Angular CLI로 컴포넌트를 생성하면 이 방식이 사용됩니다.</li>\n</ul>\n<p>두 경우 모두 템플릿에 사용된 데이터 바인딩은 같은 방식으로 컴포넌트 프로퍼티와 연결됩니다.\n아직까지는 템플릿을 별도 HTML 파일로 구성할만큼 복잡하지 않기 때문에 이 문서에서는 인라인 HTML 템플릿 방식을 사용하도록 합시다.</p>\n<div class=\"alert is-helpful\">\n<p>  기본 옵션으로 Angular CLI <a href=\"cli/generate\"><code>ng generate component</code></a> 명령을 실행하면 템플릿 파일이 별도로 생성됩니다.\n이 때 <code>-t</code> 옵션이나 <code>inlineTemplate=true</code> 옵션을 사용하면 템플릿을 인라인으로 생성할 수 있습니다:</p>\n  <code-example hidecopy=\"\" language=\"sh\" class=\"code-shell\">\n    ng generate component hero -t\n  </code-example>\n</div>\n<!--\n## Initialization\n-->\n<h2 id=\"변수-초기화\">변수 초기화<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#변수-초기화\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe following example uses variable assignment to initialize the components.\n\n<code-example path=\"displaying-data/src/app/app-ctor.component.1.ts\" region=\"class\">\nexport class AppComponent {\n  title: string;\n  myHero: string;\n\n  constructor() {\n    this.title = &#39;Tour of Heroes&#39;;\n    this.myHero = &#39;Windstorm&#39;;\n  }\n}\n\n\n</code-example>\n\n You could instead declare and initialize the properties using a constructor.\n This app uses more terse \"variable assignment\" style simply for brevity.\n-->\n<p>아래 코드는 컴포넌트 프로퍼티의 초기값을 지정하는 코드입니다.</p>\n<code-example path=\"displaying-data/src/app/app-ctor.component.1.ts\" region=\"class\">\nexport class AppComponent {\n  title: string;\n  myHero: string;\n\n  constructor() {\n    this.title = 'Tour of Heroes';\n    this.myHero = 'Windstorm';\n  }\n}\n\n\n</code-example>\n<p>컴포넌트 프로퍼티는 생성자에서 선언하고 바로 값을 할당할 수도 있습니다.\n간결함만 따진다면 이 방식이 더 좋습니다.</p>\n<a id=\"ngFor\"></a>\n<!--\n## Add logic to loop through data\n-->\n<h2 id=\"데이터-순회-로직-추가하기\">데이터 순회 로직 추가하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#데이터-순회-로직-추가하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe `*ngFor` directive (predefined by Angular) lets you loop through data. The following example uses the directive to show all of the values in an array property.\n\nTo display a list of heroes, begin by adding an array of hero names to the component and redefine `myHero` to be the first name in the array.\n\n\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  title = &#39;Tour of Heroes&#39;;\n  heroes = [&#39;Windstorm&#39;, &#39;Bombasto&#39;, &#39;Magneta&#39;, &#39;Tornado&#39;];\n  myHero = this.heroes[0];\n}\n\n\n</code-example>\n\n\nNow use the Angular `ngFor` directive in the template to display each item in the `heroes` list.\n\n\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *ngFor=&quot;let hero of heroes&quot;&gt;\n      {{ hero }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n\n</code-example>\n\n\nThis UI uses the HTML unordered list with `<ul>` and `<li>` tags. The `*ngFor`\nin the `<li>` element is the Angular \"repeater\" directive.\nIt marks that `<li>` element (and its children) as the \"repeater template\":\n\n\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (li)\" region=\"li\">\n&lt;li *ngFor=&quot;let hero of heroes&quot;&gt;\n  {{ hero }}\n&lt;/li&gt;\n\n</code-example>\n\n<div class=\"alert is-important\">\n\nDon't forget the leading asterisk (\\*) in `*ngFor`. It is an essential part of the syntax.\nRead more about `ngFor` and `*` in the [ngFor section](guide/built-in-directives#ngfor) of the [Built-in directives](guide/built-in-directives) page.\n\n</div>\n\nNotice the `hero` in the `ngFor` double-quoted instruction;\nit is an example of a template input variable. Read\nmore about template input variables in the [microsyntax](guide/built-in-directives#microsyntax) section of\nthe [Built-in directives](guide/built-in-directives) page.\n\nAngular duplicates the `<li>` for each item in the list, setting the `hero` variable\nto the item (the hero) in the current iteration. Angular uses that variable as the\ncontext for the interpolation in the double curly braces.\n\n<div class=\"alert is-helpful\">\n\nIn this case, `ngFor` is displaying an array, but `ngFor` can\nrepeat items for any [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) object.\n\n</div>\n\nNow the heroes appear in an unordered list.\n\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/hero-names-list.png\" alt=\"After ngfor\">\n</div>\n-->\n<p>Angular 내장 디렉티브인 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>를 활용하면 데이터를 순회할 수 있습니다.\n그래서 배열을 순회하며 데이터를 표시할 때도 이 디렉티브를 활용합니다.</p>\n<p>히어로의 목록을 표시하려면 먼저 컴포넌트에 배열을 정의해야 합니다. <code>myHero</code> 배열을 만들고, 이 배열에 히어로들의 이름을 할당합시다.</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (클래스)\" region=\"class\">\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  myHero = this.heroes[0];\n}\n\n\n</code-example>\n<p>그리고 Angular에서 제공하는 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 디렉티브를 사용하면 <code>heroes</code> 배열의 각 항목을 화면에 표시할 수 있습니다.</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (템플릿)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n      {{ hero }}\n    &#x3C;/li>\n  &#x3C;/ul>\n`\n\n</code-example>\n<p>이 템플릿에는 목록을 표시하기 위해 <code>&#x3C;ul></code> 태그와 <code>&#x3C;li></code> 태그를 사용했습니다.\n그리고 <code>&#x3C;li></code> 태그 안에 사용된 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 는 무언가를 반복할 때 사용하는 디렉티브입니다.\n이 디렉티브를 아래 예제처럼 <code>&#x3C;li></code> 엘리먼트에 사용하면 <code>&#x3C;li></code> 엘리먼트와 그 하위 엘리먼트를 반복할 수 있습니다.</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" header=\"src/app/app.component.ts (li)\" region=\"li\">\n&#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n  {{ hero }}\n&#x3C;/li>\n\n</code-example>\n<div class=\"alert is-important\">\n<p><code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 를 사용할 때 별표(*)를 잊지 마세요. 이 표기방식은 템플릿 문법에서도 특히 중요합니다.\n좀 더 자세한 설명은 <a href=\"guide/built-in-directives\">기본 디렉티브</a> 문서의 <a href=\"guide/built-in-directives#ngFor\">ngFor</a> 섹션을 참고하세요.</p>\n</div>\n<p>이 코드에서 <code>*<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 가 지정된 엘리먼트 안의 <code>hero</code> 에는 이중 중괄호가 사용되었는데, 이 문법은 템플릿에 데이터를 바인딩하는 방법 중 가장 간단한 방법입니다.\n더 자세한 내용은 <a href=\"guide/template-syntax\">템플릿 문법</a> 문서의 <a href=\"guide/built-in-directives#microsyntax\">세부 문법</a> 섹션을 참고하세요.</p>\n<p>이렇게 코드를 작성하면 Angular는 목록에 있는 항목의 개수만큼 <code>&#x3C;li></code> 태그를 반복하면서 <code>hero</code> 변수를 하나씩 전달합니다.\n이 때 전달된 변수는 이중 중괄호 안에서만 유효합니다.</p>\n<div class=\"alert is-helpful\">\n<p>이 코드에서 <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code> 는 배열을 순회하기 위해 사용했습니다. <code><a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a></code>는 배열 뿐 아니라 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">이터러블(interable)</a> 객체에도 사용할 수 있습니다.</p>\n</div>\n<p>여기까지 작성하면 이제 히어로의 목록이 화면에 표시됩니다.</p>\n<div class=\"lightbox\">\n  <img src=\"generated/images/guide/displaying-data/hero-names-list.png\" alt=\"ngfor 적용 화면\" width=\"350\" height=\"239\">\n</div>\n<!--\n## Creating a class for the data\n-->\n<h2 id=\"데이터-클래스-정의하기\">데이터 클래스 정의하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#데이터-클래스-정의하기\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nThe app's code defines the data directly inside the component, which isn't best practice.\nIn a simple demo, however, it's fine.\n\nAt the moment, the binding is to an array of strings.\nIn real applications, most bindings are to more specialized objects.\n\nTo convert this binding to use specialized objects, turn the array\nof hero names into an array of `Hero` objects. For that you'll need a `Hero` class:\n\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate class hero\n</code-example>\n\nThis command creates the following code.\n\n\n<code-example path=\"displaying-data/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-example>\n\nYou've defined a class with a constructor and two properties: `id` and `name`.\n\nIt might not look like the class has properties, but it does.\nThe declaration of the constructor parameters takes advantage of a TypeScript shortcut.\n\nConsider the first parameter:\n\n\n<code-example path=\"displaying-data/src/app/hero.ts\" header=\"src/app/hero.ts (id)\" region=\"id\">\npublic id: number,\n\n</code-example>\n\nThat brief syntax does a lot:\n\n* Declares a constructor parameter and its type.\n* Declares a public property of the same name.\n* Initializes that property with the corresponding argument when creating an instance of the class.\n-->\n<p>지금은 데이터를 그대로 컴포넌트에 표시하지만, 이 방식이 최선은 아닙니다.\n간단하게 테스트하는 목적이라면 이대로도 좋지만요.</p>\n<p>지금까지는 데이터가 간단한 문자열 배열이기 때문에 이정도로 충분했습니다.\n하지만 실제 애플리케이션에서는 복잡하게 정의된 객체를 바인딩해서 사용하는 경우가 대부분입니다.</p>\n<p>이제 객체를 바인딩하는 방법을 알아보기 위해, 배열의 항목을 <code>Hero</code> 객체로 만들어 봅시다.\nAngular CLI를 사용해서 <code>Hero</code> 클래스를 생성합니다.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ng generate class hero\n</code-example>\n<p>그리고 클래스 코드는 다음과 같이 작성합니다.</p>\n<code-example path=\"displaying-data/src/app/hero.ts\" header=\"src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-example>\n<p>이 코드에서는 생성자에서 <code>id</code> 프로퍼티와 <code>name</code> 프로퍼티를 정의했습니다.</p>\n<p>코드를 이렇게 작성하면 클래스에 프로퍼티를 선언하지 않은 것 같지만, 실제로는 프로퍼티가 2개 선언됩니다.\n이 문법은 TypeScript 문법으로, 생성자에서 프로퍼티를 간단하게 정의하는 문법입니다.</p>\n<p>생성자에 사용된 첫번째 인자를 봅시다:</p>\n<code-example path=\"displaying-data/src/app/hero.ts\" header=\"src/app/hero.ts (id)\" region=\"id\">\npublic id: number,\n\n</code-example>\n<p>이 간단한 문법이 다음과 같은 역할을 합니다:</p>\n<ul>\n<li>생성자로 받을 인자와 인자의 타입을 정의합니다.</li>\n<li>인자와 같은 이름으로 클래스에 public 프로퍼티를 선언합니다.</li>\n<li>클래스가 생성될 때 생성자로 인자를 받으면 그 값을 해당 프로퍼티에 할당합니다.</li>\n</ul>\n<!--\n### Using the Hero class\n-->\n<h3 id=\"hero-클래스-적용하기\">Hero 클래스 적용하기<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#hero-클래스-적용하기\"><i class=\"material-icons\">link</i></a></h3>\n<!--\nAfter importing the `Hero` class, the `AppComponent.heroes` property can return a _typed_ array\nof `Hero` objects:\n\n\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (heroes)\" region=\"heroes\">\nheroes = [\n  new Hero(1, &#39;Windstorm&#39;),\n  new Hero(13, &#39;Bombasto&#39;),\n  new Hero(15, &#39;Magneta&#39;),\n  new Hero(20, &#39;Tornado&#39;)\n];\nmyHero = this.heroes[0];\n\n</code-example>\n\n\n\nNext, update the template.\nAt the moment it displays the hero's `id` and `name`.\nFix that to display only the hero's `name` property.\n\n\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero.name}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *ngFor=&quot;let hero of heroes&quot;&gt;\n      {{ hero.name }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n\n</code-example>\n\n\nThe display looks the same, but the code is clearer.\n-->\n<p>이제 <code>AppComponent.heroes</code> 프로퍼티를 <code>Hero</code> 객체 타입으로 다시 정의합니다.</p>\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (heroes)\" region=\"heroes\">\nheroes = [\n  new Hero(1, 'Windstorm'),\n  new Hero(13, 'Bombasto'),\n  new Hero(15, 'Magneta'),\n  new Hero(20, 'Tornado')\n];\nmyHero = this.heroes[0];\n\n</code-example>\n<p>그리고 템플릿을 수정합니다.\n히어로 객체에는 <code>id</code> 프로퍼티와 <code>name</code> 프로퍼티가 있지만, 지금은 <code>name</code> 프로퍼티만 화면에 표시합시다.</p>\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" header=\"src/app/app.component.ts (템플릿)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero.name}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n      {{ hero.name }}\n    &#x3C;/li>\n  &#x3C;/ul>\n`\n\n</code-example>\n<p>앱을 실행해보면 화면에 표시되는 모습은 이전과 같지만, 이제 객체의 어떤 프로퍼티를 참조하는지 명확해졌습니다.</p>\n<a id=\"ngIf\"></a>\n<!--\n## Conditional display with NgIf\n-->\n<h2 id=\"특정-조건을-만족할-때만-표시하기--ngif\">특정 조건을 만족할 때만 표시하기 : <strong><em>ngIf</em></strong><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#특정-조건을-만족할-때만-표시하기--ngif\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nSometimes an app needs to display a view or a portion of a view only under specific circumstances.\n\nLet's change the example to display a message if there are more than three heroes.\n\nThe Angular `ngIf` directive inserts or removes an element based on a _truthy/falsy_ condition.\nTo see it in action, add the following paragraph at the bottom of the template:\n\n<code-example path=\"displaying-data/src/app/app.component.ts\" header=\"src/app/app.component.ts (message)\" region=\"message\">\n&lt;p *ngIf=&quot;heroes.length &gt; 3&quot;&gt;There are many heroes!&lt;/p&gt;\n\n</code-example>\n\n<div class=\"alert is-important\">\n\nDon't forget the leading asterisk (\\*) in `*ngIf`. It is an essential part of the syntax.\nRead more about `ngIf` and `*` in the [ngIf section](guide/built-in-directives#ngIf) of the [Built-in directives](guide/built-in-directives) page.\n\n</div>\n\n\nThe template expression inside the double quotes,\n`*ngIf=\"heroes.length > 3\"`, looks and behaves much like TypeScript.\nWhen the component's list of heroes has more than three items, Angular adds the paragraph\nto the DOM and the message appears.\nIf there are three or fewer items, Angular omits the paragraph, so no message appears.\n\nFor more information, see [template expression operators](guide/interpolation#template-expressions).\n\n\n<div class=\"alert is-helpful\">\n\nAngular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in larger projects when conditionally including or excluding\nbig chunks of HTML with many data bindings.\n\n</div>\n\nTry it out. Because the array has four items, the message should appear.\nGo back into <code>app.component.ts</code> and delete or comment out one of the elements from the heroes array.\nThe browser should refresh automatically and the message should disappear.\n-->\n<p>어떤 뷰는 특정 조건을 만족할 때만 화면에 표시할 수 있습니다.</p>\n<p>히어로 데이터가 3건을 넘어가면 간단한 메시지를 화면에 표시하도록 예제를 수정해 봅시다.</p>\n<p>Angular에서 제공하는 <code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 디렉티브는 <em>참/거짓으로 평가되는</em> 조건에 따라 엘리먼트를 DOM에 추가하거나 제거합니다.\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 의 동작을 확인하기 위해 템플릿에 다음과 같은 코드를 작성합시다.</p>\n<code-example path=\"displaying-data/src/app/app.component.ts\" header=\"src/app/app.component.ts (message)\" region=\"message\">\n&#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\">There are many heroes!&#x3C;/p>\n\n</code-example>\n<div class=\"alert is-important\">\n<p><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 를 사용할 때 별표(*) 를 빼먹지 마세요. 이 표기방식은 템플릿 문법에서 특히 중요합니다.\n<code><a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 나 <code>*</code> 에 대해 자세히 살펴보려면 <a href=\"guide/built-in-directives\">기본 디렉티브</a> 문서에 있는 <a href=\"guide/built-in-directives#ngIf\">ngIf 섹션</a>을 참고하세요.</p>\n</div>\n<p>템플릿 표현식으로 사용된 <code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\"</code> 구문은 TypeScript 문법처럼 보이고 실제로 동작하는 것도 비슷합니다.\n이 코드를 추가하면 컴포넌트에 있는 히어로 목록의 길이가 3를 넘었을 때 DOM에 <code>&#x3C;p></code> 엘리먼트를 추가하고 이 엘리먼트에 있는 메시지를 표시합니다.\n목록의 길이가 3 이하라면 <code>&#x3C;p></code> 엘리먼트가 DOM에서 제거되면서 메시지도 함께 사라집니다.</p>\n<p>자세한 내용은 <a href=\"guide/interpolation#template-expressions\">템플릿 표현식</a> 문서를 참고하세요.</p>\n<div class=\"alert is-helpful\">\n<p><code>*<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a></code> 조건을 만족하지 않아서 엘리먼트가 화면에 표시되지 않을 때, 엘리먼트는 감춰지는 것이 아니고 DOM에서 완전히 제거됩니다.\n이 방식은 성능 향상에 도움이 되며, 조건문이 많고 데이터 바인딩을 많이 하는 프로젝트에 더욱 유용합니다.</p>\n</div>\n<p>앱을 실행해서 결과를 직접 확인해 보세요. 예제에서 다룬 배열은 길이가 4이기 때문에 메시지가 표시됩니다.\n그리고 <code>app.component.ts\"</code> 코드에서 히어로 배열 코드를 삭제하거나 주석 처리하면, 브라우저가 자동으로 갱신되면서 메시지가 표시되지 않을 것입니다.</p>\n<!--\n## Summary\n-->\n<h2 id=\"정리\">정리<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#정리\"><i class=\"material-icons\">link</i></a></h2>\n<!--\nNow you know how to use:\n\n* **Interpolation** with double curly braces to display a component property.\n* **ngFor** to display an array of items.\n* A TypeScript class to shape the **model data** for your component and display properties of that model.\n* **ngIf** to conditionally display a chunk of HTML based on a boolean expression.\n\nHere's the final code:\n-->\n<p>이 문서에서는 이런 내용들을 다뤘습니다:</p>\n<ul>\n<li>이중 중괄호를 사용해서 컴포넌트 프로퍼티를 템플릿에 넣는 방법을 <strong>문자열 바인딩(interpolation)</strong> 이라고 합니다.</li>\n<li>배열은 <strong>ngFor</strong> 를 사용해서 순회할 수 있습니다.</li>\n<li>컴포넌트와 템플릿에 사용할 데이터에 형식을 지정하고 싶다면 TypeScript 클래스를 사용할 수 있습니다.</li>\n<li><strong>ngIf</strong> 를 사용하면 불리언 값으로 평가되는 조건에 맞춰 HTML 조각을 DOM에 추가하거나 제거할 수 있습니다.</li>\n</ul>\n<p>그리고 이 문서에서 다뤘던 코드의 최종 버전은 다음과 같습니다:</p>\n<code-tabs>\n\n  <code-pane header=\"src/app/app.component.ts\" path=\"displaying-data/src/app/app.component.ts\" region=\"final\">\nimport { <a href=\"api/core/Component\" class=\"code-anchor\">Component</a> } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@<a href=\"api/core/Component\" class=\"code-anchor\">Component</a>({\n  selector: 'app-root',\n  template: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero.name}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *<a href=\"api/common/NgForOf\" class=\"code-anchor\">ngFor</a>=\"let hero of heroes\">\n      {{ hero.name }}\n      &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;p *<a href=\"api/common/NgIf\" class=\"code-anchor\">ngIf</a>=\"heroes.length > 3\">There are many heroes!&#x3C;/p>\n`\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = [\n    new Hero(1, 'Windstorm'),\n    new Hero(13, 'Bombasto'),\n    new Hero(15, 'Magneta'),\n    new Hero(20, 'Tornado')\n  ];\n  myHero = this.heroes[0];\n}\n\n\n</code-pane>\n\n  <code-pane header=\"src/app/hero.ts\" path=\"displaying-data/src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-pane>\n\n  <code-pane header=\"src/app/app.module.ts\" path=\"displaying-data/src/app/app.module.ts\">\nimport { <a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a> }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@<a href=\"api/core/NgModule\" class=\"code-anchor\">NgModule</a>({\n  imports: [\n    <a href=\"api/platform-browser/BrowserModule\" class=\"code-anchor\">BrowserModule</a>\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane header=\"main.ts\" path=\"displaying-data/src/main.ts\">\nimport { <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a> } from '@angular/core';\nimport { <a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  <a href=\"api/core/enableProdMode\" class=\"code-anchor\">enableProdMode</a>();\n}\n\n<a href=\"api/platform-browser-dynamic/platformBrowserDynamic\" class=\"code-anchor\">platformBrowserDynamic</a>().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n\n</div>\n\n<!-- links to this doc:\n - guide/architecture-components\n - guide/architecture-next-steps\n - guide/user-input\n - guide/zone\n-->\n<!-- links from this doc:\n - api/common/NgForOf\n - api/common/NgIf\n - api/core/Component\n - api/core/NgModule\n - api/core/enableProdMode\n - api/platform-browser-dynamic/platformBrowserDynamic\n - api/platform-browser/BrowserModule\n - cli/generate\n - cli/new\n - guide/built-in-directives\n - guide/built-in-directives#microsyntax\n - guide/built-in-directives#ngFor\n - guide/built-in-directives#ngIf\n - guide/displaying-data#hero-클래스-적용하기\n - guide/displaying-data#데이터-순회-로직-추가하기\n - guide/displaying-data#데이터-클래스-정의하기\n - guide/displaying-data#문자열-바인딩\n - guide/displaying-data#변수-초기화\n - guide/displaying-data#정리\n - guide/displaying-data#템플릿-구성방식-결정하기\n - guide/displaying-data#특정-조건을-만족할-때만-표시하기--ngif\n - guide/displaying-data#화면에-데이터-표시하기\n - guide/glossary#component\n - guide/glossary#data-binding\n - guide/glossary#directive\n - guide/glossary#template\n - guide/glossary#view\n - guide/interpolation#template-expressions\n - guide/template-syntax\n - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\n - https://github.com/angular/angular/edit/master/aio/content/guide/displaying-data.md?message=docs%3A%20describe%20your%20change...\n-->"
}