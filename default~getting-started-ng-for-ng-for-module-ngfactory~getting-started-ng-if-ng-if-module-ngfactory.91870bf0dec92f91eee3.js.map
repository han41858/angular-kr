{"version":3,"sources":["webpack:///./src/app/custom-elements/getting-started/container/container.module.ts","webpack:///./node_modules/@angular/cdk/esm5/observers.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/tooltip/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/tooltip/typings/index.d.ts.TooltipComponent.html","webpack:///./src/app/custom-elements/getting-started/container/container.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/getting-started/container/container.component.ts.ContainerComponent.html","webpack:///./src/app/custom-elements/getting-started/product.service.ts","webpack:///./src/app/custom-elements/getting-started/container/container.component.ts","webpack:///./node_modules/@angular/material/esm5/tooltip.es5.js.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","ContainerModule","MutationObserverFactory","ContentObserver","CdkObserveContent","ObserversModule","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","rxjs__WEBPACK_IMPORTED_MODULE_2__","rxjs__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","prototype","create","callback","MutationObserver","ngInjectableDef","Object","factory","token","providedIn","_mutationObserverFactory","this","_observedElements","Map","ngOnDestroy","_this","forEach","_","element","_cleanupObserver","observe","elementOrRef","nativeElement","observer","subscription","_observeElement","subscribe","unsubscribe","_unobserveElement","has","get","count","stream_1","mutations","next","characterData","childList","subtree","set","stream","_a","disconnect","complete","delete","_contentObserver","_elementRef","_ngZone","event","_disabled","_currentSubscription","defineProperty","value","_unsubscribe","_subscribe","enumerable","configurable","_debounce","ngAfterContentInit","disabled","runOutsideAngular","debounce","pipe","TooltipComponentNgFactory","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_12__","RenderType_TooltipComponent","encapsulation","styles","data","animation","type","name","definitions","opacity","transform","offset","options","undefined","expr","steps","timings","View_TooltipComponent_0","_l","_v","en","$event","ad","_co","component","_animationStart","_animationDone","klass","ngClass","_ck","tooltipClass","tmp_0_0","_isHandset","matches","_visibility","message","View_TooltipComponent_Host_0","_handleBodyInteraction","RenderType_ContainerComponent","View_ContainerComponent_0","ProductService","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","PRODUCTS","productsData$","JSON","stringify","products$","parseError$","init","parsed","parse","e","Array","isArray","ContainerComponent","MatTooltipModule","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_DEFAULT_OPTIONS","MatTooltip","TooltipComponent","tslib__WEBPACK_IMPORTED_MODULE_1__","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_2__","_angular_cdk_keycodes__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_layout__WEBPACK_IMPORTED_MODULE_4__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_6__","rxjs_operators__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","_angular_core__WEBPACK_IMPORTED_MODULE_9__","rxjs__WEBPACK_IMPORTED_MODULE_10__","SCROLL_THROTTLE_MS","getMatTooltipInvalidPositionError","position","Error","overlay","scrollStrategies","reposition","scrollThrottle","showDelay","hideDelay","touchendHideDelay","_overlay","_scrollDispatcher","_viewContainerRef","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_dir","_defaultOptions","_position","_message","_manualListeners","_destroyed","_scrollStrategy","elementStyle","IOS","ANDROID","show","hide","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","monitor","origin","run","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","removeDescription","trim","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","dispose","removeEventListener","clear","stopMonitoring","delay","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","attach","instance","afterHidden","toggle","isVisible","_handleKeydown","keyCode","stopPropagation","_handleTouchend","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","direction","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","_invertPosition","x","y","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","_changeDetectorRef","_breakpointObserver","_closeOnInteraction","_onHide","Handset","clearTimeout","setTimeout","toState","markForCheck"],"mappings":"2FAIAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAA,EAAA,WAK+B,OAL/B,mDCJAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAAJ,EAAAC,EAAAC,EAAA,sBAAAG,IAAAL,EAAAC,EAAAC,EAAA,sBAAAI,IAAAN,EAAAC,EAAAC,EAAA,sBAAAK,IAAA,IAAAC,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAAAW,EAAAX,EAAA,QAAAY,EAAAZ,EAAA,QAoBII,EAAyC,WACzC,SAASA,KAiBT,OAXAA,EAAwBS,UAAUC,OAIlC,SAAUC,GACN,MAAmC,oBAArBC,iBAAmC,KAAO,IAAIA,iBAAiBD,IAK9DX,EAAwBa,gBAAkBC,OAAAT,EAAA,EAAAS,CAAiB,CAAEC,QAAS,WAA6C,OAAO,IAAIf,GAA8BgB,MAAOhB,EAAyBiB,WAAY,SACpNjB,EAlBiC,GAuBxCC,EAAiC,WACjC,SAASA,EAAgBiB,GACrBC,KAAKD,yBAA2BA,EAIhCC,KAAKC,kBAAoB,IAAIC,IAmHjC,OA9GApB,EAAgBQ,UAAUa,YAG1B,WACI,IAAIC,EAAQJ,KACZA,KAAKC,kBAAkBI,QAAQ,SAAUC,EAAGC,GAAW,OAAOH,EAAMI,iBAAiBD,MAMzFzB,EAAgBQ,UAAUmB,QAI1B,SAAUC,GACN,IAAIN,EAAQJ,KAERO,EAAUG,aAAwBxB,EAAA,EAAawB,EAAaC,cAAgBD,EAChF,OAAOvB,EAAA,EAAWI,OAAO,SAAUqB,GAE/B,IAEIC,EAFST,EAAMU,gBAAgBP,GAETQ,UAAUH,GACpC,OAAO,WACHC,EAAaG,cACbZ,EAAMa,kBAAkBV,OAUpCzB,EAAgBQ,UAAUwB,gBAM1B,SAAUP,GACN,GAAKP,KAAKC,kBAAkBiB,IAAIX,GAeTP,KAAKC,kBAAkBkB,IAAIZ,GAAWa,YAfnB,CAEtC,IAAIC,EAAW,IAAIjC,EAAA,EAEfwB,EAAWZ,KAAKD,yBAAyBR,OAAO,SAAU+B,GAAa,OAAOD,EAASE,KAAKD,KAC5FV,GACAA,EAASH,QAAQF,EAAS,CACtBiB,eAAe,EACfC,WAAW,EACXC,SAAS,IAGjB1B,KAAKC,kBAAkB0B,IAAIpB,EAAS,CAAEK,SAAUA,EAAUgB,OAAQP,EAAUD,MAAO,IAKvF,OAA0BpB,KAAKC,kBAAkBkB,IAAIZ,GAAWqB,QAQpE9C,EAAgBQ,UAAU2B,kBAM1B,SAAUV,GACFP,KAAKC,kBAAkBiB,IAAIX,KACRP,KAAKC,kBAAkBkB,IAAIZ,GAAWa,QACjCpB,KAAKC,kBAAkBkB,IAAIZ,GAAWa,OAC1DpB,KAAKQ,iBAAiBD,KASlCzB,EAAgBQ,UAAUkB,iBAK1B,SAAUD,GACN,GAAIP,KAAKC,kBAAkBiB,IAAIX,GAAU,CACrC,IAAIsB,EAAwB7B,KAAKC,kBAAkBkB,IAAIZ,GAAYK,EAAWiB,EAAGjB,SAAUgB,EAASC,EAAGD,OACnGhB,GACAA,EAASkB,aAEbF,EAAOG,WACP/B,KAAKC,kBAAkB+B,OAAOzB,KAUnBzB,EAAgBY,gBAAkBC,OAAAT,EAAA,EAAAS,CAAiB,CAAEC,QAAS,WAAqC,OAAO,IAAId,EAAgBa,OAAAT,EAAA,EAAAS,CAAOd,KAA8BgB,MAAOf,EAAiBgB,WAAY,SACnNhB,EAzHyB,GA+HhCC,EAAmC,WACnC,SAASA,EAAkBkD,EAAkBC,EAAaC,GACtDnC,KAAKiC,iBAAmBA,EACxBjC,KAAKkC,YAAcA,EACnBlC,KAAKmC,QAAUA,EAIfnC,KAAKoC,MAAQ,IAAIlD,EAAA,EACjBc,KAAKqC,WAAY,EACjBrC,KAAKsC,qBAAuB,KA8GhC,OA5GA3C,OAAO4C,eAAexD,EAAkBO,UAAW,WAAY,CAK3D6B,IAKA,WAAc,OAAOnB,KAAKqC,WAC1BV,IAIA,SAAUa,GACNxC,KAAKqC,UAAY1C,OAAAV,EAAA,EAAAU,CAAsB6C,GACvCxC,KAAKqC,UAAYrC,KAAKyC,eAAiBzC,KAAK0C,cAEhDC,YAAY,EACZC,cAAc,IAElBjD,OAAO4C,eAAexD,EAAkBO,UAAW,WAAY,CAE3D6B,IAIA,WAAc,OAAOnB,KAAK6C,WAC1BlB,IAIA,SAAUa,GACNxC,KAAK6C,UAAYlD,OAAAV,EAAA,EAAAU,CAAqB6C,GACtCxC,KAAK0C,cAETC,YAAY,EACZC,cAAc,IAKlB7D,EAAkBO,UAAUwD,mBAG5B,WACS9C,KAAKsC,sBAAyBtC,KAAK+C,UACpC/C,KAAK0C,cAMb3D,EAAkBO,UAAUa,YAG5B,WACIH,KAAKyC,gBAKT1D,EAAkBO,UAAUoD,WAG5B,WACI,IAAItC,EAAQJ,KACZA,KAAKyC,eAEL,IAAIb,EAAS5B,KAAKiC,iBAAiBxB,QAAQT,KAAKkC,aAKhDlC,KAAKmC,QAAQa,kBAAkB,WAC3B5C,EAAMkC,sBACDlC,EAAM6C,SAAWrB,EAAOsB,KAAKvD,OAAAN,EAAA,EAAAM,CAAaS,EAAM6C,WAAarB,GAAQb,UAAUX,EAAMgC,UAMlGrD,EAAkBO,UAAUmD,aAG5B,WACQzC,KAAKsC,sBACLtC,KAAKsC,qBAAqBtB,eAoB3BjC,EAxH2B,GA0HlCC,EAAiC,WAUjC,OATA,aADgC,sCCpSpCP,EAAAC,EAAAC,EAAA,sBAAAwE,IAAA,IAAAC,EAAA3E,EAAA,QAAA4E,EAAA5E,EAAA,QAAA6E,EAAA7E,EAAA,QAAA8E,GAAA9E,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAAAA,EAAA,SAsBI+E,EAA8BJ,EAAA,GAAQ,CAAEK,cAAe,EAAGC,OADhC,CAAC,wVACgEC,KAAM,CAAEC,UAAa,CAAC,CAAEC,KAAM,EAAGC,KAAM,QAASC,YAAa,CAAC,CAAEF,KAAM,EAAGC,KAAM,wBAAyBJ,OAAQ,CAAEG,KAAM,EAAGH,OAAQ,CAAEM,QAAS,EAAGC,UAAW,YAAcC,OAAQ,MAAQC,aAASC,GAAa,CAAEP,KAAM,EAAGC,KAAM,UAAWJ,OAAQ,CAAEG,KAAM,EAAGH,OAAQ,CAAEO,UAAW,YAAcC,OAAQ,MAAQC,aAASC,GAAa,CAAEP,KAAM,EAAGQ,KAAM,eAAgBT,UAAW,CAAEC,KAAM,EAAGH,OAAQ,CAAEG,KAAM,EAAGS,MAAO,CAAC,CAAET,KAAM,EAAGH,OAAQ,CAAEM,QAAS,EAAGC,UAAW,WAAYC,OAAQ,GAAKA,OAAQ,MAAQ,CAAEL,KAAM,EAAGH,OAAQ,CAAEM,QAAS,GAAKC,UAAW,cAAeC,OAAQ,IAAOA,OAAQ,MAAQ,CAAEL,KAAM,EAAGH,OAAQ,CAAEM,QAAS,EAAGC,UAAW,WAAYC,OAAQ,GAAKA,OAAQ,QAAWK,QAAS,oCAAsCJ,QAAS,MAAQ,CAAEN,KAAM,EAAGQ,KAAM,cAAeT,UAAW,CAAEC,KAAM,EAAGH,OAAQ,CAAEG,KAAM,EAAGH,OAAQ,CAAEM,QAAS,GAAKE,OAAQ,MAAQK,QAAS,oCAAsCJ,QAAS,OAASA,QAAS,QAEt/B,SAASK,EAAwBC,GAAM,OAAOrB,EAAA,GAAQ,EAAG,ECxBhEqB,MAAArB,EAAA,0JAAAsB,EAAAC,EAAAC,GAAA,IAAAC,GAAA,EAAAC,EAAAJ,EAKAK,UALA,MAGM,iBAAAJ,IDuBEE,GADsC,IAA1BC,EAAIE,mBACFH,GCtBpB,gBAAAF,IDyBME,GAD2C,IAA/BC,EAAIG,eAAeL,IACjBC,GC7BtBA,GAAA,YAAAzB,EAAA,mBAAAE,EAAA,GAAAF,EAAA,EAAAA,EAAA,EAAAA,EAAA,EAAAA,EAAA,IAAA8B,MAAA,YAAAC,QAAA,qBACa/B,EAAA,UAAAE,EAAA,GAAAF,EAAA,KAIbqB,MAAArB,EAAA,qBAAW,SAAAgC,EAAAV,GALXU,EAAAV,EAAA,IAAK,cAKMA,EAAAK,UAJCM,eAAA,SAAAD,EAAAV,GAAA,IAACY,EAADR,EAAAJ,EAAAK,UADZK,EAAAV,EAAA,IACa,OAAAY,EAAAlC,EAAA,GAAAsB,EAAA,IAAAtB,EAAA,GAAAsB,EAAA,GAAAT,UAAAa,EAAAS,cAAA,KAAAD,EACUE,QAACV,EACnBW,aAELL,EAAAV,EAAA,IAAAI,EAAAY,WD0BO,SAASC,EAA6BlB,GAAM,OAAOrB,EAAA,GAAQ,EAAG,EAAEqB,MAAQrB,EAAA,GAAQ,EAAG,EAAG,KAAM,KAAM,EAAG,wBAAyB,CAAC,CAAC,cAAe,SAAU,CAAC,CAAC,EAAG,OAAQ,OAAQ,CAAC,CAAC,OAAQ,UAAW,SAAUsB,EAAIC,EAAIC,GAAU,IAAIC,GAAK,EAGzO,MAHoP,eAAiBF,IAEnQE,GADwD,IAA5CzB,EAAA,GAAQsB,EAAI,GAAGkB,0BACbf,GACTA,GAAOL,EAAyBhB,IAA+BJ,EAAA,GAAQ,EAAG,MAAO,KAAM,EAAGC,EAAA,EAAqB,CAACD,EAAA,EAAsBG,EAAA,GAAyB,KAAM,OAAQ,KAAM,SAAU6B,EAAKV,GAA+EU,EAAIV,EAAI,EAAG,EAAnC,YAA/BtB,EAAA,GAAQsB,EAAI,GAAGe,YAA6B,EAAI,QACvR,IAAItC,EAA4BC,EAAA,GAAQ,wBAAyBC,EAAA,EAAqBsC,EAA8B,GAAI,GAAI,yCEnC5HlH,EAAAC,EAAAC,EAAA,sBAAAkH,IAAApH,EAAAC,EAAAC,EAAA,sBAAAmH,IAAA,IAAA1C,EAAA3E,EAAA,QASIoH,GATJpH,EAAA,QASoC2E,EAAA,GAAQ,CAAEK,cAAe,EAAGC,OADhC,CAAC,ivCACkEC,KAAM,MAElG,SAASmC,EAA0BrB,GAAM,OAAOrB,EAAA,GAAQ,EAAG,ECX7DqB,MAAArB,EAAA,2DAAcqB,MAAArB,EAAA,0DAAgBqB,MAAArB,EAAA,uDACtBqB,MAAArB,EAAA,uDAAIqB,MAAArB,EAAA,2BACGqB,MAAArB,EAAA,uDAAIqB,MAAArB,EAAA,uBAAoBqB,MAAArB,EAAA,uDAAIqB,MAAArB,EAAA,yBAA+CqB,MAAArB,EAAA,0DAAgBqB,MAAArB,EAAA,wDAAeqB,MAAArB,EAAA,wDAAiBqB,MAAArB,EAAA,wDAAKA,EAAA,YAA6EqB,MAAArB,EAAA,wDAAiBqB,MAAArB,EAAA,yDAAMA,EAAA,YAA0EqB,MAAArB,EAAA,uDAAIA,EAAA,YAA6B,+CCDnW3E,EAAAC,EAAAC,EAAA,sBAAAoH,IAAA,IAAAC,EAAAvH,EAAA,QAAAwH,EAAAxH,EAAA,QAAAyH,EAAAzH,EAAA,QAAA0H,EAAA1H,EAAA,QAGa2H,EAAW,CAAC,QAAS,UAElCL,EAAA,oBAAAA,IAEE/F,KAAAqG,cAAgB,IAAIL,EAAA,EAAgBM,KAAKC,UAAUH,IACnDpG,KAAAwG,UAAY,IAAIR,EAAA,EAA0BI,GAC1CpG,KAAAyG,YAAc,IAAIR,EAAA,EAsBpB,OApBEF,EAAAzG,UAAAoH,KAAA,eAAAtG,EAAAJ,KACE,OAAOA,KAAKqG,cAAcnD,KACxBvD,OAAAuG,EAAA,EAAAvG,CAAa,KACbA,OAAAwG,EAAA,EAAAxG,CAAI,SAAAgE,GACF,IAAIgD,EAEJ,IACEA,EAASL,KAAKM,MAAMjD,GACpB,MAAOkD,GACPF,EAAS,KAGPA,GAAUG,MAAMC,QAAQJ,IAC1BvG,EAAKoG,UAAUjF,KAAKoF,GACpBvG,EAAKqG,YAAYlF,MAAK,IAEtBnB,EAAKqG,YAAYlF,MAAK,OAIhCwE,EA1BA,sCCJAtH,EAAAC,EAAAC,EAAA,sBAAAqI,IAAA,IAAAA,EAAA,WA6EkC,OA7ElC,mDCFAvI,EAAAC,EAAAC,EAAA,sBAAAsI,IAAAxI,EAAAC,EAAAC,EAAA,sBAAAuI,IAAAzI,EAAAC,EAAAC,EAAA,sBAAAwI,IAAA1I,EAAAC,EAAAC,EAAA,sBAAAyI,IAAA3I,EAAAC,EAAAC,EAAA,sBAAA0I,IAAA5I,EAAAC,EAAAC,EAAA,sBAAA2I,IAAA7I,EAAA,YAAA8I,EAAA9I,EAAA,QAAA+I,EAAA/I,EAAA,QAAAgJ,EAAAhJ,EAAA,QAAAiJ,EAAAjJ,EAAA,QAAAkJ,GAAAlJ,EAAA,QAAAA,EAAA,SAAAmJ,EAAAnJ,EAAA,QAAAoJ,EAAApJ,EAAA,QAAAqJ,EAAArJ,EAAA,QAAAsJ,EAAAtJ,EAAA,QAsDIuJ,EAAqB,GAWzB,SAASC,EAAkCC,GACvC,OAAOC,MAAM,qBAAwBD,EAAW,iBAKpD,IAAIf,EAA8B,IAAIW,EAAA,EAAe,+BAMrD,SAASZ,EAAoCkB,GACzC,OAAO,WAAc,OAAOA,EAAQC,iBAAiBC,WAAW,CAAEC,eAAgBP,KAKtF,IAQIZ,EAA8B,IAAIU,EAAA,EAAe,8BAA+B,CAChFhI,WAAY,OACZF,QAMJ,WACI,MAAO,CACH4I,UAAW,EACXC,UAAW,EACXC,kBAAmB,SASvBrB,EAA4B,WAC5B,SAASA,EAAWsB,EAAUzG,EAAa0G,EAAmBC,EAAmB1G,EAAS2G,EAAWC,EAAgBC,EAAeC,EAAgBC,EAAMC,GACtJ,IAAI/I,EAAQJ,KACZA,KAAK2I,SAAWA,EAChB3I,KAAKkC,YAAcA,EACnBlC,KAAK4I,kBAAoBA,EACzB5I,KAAK6I,kBAAoBA,EACzB7I,KAAKmC,QAAUA,EACfnC,KAAK8I,UAAYA,EACjB9I,KAAK+I,eAAiBA,EACtB/I,KAAKgJ,cAAgBA,EACrBhJ,KAAKkJ,KAAOA,EACZlJ,KAAKmJ,gBAAkBA,EACvBnJ,KAAKoJ,UAAY,QACjBpJ,KAAKqC,WAAY,EAIjBrC,KAAKwI,UAAYxI,KAAKmJ,gBAAgBX,UAItCxI,KAAKyI,UAAYzI,KAAKmJ,gBAAgBV,UACtCzI,KAAKqJ,SAAW,GAChBrJ,KAAKsJ,iBAAmB,IAAIpJ,IAI5BF,KAAKuJ,WAAa,IAAIxB,EAAA,EACtB/H,KAAKwJ,gBAAkBP,EAEvB,IAAI1I,EAAU2B,EAAYvB,cAEtB8I,EAAiClJ,EAAa,MAG7CuI,EAAUY,KAAQZ,EAAUa,SAC7B3J,KAAKsJ,iBACA3H,IAAI,aAAc,WAAc,OAAOvB,EAAMwJ,SAC7CjI,IAAI,aAAc,WAAc,OAAOvB,EAAMyJ,SAC7CxJ,QAAQ,SAAUyJ,EAAU1H,GAAS,OAAO7B,EAAQwJ,iBAAiB3H,EAAO0H,KAE5D,UAArBvJ,EAAQyJ,UAA6C,aAArBzJ,EAAQyJ,WAMxCP,EAAaQ,iBAAmBR,EAAaS,WAAaT,EAAaU,aAAe,IAKtF5J,EAAQ6J,WAA6C,SAAhCX,EAAaY,iBAClCZ,EAAaY,eAAiB,IAElCrB,EAAcsB,QAAQpI,GAAagB,KAAKvD,OAAAiI,EAAA,EAAAjI,CAAUK,KAAKuJ,aAAaxI,UAAU,SAAUwJ,GAE/EA,EAGe,aAAXA,GACLpI,EAAQqI,IAAI,WAAc,OAAOpK,EAAMwJ,SAHvCzH,EAAQqI,IAAI,WAAc,OAAOpK,EAAMyJ,KAAK,OA6exD,OAteAlK,OAAO4C,eAAe8E,EAAW/H,UAAW,WAAY,CAEpD6B,IAIA,WAAc,OAAOnB,KAAKoJ,WAC1BzH,IAIA,SAAUa,GACFA,IAAUxC,KAAKoJ,YACfpJ,KAAKoJ,UAAY5G,EACbxC,KAAKyK,cACLzK,KAAK0K,kBACD1K,KAAK2K,kBACc3K,KAAsB,iBAAE4J,KAAK,GAEpD5J,KAAKyK,YAAYG,oBAI7BjI,YAAY,EACZC,cAAc,IAElBjD,OAAO4C,eAAe8E,EAAW/H,UAAW,WAAY,CAEpD6B,IAIA,WAAc,OAAOnB,KAAKqC,WAC1BV,IAIA,SAAUa,GACNxC,KAAKqC,UAAY1C,OAAA6H,EAAA,EAAA7H,CAAsB6C,GAEnCxC,KAAKqC,WACLrC,KAAK6J,KAAK,IAGlBlH,YAAY,EACZC,cAAc,IAElBjD,OAAO4C,eAAe8E,EAAW/H,UAAW,UAAW,CAEnD6B,IAIA,WAAc,OAAOnB,KAAKqJ,UAC1B1H,IAIA,SAAUa,GACNxC,KAAK+I,eAAe8B,kBAAkB7K,KAAKkC,YAAYvB,cAAeX,KAAKqJ,UAE3ErJ,KAAKqJ,SAAoB,MAAT7G,GAAiB,GAAKA,GAAOsI,OAAS,IACjD9K,KAAKqJ,UAAYrJ,KAAK+K,oBACvB/K,KAAK6J,KAAK,IAGV7J,KAAKgL,wBACLhL,KAAK+I,eAAekC,SAASjL,KAAKkC,YAAYvB,cAAeX,KAAK0F,WAG1E/C,YAAY,EACZC,cAAc,IAElBjD,OAAO4C,eAAe8E,EAAW/H,UAAW,eAAgB,CAExD6B,IAIA,WAAc,OAAOnB,KAAKkL,eAC1BvJ,IAIA,SAAUa,GACNxC,KAAKkL,cAAgB1I,EACjBxC,KAAK2K,kBACL3K,KAAKmL,iBAAiBnL,KAAKkL,gBAGnCvI,YAAY,EACZC,cAAc,IASlByE,EAAW/H,UAAUa,YAIrB,WACI,IAAIC,EAAQJ,KACRA,KAAKyK,cACLzK,KAAKyK,YAAYW,UACjBpL,KAAK2K,iBAAmB,MAGvB3K,KAAK8I,UAAUY,MAChB1J,KAAKsJ,iBAAiBjJ,QAAQ,SAAUyJ,EAAU1H,GAC9C,OAAOhC,EAAM8B,YAAYvB,cAAc0K,oBAAoBjJ,EAAO0H,KAEtE9J,KAAKsJ,iBAAiBgC,SAE1BtL,KAAKuJ,WAAWhI,OAChBvB,KAAKuJ,WAAWxH,WAChB/B,KAAK+I,eAAe8B,kBAAkB7K,KAAKkC,YAAYvB,cAAeX,KAAK0F,SAC3E1F,KAAKgJ,cAAcuC,eAAevL,KAAKkC,cAQ3CmF,EAAW/H,UAAUsK,KAKrB,SAAU4B,GACN,IAAIpL,EAAQJ,KAEZ,QADc,IAAVwL,IAAoBA,EAAQxL,KAAKwI,YACjCxI,KAAK+C,UAAa/C,KAAK0F,WAAY1F,KAAK+K,qBACpB/K,KAAsB,iBAAEyL,gBAAsCzL,KAAsB,iBAAE0L,gBAD9G,CAKA,IAAIC,EAAa3L,KAAK4L,iBACtB5L,KAAK6L,UACL7L,KAAK8L,QAAU9L,KAAK8L,SAAW,IAAInE,EAAA,EAAgBL,EAAkBtH,KAAK6I,mBAC1E7I,KAAK2K,iBAAmBgB,EAAWI,OAAO/L,KAAK8L,SAASE,SACxDhM,KAAK2K,iBAAiBsB,cACjB/I,KAAKvD,OAAAiI,EAAA,EAAAjI,CAAUK,KAAKuJ,aACpBxI,UAAU,WAAc,OAAOX,EAAMyL,YAC1C7L,KAAKmL,iBAAiBnL,KAAKkL,eAC3BlL,KAAKgL,wBACHhL,KAAsB,iBAAE4J,KAAK4B,KAQnCnE,EAAW/H,UAAUuK,KAKrB,SAAU2B,QACQ,IAAVA,IAAoBA,EAAQxL,KAAKyI,WACjCzI,KAAK2K,kBACL3K,KAAK2K,iBAAiBd,KAAK2B,IAQnCnE,EAAW/H,UAAU4M,OAIrB,WACIlM,KAAK+K,oBAAsB/K,KAAK6J,OAAS7J,KAAK4J,QAOlDvC,EAAW/H,UAAUyL,kBAIrB,WACI,QAAS/K,KAAK2K,kBAAoB3K,KAAK2K,iBAAiBwB,aAQ5D9E,EAAW/H,UAAU8M,eAKrB,SAAUvF,GACF7G,KAAK+K,qBAAuBlE,EAAEwF,UAAY5E,EAAA,IAC1CZ,EAAEyF,kBACFtM,KAAK6J,KAAK,KAQlBxC,EAAW/H,UAAUiN,gBAIrB,WACIvM,KAAK6J,KAAK7J,KAAKmJ,gBAAgBT,oBAMnCrB,EAAW/H,UAAUsM,eAIrB,WACI,IAAIxL,EAAQJ,KACZ,GAAIA,KAAKyK,YACL,OAAOzK,KAAKyK,YAGhB,IAAI+B,EAAWxM,KAAK2I,SAAST,WACxBuE,oBAAoBzM,KAAKkC,aACzBwK,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEpBC,EAAsB7M,KAAK4I,kBAC1BkE,4BAA4B9M,KAAKkC,aAqBtC,OApBAsK,EAASO,yBAAyBF,GAClCL,EAASQ,gBAAgB9J,KAAKvD,OAAAiI,EAAA,EAAAjI,CAAUK,KAAKuJ,aAAaxI,UAAU,SAAUkM,GACtE7M,EAAMuK,kBACFsC,EAAOC,yBAAyBC,kBAAoB/M,EAAMuK,iBAAiBwB,aAG3E/L,EAAM+B,QAAQqI,IAAI,WAAc,OAAOpK,EAAMyJ,KAAK,OAI9D7J,KAAKyK,YAAczK,KAAK2I,SAASpJ,OAAO,CACpC6N,UAAWpN,KAAKkJ,KAChBmE,iBAAkBb,EAClBc,WAzXc,oBA0XdrE,eAAgBjJ,KAAKwJ,oBAEzBxJ,KAAK0K,kBACL1K,KAAKyK,YAAY8C,cACZrK,KAAKvD,OAAAiI,EAAA,EAAAjI,CAAUK,KAAKuJ,aACpBxI,UAAU,WAAc,OAAOX,EAAMyL,YACnC7L,KAAKyK,aAMhBpD,EAAW/H,UAAUuM,QAIrB,WACQ7L,KAAKyK,aAAezK,KAAKyK,YAAY+C,eACrCxN,KAAKyK,YAAYgD,SAErBzN,KAAK2K,iBAAmB,MAM5BtD,EAAW/H,UAAUoL,gBAIrB,WAEI,IAAIxC,EAA+BlI,KAAiB,YAAE0N,YAA4B,iBAE9EnD,EAASvK,KAAK2N,aAEdvF,EAAUpI,KAAK4N,sBACnB1F,EAAS2F,cAAc,CACnBlO,OAAA4H,EAAA,EAAA5H,CAAS,GAAI4K,EAAOuD,KAAM1F,EAAQ0F,MAClCnO,OAAA4H,EAAA,EAAA5H,CAAS,GAAI4K,EAAOwD,SAAU3F,EAAQ2F,aAY9C1G,EAAW/H,UAAUqO,WAKrB,WAEI,IAIIK,EAJAC,GAASjO,KAAKkJ,MAA2B,OAAnBlJ,KAAKkJ,KAAK1G,MAEhC0F,EAAWlI,KAAKkI,SAGpB,GAAgB,SAAZA,GAAmC,SAAZA,EACvB8F,EAAiB,CAAEE,QAAS,SAAUC,QAAqB,SAAZjG,EAAsB,MAAQ,eAE5E,GAAgB,UAAZA,GACQ,QAAZA,GAAsB+F,GACV,SAAZ/F,IAAwB+F,EACzBD,EAAiB,CAAEE,QAAS,QAASC,QAAS,cAE7C,MAAgB,SAAZjG,GACQ,SAAZA,GAAuB+F,GACX,QAAZ/F,IAAuB+F,GAIxB,MAAMhG,EAAkCC,GAHxC8F,EAAiB,CAAEE,QAAS,MAAOC,QAAS,UAKhD,IAAItM,EAAK7B,KAAKoO,gBAAgBJ,EAAeE,QAASF,EAAeG,SACrE,MAAO,CACHL,KAAME,EACND,SAAU,CAAEG,QAHmErM,EAAGwM,EAG1DF,QAHiEtM,EAAGyM,KAWpGjH,EAAW/H,UAAUsO,oBAIrB,WAEI,IAIIW,EAJAN,GAASjO,KAAKkJ,MAA2B,OAAnBlJ,KAAKkJ,KAAK1G,MAEhC0F,EAAWlI,KAAKkI,SAGpB,GAAgB,SAAZA,EACAqG,EAAkB,CAAEC,SAAU,SAAUC,SAAU,eAEjD,GAAgB,SAAZvG,EACLqG,EAAkB,CAAEC,SAAU,SAAUC,SAAU,YAEjD,GAAgB,UAAZvG,GACQ,QAAZA,GAAsB+F,GACV,SAAZ/F,IAAwB+F,EACzBM,EAAkB,CAAEC,SAAU,MAAOC,SAAU,cAE9C,MAAgB,SAAZvG,GACQ,SAAZA,GAAuB+F,GACX,QAAZ/F,IAAuB+F,GAIxB,MAAMhG,EAAkCC,GAHxCqG,EAAkB,CAAEC,SAAU,QAASC,SAAU,UAKrD,IAAI5M,EAAK7B,KAAKoO,gBAAgBG,EAAgBC,SAAUD,EAAgBE,UACxE,MAAO,CACHX,KAAMS,EACNR,SAAU,CAAES,SAHuE3M,EAAGwM,EAG7DI,SAHoE5M,EAAGyM,KAUxGjH,EAAW/H,UAAU0L,sBAIrB,WACI,IAAI5K,EAAQJ,KAGRA,KAAK2K,mBACL3K,KAAK2K,iBAAiBjF,QAAU1F,KAAK0F,QACrC1F,KAAK2K,iBAAiB+D,gBACtB1O,KAAKmC,QAAQwM,iBAAiBC,eAAe1L,KAAKvD,OAAAkI,EAAA,EAAAlI,CAAK,GAAIA,OAAAiI,EAAA,EAAAjI,CAAUK,KAAKuJ,aAAaxI,UAAU,WACzFX,EAAMuK,kBACavK,EAAkB,YAAEwK,qBAUvDvD,EAAW/H,UAAU6L,iBAKrB,SAAU9F,GACFrF,KAAK2K,mBACL3K,KAAK2K,iBAAiBtF,aAAeA,EACrCrF,KAAK2K,iBAAiB+D,kBAS9BrH,EAAW/H,UAAU8O,gBAMrB,SAAUC,EAAGC,GAiBT,MAhBsB,UAAlBtO,KAAKkI,UAA0C,UAAlBlI,KAAKkI,SACxB,QAANoG,EACAA,EAAI,SAEO,WAANA,IACLA,EAAI,OAIE,QAAND,EACAA,EAAI,QAEO,UAANA,IACLA,EAAI,OAGL,CAAEA,EAAGA,EAAGC,EAAGA,IAmCfjH,EAxiBoB,GA8iB3BC,EAAkC,WAClC,SAASA,EAAiBuH,EAAoBC,GAC1C9O,KAAK6O,mBAAqBA,EAC1B7O,KAAK8O,oBAAsBA,EAI3B9O,KAAKyF,YAAc,UAInBzF,KAAK+O,qBAAsB,EAI3B/O,KAAKgP,QAAU,IAAIjH,EAAA,EAInB/H,KAAKuF,WAAavF,KAAK8O,oBAAoBrO,QAAQiH,EAAA,EAAYuH,SAgLnE,OArKA3H,EAAiBhI,UAAUsK,KAK3B,SAAU4B,GACN,IAAIpL,EAAQJ,KAERA,KAAK0L,iBACLwD,aAAalP,KAAK0L,gBAClB1L,KAAK0L,eAAiB,MAG1B1L,KAAK+O,qBAAsB,EAC3B/O,KAAKyL,eAAiB0D,WAAW,WAC7B/O,EAAMqF,YAAc,UACpBrF,EAAMqL,eAAiB,KAGvBrL,EAAMsO,iBACPlD,IAWPlE,EAAiBhI,UAAUuK,KAK3B,SAAU2B,GACN,IAAIpL,EAAQJ,KAERA,KAAKyL,iBACLyD,aAAalP,KAAKyL,gBAClBzL,KAAKyL,eAAiB,MAE1BzL,KAAK0L,eAAiByD,WAAW,WAC7B/O,EAAMqF,YAAc,SACpBrF,EAAMsL,eAAiB,KAGvBtL,EAAMsO,iBACPlD,IAOPlE,EAAiBhI,UAAU2M,YAI3B,WACI,OAAOjM,KAAKgP,QAAQJ,gBAOxBtH,EAAiBhI,UAAU6M,UAI3B,WACI,MAA4B,YAArBnM,KAAKyF,aAKhB6B,EAAiBhI,UAAU0F,gBAG3B,WACIhF,KAAK+O,qBAAsB,GAM/BzH,EAAiBhI,UAAU2F,eAI3B,SAAU7C,GAEN,IAAIgN,EAA4BhN,EAAa,QAC7B,WAAZgN,GAAyBpP,KAAKmM,aAC9BnM,KAAKgP,QAAQzN,OAED,YAAZ6N,GAAqC,WAAZA,IACzBpP,KAAK+O,qBAAsB,IAcnCzH,EAAiBhI,UAAUsG,uBAM3B,WACQ5F,KAAK+O,qBACL/O,KAAK6J,KAAK,IAclBvC,EAAiBhI,UAAUoP,cAM3B,WACI1O,KAAK6O,mBAAmBQ,gBAuBrB/H,EAnM0B,GA0MjCL,EAAkC,WAoBlC,OAnBA,aADiC","file":"default~getting-started-ng-for-ng-for-module-ngfactory~getting-started-ng-if-ng-if-module-ngfactory.91870bf0dec92f91eee3.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContainerComponent } from './container.component';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ ContainerComponent ],\n  exports: [ ContainerComponent ]\n})\nexport class ContainerModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Injectable, Input, NgModule, NgZone, Output, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * \\@docs-private\n */\nvar MutationObserverFactory = /** @class */ (function () {\n    function MutationObserverFactory() {\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    MutationObserverFactory.prototype.create = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n    };\n    MutationObserverFactory.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */ MutationObserverFactory.ngInjectableDef = defineInjectable({ factory: function MutationObserverFactory_Factory() { return new MutationObserverFactory(); }, token: MutationObserverFactory, providedIn: \"root\" });\n    return MutationObserverFactory;\n}());\n/**\n * An injectable service that allows watching elements for changes to their content.\n */\nvar ContentObserver = /** @class */ (function () {\n    function ContentObserver(_mutationObserverFactory) {\n        this._mutationObserverFactory = _mutationObserverFactory;\n        /**\n         * Keeps track of the existing MutationObservers so they can be reused.\n         */\n        this._observedElements = new Map();\n    }\n    /**\n     * @return {?}\n     */\n    ContentObserver.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._observedElements.forEach(function (_, element) { return _this._cleanupObserver(element); });\n    };\n    /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    ContentObserver.prototype.observe = /**\n     * @param {?} elementOrRef\n     * @return {?}\n     */\n    function (elementOrRef) {\n        var _this = this;\n        /** @type {?} */\n        var element = elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;\n        return Observable.create(function (observer) {\n            /** @type {?} */\n            var stream = _this._observeElement(element);\n            /** @type {?} */\n            var subscription = stream.subscribe(observer);\n            return function () {\n                subscription.unsubscribe();\n                _this._unobserveElement(element);\n            };\n        });\n    };\n    /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     * @param {?} element\n     * @return {?}\n     */\n    ContentObserver.prototype._observeElement = /**\n     * Observes the given element by using the existing MutationObserver if available, or creating a\n     * new one if not.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        if (!this._observedElements.has(element)) {\n            /** @type {?} */\n            var stream_1 = new Subject();\n            /** @type {?} */\n            var observer = this._mutationObserverFactory.create(function (mutations) { return stream_1.next(mutations); });\n            if (observer) {\n                observer.observe(element, {\n                    characterData: true,\n                    childList: true,\n                    subtree: true\n                });\n            }\n            this._observedElements.set(element, { observer: observer, stream: stream_1, count: 1 });\n        }\n        else {\n            /** @type {?} */ ((this._observedElements.get(element))).count++;\n        }\n        return /** @type {?} */ ((this._observedElements.get(element))).stream;\n    };\n    /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     * @param {?} element\n     * @return {?}\n     */\n    ContentObserver.prototype._unobserveElement = /**\n     * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n     * observing this element.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        if (this._observedElements.has(element)) {\n            /** @type {?} */ ((this._observedElements.get(element))).count--;\n            if (!/** @type {?} */ ((this._observedElements.get(element))).count) {\n                this._cleanupObserver(element);\n            }\n        }\n    };\n    /**\n     * Clean up the underlying MutationObserver for the specified element.\n     * @param {?} element\n     * @return {?}\n     */\n    ContentObserver.prototype._cleanupObserver = /**\n     * Clean up the underlying MutationObserver for the specified element.\n     * @param {?} element\n     * @return {?}\n     */\n    function (element) {\n        if (this._observedElements.has(element)) {\n            var _a = /** @type {?} */ ((this._observedElements.get(element))), observer = _a.observer, stream = _a.stream;\n            if (observer) {\n                observer.disconnect();\n            }\n            stream.complete();\n            this._observedElements.delete(element);\n        }\n    };\n    ContentObserver.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    ContentObserver.ctorParameters = function () { return [\n        { type: MutationObserverFactory }\n    ]; };\n    /** @nocollapse */ ContentObserver.ngInjectableDef = defineInjectable({ factory: function ContentObserver_Factory() { return new ContentObserver(inject(MutationObserverFactory)); }, token: ContentObserver, providedIn: \"root\" });\n    return ContentObserver;\n}());\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\nvar CdkObserveContent = /** @class */ (function () {\n    function CdkObserveContent(_contentObserver, _elementRef, _ngZone) {\n        this._contentObserver = _contentObserver;\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        /**\n         * Event emitted for each change in the element's content.\n         */\n        this.event = new EventEmitter();\n        this._disabled = false;\n        this._currentSubscription = null;\n    }\n    Object.defineProperty(CdkObserveContent.prototype, \"disabled\", {\n        /**\n         * Whether observing content is disabled. This option can be used\n         * to disconnect the underlying MutationObserver until it is needed.\n         */\n        get: /**\n         * Whether observing content is disabled. This option can be used\n         * to disconnect the underlying MutationObserver until it is needed.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._disabled ? this._unsubscribe() : this._subscribe();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkObserveContent.prototype, \"debounce\", {\n        /** Debounce interval for emitting the changes. */\n        get: /**\n         * Debounce interval for emitting the changes.\n         * @return {?}\n         */\n        function () { return this._debounce; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._debounce = coerceNumberProperty(value);\n            this._subscribe();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this._currentSubscription && !this.disabled) {\n            this._subscribe();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._unsubscribe();\n    };\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype._subscribe = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._unsubscribe();\n        /** @type {?} */\n        var stream = this._contentObserver.observe(this._elementRef);\n        // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n        // Consider brining it back inside the zone next time we're making breaking changes.\n        // Bringing it back inside can cause things like infinite change detection loops and changed\n        // after checked errors if people's code isn't handling it properly.\n        this._ngZone.runOutsideAngular(function () {\n            _this._currentSubscription =\n                (_this.debounce ? stream.pipe(debounceTime(_this.debounce)) : stream).subscribe(_this.event);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    CdkObserveContent.prototype._unsubscribe = /**\n     * @return {?}\n     */\n    function () {\n        if (this._currentSubscription) {\n            this._currentSubscription.unsubscribe();\n        }\n    };\n    CdkObserveContent.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkObserveContent]',\n                    exportAs: 'cdkObserveContent',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkObserveContent.ctorParameters = function () { return [\n        { type: ContentObserver },\n        { type: ElementRef },\n        { type: NgZone }\n    ]; };\n    CdkObserveContent.propDecorators = {\n        event: [{ type: Output, args: ['cdkObserveContent',] }],\n        disabled: [{ type: Input, args: ['cdkObserveContentDisabled',] }],\n        debounce: [{ type: Input }]\n    };\n    return CdkObserveContent;\n}());\nvar ObserversModule = /** @class */ (function () {\n    function ObserversModule() {\n    }\n    ObserversModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkObserveContent],\n                    declarations: [CdkObserveContent],\n                    providers: [MutationObserverFactory]\n                },] },\n    ];\n    return ObserversModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MutationObserverFactory, ContentObserver, CdkObserveContent, ObserversModule };\n//# sourceMappingURL=observers.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/tooltip\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/cdk/observers\";\nimport * as i4 from \"@angular/cdk/overlay\";\nimport * as i5 from \"@angular/cdk/bidi\";\nimport * as i6 from \"@angular/platform-browser\";\nimport * as i7 from \"@angular/material/core\";\nimport * as i8 from \"@angular/cdk/platform\";\nimport * as i9 from \"@angular/cdk/a11y\";\nimport * as i10 from \"@angular/cdk/portal\";\nimport * as i11 from \"@angular/cdk/scrolling\";\nimport * as i12 from \"@angular/cdk/layout\";\nvar MatTooltipModuleNgFactory = i0.ɵcmf(i1.MatTooltipModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [TooltipComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(4608, i3.MutationObserverFactory, i3.MutationObserverFactory, []), i0.ɵmpd(4608, i4.Overlay, i4.Overlay, [i4.ScrollStrategyOptions, i4.OverlayContainer, i0.ComponentFactoryResolver, i4.OverlayPositionBuilder, i4.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i2.DOCUMENT, i5.Directionality, [2, i2.Location]]), i0.ɵmpd(5120, i4.ɵc, i4.ɵd, [i4.Overlay]), i0.ɵmpd(5120, i1.MAT_TOOLTIP_SCROLL_STRATEGY, i1.MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, [i4.Overlay]), i0.ɵmpd(4608, i6.HAMMER_GESTURE_CONFIG, i7.GestureConfig, [[2, i7.MAT_HAMMER_OPTIONS], [2, i7.MatCommonModule]]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i8.PlatformModule, i8.PlatformModule, []), i0.ɵmpd(1073742336, i3.ObserversModule, i3.ObserversModule, []), i0.ɵmpd(1073742336, i9.A11yModule, i9.A11yModule, []), i0.ɵmpd(1073742336, i5.BidiModule, i5.BidiModule, []), i0.ɵmpd(1073742336, i10.PortalModule, i10.PortalModule, []), i0.ɵmpd(1073742336, i11.ScrollingModule, i11.ScrollingModule, []), i0.ɵmpd(1073742336, i4.OverlayModule, i4.OverlayModule, []), i0.ɵmpd(1073742336, i7.MatCommonModule, i7.MatCommonModule, [[2, i7.MATERIAL_SANITY_CHECKS], [2, i6.HAMMER_LOADER]]), i0.ɵmpd(1073742336, i1.MatTooltipModule, i1.MatTooltipModule, [])]); });\nexport { MatTooltipModuleNgFactory as MatTooltipModuleNgFactory };\nvar styles_TooltipComponent = [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"];\nvar RenderType_TooltipComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_TooltipComponent, data: { \"animation\": [{ type: 7, name: \"state\", definitions: [{ type: 0, name: \"initial, void, hidden\", styles: { type: 6, styles: { opacity: 0, transform: \"scale(0)\" }, offset: null }, options: undefined }, { type: 0, name: \"visible\", styles: { type: 6, styles: { transform: \"scale(1)\" }, offset: null }, options: undefined }, { type: 1, expr: \"* => visible\", animation: { type: 4, styles: { type: 5, steps: [{ type: 6, styles: { opacity: 0, transform: \"scale(0)\", offset: 0 }, offset: null }, { type: 6, styles: { opacity: 0.5, transform: \"scale(0.99)\", offset: 0.5 }, offset: null }, { type: 6, styles: { opacity: 1, transform: \"scale(1)\", offset: 1 }, offset: null }] }, timings: \"200ms cubic-bezier(0, 0, 0.2, 1)\" }, options: null }, { type: 1, expr: \"* => hidden\", animation: { type: 4, styles: { type: 6, styles: { opacity: 0 }, offset: null }, timings: \"100ms cubic-bezier(0, 0, 0.2, 1)\" }, options: null }], options: {} }] } });\nexport { RenderType_TooltipComponent as RenderType_TooltipComponent };\nexport function View_TooltipComponent_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"div\", [[\"class\", \"mat-tooltip\"]], [[2, \"mat-tooltip-handset\", null], [24, \"@state\", 0]], [[null, \"@state.start\"], [null, \"@state.done\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"@state.start\" === en)) {\n        var pd_0 = (_co._animationStart() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"@state.done\" === en)) {\n        var pd_1 = (_co._animationDone($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, null, null)), i0.ɵdid(1, 278528, null, 0, i2.NgClass, [i0.IterableDiffers, i0.KeyValueDiffers, i0.ElementRef, i0.Renderer2], { klass: [0, \"klass\"], ngClass: [1, \"ngClass\"] }, null), i0.ɵpid(131072, i2.AsyncPipe, [i0.ChangeDetectorRef]), (_l()(), i0.ɵted(3, null, [\"\", \"\"]))], function (_ck, _v) { var _co = _v.component; var currVal_2 = \"mat-tooltip\"; var currVal_3 = _co.tooltipClass; _ck(_v, 1, 0, currVal_2, currVal_3); }, function (_ck, _v) { var _co = _v.component; var tmp_0_0 = null; var currVal_0 = (((tmp_0_0 = i0.ɵunv(_v, 0, 0, i0.ɵnov(_v, 2).transform(_co._isHandset))) == null) ? null : tmp_0_0.matches); var currVal_1 = _co._visibility; _ck(_v, 0, 0, currVal_0, currVal_1); var currVal_4 = _co.message; _ck(_v, 3, 0, currVal_4); }); }\nexport function View_TooltipComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"mat-tooltip-component\", [[\"aria-hidden\", \"true\"]], [[4, \"zoom\", null]], [[\"body\", \"click\"]], function (_v, en, $event) { var ad = true; if ((\"body:click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1)._handleBodyInteraction() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, View_TooltipComponent_0, RenderType_TooltipComponent)), i0.ɵdid(1, 49152, null, 0, i1.TooltipComponent, [i0.ChangeDetectorRef, i12.BreakpointObserver], null, null)], null, function (_ck, _v) { var currVal_0 = ((i0.ɵnov(_v, 1)._visibility === \"visible\") ? 1 : null); _ck(_v, 0, 0, currVal_0); }); }\nvar TooltipComponentNgFactory = i0.ɵccf(\"mat-tooltip-component\", i1.TooltipComponent, View_TooltipComponent_Host_0, {}, {}, []);\nexport { TooltipComponentNgFactory as TooltipComponentNgFactory };\n","<div class=\"mat-tooltip\" [ngClass]=\"tooltipClass\" [class.mat-tooltip-handset]=\"(_isHandset | async)?.matches\" [@state]=\"_visibility\" (@state.start)=\"_animationStart()\" (@state.done)=\"_animationDone($event)\">{{message}}</div>","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./container.component\";\nvar styles_ContainerComponent = [\"pre[_ngcontent-%COMP%] {\\n      margin: 0;\\n    }\\n\\n    code[_ngcontent-%COMP%] {\\n      display: flex;\\n      align-items: center;\\n    }\\n\\n    @media only screen and (max-width: 760px),\\n    (min-device-width: 768px) and (max-device-width: 1024px)  {\\n      \\n      table[_ngcontent-%COMP%], thead[_ngcontent-%COMP%], tbody[_ngcontent-%COMP%], th[_ngcontent-%COMP%], td[_ngcontent-%COMP%], tr[_ngcontent-%COMP%] {\\n        display: block;\\n      }\\n\\n      \\n      thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n        position: absolute;\\n        top: -9999px;\\n        left: -9999px;\\n      }\\n\\n      tr[_ngcontent-%COMP%] { border: 1px solid #ccc; }\\n\\n      td[_ngcontent-%COMP%] {\\n        \\n        border: none;\\n        border-bottom: 1px solid #eee;\\n        position: relative;\\n        padding-top: 10%;\\n      }\\n\\n      td[_ngcontent-%COMP%]:before {\\n        \\n        position: absolute;\\n        \\n        top: 6px;\\n        left: 6px;\\n        width: 45%;\\n        padding-right: 10px;\\n      }\\n\\n      \\n      td[_ngcontent-%COMP%]:nth-of-type(1):before { content: \\\"Template\\\"; }\\n      td[_ngcontent-%COMP%]:nth-of-type(2):before { content: \\\"Data\\\"; }\\n      td[_ngcontent-%COMP%]:nth-of-type(3):before { content: \\\"Result\\\"; }\\n    }\"];\nvar RenderType_ContainerComponent = i0.ɵcrt({ encapsulation: 0, styles: styles_ContainerComponent, data: {} });\nexport { RenderType_ContainerComponent as RenderType_ContainerComponent };\nexport function View_ContainerComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 18, \"table\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 7, \"thead\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(2, 0, null, null, 6, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(3, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Template\"])), (_l()(), i0.ɵeld(5, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Data\"])), (_l()(), i0.ɵeld(7, 0, null, null, 1, \"th\", [], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"Result\"])), (_l()(), i0.ɵeld(9, 0, null, null, 9, \"tbody\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(10, 0, null, null, 8, \"tr\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(11, 0, null, null, 2, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(12, 0, null, null, 1, \"pre\", [], null, null, null, null, null)), i0.ɵncd(null, 0), (_l()(), i0.ɵeld(14, 0, null, null, 2, \"td\", [], null, null, null, null, null)), (_l()(), i0.ɵeld(15, 0, null, null, 1, \"code\", [], null, null, null, null, null)), i0.ɵncd(null, 1), (_l()(), i0.ɵeld(17, 0, null, null, 1, \"td\", [], null, null, null, null, null)), i0.ɵncd(null, 2)], null, null); }\nexport function View_ContainerComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-gs-container\", [], null, null, null, View_ContainerComponent_0, RenderType_ContainerComponent)), i0.ɵdid(1, 49152, null, 0, i1.ContainerComponent, [], null, null)], null, null); }\nvar ContainerComponentNgFactory = i0.ɵccf(\"aio-gs-container\", i1.ContainerComponent, View_ContainerComponent_Host_0, {}, {}, [\".template\", \".data\", \".result\"]);\nexport { ContainerComponentNgFactory as ContainerComponentNgFactory };\n","\n    <table>\n      <thead>\n        <tr>\n          <th>Template</th>\n          <th>Data</th>\n          <th>Result</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <pre><ng-content select=\".template\"></ng-content></pre>\n          </td>\n          <td>\n            <code><ng-content select=\".data\"></ng-content></code>\n          </td>\n          <td><ng-content select=\".result\"></ng-content></td>\n        </tr>\n      </tbody>\n    </table>\n  ","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { tap, debounceTime } from 'rxjs/operators';\n\nexport const PRODUCTS = ['Shoes', 'Phones'];\n\n@Injectable()\nexport class ProductService  {\n  productsData$ = new BehaviorSubject(JSON.stringify(PRODUCTS));\n  products$ = new BehaviorSubject<string[]>(PRODUCTS);\n  parseError$ = new Subject<boolean>();\n\n  init() {\n    return this.productsData$.pipe(\n      debounceTime(250),\n      tap(data => {\n        let parsed;\n\n        try {\n          parsed = JSON.parse(data);\n        } catch (e) {\n          parsed = null;\n        }\n\n        if (parsed && Array.isArray(parsed)) {\n          this.products$.next(parsed);\n          this.parseError$.next(false);\n        } else {\n          this.parseError$.next(true);\n        }\n      }));\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'aio-gs-container',\n  template: `\n    <table>\n      <thead>\n        <tr>\n          <th>Template</th>\n          <th>Data</th>\n          <th>Result</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>\n            <pre><ng-content select=\".template\"></ng-content></pre>\n          </td>\n          <td>\n            <code><ng-content select=\".data\"></ng-content></code>\n          </td>\n          <td><ng-content select=\".result\"></ng-content></td>\n        </tr>\n      </tbody>\n    </table>\n  `,\n  styles: [\n    `\n    pre {\n      margin: 0;\n    }\n\n    code {\n      display: flex;\n      align-items: center;\n    }\n\n    @media only screen and (max-width: 760px),\n    (min-device-width: 768px) and (max-device-width: 1024px)  {\n      /* Force table to not be like tables anymore */\n      table, thead, tbody, th, td, tr {\n        display: block;\n      }\n\n      /* Hide table headers (but not display: none;, for accessibility) */\n      thead tr {\n        position: absolute;\n        top: -9999px;\n        left: -9999px;\n      }\n\n      tr { border: 1px solid #ccc; }\n\n      td {\n        /* Behave  like a \"row\" */\n        border: none;\n        border-bottom: 1px solid #eee;\n        position: relative;\n        padding-top: 10%;\n      }\n\n      td:before {\n        /* Now like a table header */\n        position: absolute;\n        /* Top/left values mimic padding */\n        top: 6px;\n        left: 6px;\n        width: 45%;\n        padding-right: 10px;\n      }\n\n      /* Label the data */\n      td:nth-of-type(1):before { content: \"Template\"; }\n      td:nth-of-type(2):before { content: \"Data\"; }\n      td:nth-of-type(3):before { content: \"Result\"; }\n    }\n    `\n  ]\n})\nexport class ContainerComponent { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, keyframes, state, style, transition, trigger } from '@angular/animations';\nimport { __assign } from 'tslib';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, Inject, InjectionToken, Input, NgZone, Optional, ViewContainerRef, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { GestureConfig, MatCommonModule } from '@angular/material/core';\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Animations used by MatTooltip.\n * \\@docs-private\n  @type {?} */\nvar matTooltipAnimations = {\n    /** Animation that transitions a tooltip in and out. */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time in ms to throttle repositioning after scroll events.\n  @type {?} */\nvar SCROLL_THROTTLE_MS = 20;\n/** *\n * CSS class that will be attached to the overlay panel.\n  @type {?} */\nvar TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(\"Tooltip position \\\"\" + position + \"\\\" is invalid.\");\n}\n/** *\n * Injection token that determines the scroll handling while a tooltip is visible.\n  @type {?} */\nvar MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }); };\n}\n/** *\n * \\@docs-private\n  @type {?} */\nvar MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/** *\n * Injection token to be used to override the default options for `matTooltip`.\n  @type {?} */\nvar MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nvar MatTooltip = /** @class */ (function () {\n    function MatTooltip(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        this._message = '';\n        this._manualListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        this._scrollStrategy = scrollStrategy;\n        /** @type {?} */\n        var element = _elementRef.nativeElement;\n        /** @type {?} */\n        var elementStyle = /** @type {?} */ (element.style);\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!_platform.IOS && !_platform.ANDROID) {\n            this._manualListeners\n                .set('mouseenter', function () { return _this.show(); })\n                .set('mouseleave', function () { return _this.hide(); })\n                .forEach(function (listener, event) { return element.addEventListener(event, listener); });\n        }\n        if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n            // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n            // will add some inline styles by default, including `user-select: none`. This is\n            // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n            // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n            // behavior for text fields, we always clear the `user-select` to avoid such issues.\n            elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n        }\n        // Hammer applies `-webkit-user-drag: none` on all elements by default,\n        // which breaks the native drag&drop. If the consumer explicitly made\n        // the element draggable, clear the `-webkit-user-drag`.\n        if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n            elementStyle.webkitUserDrag = '';\n        }\n        _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(function (origin) {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run(function () { return _this.hide(0); });\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run(function () { return _this.show(); });\n            }\n        });\n    }\n    Object.defineProperty(MatTooltip.prototype, \"position\", {\n        /** Allows the user to define the position of the tooltip relative to the parent element */\n        get: /**\n         * Allows the user to define the position of the tooltip relative to the parent element\n         * @return {?}\n         */\n        function () { return this._position; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this._position) {\n                this._position = value;\n                if (this._overlayRef) {\n                    this._updatePosition();\n                    if (this._tooltipInstance) {\n                        /** @type {?} */ ((this._tooltipInstance)).show(0);\n                    }\n                    this._overlayRef.updatePosition();\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTooltip.prototype, \"disabled\", {\n        /** Disables the display of the tooltip. */\n        get: /**\n         * Disables the display of the tooltip.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // If tooltip is disabled, hide immediately.\n            if (this._disabled) {\n                this.hide(0);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTooltip.prototype, \"message\", {\n        /** The message to be displayed in the tooltip */\n        get: /**\n         * The message to be displayed in the tooltip\n         * @return {?}\n         */\n        function () { return this._message; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n            // If the message is not a string (e.g. number), convert it to a string and trim it.\n            this._message = value != null ? (\"\" + value).trim() : '';\n            if (!this._message && this._isTooltipVisible()) {\n                this.hide(0);\n            }\n            else {\n                this._updateTooltipMessage();\n                this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTooltip.prototype, \"tooltipClass\", {\n        /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n        get: /**\n         * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n         * @return {?}\n         */\n        function () { return this._tooltipClass; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._tooltipClass = value;\n            if (this._tooltipInstance) {\n                this._setTooltipClass(this._tooltipClass);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Dispose the tooltip when destroyed.\n     */\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    MatTooltip.prototype.ngOnDestroy = /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        if (!this._platform.IOS) {\n            this._manualListeners.forEach(function (listener, event) {\n                return _this._elementRef.nativeElement.removeEventListener(event, listener);\n            });\n            this._manualListeners.clear();\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    };\n    /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MatTooltip.prototype.show = /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    function (delay) {\n        var _this = this;\n        if (delay === void 0) { delay = this.showDelay; }\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !/** @type {?} */ ((this._tooltipInstance))._showTimeoutId && !/** @type {?} */ ((this._tooltipInstance))._hideTimeoutId)) {\n            return;\n        }\n        /** @type {?} */\n        var overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(function () { return _this._detach(); });\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage(); /** @type {?} */\n        ((this._tooltipInstance)).show(delay);\n    };\n    /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    MatTooltip.prototype.hide = /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    function (delay) {\n        if (delay === void 0) { delay = this.hideDelay; }\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    };\n    /** Shows/hides the tooltip */\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    MatTooltip.prototype.toggle = /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    function () {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    };\n    /** Returns true if the tooltip is currently visible to the user */\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    MatTooltip.prototype._isTooltipVisible = /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    function () {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    };\n    /** Handles the keydown events on the host element. */\n    /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n    MatTooltip.prototype._handleKeydown = /**\n     * Handles the keydown events on the host element.\n     * @param {?} e\n     * @return {?}\n     */\n    function (e) {\n        if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n            e.stopPropagation();\n            this.hide(0);\n        }\n    };\n    /** Handles the touchend events on the host element. */\n    /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n    MatTooltip.prototype._handleTouchend = /**\n     * Handles the touchend events on the host element.\n     * @return {?}\n     */\n    function () {\n        this.hide(this._defaultOptions.touchendHideDelay);\n    };\n    /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    MatTooltip.prototype._createOverlay = /**\n     * Create the overlay config and position strategy\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        /** @type {?} */\n        var strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8);\n        /** @type {?} */\n        var scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this._elementRef);\n        strategy.withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(function (change) {\n            if (_this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && _this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    _this._ngZone.run(function () { return _this.hide(0); });\n                }\n            }\n        });\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(function () { return _this._detach(); });\n        return this._overlayRef;\n    };\n    /**\n     * Detaches the currently-attached tooltip.\n     * @return {?}\n     */\n    MatTooltip.prototype._detach = /**\n     * Detaches the currently-attached tooltip.\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    };\n    /**\n     * Updates the position of the current tooltip.\n     * @return {?}\n     */\n    MatTooltip.prototype._updatePosition = /**\n     * Updates the position of the current tooltip.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var position = /** @type {?} */ (((this._overlayRef)).getConfig().positionStrategy);\n        /** @type {?} */\n        var origin = this._getOrigin();\n        /** @type {?} */\n        var overlay = this._getOverlayPosition();\n        position.withPositions([\n            __assign({}, origin.main, overlay.main),\n            __assign({}, origin.fallback, overlay.fallback)\n        ]);\n    };\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    MatTooltip.prototype._getOrigin = /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        var position = this.position;\n        /** @type {?} */\n        var originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        var _a = this._invertPosition(originPosition.originX, originPosition.originY), x = _a.x, y = _a.y;\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    };\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    MatTooltip.prototype._getOverlayPosition = /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        var position = this.position;\n        /** @type {?} */\n        var overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        var _a = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY), x = _a.x, y = _a.y;\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    };\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @return {?}\n     */\n    MatTooltip.prototype._updateTooltipMessage = /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe(function () {\n                if (_this._tooltipInstance) {\n                    /** @type {?} */ ((_this._overlayRef)).updatePosition();\n                }\n            });\n        }\n    };\n    /**\n     * Updates the tooltip class\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    MatTooltip.prototype._setTooltipClass = /**\n     * Updates the tooltip class\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    function (tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    };\n    /**\n     * Inverts an overlay position.\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    MatTooltip.prototype._invertPosition = /**\n     * Inverts an overlay position.\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    function (x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x: x, y: y };\n    };\n    MatTooltip.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matTooltip]',\n                    exportAs: 'matTooltip',\n                    host: {\n                        '(longpress)': 'show()',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(touchend)': '_handleTouchend()',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatTooltip.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: ElementRef },\n        { type: ScrollDispatcher },\n        { type: ViewContainerRef },\n        { type: NgZone },\n        { type: Platform },\n        { type: AriaDescriber },\n        { type: FocusMonitor },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] }\n    ]; };\n    MatTooltip.propDecorators = {\n        position: [{ type: Input, args: ['matTooltipPosition',] }],\n        disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n        showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n        hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n        message: [{ type: Input, args: ['matTooltip',] }],\n        tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n    };\n    return MatTooltip;\n}());\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nvar TooltipComponent = /** @class */ (function () {\n    function TooltipComponent(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param delay Amount of milliseconds to the delay showing the tooltip.\n     */\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.show = /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    function (delay) {\n        var _this = this;\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout(function () {\n            _this._visibility = 'visible';\n            _this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._markForCheck();\n        }, delay);\n    };\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param delay Amount of milliseconds to delay showing the tooltip.\n     */\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    TooltipComponent.prototype.hide = /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    function (delay) {\n        var _this = this;\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout(function () {\n            _this._visibility = 'hidden';\n            _this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            _this._markForCheck();\n        }, delay);\n    };\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    TooltipComponent.prototype.afterHidden = /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    function () {\n        return this._onHide.asObservable();\n    };\n    /** Whether the tooltip is being displayed. */\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    TooltipComponent.prototype.isVisible = /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    function () {\n        return this._visibility === 'visible';\n    };\n    /**\n     * @return {?}\n     */\n    TooltipComponent.prototype._animationStart = /**\n     * @return {?}\n     */\n    function () {\n        this._closeOnInteraction = false;\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    TooltipComponent.prototype._animationDone = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        /** @type {?} */\n        var toState = /** @type {?} */ (event.toState);\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    };\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     */\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    TooltipComponent.prototype._handleBodyInteraction = /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    function () {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    };\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     */\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    TooltipComponent.prototype._markForCheck = /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    function () {\n        this._changeDetectorRef.markForCheck();\n    };\n    TooltipComponent.decorators = [\n        { type: Component, args: [{selector: 'mat-tooltip-component',\n                    template: \"<div class=\\\"mat-tooltip\\\" [ngClass]=\\\"tooltipClass\\\" [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\" [@state]=\\\"_visibility\\\" (@state.start)=\\\"_animationStart()\\\" (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\",\n                    styles: [\".mat-tooltip-panel{pointer-events:none!important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}@media screen and (-ms-high-contrast:active){.mat-tooltip{outline:solid 1px}}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\"],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [matTooltipAnimations.tooltipState],\n                    host: {\n                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                        // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                        '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                        '(body:click)': 'this._handleBodyInteraction()',\n                        'aria-hidden': 'true',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    TooltipComponent.ctorParameters = function () { return [\n        { type: ChangeDetectorRef },\n        { type: BreakpointObserver }\n    ]; };\n    return TooltipComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatTooltipModule = /** @class */ (function () {\n    function MatTooltipModule() {\n    }\n    MatTooltipModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        A11yModule,\n                        CommonModule,\n                        OverlayModule,\n                        MatCommonModule,\n                    ],\n                    exports: [MatTooltip, TooltipComponent, MatCommonModule],\n                    declarations: [MatTooltip, TooltipComponent],\n                    entryComponents: [TooltipComponent],\n                    providers: [\n                        MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n                        { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig },\n                    ]\n                },] },\n    ];\n    return MatTooltipModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatTooltipModule, getMatTooltipInvalidPositionError, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_TOOLTIP_DEFAULT_OPTIONS, MatTooltip, TooltipComponent, matTooltipAnimations };\n//# sourceMappingURL=tooltip.es5.js.map\n"],"sourceRoot":""}