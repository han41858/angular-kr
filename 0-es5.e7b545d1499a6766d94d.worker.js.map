{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app/search/search.worker.ts","webpack:///./node_modules/lunr/lunr.js.pre-build-optimizer.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","index","lunr__WEBPACK_IMPORTED_MODULE_0__","pages","queryIndex","query","length","results","search","titleQuery","split","map","hit","ref","e","console","log","addEventListener","message","callback","searchDataRequest","type","data","id","payload","searchInfo","loadIndexFn","pagesData","indexBuilder","forEach","page","add","path","termSeparator","separator","this","field","boost","postMessage","XMLHttpRequest","onload","JSON","parse","responseText","open","send","error","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","porterStemmer","lunr","config","builder","Builder","pipeline","trimmer","stopWordFilter","stemmer","searchPipeline","build","version","utils","warn","asString","obj","toString","clone","keys","val","Array","isArray","slice","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","indexOf","fieldRef","undefined","Set","elements","complete","intersect","other","union","contains","empty","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","Math","abs","Token","str","metadata","update","fn","tokenizer","toLowerCase","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","fnName","Error","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","RegExp","w","stem","suffix","firstch","re","re2","re3","re4","substr","toUpperCase","test","replace","fp","exec","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","frame","pop","noEditNode","char","insertionNode","substitutionNode","transposeNode","charA","charB","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","queryString","QueryParser","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","termTokenSet","expandedTerms","presence","REQUIRED","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","matches","isNegated","docMatch","score","matchData","combine","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","fieldVector","termFrequencies","termsLength","fieldBoost","docBoost","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","parser","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN"],"mappings":"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Kb,GAGjBK,EAAMhL,EACNiL,EAAMhK,IAFN8J,EAAKhL,GAGEsL,KAJPT,EAAOW,EAAG,KAIYP,EAAIK,KAAKT,KAAWK,EAAII,KAAKT,MACjDD,EAAIC,IAKRI,EAAMjL,GADNgL,EAAK/J,GAEEqK,KAAKV,IAAMK,EAAIK,KAAKV,KAEzBA,EAAIA,EAAEW,QADNP,EAAKzK,EACY,KAKJ,KAAXwK,IACFH,EAAIG,EAAQhG,cAAgB6F,EAAEQ,OAAO,IAGhCR,GAGF,SAAU1D,GACf,OAAOA,EAAMtC,OAAOzD,KAIxBC,EAAKqE,SAASG,iBAAiBxE,EAAKO,QAAS,WAmB7CP,EAAKsK,uBAAyB,SAAUC,GACtC,IAAIC,EAAQD,EAAUE,OAAO,SAAUhF,EAAMiF,GAE3C,OADAjF,EAAKiF,GAAYA,EACVjF,GACN,IAEH,OAAO,SAAUK,GACf,GAAIA,GAAS0E,EAAM1E,EAAM/E,cAAgB+E,EAAM/E,WAAY,OAAO+E,IAiBtE9F,EAAKM,eAAiBN,EAAKsK,uBAAuB,CAChD,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGFtK,EAAKqE,SAASG,iBAAiBxE,EAAKM,eA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","file":"0-es5.e7b545d1499a6766d94d.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"L8ff\");\n","/// <reference lib=\"webworker\" />\nimport { WebWorkerMessage } from '../shared/web-worker-message';\nimport * as lunr from 'lunr';\n\nconst SEARCH_TERMS_URL = '/generated/docs/app/search-data.json';\nlet index: lunr.Index;\nconst pages: SearchInfo = {};\n\ninterface SearchInfo {\n  [key: string]: PageInfo;\n}\n\ninterface PageInfo {\n  path: string;\n  type: string;\n  titleWords: string;\n  keyWords: string;\n}\n\naddEventListener('message', handleMessage);\n\n// Create the lunr index - the docs should be an array of objects, each object containing\n// the path and search terms for a page\nfunction createIndex(loadIndexFn: IndexLoader): lunr.Index {\n  // The lunr typings are missing QueryLexer so we have to add them here manually.\n  const queryLexer = (lunr as any as { QueryLexer: { termSeparator: RegExp } }).QueryLexer;\n  queryLexer.termSeparator = lunr.tokenizer.separator = /\\s+/;\n  return lunr(/** @this */function() {\n    this.ref('path');\n    this.field('titleWords', { boost: 10 });\n    this.field('headingWords', { boost: 5 });\n    this.field('members', { boost: 4 });\n    this.field('keywords', { boost: 2 });\n    loadIndexFn(this);\n  });\n}\n\n// The worker receives a message to load the index and to query the index\nfunction handleMessage(message: { data: WebWorkerMessage }): void {\n  const type = message.data.type;\n  const id = message.data.id;\n  const payload = message.data.payload;\n  switch (type) {\n    case 'load-index':\n      makeRequest(SEARCH_TERMS_URL, function(searchInfo: PageInfo[]) {\n        index = createIndex(loadIndex(searchInfo));\n        postMessage({ type, id, payload: true });\n      });\n      break;\n    case 'query-index':\n      postMessage({ type, id, payload: { query: payload, results: queryIndex(payload) } });\n      break;\n    default:\n      postMessage({ type, id, payload: { error: 'invalid message type' } });\n  }\n}\n\n// Use XHR to make a request to the server\nfunction makeRequest(url: string, callback: (response: any) => void): void {\n\n  // The JSON file that is loaded should be an array of PageInfo:\n  const searchDataRequest = new XMLHttpRequest();\n  searchDataRequest.onload = function() {\n    callback(JSON.parse(this.responseText));\n  };\n  searchDataRequest.open('GET', url);\n  searchDataRequest.send();\n}\n\n\n// Create the search index from the searchInfo which contains the information about each page to be indexed\nfunction loadIndex(pagesData: PageInfo[]): IndexLoader {\n  return (indexBuilder: lunr.Builder) => {\n    // Store the pages data to be used in mapping query results back to pages\n    // Add search terms from each page to the search index\n    pagesData.forEach(page => {\n      indexBuilder.add(page);\n      pages[page.path] = page;\n    });\n  };\n}\n\n// Query the index and return the processed results\nfunction queryIndex(query: string): PageInfo[] {\n  try {\n    if (query.length) {\n      let results = index.search(query);\n      if (results.length === 0) {\n        // Add a relaxed search in the title for the first word in the query\n        // E.g. if the search is \"ngCont guide\" then we search for \"ngCont guide titleWords:ngCont*\"\n        const titleQuery = 'titleWords:*' + query.split(' ', 1)[0] + '*';\n        results = index.search(query + ' ' + titleQuery);\n      }\n      // Map the hits into info about each page to be returned as results\n      return results.map(function(hit) { return pages[hit.ref]; });\n    }\n  } catch (e) {\n    // If the search query cannot be parsed the index throws an error\n    // Log it and recover\n    console.log(e);\n  }\n  return [];\n}\n\ntype IndexLoader = (indexBuilder: lunr.Builder) => void;\n","/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.6\n * Copyright (C) 2019 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.6\"\n/*!\n * lunr.utils\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === void 0 || result === '') continue\n\n      if (Array.isArray(result)) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2019 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      }\n\n      stack.push({\n        node: noEditNode,\n        editsRemaining: frame.editsRemaining,\n        str: frame.str.slice(1)\n      })\n    }\n\n    if (frame.editsRemaining == 0) {\n      continue\n    }\n\n    // insertion\n    if (\"*\" in frame.node.edges) {\n      var insertionNode = frame.node.edges[\"*\"]\n    } else {\n      var insertionNode = new lunr.TokenSet\n      frame.node.edges[\"*\"] = insertionNode\n    }\n\n    if (frame.str.length == 0) {\n      insertionNode.final = true\n    }\n\n    stack.push({\n      node: insertionNode,\n      editsRemaining: frame.editsRemaining - 1,\n      str: frame.str\n    })\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.str.length > 1) {\n      stack.push({\n        node: frame.node,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      }\n\n      stack.push({\n        node: substitutionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      }\n\n      stack.push({\n        node: transposeNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: charA + frame.str.slice(2)\n      })\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.complete\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n"],"sourceRoot":""}