{"version":3,"sources":["webpack:///src/app/shared/attribute-utils.ts","webpack:///src/app/custom-elements/live-example/live-example.component.html","webpack:///src/app/custom-elements/live-example/live-example.component.ts","webpack:///src/app/custom-elements/live-example/live-example.module.ts"],"names":["getAttrValue","attrs","attr","key","find","a","hasOwnProperty","toLowerCase","undefined","boolFromValue","attrValue","def","trim","title","LIVE_EXAMPLE_BASE","ZIP_BASE","LiveExampleComponent","elementRef","location","el","nativeElement","attributes","attrMap","name","value","exampleDir","this","getExampleDir","path","stackblitzName","getStackblitzName","mode","getMode","enableDownload","getEnableDownload","stackblitz","getStackblitz","zip","getZip","getTitle","textContent","content","match","downloadOnly","isEmbedded","zipName","split","EmbeddedStackblitzComponent","iframe","src","LiveExampleModule","customElementComponent"],"mappings":"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","file":"x","sourcesContent":["// Utilities for processing HTML element attributes\nimport { ElementRef } from '@angular/core';\n\nexport interface AttrMap {\n  [key: string]: string;\n}\n\n/**\n * Get attribute map from element or ElementRef `attributes`.\n * Attribute map keys are forced lowercase for case-insensitive lookup.\n * @param el The source of the attributes.\n */\nexport function getAttrs(el: HTMLElement | ElementRef): AttrMap {\n  const attrs: NamedNodeMap = el instanceof ElementRef ? el.nativeElement.attributes : el.attributes;\n  const attrMap: AttrMap = {};\n  for (const attr of attrs as any as Attr[] /* cast due to https://github.com/Microsoft/TypeScript/issues/2695 */) {\n    attrMap[attr.name.toLowerCase()] = attr.value;\n  }\n  return attrMap;\n}\n\n/**\n * Return the attribute that matches `attr`.\n * @param attr Name of the attribute or a string of candidate attribute names.\n */\nexport function getAttrValue(attrs: AttrMap, attr: string | string[]): string | undefined {\n  const key = (typeof attr === 'string')\n      ? attr\n      : attr.find(a => attrs.hasOwnProperty(a.toLowerCase()));\n\n  return (key === undefined) ? undefined : attrs[key.toLowerCase()];\n}\n\n/**\n * Return the boolean state of an attribute value (if supplied)\n * @param attrValue The string value of some attribute (or undefined if attribute not present).\n * @param def Default boolean value when attribute is undefined.\n */\nexport function boolFromValue(attrValue: string | undefined, def: boolean = false) {\n  return attrValue === undefined ? def : attrValue.trim() !== 'false';\n}\n\n/**\n * Return the boolean state of attribute from an element\n * @param el The source of the attributes.\n * @param atty Name of the attribute or a string of candidate attribute names.\n * @param def Default boolean value when attribute is undefined.\n */\nexport function getBoolFromAttribute(\n  el: HTMLElement | ElementRef,\n  attr: string | string[],\n  def: boolean = false): boolean {\n  return boolFromValue(getAttrValue(getAttrs(el), attr), def);\n}\n","<!-- Content projection is used to get the content HTML provided to the component. -->\r\n<span #content style=\"display: none\"><ng-content></ng-content></span>\r\n\r\n<span [ngSwitch]=\"mode\">\r\n  <span *ngSwitchCase=\"'embedded'\">\r\n    <div title=\"{{title}}\">\r\n      <aio-embedded-stackblitz [src]=\"stackblitz\"></aio-embedded-stackblitz>\r\n    </div>\r\n    <p *ngIf=\"enableDownload\">\r\n      <a [href]=\"zip\" download title=\"Download example\">예제를 다운받을 수 있습니다.</a>.\r\n    </p>\r\n  </span>\r\n  <span *ngSwitchCase=\"'downloadOnly'\">\r\n    <a [href]=\"zip\" download title=\"{{title}}\">{{title}}</a>\r\n  </span>\r\n  <span *ngSwitchDefault>\r\n    <a [href]=\"stackblitz\" target=\"_blank\" title=\"{{title}}\">{{title}}</a>\r\n    <span *ngIf=\"enableDownload\">\r\n      / <a [href]=\"zip\" download title=\"Download example\">다운로드 링크</a>\r\n    </span>\r\n  </span>\r\n</span>\r\n","/* tslint:disable component-selector */\nimport { AfterContentInit, AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { CONTENT_URL_PREFIX } from 'app/documents/document.service';\nimport { AttrMap, boolFromValue, getAttrs, getAttrValue } from 'app/shared/attribute-utils';\n\n\nconst LIVE_EXAMPLE_BASE = CONTENT_URL_PREFIX + 'live-examples/';\nconst ZIP_BASE = CONTENT_URL_PREFIX + 'zips/';\n\n/**\n * Angular.io Live Example Embedded Component\n *\n * Renders a link to a live/host example of the doc page.\n *\n * All attributes and the text content are optional\n *\n * Usage:\n *   <live-example\n *      [name=\"...\"]        // name of the example directory\n *      [stackblitz=\"...\"\"] // name of the stackblitz file (becomes part of zip file name as well)\n *      [embedded]          // embed the stackblitz in the doc page, else display in new browser tab (default)\n *      [noDownload]        // no downloadable zip option\n *      [downloadOnly]      // just the zip\n *      [title=\"...\"]>      // text for live example link and tooltip\n *        text              // higher precedence way to specify text for live example link and tooltip\n *  </live-example>\n * Example:\n *   <p>Run <live-example>Try the live example</live-example></p>.\n *   // ~/resources/live-examples/{page}/stackblitz.json\n *\n *   <p>Run <live-example name=\"toh-pt1\">this example</live-example></p>.\n *   // ~/resources/live-examples/toh-pt1/stackblitz.json\n *\n *   // Link to the default stackblitz in the toh-pt1 sample\n *   // The title overrides default (\"live example\") with \"Tour of Heroes - Part 1\"\n *   <p>Run <live-example name=\"toh-pt1\" title=\"Tour of Heroes - Part 1\"></live-example></p>.\n *   // ~/resources/live-examples/toh-pt1/stackblitz.json\n *\n *   <p>Run <live-example stackblitz=\"minimal\"></live-example></p>.\n *   // ~/resources/live-examples/{page}/minimal.stackblitz.json\n *\n *   // Embed the current page's default stackblitz\n *   // Text within tag is \"live example\"\n *   // No title (no tooltip)\n *   <live-example embedded title=\"\"></live-example>\n *   // ~/resources/live-examples/{page}/stackblitz.json\n *\n *   // Displays within the document page as an embedded style stackblitz editor\n *   <live-example name=\"toh-pt1\" embedded stackblitz=\"minimal\">Tour of Heroes - Part 1</live-example>\n *   // ~/resources/live-examples/toh-pt1/minimal.stackblitz.json\n */\n@Component({\n  selector: 'live-example',\n  templateUrl: 'live-example.component.html'\n})\nexport class LiveExampleComponent implements AfterContentInit {\n\n  readonly mode: 'default' | 'embedded' | 'downloadOnly';\n  readonly enableDownload: boolean;\n  readonly stackblitz: string;\n  readonly zip: string;\n  title: string;\n\n  @ViewChild('content', { static: true })\n  private content: ElementRef;\n\n  constructor(elementRef: ElementRef, location: Location) {\n    const attrs = getAttrs(elementRef);\n    const exampleDir = this.getExampleDir(attrs, location.path(false));\n    const stackblitzName = this.getStackblitzName(attrs);\n\n    this.mode = this.getMode(attrs);\n    this.enableDownload = this.getEnableDownload(attrs);\n    this.stackblitz = this.getStackblitz(exampleDir, stackblitzName, this.mode === 'embedded');\n    this.zip = this.getZip(exampleDir, stackblitzName);\n    this.title = this.getTitle(attrs);\n  }\n\n  ngAfterContentInit() {\n    // Angular will sanitize this title when displayed, so it should be plain text.\n    const textContent = this.content.nativeElement.textContent.trim();\n    if (textContent) {\n      this.title = textContent;\n    }\n  }\n\n  private getEnableDownload(attrs: AttrMap) {\n    const downloadDisabled = boolFromValue(getAttrValue(attrs, 'noDownload'));\n    return !downloadDisabled;\n  }\n\n  private getExampleDir(attrs: AttrMap, path: string) {\n    let exampleDir = getAttrValue(attrs, 'name');\n    if (!exampleDir) {\n      // Take the last path segment, excluding query params and hash fragment.\n      const match = path.match(/[^/?#]+(?=\\/?(?:\\?|#|$))/);\n      exampleDir = match ? match[0] : 'index';\n    }\n    return exampleDir.trim();\n  }\n\n  private getMode(this: LiveExampleComponent, attrs: AttrMap): typeof this.mode {\n    const downloadOnly = boolFromValue(getAttrValue(attrs, 'downloadOnly'));\n    const isEmbedded = boolFromValue(getAttrValue(attrs, 'embedded'));\n\n    return downloadOnly ? 'downloadOnly'\n           : isEmbedded ? 'embedded' :\n                          'default';\n  }\n\n  private getStackblitz(exampleDir: string, stackblitzName: string, isEmbedded: boolean) {\n    const urlQuery = isEmbedded ? '?ctl=1' : '';\n    return `${LIVE_EXAMPLE_BASE}${exampleDir}/${stackblitzName}stackblitz.html${urlQuery}`;\n  }\n\n  private getStackblitzName(attrs: AttrMap) {\n    const attrValue = (getAttrValue(attrs, 'stackblitz') || '').trim();\n    return attrValue && `${attrValue}.`;\n  }\n\n  private getTitle(attrs: AttrMap) {\n    return (getAttrValue(attrs, 'title') || '라이브 예제 링크').trim();\n  }\n\n  private getZip(exampleDir: string, stackblitzName: string) {\n    const zipName = exampleDir.split('/')[0];\n    return `${ZIP_BASE}${exampleDir}/${stackblitzName}${zipName}.zip`;\n  }\n}\n\n///// EmbeddedStackblitzComponent ///\n/**\n * Hides the <iframe> so we can test LiveExampleComponent without actually triggering\n * a call to stackblitz to load the iframe\n */\n@Component({\n  selector: 'aio-embedded-stackblitz',\n  template: `<iframe #iframe frameborder=\"0\" width=\"100%\" height=\"100%\"></iframe>`,\n  styles: [ 'iframe { min-height: 400px; }' ]\n})\nexport class EmbeddedStackblitzComponent implements AfterViewInit {\n  @Input() src: string;\n\n  @ViewChild('iframe', { static: true }) iframe: ElementRef;\n\n  ngAfterViewInit() {\n    // DEVELOPMENT TESTING ONLY\n    // this.src = 'https://angular.io/resources/live-examples/quickstart/ts/stackblitz.json';\n\n    if (this.iframe) {\n      // security: the `src` is always authored by the documentation team\n      // and is considered to be safe\n      this.iframe.nativeElement.src = this.src;\n    }\n  }\n}\n","import { NgModule, Type } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { EmbeddedStackblitzComponent, LiveExampleComponent } from './live-example.component';\nimport { WithCustomElementComponent } from '../element-registry';\n\n@NgModule({\n  imports: [ CommonModule ],\n  declarations: [ LiveExampleComponent, EmbeddedStackblitzComponent ],\n  entryComponents: [ LiveExampleComponent ]\n})\nexport class LiveExampleModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = LiveExampleComponent;\n}\n"]}