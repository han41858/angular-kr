{"version":3,"sources":["webpack:///./node_modules/@angular/cdk/esm5/portal.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.ts","webpack:///./src/app/custom-elements/expandable-section/expandable-section.module.ts","webpack:///./node_modules/@angular/cdk/esm5/accordion.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm5/expansion.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/expansion/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/expansion/typings/index.d.ts.MatExpansionPanel.html","webpack:///./node_modules/@angular/material/expansion/typings/index.d.ts.MatExpansionPanelHeader.html","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/expandable-section/expandable-section.component.html","webpack:///./src/app/custom-elements/expandable-section/expandable-section.module.ngfactory.js.pre-build-optimizer.js"],"names":["__webpack_require__","d","__webpack_exports__","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","CdkPortalOutlet","PortalModule","PortalInjector","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","this","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","template","context","templateRef","elementRef","undefined","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","length","destroy","create","attachView","hostView","detachView","appendChild","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","removeChild","_viewContainerRef","_isInitialized","attached","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","_parentInjector","_customTokens","token","notFoundValue","value","ExpandableSectionComponent","expandable_section_module_ExpandableSectionModule","customElementComponent","nextId$1","accordion_es5_CdkAccordionItem","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","core","opened","destroyed","expandedChange","id","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","multi","expanded","_subscribeToOpenCloseAllActions","coercion_es5","notify","markForCheck","disabled","complete","unsubscribe","toggle","close","open","_openCloseAllActions","subscribe","CdkAccordionModule","MAT_ACCORDION","uniqueId","expansion_es5_MatExpansionPanel","MatExpansionPanel","_uniqueSelectionDispatcher","_document","_animationMode","_hideToggle","afterExpand","afterCollapse","_inputChanges","Subject","_headerId","tslib_es6","hideToggle","_hasSpacing","displayMode","_getExpandedState","ngAfterContentInit","_lazyContent","pipe","startWith","filter","_portal","take","portal_es5","_template","ngOnChanges","changes","next","_bodyAnimation","event","phaseName","toState","fromState","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","expansion_es5_MatExpansionPanelHeader","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","accordionHideToggleChange","_stateChanges","empty","merge","focusVia","monitor","origin","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","keyCode","keycodes_es5","preventDefault","_handleHeaderKeydown","focus","stopMonitoring","MatExpansionModule","RenderType_MatExpansionPanel","encapsulation","styles","data","animation","type","name","definitions","height","visibility","offset","options","expr","timings","View_MatExpansionPanel_1","_l","View_MatExpansionPanel_0","_v","en","$event","ad","_ck","_co","RenderType_MatExpansionPanelHeader","transform","params","collapsedHeight","expandedHeight","steps","selector","optional","View_MatExpansionPanelHeader_1","View_MatExpansionPanelHeader_0","common","ngIf","RenderType_ExpandableSectionComponent","View_ExpandableSectionComponent_0","collections_es5","fesm5_animations","a11y_es5","currVal_3","currVal_4","currVal_5","currVal_6","currVal_7","currVal_8","currVal_9","title","View_ExpandableSectionComponent_Host_0","ExpandableSectionComponentNgFactory","ExpandableSectionModuleNgFactory"],"mappings":"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","file":"expandable-section-expandable-section-module-ngfactory.9431f439543b4ddf0227.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nvar  /**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nPortal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return /** @type {?} */ (host.attach(this));\n    };\n    /** Detach this portal from its host */\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nvar  /**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nvar  /**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nTemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = /**\n     * Attach the the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nvar  /**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nBasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.hasAttached = /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attach = /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.detach = /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.dispose = /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.setDisposeFn = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @return {?}\n     */\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\n     * @return {?}\n     */\n    function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar  /**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nDomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            /** @type {?} */\n            var index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalOutlet.prototype.dispose = /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalOutlet.prototype._getComponentRootNode = /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        return /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    CdkPortal.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-portal], [cdkPortal], [portal]',\n                    exportAs: 'cdkPortal',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ]; };\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        _this._isInitialized = false;\n        _this.attached = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: /**\n         * Portal associated with the Portal outlet.\n         * @return {?}\n         */\n        function () {\n            return this._attachedPortal;\n        },\n        set: /**\n         * @param {?} portal\n         * @return {?}\n         */\n        function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: /**\n         * Component or view reference that is attached to the portal.\n         * @return {?}\n         */\n        function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        var componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    CdkPortalOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                    inputs: ['portal: cdkPortalOutlet']\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef }\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\n    PortalModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkPortal, CdkPortalOutlet],\n                    declarations: [CdkPortal, CdkPortalOutlet],\n                },] },\n    ];\n    return PortalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nvar  /**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nPortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    PortalInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        /** @type {?} */\n        var value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.es5.js.map\n","/* tslint:disable component-selector */\nimport {Component, Input} from '@angular/core';\n\n/** Custom element wrapper for the material expansion panel with a title input. */\n@Component({\n  selector: 'aio-expandable-section',\n  templateUrl: 'expandable-section.component.html',\n})\nexport class ExpandableSectionComponent {\n  @Input() title;\n}\n","import { NgModule, Type } from '@angular/core';\nimport { ExpandableSectionComponent } from './expandable-section.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { MatExpansionModule } from '@angular/material';\n\n@NgModule({\n  imports: [ MatExpansionModule ],\n  declarations: [ ExpandableSectionComponent, ],\n  entryComponents: [ ExpandableSectionComponent ]\n})\nexport class ExpandableSectionModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ExpandableSectionComponent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Used to generate unique ID for each accordion.\n  @type {?} */\nvar nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nvar CdkAccordion = /** @class */ (function () {\n    function CdkAccordion() {\n        /**\n         * Emits when the state of the accordion changes\n         */\n        this._stateChanges = new Subject();\n        /**\n         * Stream that emits true/false when openAll/closeAll is triggered.\n         */\n        this._openCloseAllActions = new Subject();\n        /**\n         * A readonly id value to use for unique selection coordination.\n         */\n        this.id = \"cdk-accordion-\" + nextId++;\n        this._multi = false;\n    }\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get: /**\n         * Whether the accordion should allow multiple expanded accordion items simultaneously.\n         * @return {?}\n         */\n        function () { return this._multi; },\n        set: /**\n         * @param {?} multi\n         * @return {?}\n         */\n        function (multi) { this._multi = coerceBooleanProperty(multi); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    CdkAccordion.prototype.openAll = /**\n     * Opens all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    function () {\n        this._openCloseAll(true);\n    };\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    CdkAccordion.prototype.closeAll = /**\n     * Closes all enabled accordion items in an accordion where multi is enabled.\n     * @return {?}\n     */\n    function () {\n        this._openCloseAll(false);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkAccordion.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._stateChanges.next(changes);\n    };\n    /**\n     * @return {?}\n     */\n    CdkAccordion.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._stateChanges.complete();\n    };\n    /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    CdkAccordion.prototype._openCloseAll = /**\n     * @param {?} expanded\n     * @return {?}\n     */\n    function (expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    };\n    CdkAccordion.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                },] },\n    ];\n    CdkAccordion.propDecorators = {\n        multi: [{ type: Input }]\n    };\n    return CdkAccordion;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Used to generate unique ID for each accordion item.\n  @type {?} */\nvar nextId$1 = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nvar CdkAccordionItem = /** @class */ (function () {\n    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n        var _this = this;\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /**\n         * Subscription to openAll/closeAll events.\n         */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /**\n         * Event emitted every time the AccordionItem is closed.\n         */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted every time the AccordionItem is opened.\n         */\n        this.opened = new EventEmitter();\n        /**\n         * Event emitted when the AccordionItem is destroyed.\n         */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * \\@docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /**\n         * The unique AccordionItem id.\n         */\n        this.id = \"cdk-accordion-child-\" + nextId$1++;\n        this._expanded = false;\n        this._disabled = false;\n        /**\n         * Unregister function for _expansionDispatcher.\n         */\n        this._removeUniqueSelectionListener = function () { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen(function (id, accordionId) {\n                if (_this.accordion && !_this.accordion.multi &&\n                    _this.accordion.id === accordionId && _this.id !== id) {\n                    _this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    Object.defineProperty(CdkAccordionItem.prototype, \"expanded\", {\n        /** Whether the AccordionItem is expanded. */\n        get: /**\n         * Whether the AccordionItem is expanded.\n         * @return {?}\n         */\n        function () { return this._expanded; },\n        set: /**\n         * @param {?} expanded\n         * @return {?}\n         */\n        function (expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /** *\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                      @type {?} */\n                    var accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkAccordionItem.prototype, \"disabled\", {\n        /** Whether the AccordionItem is disabled. */\n        get: /**\n         * Whether the AccordionItem is disabled.\n         * @return {?}\n         */\n        function () { return this._disabled; },\n        set: /**\n         * @param {?} disabled\n         * @return {?}\n         */\n        function (disabled) { this._disabled = coerceBooleanProperty(disabled); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Emits an event for the accordion item being destroyed. */\n    /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.ngOnDestroy = /**\n     * Emits an event for the accordion item being destroyed.\n     * @return {?}\n     */\n    function () {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    };\n    /** Toggles the expanded state of the accordion item. */\n    /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.toggle = /**\n     * Toggles the expanded state of the accordion item.\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    };\n    /** Sets the expanded state of the accordion item to false. */\n    /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.close = /**\n     * Sets the expanded state of the accordion item to false.\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    };\n    /** Sets the expanded state of the accordion item to true. */\n    /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    CdkAccordionItem.prototype.open = /**\n     * Sets the expanded state of the accordion item to true.\n     * @return {?}\n     */\n    function () {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n            // Only change expanded state if item is enabled\n            if (!_this.disabled) {\n                _this.expanded = expanded;\n            }\n        });\n    };\n    CdkAccordionItem.decorators = [\n        { type: Directive, args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                        // to the same accordion.\n                        { provide: CdkAccordion, useValue: ɵ0 },\n                    ],\n                },] },\n    ];\n    /** @nocollapse */\n    CdkAccordionItem.ctorParameters = function () { return [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher }\n    ]; };\n    CdkAccordionItem.propDecorators = {\n        closed: [{ type: Output }],\n        opened: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\n    return CdkAccordionItem;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar CdkAccordionModule = /** @class */ (function () {\n    function CdkAccordionModule() {\n    }\n    CdkAccordionModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkAccordion, CdkAccordionItem],\n                    declarations: [CdkAccordion, CdkAccordionItem],\n                },] },\n    ];\n    return CdkAccordionModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\n//# sourceMappingURL=accordion.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { InjectionToken, Directive, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, EventEmitter, ElementRef, Input, Inject, Optional, Output, SkipSelf, ViewContainerRef, ViewEncapsulation, ViewChild, Host, ContentChildren, NgModule } from '@angular/core';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge, Subscription, EMPTY } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, SPACE, HOME, END } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n  @type {?} */\nvar MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** *\n * Time and timing curve for expansion panel animations.\n  @type {?} */\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/** *\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * \\@docs-private\n  @type {?} */\nvar matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel header height. */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nvar MatExpansionPanelContent = /** @class */ (function () {\n    function MatExpansionPanelContent(_template) {\n        this._template = _template;\n    }\n    MatExpansionPanelContent.decorators = [\n        { type: Directive, args: [{\n                    selector: 'ng-template[matExpansionPanelContent]'\n                },] },\n    ];\n    /** @nocollapse */\n    MatExpansionPanelContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    return MatExpansionPanelContent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar _CdkAccordionItem = CdkAccordionItem;\n/** *\n * Counter for generating unique element ids.\n  @type {?} */\nvar uniqueId = 0;\nvar ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nvar MatExpansionPanel = /** @class */ (function (_super) {\n    __extends(MatExpansionPanel, _super);\n    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, \n    // @breaking-change 8.0.0 _document and _animationMode to be made required\n    _document, _animationMode) {\n        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n        _this._viewContainerRef = _viewContainerRef;\n        _this._animationMode = _animationMode;\n        _this._hideToggle = false;\n        /**\n         * An event emitted after the body's expansion animation happens.\n         */\n        _this.afterExpand = new EventEmitter();\n        /**\n         * An event emitted after the body's collapse animation happens.\n         */\n        _this.afterCollapse = new EventEmitter();\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        _this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        _this._headerId = \"mat-expansion-panel-header-\" + uniqueId++;\n        _this.accordion = accordion;\n        _this._document = _document;\n        return _this;\n    }\n    Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n        /** Whether the toggle indicator should be hidden. */\n        get: /**\n         * Whether the toggle indicator should be hidden.\n         * @return {?}\n         */\n        function () {\n            return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._hasSpacing = /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    function () {\n        if (this.accordion) {\n            // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n            // the [displayMode] input changes, the change detection will also cover the host bindings\n            // of this expansion panel.\n            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n        }\n        return false;\n    };\n    /** Gets the expanded state string. */\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getExpandedState = /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    function () {\n        return this.expanded ? 'expanded' : 'collapsed';\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(/** @type {?} */ ((null))), filter(function () { return _this.expanded && !_this._portal; }), take(1)).subscribe(function () {\n                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);\n            });\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        this._inputChanges.next(changes);\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.ngOnDestroy.call(this);\n        this._inputChanges.complete();\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._bodyAnimation = /**\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var phaseName = event.phaseName, toState = event.toState, fromState = event.fromState;\n        if (phaseName === 'done' && toState === 'expanded' && fromState !== 'void') {\n            this.afterExpand.emit();\n        }\n        if (phaseName === 'done' && toState === 'collapsed' && fromState !== 'void') {\n            this.afterCollapse.emit();\n        }\n    };\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._containsFocus = /**\n     * Checks whether the expansion panel's content contains the currently-focused element.\n     * @return {?}\n     */\n    function () {\n        if (this._body && this._document) {\n            /** @type {?} */\n            var focusedElement = this._document.activeElement;\n            /** @type {?} */\n            var bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    };\n    MatExpansionPanel.decorators = [\n        { type: Component, args: [{styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"],\n                    selector: 'mat-expansion-panel',\n                    exportAs: 'matExpansionPanel',\n                    template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content><div class=\\\"mat-expansion-panel-content\\\" role=\\\"region\\\" [@bodyExpansion]=\\\"_getExpandedState()\\\" (@bodyExpansion.done)=\\\"_bodyAnimation($event)\\\" [attr.aria-labelledby]=\\\"_headerId\\\" [id]=\\\"id\\\" #body><div class=\\\"mat-expansion-panel-body\\\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template></div><ng-content select=\\\"mat-action-row\\\"></ng-content></div>\",\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    inputs: ['disabled', 'expanded'],\n                    outputs: ['opened', 'closed', 'expandedChange'],\n                    animations: [matExpansionAnimations.bodyExpansion],\n                    providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: ɵ0 },\n                    ],\n                    host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatExpansionPanel.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n    ]; };\n    MatExpansionPanel.propDecorators = {\n        hideToggle: [{ type: Input }],\n        afterExpand: [{ type: Output }],\n        afterCollapse: [{ type: Output }],\n        _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n        _body: [{ type: ViewChild, args: ['body',] }]\n    };\n    return MatExpansionPanel;\n}(CdkAccordionItem));\nvar MatExpansionPanelActionRow = /** @class */ (function () {\n    function MatExpansionPanelActionRow() {\n    }\n    MatExpansionPanelActionRow.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row'\n                    }\n                },] },\n    ];\n    return MatExpansionPanelActionRow;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nvar MatExpansionPanelHeader = /** @class */ (function () {\n    function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef) {\n        var _this = this;\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /** @type {?} */\n        var accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter(function (changes) { return !!changes[\"hideToggle\"]; })) : EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(function (changes) { return !!(changes[\"hideToggle\"] || changes[\"disabled\"]); })))\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(function () { return panel._containsFocus(); }))\n            .subscribe(function () { return _focusMonitor.focusVia(_element, 'program'); });\n        _focusMonitor.monitor(_element).subscribe(function (origin) {\n            if (origin && panel.accordion) {\n                panel.accordion._handleHeaderFocus(_this);\n            }\n        });\n    }\n    Object.defineProperty(MatExpansionPanelHeader.prototype, \"disabled\", {\n        /**\n         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n         * @docs-private\n         */\n        get: /**\n         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            return this.panel.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Toggles the expanded state of the panel. */\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._toggle = /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    function () {\n        this.panel.toggle();\n    };\n    /** Gets whether the panel is expanded. */\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._isExpanded = /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    function () {\n        return this.panel.expanded;\n    };\n    /** Gets the expanded state string of the panel. */\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getExpandedState = /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    function () {\n        return this.panel._getExpandedState();\n    };\n    /** Gets the panel id. */\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getPanelId = /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    function () {\n        return this.panel.id;\n    };\n    /** Gets whether the expand indicator should be shown. */\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._showToggle = /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    function () {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    };\n    /** Handle keydown event calling to toggle() if appropriate. */\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._keydown = /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                event.preventDefault();\n                this._toggle();\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    };\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype.focus = /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * \\@docs-private\n     * @param {?=} origin Origin of the action that triggered the focus.\n     * @return {?}\n     */\n    function (origin) {\n        if (origin === void 0) { origin = 'program'; }\n        this._focusMonitor.focusVia(this._element, origin);\n    };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    };\n    MatExpansionPanelHeader.decorators = [\n        { type: Component, args: [{selector: 'mat-expansion-panel-header',\n                    styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"],\n                    template: \"<span class=\\\"mat-content\\\"><ng-content select=\\\"mat-panel-title\\\"></ng-content><ng-content select=\\\"mat-panel-description\\\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\" class=\\\"mat-expansion-indicator\\\"></span>\",\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        matExpansionAnimations.indicatorRotate,\n                        matExpansionAnimations.expansionHeaderHeight\n                    ],\n                    host: {\n                        'class': 'mat-expansion-panel-header',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'disabled ? -1 : 0',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                        '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\",\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatExpansionPanelHeader.ctorParameters = function () { return [\n        { type: MatExpansionPanel, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef }\n    ]; };\n    MatExpansionPanelHeader.propDecorators = {\n        expandedHeight: [{ type: Input }],\n        collapsedHeight: [{ type: Input }]\n    };\n    return MatExpansionPanelHeader;\n}());\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelDescription = /** @class */ (function () {\n    function MatExpansionPanelDescription() {\n    }\n    MatExpansionPanelDescription.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description'\n                    }\n                },] },\n    ];\n    return MatExpansionPanelDescription;\n}());\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelTitle = /** @class */ (function () {\n    function MatExpansionPanelTitle() {\n    }\n    MatExpansionPanelTitle.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title'\n                    }\n                },] },\n    ];\n    return MatExpansionPanelTitle;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nvar MatAccordion = /** @class */ (function (_super) {\n    __extends(MatAccordion, _super);\n    function MatAccordion() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        _this.displayMode = 'default';\n        return _this;\n    }\n    Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n        /** Whether the expansion indicator should be hidden. */\n        get: /**\n         * Whether the expansion indicator should be hidden.\n         * @return {?}\n         */\n        function () { return this._hideToggle; },\n        set: /**\n         * @param {?} show\n         * @return {?}\n         */\n        function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatAccordion.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        this._keyManager = new FocusKeyManager(this._headers).withWrap();\n    };\n    /** Handles keyboard events coming in from the panel headers. */\n    /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n    MatAccordion.prototype._handleHeaderKeydown = /**\n     * Handles keyboard events coming in from the panel headers.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var keyCode = event.keyCode;\n        /** @type {?} */\n        var manager = this._keyManager;\n        if (keyCode === HOME) {\n            manager.setFirstItemActive();\n            event.preventDefault();\n        }\n        else if (keyCode === END) {\n            manager.setLastItemActive();\n            event.preventDefault();\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    };\n    /**\n     * @param {?} header\n     * @return {?}\n     */\n    MatAccordion.prototype._handleHeaderFocus = /**\n     * @param {?} header\n     * @return {?}\n     */\n    function (header) {\n        this._keyManager.updateActiveItem(header);\n    };\n    MatAccordion.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    inputs: ['multi'],\n                    providers: [{\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion\n                        }],\n                    host: {\n                        class: 'mat-accordion'\n                    }\n                },] },\n    ];\n    MatAccordion.propDecorators = {\n        _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n        hideToggle: [{ type: Input }],\n        displayMode: [{ type: Input }]\n    };\n    return MatAccordion;\n}(CdkAccordion));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar MatExpansionModule = /** @class */ (function () {\n    function MatExpansionModule() {\n    }\n    MatExpansionModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule, CdkAccordionModule, PortalModule],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    declarations: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                },] },\n    ];\n    return MatExpansionModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n\nexport { MatExpansionModule, MatAccordion, MAT_ACCORDION, _CdkAccordionItem, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n//# sourceMappingURL=expansion.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/expansion\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/cdk/accordion\";\nimport * as i4 from \"@angular/cdk/portal\";\nimport * as i5 from \"@angular/cdk/collections\";\nimport * as i6 from \"@angular/platform-browser/animations\";\nimport * as i7 from \"@angular/cdk/a11y\";\nvar MatExpansionModuleNgFactory = i0.ɵcmf(i1.MatExpansionModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.CdkAccordionModule, i3.CdkAccordionModule, []), i0.ɵmpd(1073742336, i4.PortalModule, i4.PortalModule, []), i0.ɵmpd(1073742336, i1.MatExpansionModule, i1.MatExpansionModule, [])]); });\nexport { MatExpansionModuleNgFactory as MatExpansionModuleNgFactory };\nvar styles_MatExpansionPanel = [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(.4,0,.2,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media screen and (-ms-high-contrast:active){.mat-expansion-panel{outline:solid 1px}}.mat-expansion-panel._mat-animation-noopable,.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button{margin-left:0;margin-right:8px}\"];\nvar RenderType_MatExpansionPanel = i0.ɵcrt({ encapsulation: 2, styles: styles_MatExpansionPanel, data: { \"animation\": [{ type: 7, name: \"bodyExpansion\", definitions: [{ type: 0, name: \"collapsed, void\", styles: { type: 6, styles: { height: \"0px\", visibility: \"hidden\" }, offset: null }, options: undefined }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { height: \"*\", visibility: \"visible\" }, offset: null }, options: undefined }, { type: 1, expr: \"expanded <=> collapsed, void => collapsed\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }, options: null }], options: {} }] } });\nexport { RenderType_MatExpansionPanel as RenderType_MatExpansionPanel };\nfunction View_MatExpansionPanel_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_MatExpansionPanel_0(_l) { return i0.ɵvid(2, [i0.ɵqud(402653184, 1, { _body: 0 }), i0.ɵncd(null, 0), (_l()(), i0.ɵeld(2, 0, [[1, 0], [\"body\", 1]], null, 5, \"div\", [[\"class\", \"mat-expansion-panel-content\"], [\"role\", \"region\"]], [[24, \"@bodyExpansion\", 0], [1, \"aria-labelledby\", 0], [8, \"id\", 0]], [[null, \"@bodyExpansion.done\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"@bodyExpansion.done\" === en)) {\n        var pd_0 = (_co._bodyAnimation($event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵeld(3, 0, null, null, 3, \"div\", [[\"class\", \"mat-expansion-panel-body\"]], null, null, null, null, null)), i0.ɵncd(null, 1), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatExpansionPanel_1)), i0.ɵdid(6, 212992, null, 0, i4.CdkPortalOutlet, [i0.ComponentFactoryResolver, i0.ViewContainerRef], { portal: [0, \"portal\"] }, null), i0.ɵncd(null, 2)], function (_ck, _v) { var _co = _v.component; var currVal_3 = _co._portal; _ck(_v, 6, 0, currVal_3); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._getExpandedState(); var currVal_1 = _co._headerId; var currVal_2 = _co.id; _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2); }); }\nexport function View_MatExpansionPanel_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 16777216, null, null, 3, \"mat-expansion-panel\", [[\"class\", \"mat-expansion-panel\"]], [[2, \"mat-expanded\", null], [2, \"_mat-animation-noopable\", null], [2, \"mat-expansion-panel-spacing\", null]], null, null, View_MatExpansionPanel_0, RenderType_MatExpansionPanel)), i0.ɵdid(1, 1753088, null, 1, i1.MatExpansionPanel, [[3, i1.MAT_ACCORDION], i0.ChangeDetectorRef, i5.UniqueSelectionDispatcher, i0.ViewContainerRef, i2.DOCUMENT, [2, i6.ANIMATION_MODULE_TYPE]], null, null), i0.ɵqud(335544320, 1, { _lazyContent: 0 }), i0.ɵprd(256, null, i1.MAT_ACCORDION, undefined, [])], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).expanded; var currVal_1 = (i0.ɵnov(_v, 1)._animationMode === \"NoopAnimations\"); var currVal_2 = i0.ɵnov(_v, 1)._hasSpacing(); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2); }); }\nvar MatExpansionPanelNgFactory = i0.ɵccf(\"mat-expansion-panel\", i1.MatExpansionPanel, View_MatExpansionPanel_Host_0, { expanded: \"expanded\", disabled: \"disabled\", hideToggle: \"hideToggle\" }, { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"]);\nexport { MatExpansionPanelNgFactory as MatExpansionPanelNgFactory };\nvar styles_MatExpansionPanelHeader = [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:0}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-description,.mat-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-description,[dir=rtl] .mat-expansion-panel-header-title{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:'';display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\"];\nvar RenderType_MatExpansionPanelHeader = i0.ɵcrt({ encapsulation: 2, styles: styles_MatExpansionPanelHeader, data: { \"animation\": [{ type: 7, name: \"indicatorRotate\", definitions: [{ type: 0, name: \"collapsed, void\", styles: { type: 6, styles: { transform: \"rotate(0deg)\" }, offset: null }, options: undefined }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { transform: \"rotate(180deg)\" }, offset: null }, options: undefined }, { type: 1, expr: \"expanded <=> collapsed, void => collapsed\", animation: { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }, options: null }], options: {} }, { type: 7, name: \"expansionHeight\", definitions: [{ type: 0, name: \"collapsed, void\", styles: { type: 6, styles: { height: \"{{collapsedHeight}}\" }, offset: null }, options: { params: { collapsedHeight: \"48px\" } } }, { type: 0, name: \"expanded\", styles: { type: 6, styles: { height: \"{{expandedHeight}}\" }, offset: null }, options: { params: { expandedHeight: \"64px\" } } }, { type: 1, expr: \"expanded <=> collapsed, void => collapsed\", animation: { type: 3, steps: [{ type: 11, selector: \"@indicatorRotate\", animation: { type: 9, options: null }, options: { optional: true } }, { type: 4, styles: null, timings: \"225ms cubic-bezier(0.4,0.0,0.2,1)\" }], options: null }, options: null }], options: {} }] } });\nexport { RenderType_MatExpansionPanelHeader as RenderType_MatExpansionPanelHeader };\nfunction View_MatExpansionPanelHeader_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 0, \"span\", [[\"class\", \"mat-expansion-indicator\"]], [[24, \"@indicatorRotate\", 0]], null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._getExpandedState(); _ck(_v, 0, 0, currVal_0); }); }\nexport function View_MatExpansionPanelHeader_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"span\", [[\"class\", \"mat-content\"]], null, null, null, null, null)), i0.ɵncd(null, 0), i0.ɵncd(null, 1), i0.ɵncd(null, 2), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatExpansionPanelHeader_1)), i0.ɵdid(5, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._showToggle(); _ck(_v, 5, 0, currVal_0); }, null); }\nexport function View_MatExpansionPanelHeader_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"mat-expansion-panel-header\", [[\"class\", \"mat-expansion-panel-header\"], [\"role\", \"button\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-controls\", 0], [1, \"aria-expanded\", 0], [1, \"aria-disabled\", 0], [2, \"mat-expanded\", null], [40, \"@expansionHeight\", 0]], [[null, \"click\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1)._toggle() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 1)._keydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, View_MatExpansionPanelHeader_0, RenderType_MatExpansionPanelHeader)), i0.ɵdid(1, 180224, null, 0, i1.MatExpansionPanelHeader, [i1.MatExpansionPanel, i0.ElementRef, i7.FocusMonitor, i0.ChangeDetectorRef], null, null), i0.ɵpod(2, { collapsedHeight: 0, expandedHeight: 1 }), i0.ɵpod(3, { value: 0, params: 1 })], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1).panel._headerId; var currVal_1 = (i0.ɵnov(_v, 1).disabled ? (0 - 1) : 0); var currVal_2 = i0.ɵnov(_v, 1)._getPanelId(); var currVal_3 = i0.ɵnov(_v, 1)._isExpanded(); var currVal_4 = i0.ɵnov(_v, 1).panel.disabled; var currVal_5 = i0.ɵnov(_v, 1)._isExpanded(); var currVal_6 = _ck(_v, 3, 0, i0.ɵnov(_v, 1)._getExpandedState(), _ck(_v, 2, 0, i0.ɵnov(_v, 1).collapsedHeight, i0.ɵnov(_v, 1).expandedHeight)); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); }); }\nvar MatExpansionPanelHeaderNgFactory = i0.ɵccf(\"mat-expansion-panel-header\", i1.MatExpansionPanelHeader, View_MatExpansionPanelHeader_Host_0, { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, {}, [\"mat-panel-title\", \"mat-panel-description\", \"*\"]);\nexport { MatExpansionPanelHeaderNgFactory as MatExpansionPanelHeaderNgFactory };\n","<ng-content select=\"mat-expansion-panel-header\"></ng-content><div class=\"mat-expansion-panel-content\" role=\"region\" [@bodyExpansion]=\"_getExpandedState()\" (@bodyExpansion.done)=\"_bodyAnimation($event)\" [attr.aria-labelledby]=\"_headerId\" [id]=\"id\" #body><div class=\"mat-expansion-panel-body\"><ng-content></ng-content><ng-template [cdkPortalOutlet]=\"_portal\"></ng-template></div><ng-content select=\"mat-action-row\"></ng-content></div>","<span class=\"mat-content\"><ng-content select=\"mat-panel-title\"></ng-content><ng-content select=\"mat-panel-description\"></ng-content><ng-content></ng-content></span><span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\" class=\"mat-expansion-indicator\"></span>","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../node_modules/@angular/material/expansion/typings/index.ngfactory\";\nimport * as i2 from \"@angular/material/expansion\";\nimport * as i3 from \"@angular/cdk/collections\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/platform-browser/animations\";\nimport * as i6 from \"@angular/cdk/a11y\";\nimport * as i7 from \"./expandable-section.component\";\nvar styles_ExpandableSectionComponent = [];\nvar RenderType_ExpandableSectionComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_ExpandableSectionComponent, data: {} });\nexport { RenderType_ExpandableSectionComponent as RenderType_ExpandableSectionComponent };\nexport function View_ExpandableSectionComponent_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 16777216, null, null, 9, \"mat-expansion-panel\", [[\"class\", \"mat-expansion-panel\"], [\"style\", \"background: inherit\"]], [[2, \"mat-expanded\", null], [2, \"_mat-animation-noopable\", null], [2, \"mat-expansion-panel-spacing\", null]], null, null, i1.View_MatExpansionPanel_0, i1.RenderType_MatExpansionPanel)), i0.ɵdid(1, 1753088, null, 1, i2.MatExpansionPanel, [[3, i2.MAT_ACCORDION], i0.ChangeDetectorRef, i3.UniqueSelectionDispatcher, i0.ViewContainerRef, i4.DOCUMENT, [2, i5.ANIMATION_MODULE_TYPE]], null, null), i0.ɵqud(335544320, 1, { _lazyContent: 0 }), i0.ɵprd(256, null, i2.MAT_ACCORDION, undefined, []), (_l()(), i0.ɵeld(4, 0, null, 0, 4, \"mat-expansion-panel-header\", [[\"class\", \"mat-expansion-panel-header\"], [\"role\", \"button\"]], [[1, \"id\", 0], [1, \"tabindex\", 0], [1, \"aria-controls\", 0], [1, \"aria-expanded\", 0], [1, \"aria-disabled\", 0], [2, \"mat-expanded\", null], [40, \"@expansionHeight\", 0]], [[null, \"click\"], [null, \"keydown\"]], function (_v, en, $event) { var ad = true; if ((\"click\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 5)._toggle() !== false);\n        ad = (pd_0 && ad);\n    } if ((\"keydown\" === en)) {\n        var pd_1 = (i0.ɵnov(_v, 5)._keydown($event) !== false);\n        ad = (pd_1 && ad);\n    } return ad; }, i1.View_MatExpansionPanelHeader_0, i1.RenderType_MatExpansionPanelHeader)), i0.ɵdid(5, 180224, null, 0, i2.MatExpansionPanelHeader, [i2.MatExpansionPanel, i0.ElementRef, i6.FocusMonitor, i0.ChangeDetectorRef], null, null), i0.ɵpod(6, { collapsedHeight: 0, expandedHeight: 1 }), i0.ɵpod(7, { value: 0, params: 1 }), (_l()(), i0.ɵted(8, 2, [\" \", \" \"])), i0.ɵncd(1, 0)], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵnov(_v, 1).expanded; var currVal_1 = (i0.ɵnov(_v, 1)._animationMode === \"NoopAnimations\"); var currVal_2 = i0.ɵnov(_v, 1)._hasSpacing(); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2); var currVal_3 = i0.ɵnov(_v, 5).panel._headerId; var currVal_4 = (i0.ɵnov(_v, 5).disabled ? (0 - 1) : 0); var currVal_5 = i0.ɵnov(_v, 5)._getPanelId(); var currVal_6 = i0.ɵnov(_v, 5)._isExpanded(); var currVal_7 = i0.ɵnov(_v, 5).panel.disabled; var currVal_8 = i0.ɵnov(_v, 5)._isExpanded(); var currVal_9 = _ck(_v, 7, 0, i0.ɵnov(_v, 5)._getExpandedState(), _ck(_v, 6, 0, i0.ɵnov(_v, 5).collapsedHeight, i0.ɵnov(_v, 5).expandedHeight)); _ck(_v, 4, 0, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9); var currVal_10 = _co.title; _ck(_v, 8, 0, currVal_10); }); }\nexport function View_ExpandableSectionComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-expandable-section\", [], null, null, null, View_ExpandableSectionComponent_0, RenderType_ExpandableSectionComponent)), i0.ɵdid(1, 49152, null, 0, i7.ExpandableSectionComponent, [], null, null)], null, null); }\nvar ExpandableSectionComponentNgFactory = i0.ɵccf(\"aio-expandable-section\", i7.ExpandableSectionComponent, View_ExpandableSectionComponent_Host_0, { title: \"title\" }, {}, [\"*\"]);\nexport { ExpandableSectionComponentNgFactory as ExpandableSectionComponentNgFactory };\n","<mat-expansion-panel style=\"background: inherit\">\r\n  <mat-expansion-panel-header>\r\n    {{title}}\r\n  </mat-expansion-panel-header>\r\n\r\n  <ng-content></ng-content>\r\n</mat-expansion-panel>\r\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./expandable-section.module\";\nimport * as i2 from \"./expandable-section.component.ngfactory\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/cdk/accordion\";\nimport * as i5 from \"@angular/cdk/portal\";\nimport * as i6 from \"@angular/material/expansion\";\nvar ExpandableSectionModuleNgFactory = i0.ɵcmf(i1.ExpandableSectionModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ExpandableSectionComponentNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i4.CdkAccordionModule, i4.CdkAccordionModule, []), i0.ɵmpd(1073742336, i5.PortalModule, i5.PortalModule, []), i0.ɵmpd(1073742336, i6.MatExpansionModule, i6.MatExpansionModule, []), i0.ɵmpd(1073742336, i1.ExpandableSectionModule, i1.ExpandableSectionModule, [])]); });\nexport { ExpandableSectionModuleNgFactory as ExpandableSectionModuleNgFactory };\n"],"sourceRoot":""}