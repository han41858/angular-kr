{"version":3,"sources":["webpack:///./src/app/shared/copier.service.ts","webpack:///./src/app/custom-elements/code/code.component.ngfactory.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.component.ts.CodeComponent.html","webpack:///./node_modules/@angular/cdk/esm5/portal.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.component.ts","webpack:///./src/app/custom-elements/code/code.component.ts.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/code.module.ts","webpack:///./node_modules/@angular/cdk/esm5/overlay.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/cdk/esm5/layout.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm5/snack-bar.es5.js.pre-build-optimizer.js","webpack:///./src/app/custom-elements/code/pretty-printer.service.ts","webpack:///./node_modules/@angular/material/snack-bar/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/snack-bar/typings/index.d.ts.MatSnackBarContainer.html","webpack:///./node_modules/@angular/material/snack-bar/typings/index.d.ts.SimpleSnackBar.html"],"names":["__webpack_require__","d","__webpack_exports__","CopierService","prototype","createFake","text","docElem","document","documentElement","isRTL","getAttribute","this","fakeElem","createElement","style","fontSize","border","padding","margin","position","yPosition","window","pageYOffset","scrollTop","top","setAttribute","value","body","appendChild","select","setSelectionRange","length","removeFake","removeChild","copyText","execCommand","err","RenderType_CodeComponent","View_CodeComponent_0","CodeComponentNgFactory","_angular_core__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_1__","_code_component__WEBPACK_IMPORTED_MODULE_2__","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_3__","_pretty_printer_service__WEBPACK_IMPORTED_MODULE_4__","_shared_copier_service__WEBPACK_IMPORTED_MODULE_5__","_shared_logger_service__WEBPACK_IMPORTED_MODULE_6__","encapsulation","styles","data","View_CodeComponent_1","_l","_v","en","$event","ad","component","doCopy","_ck","ariaLabel","codeContainer","ngIf","hideCopy","language","View_CodeComponent_Host_0","linenums","path","region","header","codeFormatted","ComponentPortal","TemplatePortal","BasePortalOutlet","DomPortalOutlet","CdkPortal","CdkPortalOutlet","PortalModule","PortalInjector","tslib__WEBPACK_IMPORTED_MODULE_0__","_angular_core__WEBPACK_IMPORTED_MODULE_1__","throwPortalAlreadyAttachedError","Error","Portal","attach","host","throwNullPortalOutletError","hasAttached","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","_super","viewContainerRef","injector","componentFactoryResolver","_this","call","template","context","templateRef","elementRef","undefined","_isDisposed","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","componentRef","componentFactory","resolveComponentFactory","createComponent","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","parentNode","_viewContainerRef","_isInitialized","attached","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","_parentInjector","_customTokens","token","notFoundValue","CodeComponent","rxjs_operators__WEBPACK_IMPORTED_MODULE_1__","snackbar","pretty","copier","logger","_code","code","trim","formatDisplayedCode","showMissingCodeMessage","_header","ngOnChanges","indent","lines","leftAlignedCode","Number","MAX_VALUE","split","line","lineIndent","search","Math","min","map","substr","join","setCodeHtml","codeText","getCodeText","formatCode","getLinenums","pipe","subscribe","c","src","formattedCode","nativeElement","innerHTML","textContent","log","open","duration","error","parseInt","isNaN","match","CodeModule","Overlay","OverlayContainer","OverlayKeyboardDispatcher","OverlayPositionBuilder","OverlayConfig","ScrollStrategyOptions","OverlayModule","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY","CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_0__","_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_3__","tslib__WEBPACK_IMPORTED_MODULE_4__","rxjs__WEBPACK_IMPORTED_MODULE_5__","rxjs__WEBPACK_IMPORTED_MODULE_6__","rxjs__WEBPACK_IMPORTED_MODULE_7__","rxjs__WEBPACK_IMPORTED_MODULE_8__","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","rxjs_operators__WEBPACK_IMPORTED_MODULE_10__","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_12__","BlockScrollStrategy","_viewportRuler","_previousHTMLStyles","left","_isEnabled","_document","enable","_canBeEnabled","root","_previousScrollPosition","getViewportScrollPosition","classList","add","disable","html","htmlStyle","bodyStyle","previousHtmlScrollBehavior","scrollBehavior","previousBodyScrollBehavior","scroll","contains","viewport","getViewportSize","scrollHeight","height","scrollWidth","width","getMatScrollStrategyAlreadyAttachedError","CloseScrollStrategy","_scrollDispatcher","_ngZone","_config","_scrollSubscription","_detach","_overlayRef","run","overlayRef","stream","scrolled","threshold","_initialScrollPosition","scrollPosition","abs","updatePosition","unsubscribe","NoopScrollStrategy","isElementScrolledOutsideView","element","scrollContainers","some","containerBounds","bottom","right","isElementClippedByScrolling","scrollContainerRect","RepositionScrollStrategy","scrollThrottle","autoClose","overlayRect","overlayElement","getBoundingClientRect","_a","noop","close","config","block","reposition","ngInjectableDef","factory","providedIn","scrollStrategy","panelClass","hasBackdrop","backdropClass","disposeOnNavigation","keys","k","ConnectionPositionPair","origin","overlay","offsetX","offsetY","originX","originY","overlayX","overlayY","ConnectedOverlayPositionChange","connectionPair","scrollableViewProperties","validateVerticalPosition","property","validateHorizontalPosition","_attachedOverlays","_keydownListener","event","overlays","i","_keydownEventSubscriptions","_keydownEvents","next","_isAttached","addEventListener","push","splice","removeEventListener","_containerElement","getContainerElement","_createContainer","container","OverlayRef","_portalOutlet","_host","_pane","_keyboardDispatcher","_location","_backdropElement","_backdropClick","_attachments","_detachments","_locationChanges","EMPTY","_keydownEventsObservable","observer","subscription","_scrollStrategy","_positionStrategy","positionStrategy","attachResult","parentElement","_previousHostParent","_updateStackingOrder","_updateElementSize","_updateElementDirection","onStable","asObservable","_togglePointerEvents","_attachBackdrop","_toggleClasses","detachBackdrop","detachmentResult","_detachContentWhenStable","isAttached","_disposeScrollStrategy","complete","backdropClick","attachments","detachments","keydownEvents","getConfig","apply","updatePositionStrategy","strategy","updateSize","sizeConfig","setDirection","dir","direction","addPanelClass","classes","removePanelClass","getDirection","updateScrollStrategy","minWidth","minHeight","maxWidth","maxHeight","enablePointer","pointerEvents","insertBefore","requestAnimationFrame","runOutsideAngular","nextSibling","backdropToDetach","timeoutId","finishDetach","clearTimeout","setTimeout","cssClasses","isAdd","cssClass","children","FlexibleConnectedPositionStrategy","connectedTo","_platform","_overlayContainer","_lastBoundingBoxSize","_isPushed","_canPush","_growAfterOpen","_hasFlexibleDimensions","_positionLocked","_viewportMargin","scrollables","_preferredPositions","_positionChanges","_resizeSubscription","_offsetX","_offsetY","_positionChangeSubscriptions","_appliedPanelClasses","positionChanges","setOrigin","_validatePositions","hostElement","_boundingBox","_isInitialRender","_lastPosition","change","isBrowser","reapplyLastPosition","_clearPanelClasses","_resetOverlayElementStyles","_resetBoundingBoxStyles","_viewportRect","_getNarrowedViewportRect","_originRect","_getOriginRect","_overlayRect","fallback","originRect","viewportRect","flexibleFits","_i","pos","originPoint","_getOriginPoint","overlayPoint","_getOverlayPoint","overlayFit","_getOverlayFit","isCompletelyWithinViewport","_applyPosition","_canFitWithFlexibleDimensions","boundingBoxRect","_calculateBoundingBoxRect","visibleArea","bestFit","bestScore","_b","flexibleFits_1","fit","score","weight","_previousPushAmount","extendStyles","alignItems","justifyContent","lastPosition","withScrollableContainers","withPositions","positions","withViewportMargin","withFlexibleDimensions","flexibleDimensions","withGrowAfterOpen","growAfterOpen","withPush","canPush","withLockedPosition","isLocked","_origin","withDefaultOffsetX","offset","withDefaultOffsetY","withTransformOriginOn","selector","_transformOriginSelector","x","startX","_isRtl","endX","y","overlayStartX","point","_getOffset","topOverflow","bottomOverflow","visibleWidth","_subtractOverflows","visibleHeight","fitsInViewportVertically","fitsInViewportHorizontally","availableHeight","availableWidth","_pushOverlayOnScreen","start","pushX","pushY","overflowRight","max","overflowBottom","overflowTop","overflowLeft","_setTransformOrigin","_setOverlayElementStyles","_setBoundingBoxStyles","_addPanelClasses","_getScrollVisibility","changeEvent","xOrigin","elements","querySelectorAll","yOrigin","transformOrigin","isRtl","smallestDistanceToViewportEdge","previousHeight","previousWidth","_hasExactPosition","transform","_getExactOverlayY","_getExactOverlayX","transformString","virtualKeyboardOffset","clientHeight","clientWidth","originBounds","overlayBounds","scrollContainerBounds","scrollable","getElementRef","isOriginClipped","isOriginOutsideView","isOverlayClipped","isOverlayOutsideView","overflows","arguments","reduce","currentValue","currentOverflow","axis","pair","HTMLElement","dest","source","key","hasOwnProperty","ConnectedPositionStrategy","originPos","overlayPos","viewportRuler","platform","overlayContainer","withFallbackPosition","_direction","recalculateLastPosition","withDirection","withOffsetX","withOffsetY","slice","GlobalPositionStrategy","_cssPosition","_topOffset","_bottomOffset","_leftOffset","_rightOffset","_alignItems","_justifyContent","_width","_height","centerHorizontally","centerVertically","parentStyles","marginLeft","marginTop","marginBottom","marginRight","parent","global","flexibleConnectedTo","nextUniqueId","scrollStrategies","_positionBuilder","_injector","_directionality","_createHostElement","pane","_createPaneElement","portalOutlet","_createPortalOutlet","overlayConfig","id","mediaQueryStyleNode","mediaQueriesForWebkitCompatibility","Set","layout_es5_MediaMatcher","MediaMatcher","_matchMedia","matchMedia","bind","noopMatchMedia","query","WEBKIT","has","sheet","insertRule","e","console","createEmptyStyleRule","core","platform_es5","matches","media","addListener","removeListener","layout_es5_BreakpointObserver","BreakpointObserver","mediaMatcher","zone","_queries","Map","_destroySubject","Subject","isMatched","splitQueries","coercion_es5","mediaQuery","_registerQuery","mql","observe","observables","observable","combineLatest","debounceTime","asap","breakpointStates","response","breakpoints","state","output","Observable","handler","startWith","nextMql","takeUntil","queries","a1","a2","concat","MatSnackBarModule","snack_bar_es5_MatSnackBar","snack_bar_es5_MatSnackBarContainer","MAT_SNACK_BAR_DATA","MatSnackBarConfig","snack_bar_es5_MatSnackBarRef","SimpleSnackBar","MatSnackBarRef","containerInstance","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","_open","dismissedByAction","afterDismissed","afterOpened","_onEnter","politeness","announcementMessage","horizontalPosition","verticalPosition","snackBarRef","action","MatSnackBarContainer","_elementRef","_changeDetectorRef","snackBarConfig","_destroyed","_animationState","_role","tslib_es6","_assertNotAttached","_applySnackBarClasses","onAnimationEnd","toState","fromState","_completeExit","onEnter_1","enter","onMicrotaskEmpty","take","panelClasses","Array","isArray","portal_es5","MAT_SNACK_BAR_DEFAULT_OPTIONS","MatSnackBar","_overlay","_live","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","_openedSnackBarRef","openFromComponent","_attach","openFromTemplate","message","_attachSnackBarContainer","WeakMap","containerPortal","containerRef","instance","content","userConfig","_createOverlay","$implicit","_createInjector","contentRef","state$$1","_animateSnackBar","announce","overlay_es5","isLeft","isRight","a11y_es5","PrettyPrinter","rxjs__WEBPACK_IMPORTED_MODULE_0__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","prettyPrintOne","getPrettyPrintOne","ppo","Promise","resolve","then","t","msg","MatSnackBarContainerNgFactory","SimpleSnackBarNgFactory","_angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_1__","_angular_common__WEBPACK_IMPORTED_MODULE_3__","_angular_cdk_portal__WEBPACK_IMPORTED_MODULE_5__","_angular_material_button__WEBPACK_IMPORTED_MODULE_10__","_button_typings_index_ngfactory__WEBPACK_IMPORTED_MODULE_11__","_angular_cdk_a11y__WEBPACK_IMPORTED_MODULE_12__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_13__","RenderType_MatSnackBarContainer","animation","type","name","definitions","opacity","options","expr","timings","View_MatSnackBarContainer_1","View_MatSnackBarContainer_0","View_MatSnackBarContainer_Host_0","RenderType_SimpleSnackBar","View_SimpleSnackBar_1","_co","disabled","_animationMode","View_SimpleSnackBar_0","hasAction","View_SimpleSnackBar_Host_0"],"mappings":"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","file":"1-es5.378fae7e2736daeb243f.js","sourcesContent":["/**\n * This class is based on the code in the following projects:\n *\n * - https://github.com/zenorocha/select\n * - https://github.com/zenorocha/clipboard.js/\n *\n * Both released under MIT license - © Zeno Rocha\n */\n\n\nexport class CopierService {\n    private fakeElem: HTMLTextAreaElement|null;\n\n    /**\n     * Creates a fake textarea element, sets its value from `text` property,\n     * and makes a selection on it.\n     */\n    createFake(text: string) {\n      const docElem = document.documentElement!;\n      const isRTL = docElem.getAttribute('dir') === 'rtl';\n\n      // Create a fake element to hold the contents to copy\n      this.fakeElem = document.createElement('textarea');\n\n      // Prevent zooming on iOS\n      this.fakeElem.style.fontSize = '12pt';\n\n      // Reset box model\n      this.fakeElem.style.border = '0';\n      this.fakeElem.style.padding = '0';\n      this.fakeElem.style.margin = '0';\n\n      // Move element out of screen horizontally\n      this.fakeElem.style.position = 'absolute';\n      this.fakeElem.style[ isRTL ? 'right' : 'left' ] = '-9999px';\n\n      // Move element to the same position vertically\n      const yPosition = window.pageYOffset || docElem.scrollTop;\n      this.fakeElem.style.top = yPosition + 'px';\n\n      this.fakeElem.setAttribute('readonly', '');\n      this.fakeElem.value = text;\n\n      document.body.appendChild(this.fakeElem);\n\n      this.fakeElem.select();\n      this.fakeElem.setSelectionRange(0, this.fakeElem.value.length);\n    }\n\n    removeFake() {\n      if (this.fakeElem) {\n        document.body.removeChild(this.fakeElem);\n        this.fakeElem = null;\n      }\n    }\n\n    copyText(text: string) {\n      try {\n        this.createFake(text);\n        return document.execCommand('copy');\n      } catch (err) {\n        return false;\n      } finally {\n        this.removeFake();\n      }\n    }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./code.component\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"./pretty-printer.service\";\nimport * as i5 from \"../../shared/copier.service\";\nimport * as i6 from \"../../shared/logger.service\";\nvar styles_CodeComponent = [];\nvar RenderType_CodeComponent = i0.ɵcrt({ encapsulation: 2, styles: styles_CodeComponent, data: {} });\nexport { RenderType_CodeComponent as RenderType_CodeComponent };\nfunction View_CodeComponent_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 4, \"button\", [[\"class\", \"material-icons copy-button no-print\"], [\"title\", \"Copy code snippet\"]], [[1, \"aria-label\", 0]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.doCopy() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n        \"])), (_l()(), i0.ɵeld(2, 0, null, null, 1, \"span\", [[\"aria-hidden\", \"true\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"content_copy\"])), (_l()(), i0.ɵted(-1, null, [\"\\n      \"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.ariaLabel; _ck(_v, 0, 0, currVal_0); }); }\nexport function View_CodeComponent_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { codeContainer: 0 }), (_l()(), i0.ɵeld(1, 0, null, null, 6, \"pre\", [], [[8, \"className\", 0]], null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"      \"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_CodeComponent_1)), i0.ɵdid(4, 16384, null, 0, i1.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵted(-1, null, [\"\\n      \"])), (_l()(), i0.ɵeld(6, 0, [[1, 0], [\"codeContainer\", 1]], null, 0, \"code\", [[\"class\", \"animated fadeIn\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\n    \"]))], function (_ck, _v) { var _co = _v.component; var currVal_1 = !_co.hideCopy; _ck(_v, 4, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = i0.ɵinlineInterpolate(1, \"prettyprint lang-\", _co.language, \"\"); _ck(_v, 1, 0, currVal_0); }); }\nexport function View_CodeComponent_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"aio-code\", [], null, null, null, View_CodeComponent_0, RenderType_CodeComponent)), i0.ɵdid(1, 573440, null, 0, i2.CodeComponent, [i3.MatSnackBar, i4.PrettyPrinter, i5.CopierService, i6.Logger], null, null)], null, null); }\nvar CodeComponentNgFactory = i0.ɵccf(\"aio-code\", i2.CodeComponent, View_CodeComponent_Host_0, { hideCopy: \"hideCopy\", language: \"language\", linenums: \"linenums\", path: \"path\", region: \"region\", header: \"header\" }, { codeFormatted: \"codeFormatted\" }, []);\nexport { CodeComponentNgFactory as CodeComponentNgFactory };\n","\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    ","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * \\@docs-private\n * @return {?}\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * \\@docs-private\n * @return {?}\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nvar  /**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n * @abstract\n * @template T\n */\nPortal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.attach = /**\n     * Attach this portal to a host.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return (/** @type {?} */ (host.attach(this)));\n    };\n    /** Detach this portal from its host */\n    /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    Portal.prototype.detach = /**\n     * Detach this portal from its host\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: /**\n         * Whether this portal is attached to a host.\n         * @return {?}\n         */\n        function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    Portal.prototype.setAttachedHost = /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     * @param {?} host\n     * @return {?}\n     */\n    function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nvar  /**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n * @template T\n */\nComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nvar  /**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n * @template C\n */\nTemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    TemplatePortal.prototype.attach = /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     * @param {?} host\n     * @param {?=} context\n     * @return {?}\n     */\n    function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    /**\n     * @return {?}\n     */\n    TemplatePortal.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nvar  /**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n * @abstract\n */\nBasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /**\n         * Whether this host has already been permanently disposed.\n         */\n        this._isDisposed = false;\n    }\n    /** Whether this host has an attached portal. */\n    /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.hasAttached = /**\n     * Whether this host has an attached portal.\n     * @return {?}\n     */\n    function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.attach = /**\n     * Attaches a portal.\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.detach = /**\n     * Detaches a previously attached portal.\n     * @return {?}\n     */\n    function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.dispose = /**\n     * Permanently dispose of this portal host.\n     * @return {?}\n     */\n    function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    BasePortalOutlet.prototype.setDisposeFn = /**\n     * \\@docs-private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        this._disposeFn = fn;\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar  /**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nDomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @template T\n     * @param {?} portal Portal to be attached\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            function () { return componentRef.destroy(); }));\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn((/**\n             * @return {?}\n             */\n            function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            }));\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var viewContainer = portal.viewContainerRef;\n        /** @type {?} */\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach((/**\n         * @param {?} rootNode\n         * @return {?}\n         */\n        function (rootNode) { return _this.outletElement.appendChild(rootNode); }));\n        this.setDisposeFn(((/**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        })));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    DomPortalOutlet.prototype.dispose = /**\n     * Clears out a portal from the DOM.\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /** Gets the root HTMLElement for an instantiated component. */\n    /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    DomPortalOutlet.prototype._getComponentRootNode = /**\n     * Gets the root HTMLElement for an instantiated component.\n     * @private\n     * @param {?} componentRef\n     * @return {?}\n     */\n    function (componentRef) {\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    CdkPortal.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-portal], [cdkPortal], [portal]',\n                    exportAs: 'cdkPortal',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ]; };\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /**\n         * Whether the portal component is initialized.\n         */\n        _this._isInitialized = false;\n        /**\n         * Emits when a portal is attached to the outlet.\n         */\n        _this.attached = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: /**\n         * Portal associated with the Portal outlet.\n         * @return {?}\n         */\n        function () {\n            return this._attachedPortal;\n        },\n        set: /**\n         * @param {?} portal\n         * @return {?}\n         */\n        function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: /**\n         * Component or view reference that is attached to the portal.\n         * @return {?}\n         */\n        function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        this._isInitialized = true;\n    };\n    /**\n     * @return {?}\n     */\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @template T\n     * @param {?} portal Portal to be attached to the portal outlet.\n     * @return {?} Reference to the created component.\n     */\n    function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        /** @type {?} */\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        /** @type {?} */\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        /** @type {?} */\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        /** @type {?} */\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        _super.prototype.setDisposeFn.call(this, (/**\n         * @return {?}\n         */\n        function () { return ref.destroy(); }));\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\n     * @template C\n     * @param {?} portal Portal to be attached.\n     * @return {?} Reference to the created embedded view.\n     */\n    function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        /** @type {?} */\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, (/**\n         * @return {?}\n         */\n        function () { return _this._viewContainerRef.clear(); }));\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    CdkPortalOutlet.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkPortalOutlet], [cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalOutlet, cdkPortalHost',\n                    inputs: ['portal: cdkPortalOutlet']\n                },] },\n    ];\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef }\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\n    PortalModule.decorators = [\n        { type: NgModule, args: [{\n                    exports: [CdkPortal, CdkPortalOutlet],\n                    declarations: [CdkPortal, CdkPortalOutlet],\n                },] },\n    ];\n    return PortalModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nvar  /**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * \\@docs-private\n */\nPortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    PortalInjector.prototype.get = /**\n     * @param {?} token\n     * @param {?=} notFoundValue\n     * @return {?}\n     */\n    function (token, notFoundValue) {\n        /** @type {?} */\n        var value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DomPortalOutlet as DomPortalHost, CdkPortalOutlet as PortalHostDirective, CdkPortal as TemplatePortalDirective, BasePortalOutlet as BasePortalHost, Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, DomPortalOutlet, CdkPortal, CdkPortalOutlet, PortalModule, PortalInjector };\n//# sourceMappingURL=portal.es5.js.map\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nconst DEFAULT_LINE_NUMS_COUNT = 10;\n\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\n@Component({\n  selector: 'aio-code',\n  template: `\n    <pre class=\"prettyprint lang-{{language}}\">\n      <button *ngIf=\"!hideCopy\" class=\"material-icons copy-button no-print\"\n        title=\"Copy code snippet\"\n        [attr.aria-label]=\"ariaLabel\"\n        (click)=\"doCopy()\">\n        <span aria-hidden=\"true\">content_copy</span>\n      </button>\n      <code class=\"animated fadeIn\" #codeContainer></code>\n    </pre>\n    `\n})\nexport class CodeComponent implements OnChanges {\n  ariaLabel = '';\n\n  /** The code to be copied when clicking the copy button, this should not be HTML encoded */\n  private codeText: string;\n\n  /** Code that should be formatted with current inputs and displayed in the view. */\n  set code(code: string) {\n    this._code = code;\n\n    if (!this._code || !this._code.trim()) {\n      this.showMissingCodeMessage();\n    } else {\n      this.formatDisplayedCode();\n    }\n  }\n  get code(): string { return this._code; }\n  _code: string;\n\n  /** Whether the copy button should be shown. */\n  @Input() hideCopy: boolean;\n\n  /** Language to render the code (e.g. javascript, dart, typescript). */\n  @Input() language: string;\n\n  /**\n   * Whether to display line numbers:\n   *  - If false: hide\n   *  - If true: show\n   *  - If number: show but start at that number\n   */\n  @Input() linenums: boolean | number | string;\n\n  /** Path to the source of the code. */\n  @Input() path: string;\n\n  /** Region of the source of the code being displayed. */\n  @Input() region: string;\n\n  /** Optional header to be displayed above the code. */\n  @Input()\n  set header(header: string) {\n    this._header = header;\n    this.ariaLabel = this.header ? `Copy code snippet from ${this.header}` : '';\n  }\n  get header(): string { return this._header; }\n  private _header: string;\n\n  @Output() codeFormatted = new EventEmitter<void>();\n\n  /** The element in the template that will display the formatted code. */\n  @ViewChild('codeContainer', { static: true }) codeContainer: ElementRef;\n\n  constructor(\n    private snackbar: MatSnackBar,\n    private pretty: PrettyPrinter,\n    private copier: CopierService,\n    private logger: Logger) {}\n\n  ngOnChanges() {\n    // If some inputs have changed and there is code displayed, update the view with the latest\n    // formatted code.\n    if (this.code) {\n      this.formatDisplayedCode();\n    }\n  }\n\n  private formatDisplayedCode() {\n    const leftAlignedCode = leftAlign(this.code);\n    this.setCodeHtml(leftAlignedCode); // start with unformatted code\n    this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n\n    this.pretty\n        .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n        .pipe(tap(() => this.codeFormatted.emit()))\n        .subscribe(c => this.setCodeHtml(c), err => { /* ignore failure to format */ }\n    );\n  }\n\n  /** Sets the message showing that the code could not be found. */\n  private showMissingCodeMessage() {\n    const src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n    const srcMsg = src ? ` for\\n${src}` : '.';\n    this.setCodeHtml(`<p class=\"code-missing\">The code sample is missing${srcMsg}</p>`);\n  }\n\n  /** Sets the innerHTML of the code container to the provided code string. */\n  private setCodeHtml(formattedCode: string) {\n    // **Security:** Code example content is provided by docs authors and as such its considered to\n    // be safe for innerHTML purposes.\n    this.codeContainer.nativeElement.innerHTML = formattedCode;\n  }\n\n  /** Gets the textContent of the displayed code element. */\n  private getCodeText() {\n    // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n    // container as text, before prettifying it.\n    // We take the textContent because we don't want it to be HTML encoded.\n    return this.codeContainer.nativeElement.textContent;\n  }\n\n  /** Copies the code snippet to the user's clipboard. */\n  doCopy() {\n    const code = this.codeText;\n    const successfullyCopied = this.copier.copyText(code);\n\n    if (successfullyCopied) {\n      this.logger.log('Copied code to clipboard:', code);\n      this.snackbar.open('Code Copied', '', { duration: 800 });\n    } else {\n      this.logger.error(new Error(`ERROR copying code to clipboard: \"${code}\"`));\n      this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n    }\n  }\n\n  /** Gets the calculated value of linenums (boolean/number). */\n  getLinenums(code: string) {\n    const linenums =\n      typeof this.linenums === 'boolean' ? this.linenums :\n      this.linenums === 'true' ? true :\n      this.linenums === 'false' ? false :\n      typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n      this.linenums;\n\n    // if no linenums, enable line numbers if more than one line\n    return linenums == null || isNaN(linenums as number) ?\n        (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n  }\n}\n\nfunction leftAlign(text: string): string {\n  let indent = Number.MAX_VALUE;\n\n  const lines = text.split('\\n');\n  lines.forEach(line => {\n    const lineIndent = line.search(/\\S/);\n    if (lineIndent !== -1) {\n      indent = Math.min(lineIndent, indent);\n    }\n  });\n\n  return lines.map(line => line.substr(indent)).join('\\n').trim();\n}\n","import { ElementRef, EventEmitter, OnChanges } from '@angular/core';\nimport { Logger } from 'app/shared/logger.service';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { tap } from 'rxjs/operators';\n/**\n * If linenums is not set, this is the default maximum number of lines that\n * an example can display without line numbers.\n */\nvar DEFAULT_LINE_NUMS_COUNT = 10;\n/**\n * Formatted Code Block\n *\n * Pretty renders a code block, used in the docs and API reference by the code-example and\n * code-tabs embedded components.\n * It includes a \"copy\" button that will send the content to the clipboard when clicked\n *\n * Example usage:\n *\n * ```\n * <aio-code\n *   [language]=\"ts\"\n *   [linenums]=\"true\"\n *   [path]=\"router/src/app/app.module.ts\"\n *   [region]=\"animations-module\">\n * </aio-code>\n * ```\n *\n *\n * Renders code provided through the `updateCode` method.\n */\nvar CodeComponent = /** @class */ (function () {\n    function CodeComponent(snackbar, pretty, copier, logger) {\n        this.snackbar = snackbar;\n        this.pretty = pretty;\n        this.copier = copier;\n        this.logger = logger;\n        this.ariaLabel = '';\n        this.codeFormatted = new EventEmitter();\n    }\n    Object.defineProperty(CodeComponent.prototype, \"code\", {\n        get: function () { return this._code; },\n        /** Code that should be formatted with current inputs and displayed in the view. */\n        set: function (code) {\n            this._code = code;\n            if (!this._code || !this._code.trim()) {\n                this.showMissingCodeMessage();\n            }\n            else {\n                this.formatDisplayedCode();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CodeComponent.prototype, \"header\", {\n        get: function () { return this._header; },\n        /** Optional header to be displayed above the code. */\n        set: function (header) {\n            this._header = header;\n            this.ariaLabel = this.header ? \"Copy code snippet from \" + this.header : '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CodeComponent.prototype.ngOnChanges = function () {\n        // If some inputs have changed and there is code displayed, update the view with the latest\n        // formatted code.\n        if (this.code) {\n            this.formatDisplayedCode();\n        }\n    };\n    CodeComponent.prototype.formatDisplayedCode = function () {\n        var _this = this;\n        var leftAlignedCode = leftAlign(this.code);\n        this.setCodeHtml(leftAlignedCode); // start with unformatted code\n        this.codeText = this.getCodeText(); // store the unformatted code as text (for copying)\n        this.pretty\n            .formatCode(leftAlignedCode, this.language, this.getLinenums(leftAlignedCode))\n            .pipe(tap(function () { return _this.codeFormatted.emit(); }))\n            .subscribe(function (c) { return _this.setCodeHtml(c); }, function (err) { });\n    };\n    /** Sets the message showing that the code could not be found. */\n    CodeComponent.prototype.showMissingCodeMessage = function () {\n        var src = this.path ? this.path + (this.region ? '#' + this.region : '') : '';\n        var srcMsg = src ? \" for\\n\" + src : '.';\n        this.setCodeHtml(\"<p class=\\\"code-missing\\\">The code sample is missing\" + srcMsg + \"</p>\");\n    };\n    /** Sets the innerHTML of the code container to the provided code string. */\n    CodeComponent.prototype.setCodeHtml = function (formattedCode) {\n        // **Security:** Code example content is provided by docs authors and as such its considered to\n        // be safe for innerHTML purposes.\n        this.codeContainer.nativeElement.innerHTML = formattedCode;\n    };\n    /** Gets the textContent of the displayed code element. */\n    CodeComponent.prototype.getCodeText = function () {\n        // `prettify` may remove newlines, e.g. when `linenums` are on. Retrieve the content of the\n        // container as text, before prettifying it.\n        // We take the textContent because we don't want it to be HTML encoded.\n        return this.codeContainer.nativeElement.textContent;\n    };\n    /** Copies the code snippet to the user's clipboard. */\n    CodeComponent.prototype.doCopy = function () {\n        var code = this.codeText;\n        var successfullyCopied = this.copier.copyText(code);\n        if (successfullyCopied) {\n            this.logger.log('Copied code to clipboard:', code);\n            this.snackbar.open('Code Copied', '', { duration: 800 });\n        }\n        else {\n            this.logger.error(new Error(\"ERROR copying code to clipboard: \\\"\" + code + \"\\\"\"));\n            this.snackbar.open('Copy failed. Please try again!', '', { duration: 800 });\n        }\n    };\n    /** Gets the calculated value of linenums (boolean/number). */\n    CodeComponent.prototype.getLinenums = function (code) {\n        var linenums = typeof this.linenums === 'boolean' ? this.linenums :\n            this.linenums === 'true' ? true :\n                this.linenums === 'false' ? false :\n                    typeof this.linenums === 'string' ? parseInt(this.linenums, 10) :\n                        this.linenums;\n        // if no linenums, enable line numbers if more than one line\n        return linenums == null || isNaN(linenums) ?\n            (code.match(/\\n/g) || []).length > DEFAULT_LINE_NUMS_COUNT : linenums;\n    };\n    return CodeComponent;\n}());\nexport { CodeComponent };\nfunction leftAlign(text) {\n    var indent = Number.MAX_VALUE;\n    var lines = text.split('\\n');\n    lines.forEach(function (line) {\n        var lineIndent = line.search(/\\S/);\n        if (lineIndent !== -1) {\n            indent = Math.min(lineIndent, indent);\n        }\n    });\n    return lines.map(function (line) { return line.substr(indent); }).join('\\n').trim();\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CodeComponent } from './code.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { PrettyPrinter } from './pretty-printer.service';\nimport { CopierService } from 'app/shared/copier.service';\n\n@NgModule({\n  imports: [ CommonModule, MatSnackBarModule ],\n  declarations: [ CodeComponent ],\n  entryComponents: [ CodeComponent ],\n  exports: [ CodeComponent ],\n  providers: [ PrettyPrinter, CopierService ]\n})\nexport class CodeModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { __assign, __extends } from 'tslib';\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { ESCAPE } from '@angular/cdk/keycodes';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nvar  /**\n * Strategy that will prevent the user from scrolling while the overlay is visible.\n */\nBlockScrollStrategy = /** @class */ (function () {\n    function BlockScrollStrategy(_viewportRuler, document) {\n        this._viewportRuler = _viewportRuler;\n        this._previousHTMLStyles = { top: '', left: '' };\n        this._isEnabled = false;\n        this._document = document;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @return {?}\n     */\n    function () { };\n    /** Blocks page-level scroll while the attached overlay is open. */\n    /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.enable = /**\n     * Blocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._canBeEnabled()) {\n            /** @type {?} */\n            var root = (/** @type {?} */ (this._document.documentElement));\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            // Cache the previous inline styles in case the user had set them.\n            this._previousHTMLStyles.left = root.style.left || '';\n            this._previousHTMLStyles.top = root.style.top || '';\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\n            root.classList.add('cdk-global-scrollblock');\n            this._isEnabled = true;\n        }\n    };\n    /** Unblocks page-level scroll while the attached overlay is open. */\n    /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype.disable = /**\n     * Unblocks page-level scroll while the attached overlay is open.\n     * @return {?}\n     */\n    function () {\n        if (this._isEnabled) {\n            /** @type {?} */\n            var html = (/** @type {?} */ (this._document.documentElement));\n            /** @type {?} */\n            var body = (/** @type {?} */ (this._document.body));\n            /** @type {?} */\n            var htmlStyle = (/** @type {?} */ (html.style));\n            /** @type {?} */\n            var bodyStyle = (/** @type {?} */ (body.style));\n            /** @type {?} */\n            var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\n            /** @type {?} */\n            var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\n            this._isEnabled = false;\n            htmlStyle.left = this._previousHTMLStyles.left;\n            htmlStyle.top = this._previousHTMLStyles.top;\n            html.classList.remove('cdk-global-scrollblock');\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    BlockScrollStrategy.prototype._canBeEnabled = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\n        // scrolling multiple times.\n        /** @type {?} */\n        var html = (/** @type {?} */ (this._document.documentElement));\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\n            return false;\n        }\n        /** @type {?} */\n        var body = this._document.body;\n        /** @type {?} */\n        var viewport = this._viewportRuler.getViewportSize();\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\n    };\n    return BlockScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\n * @return {?}\n */\nfunction getMatScrollStrategyAlreadyAttachedError() {\n    return Error(\"Scroll strategy has already been attached.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nvar  /**\n * Strategy that will close the overlay as soon as the user starts scrolling.\n */\nCloseScrollStrategy = /** @class */ (function () {\n    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._config = _config;\n        this._scrollSubscription = null;\n        /**\n         * Detaches the overlay ref and disables the scroll strategy.\n         */\n        this._detach = (/**\n         * @return {?}\n         */\n        function () {\n            _this.disable();\n            if (_this._overlayRef.hasAttached()) {\n                _this._ngZone.run((/**\n                 * @return {?}\n                 */\n                function () { return _this._overlayRef.detach(); }));\n            }\n        });\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables the closing of the attached overlay on scroll. */\n    /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.enable = /**\n     * Enables the closing of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._scrollSubscription) {\n            return;\n        }\n        /** @type {?} */\n        var stream = this._scrollDispatcher.scrolled(0);\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\n            this._scrollSubscription = stream.subscribe((/**\n             * @return {?}\n             */\n            function () {\n                /** @type {?} */\n                var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\n                if (Math.abs(scrollPosition - _this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (_this._config)).threshold))) {\n                    _this._detach();\n                }\n                else {\n                    _this._overlayRef.updatePosition();\n                }\n            }));\n        }\n        else {\n            this._scrollSubscription = stream.subscribe(this._detach);\n        }\n    };\n    /** Disables the closing the attached overlay on scroll. */\n    /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.disable = /**\n     * Disables the closing the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CloseScrollStrategy.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    };\n    return CloseScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Scroll strategy that doesn't do anything.\n */\nvar  /**\n * Scroll strategy that doesn't do anything.\n */\nNoopScrollStrategy = /** @class */ (function () {\n    function NoopScrollStrategy() {\n    }\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.enable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.disable = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    /** Does nothing, as this scroll strategy is a no-op. */\n    /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    NoopScrollStrategy.prototype.attach = /**\n     * Does nothing, as this scroll strategy is a no-op.\n     * @return {?}\n     */\n    function () { };\n    return NoopScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n// TODO(jelbourn): move this to live with the rest of the scrolling code\n// TODO(jelbourn): someday replace this with IntersectionObservers\n/**\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is scrolled out of view\n */\nfunction isElementScrolledOutsideView(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} containerBounds\n     * @return {?}\n     */\n    function (containerBounds) {\n        /** @type {?} */\n        var outsideAbove = element.bottom < containerBounds.top;\n        /** @type {?} */\n        var outsideBelow = element.top > containerBounds.bottom;\n        /** @type {?} */\n        var outsideLeft = element.right < containerBounds.left;\n        /** @type {?} */\n        var outsideRight = element.left > containerBounds.right;\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\n    }));\n}\n/**\n * Gets whether an element is clipped by any of its scrolling containers.\n * \\@docs-private\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\n * @return {?} Whether the element is clipped\n */\nfunction isElementClippedByScrolling(element, scrollContainers) {\n    return scrollContainers.some((/**\n     * @param {?} scrollContainerRect\n     * @return {?}\n     */\n    function (scrollContainerRect) {\n        /** @type {?} */\n        var clippedAbove = element.top < scrollContainerRect.top;\n        /** @type {?} */\n        var clippedBelow = element.bottom > scrollContainerRect.bottom;\n        /** @type {?} */\n        var clippedLeft = element.left < scrollContainerRect.left;\n        /** @type {?} */\n        var clippedRight = element.right > scrollContainerRect.right;\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Strategy that will update the element position as the user is scrolling.\n */\nvar  /**\n * Strategy that will update the element position as the user is scrolling.\n */\nRepositionScrollStrategy = /** @class */ (function () {\n    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        this._config = _config;\n        this._scrollSubscription = null;\n    }\n    /** Attaches this scroll strategy to an overlay. */\n    /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.attach = /**\n     * Attaches this scroll strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        if (this._overlayRef) {\n            throw getMatScrollStrategyAlreadyAttachedError();\n        }\n        this._overlayRef = overlayRef;\n    };\n    /** Enables repositioning of the attached overlay on scroll. */\n    /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.enable = /**\n     * Enables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._scrollSubscription) {\n            /** @type {?} */\n            var throttle = this._config ? this._config.scrollThrottle : 0;\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe((/**\n             * @return {?}\n             */\n            function () {\n                _this._overlayRef.updatePosition();\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\n                if (_this._config && _this._config.autoClose) {\n                    /** @type {?} */\n                    var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\n                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n                    // TODO(crisbeto): include all ancestor scroll containers here once\n                    // we have a way of exposing the trigger element to the scroll strategy.\n                    /** @type {?} */\n                    var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\n                        _this.disable();\n                        _this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        function () { return _this._overlayRef.detach(); }));\n                    }\n                }\n            }));\n        }\n    };\n    /** Disables repositioning of the attached overlay on scroll. */\n    /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.disable = /**\n     * Disables repositioning of the attached overlay on scroll.\n     * @return {?}\n     */\n    function () {\n        if (this._scrollSubscription) {\n            this._scrollSubscription.unsubscribe();\n            this._scrollSubscription = null;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    RepositionScrollStrategy.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this.disable();\n        this._overlayRef = (/** @type {?} */ (null));\n    };\n    return RepositionScrollStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options for how an overlay will handle scrolling.\n *\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\n */\nvar ScrollStrategyOptions = /** @class */ (function () {\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\n        var _this = this;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewportRuler = _viewportRuler;\n        this._ngZone = _ngZone;\n        /**\n         * Do nothing on scroll.\n         */\n        this.noop = (/**\n         * @return {?}\n         */\n        function () { return new NoopScrollStrategy(); });\n        /**\n         * Close the overlay as soon as the user scrolls.\n         * @param config Configuration to be used inside the scroll strategy.\n         */\n        this.close = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); });\n        /**\n         * Block scrolling.\n         */\n        this.block = (/**\n         * @return {?}\n         */\n        function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); });\n        /**\n         * Update the overlay's position on scroll.\n         * @param config Configuration to be used inside the scroll strategy.\n         * Allows debouncing the reposition calls.\n         */\n        this.reposition = (/**\n         * @param {?=} config\n         * @return {?}\n         */\n        function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); });\n        this._document = document;\n    }\n    ScrollStrategyOptions.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    ScrollStrategyOptions.ctorParameters = function () { return [\n        { type: ScrollDispatcher },\n        { type: ViewportRuler },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\n    return ScrollStrategyOptions;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Initial configuration used when creating an overlay.\n */\nvar  /**\n * Initial configuration used when creating an overlay.\n */\nOverlayConfig = /** @class */ (function () {\n    function OverlayConfig(config) {\n        var _this = this;\n        /**\n         * Strategy to be used when handling scroll events while the overlay is open.\n         */\n        this.scrollStrategy = new NoopScrollStrategy();\n        /**\n         * Custom class to add to the overlay pane.\n         */\n        this.panelClass = '';\n        /**\n         * Whether the overlay has a backdrop.\n         */\n        this.hasBackdrop = false;\n        /**\n         * Custom class to add to the backdrop\n         */\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\n        /**\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.disposeOnNavigation = false;\n        if (config) {\n            Object.keys(config).forEach((/**\n             * @param {?} k\n             * @return {?}\n             */\n            function (k) {\n                /** @type {?} */\n                var key = (/** @type {?} */ (k));\n                if (typeof config[key] !== 'undefined') {\n                    _this[key] = config[key];\n                }\n            }));\n        }\n    }\n    return OverlayConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The points of the origin element and the overlay element to connect.\n */\nvar  /**\n * The points of the origin element and the overlay element to connect.\n */\nConnectionPositionPair = /** @class */ (function () {\n    function ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {\n        this.offsetX = offsetX;\n        this.offsetY = offsetY;\n        this.panelClass = panelClass;\n        this.originX = origin.originX;\n        this.originY = origin.originY;\n        this.overlayX = overlay.overlayX;\n        this.overlayY = overlay.overlayY;\n    }\n    return ConnectionPositionPair;\n}());\n/**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nvar  /**\n * Set of properties regarding the position of the origin and overlay relative to the viewport\n * with respect to the containing Scrollable elements.\n *\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\n *\n * The overlay and origin are outside view if there is no overlap between their bounding client\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\n *\n *       -----------                    -----------\n *       | outside |                    | clipped |\n *       |  view   |              --------------------------\n *       |         |              |     |         |        |\n *       ----------               |     -----------        |\n *  --------------------------    |                        |\n *  |                        |    |      Scrollable        |\n *  |                        |    |                        |\n *  |                        |     --------------------------\n *  |      Scrollable        |\n *  |                        |\n *  --------------------------\n *\n * \\@docs-private\n */\nScrollingVisibility = /** @class */ (function () {\n    function ScrollingVisibility() {\n    }\n    return ScrollingVisibility;\n}());\n/**\n * The change event emitted by the strategy when a fallback position is used.\n */\nvar ConnectedOverlayPositionChange = /** @class */ (function () {\n    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {\n        this.connectionPair = connectionPair;\n        this.scrollableViewProperties = scrollableViewProperties;\n    }\n    /** @nocollapse */\n    ConnectedOverlayPositionChange.ctorParameters = function () { return [\n        { type: ConnectionPositionPair },\n        { type: ScrollingVisibility, decorators: [{ type: Optional }] }\n    ]; };\n    return ConnectedOverlayPositionChange;\n}());\n/**\n * Validates whether a vertical position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateVerticalPosition(property, value) {\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\n    }\n}\n/**\n * Validates whether a horizontal position property matches the expected values.\n * \\@docs-private\n * @param {?} property Name of the property being validated.\n * @param {?} value Value of the property being validated.\n * @return {?}\n */\nfunction validateHorizontalPosition(property, value) {\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\n            \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\n * if any. It maintains a list of attached overlays to determine best suited overlay based\n * on event target and order of overlay opens.\n */\nvar OverlayKeyboardDispatcher = /** @class */ (function () {\n    function OverlayKeyboardDispatcher(document) {\n        var _this = this;\n        /**\n         * Currently attached overlays in the order they were attached.\n         */\n        this._attachedOverlays = [];\n        /**\n         * Keyboard event listener that will be attached to the body.\n         */\n        this._keydownListener = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            /** @type {?} */\n            var overlays = _this._attachedOverlays;\n            for (var i = overlays.length - 1; i > -1; i--) {\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\n                // We want to target the most recent overlay, rather than trying to match where the event came\n                // from, because some components might open an overlay, but keep focus on a trigger element\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\n                // because we don't want overlays that don't handle keyboard events to block the ones below\n                // them that do.\n                if (overlays[i]._keydownEventSubscriptions > 0) {\n                    overlays[i]._keydownEvents.next(event);\n                    break;\n                }\n            }\n        });\n        this._document = document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._detach();\n    };\n    /** Add a new overlay to the list of attached overlay refs. */\n    /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.add = /**\n     * Add a new overlay to the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        // Ensure that we don't get the same overlay multiple times.\n        this.remove(overlayRef);\n        // Lazily start dispatcher once first overlay is added\n        if (!this._isAttached) {\n            this._document.body.addEventListener('keydown', this._keydownListener, true);\n            this._isAttached = true;\n        }\n        this._attachedOverlays.push(overlayRef);\n    };\n    /** Remove an overlay from the list of attached overlay refs. */\n    /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype.remove = /**\n     * Remove an overlay from the list of attached overlay refs.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        /** @type {?} */\n        var index = this._attachedOverlays.indexOf(overlayRef);\n        if (index > -1) {\n            this._attachedOverlays.splice(index, 1);\n        }\n        // Remove the global listener once there are no more overlays.\n        if (this._attachedOverlays.length === 0) {\n            this._detach();\n        }\n    };\n    /** Detaches the global keyboard event listener. */\n    /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    OverlayKeyboardDispatcher.prototype._detach = /**\n     * Detaches the global keyboard event listener.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._isAttached) {\n            this._document.body.removeEventListener('keydown', this._keydownListener, true);\n            this._isAttached = false;\n        }\n    };\n    OverlayKeyboardDispatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayKeyboardDispatcher.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\n    return OverlayKeyboardDispatcher;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} dispatcher\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\n    // If there is already an OverlayKeyboardDispatcher available, use that.\n    // Otherwise, provide a new one.\n    provide: OverlayKeyboardDispatcher,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\n        (/** @type {?} */ (\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\n        // of the type expected by Angular\n        DOCUMENT))\n    ],\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Container inside which all overlays will render.\n */\nvar OverlayContainer = /** @class */ (function () {\n    function OverlayContainer(_document) {\n        this._document = _document;\n    }\n    /**\n     * @return {?}\n     */\n    OverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    };\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    OverlayContainer.prototype.getContainerElement = /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @return {?} the container element\n     */\n    function () {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    };\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     */\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    OverlayContainer.prototype._createContainer = /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body.\n     * @protected\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var container = this._document.createElement('div');\n        container.classList.add('cdk-overlay-container');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    };\n    OverlayContainer.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ OverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\n    return OverlayContainer;\n}());\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @param {?} parentContainer\n * @param {?} _document\n * @return {?}\n */\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\n    return parentContainer || new OverlayContainer(_document);\n}\n/**\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\n * @type {?}\n */\nvar OVERLAY_CONTAINER_PROVIDER = {\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\n    provide: OverlayContainer,\n    deps: [\n        [new Optional(), new SkipSelf(), OverlayContainer],\n        (/** @type {?} */ (DOCUMENT))\n    ],\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nvar  /**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nOverlayRef = /** @class */ (function () {\n    function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\n        var _this = this;\n        this._portalOutlet = _portalOutlet;\n        this._host = _host;\n        this._pane = _pane;\n        this._config = _config;\n        this._ngZone = _ngZone;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._document = _document;\n        this._location = _location;\n        this._backdropElement = null;\n        this._backdropClick = new Subject();\n        this._attachments = new Subject();\n        this._detachments = new Subject();\n        this._locationChanges = Subscription.EMPTY;\n        this._keydownEventsObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        function (observer) {\n            /** @type {?} */\n            var subscription = _this._keydownEvents.subscribe(observer);\n            _this._keydownEventSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            function () {\n                subscription.unsubscribe();\n                _this._keydownEventSubscriptions--;\n            });\n        }));\n        /**\n         * Stream of keydown events dispatched to this overlay.\n         */\n        this._keydownEvents = new Subject();\n        /**\n         * Amount of subscriptions to the keydown events.\n         */\n        this._keydownEventSubscriptions = 0;\n        if (_config.scrollStrategy) {\n            this._scrollStrategy = _config.scrollStrategy;\n            this._scrollStrategy.attach(this);\n        }\n        this._positionStrategy = _config.positionStrategy;\n    }\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\n        /** The overlay's HTML element */\n        get: /**\n         * The overlay's HTML element\n         * @return {?}\n         */\n        function () {\n            return this._pane;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\n        /** The overlay's backdrop HTML element. */\n        get: /**\n         * The overlay's backdrop HTML element.\n         * @return {?}\n         */\n        function () {\n            return this._backdropElement;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\n        /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         */\n        get: /**\n         * Wrapper around the panel element. Can be used for advanced\n         * positioning where a wrapper with specific styling is\n         * required around the overlay pane.\n         * @return {?}\n         */\n        function () {\n            return this._host;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param portal Portal instance to which to attach the overlay.\n     * @returns The portal attachment result.\n     */\n    /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    OverlayRef.prototype.attach = /**\n     * Attaches content, given via a Portal, to the overlay.\n     * If the overlay is configured to have a backdrop, it will be created.\n     *\n     * @param {?} portal Portal instance to which to attach the overlay.\n     * @return {?} The portal attachment result.\n     */\n    function (portal) {\n        var _this = this;\n        /** @type {?} */\n        var attachResult = this._portalOutlet.attach(portal);\n        if (this._positionStrategy) {\n            this._positionStrategy.attach(this);\n        }\n        // Update the pane element with the given configuration.\n        if (!this._host.parentElement && this._previousHostParent) {\n            this._previousHostParent.appendChild(this._host);\n        }\n        this._updateStackingOrder();\n        this._updateElementSize();\n        this._updateElementDirection();\n        if (this._scrollStrategy) {\n            this._scrollStrategy.enable();\n        }\n        // Update the position once the zone is stable so that the overlay will be fully rendered\n        // before attempting to position it, as the position may depend on the size of the rendered\n        // content.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe((/**\n         * @return {?}\n         */\n        function () {\n            // The overlay could've been detached before the zone has stabilized.\n            if (_this.hasAttached()) {\n                _this.updatePosition();\n            }\n        }));\n        // Enable pointer events for the overlay pane element.\n        this._togglePointerEvents(true);\n        if (this._config.hasBackdrop) {\n            this._attachBackdrop();\n        }\n        if (this._config.panelClass) {\n            this._toggleClasses(this._pane, this._config.panelClass, true);\n        }\n        // Only emit the `attachments` event once all other setup is done.\n        this._attachments.next();\n        // Track this overlay by the keyboard dispatcher\n        this._keyboardDispatcher.add(this);\n        // @breaking-change 8.0.0 remove the null check for `_location`\n        // once the constructor parameter is made required.\n        if (this._config.disposeOnNavigation && this._location) {\n            this._locationChanges = this._location.subscribe((/**\n             * @return {?}\n             */\n            function () { return _this.dispose(); }));\n        }\n        return attachResult;\n    };\n    /**\n     * Detaches an overlay from a portal.\n     * @returns The portal detachment result.\n     */\n    /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    OverlayRef.prototype.detach = /**\n     * Detaches an overlay from a portal.\n     * @return {?} The portal detachment result.\n     */\n    function () {\n        if (!this.hasAttached()) {\n            return;\n        }\n        this.detachBackdrop();\n        // When the overlay is detached, the pane element should disable pointer events.\n        // This is necessary because otherwise the pane element will cover the page and disable\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\n        this._togglePointerEvents(false);\n        if (this._positionStrategy && this._positionStrategy.detach) {\n            this._positionStrategy.detach();\n        }\n        if (this._scrollStrategy) {\n            this._scrollStrategy.disable();\n        }\n        /** @type {?} */\n        var detachmentResult = this._portalOutlet.detach();\n        // Only emit after everything is detached.\n        this._detachments.next();\n        // Remove this overlay from keyboard dispatcher tracking.\n        this._keyboardDispatcher.remove(this);\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\n        // rendered, even though it's transparent and unclickable which is why we remove it.\n        this._detachContentWhenStable();\n        // Stop listening for location changes.\n        this._locationChanges.unsubscribe();\n        return detachmentResult;\n    };\n    /** Cleans up the overlay from the DOM. */\n    /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    OverlayRef.prototype.dispose = /**\n     * Cleans up the overlay from the DOM.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var isAttached = this.hasAttached();\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._disposeScrollStrategy();\n        this.detachBackdrop();\n        this._locationChanges.unsubscribe();\n        this._keyboardDispatcher.remove(this);\n        this._portalOutlet.dispose();\n        this._attachments.complete();\n        this._backdropClick.complete();\n        this._keydownEvents.complete();\n        if (this._host && this._host.parentNode) {\n            this._host.parentNode.removeChild(this._host);\n            this._host = (/** @type {?} */ (null));\n        }\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\n        if (isAttached) {\n            this._detachments.next();\n        }\n        this._detachments.complete();\n    };\n    /** Whether the overlay has attached content. */\n    /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    OverlayRef.prototype.hasAttached = /**\n     * Whether the overlay has attached content.\n     * @return {?}\n     */\n    function () {\n        return this._portalOutlet.hasAttached();\n    };\n    /** Gets an observable that emits when the backdrop has been clicked. */\n    /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    OverlayRef.prototype.backdropClick = /**\n     * Gets an observable that emits when the backdrop has been clicked.\n     * @return {?}\n     */\n    function () {\n        return this._backdropClick.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been attached. */\n    /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    OverlayRef.prototype.attachments = /**\n     * Gets an observable that emits when the overlay has been attached.\n     * @return {?}\n     */\n    function () {\n        return this._attachments.asObservable();\n    };\n    /** Gets an observable that emits when the overlay has been detached. */\n    /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachments = /**\n     * Gets an observable that emits when the overlay has been detached.\n     * @return {?}\n     */\n    function () {\n        return this._detachments.asObservable();\n    };\n    /** Gets an observable of keydown events targeted to this overlay. */\n    /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.keydownEvents = /**\n     * Gets an observable of keydown events targeted to this overlay.\n     * @return {?}\n     */\n    function () {\n        return this._keydownEventsObservable;\n    };\n    /** Gets the current overlay configuration, which is immutable. */\n    /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    OverlayRef.prototype.getConfig = /**\n     * Gets the current overlay configuration, which is immutable.\n     * @return {?}\n     */\n    function () {\n        return this._config;\n    };\n    /** Updates the position of the overlay based on the position strategy. */\n    /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePosition = /**\n     * Updates the position of the overlay based on the position strategy.\n     * @return {?}\n     */\n    function () {\n        if (this._positionStrategy) {\n            this._positionStrategy.apply();\n        }\n    };\n    /** Switches to a new position strategy and updates the overlay position. */\n    /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    OverlayRef.prototype.updatePositionStrategy = /**\n     * Switches to a new position strategy and updates the overlay position.\n     * @param {?} strategy\n     * @return {?}\n     */\n    function (strategy) {\n        if (strategy === this._positionStrategy) {\n            return;\n        }\n        if (this._positionStrategy) {\n            this._positionStrategy.dispose();\n        }\n        this._positionStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            this.updatePosition();\n        }\n    };\n    /** Update the size properties of the overlay. */\n    /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    OverlayRef.prototype.updateSize = /**\n     * Update the size properties of the overlay.\n     * @param {?} sizeConfig\n     * @return {?}\n     */\n    function (sizeConfig) {\n        this._config = __assign({}, this._config, sizeConfig);\n        this._updateElementSize();\n    };\n    /** Sets the LTR/RTL direction for the overlay. */\n    /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    OverlayRef.prototype.setDirection = /**\n     * Sets the LTR/RTL direction for the overlay.\n     * @param {?} dir\n     * @return {?}\n     */\n    function (dir) {\n        this._config = __assign({}, this._config, { direction: dir });\n        this._updateElementDirection();\n    };\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    OverlayRef.prototype.addPanelClass = /**\n     * Add a CSS class or an array of classes to the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    function (classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, true);\n        }\n    };\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    OverlayRef.prototype.removePanelClass = /**\n     * Remove a CSS class or an array of classes from the overlay pane.\n     * @param {?} classes\n     * @return {?}\n     */\n    function (classes) {\n        if (this._pane) {\n            this._toggleClasses(this._pane, classes, false);\n        }\n    };\n    /**\n     * Returns the layout direction of the overlay panel.\n     */\n    /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    OverlayRef.prototype.getDirection = /**\n     * Returns the layout direction of the overlay panel.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var direction = this._config.direction;\n        if (!direction) {\n            return 'ltr';\n        }\n        return typeof direction === 'string' ? direction : direction.value;\n    };\n    /** Switches to a new scroll strategy. */\n    /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n    OverlayRef.prototype.updateScrollStrategy = /**\n     * Switches to a new scroll strategy.\n     * @param {?} strategy\n     * @return {?}\n     */\n    function (strategy) {\n        if (strategy === this._scrollStrategy) {\n            return;\n        }\n        this._disposeScrollStrategy();\n        this._scrollStrategy = strategy;\n        if (this.hasAttached()) {\n            strategy.attach(this);\n            strategy.enable();\n        }\n    };\n    /** Updates the text direction of the overlay panel. */\n    /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementDirection = /**\n     * Updates the text direction of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._host.setAttribute('dir', this.getDirection());\n    };\n    /** Updates the size of the overlay element based on the overlay config. */\n    /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    OverlayRef.prototype._updateElementSize = /**\n     * Updates the size of the overlay element based on the overlay config.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var style = this._pane.style;\n        style.width = coerceCssPixelValue(this._config.width);\n        style.height = coerceCssPixelValue(this._config.height);\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\n    };\n    /** Toggles the pointer events for the overlay pane element. */\n    /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    OverlayRef.prototype._togglePointerEvents = /**\n     * Toggles the pointer events for the overlay pane element.\n     * @private\n     * @param {?} enablePointer\n     * @return {?}\n     */\n    function (enablePointer) {\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\n    };\n    /** Attaches a backdrop for this overlay. */\n    /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    OverlayRef.prototype._attachBackdrop = /**\n     * Attaches a backdrop for this overlay.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var showingClass = 'cdk-overlay-backdrop-showing';\n        this._backdropElement = this._document.createElement('div');\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\n        if (this._config.backdropClass) {\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\n        }\n        // Insert the backdrop before the pane in the DOM order,\n        // in order to handle stacked overlays properly.\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\n        // action desired when such a click occurs (usually closing the overlay).\n        this._backdropElement.addEventListener('click', (/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) { return _this._backdropClick.next(event); }));\n        // Add class to fade-in the backdrop after one frame.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            function () {\n                requestAnimationFrame((/**\n                 * @return {?}\n                 */\n                function () {\n                    if (_this._backdropElement) {\n                        _this._backdropElement.classList.add(showingClass);\n                    }\n                }));\n            }));\n        }\n        else {\n            this._backdropElement.classList.add(showingClass);\n        }\n    };\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     */\n    /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    OverlayRef.prototype._updateStackingOrder = /**\n     * Updates the stacking order of the element, moving it to the top if necessary.\n     * This is required in cases where one overlay was detached, while another one,\n     * that should be behind it, was destroyed. The next time both of them are opened,\n     * the stacking will be wrong, because the detached element's pane will still be\n     * in its original DOM position.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._host.nextSibling) {\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\n        }\n    };\n    /** Detaches the backdrop (if any) associated with the overlay. */\n    /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    OverlayRef.prototype.detachBackdrop = /**\n     * Detaches the backdrop (if any) associated with the overlay.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var backdropToDetach = this._backdropElement;\n        if (!backdropToDetach) {\n            return;\n        }\n        /** @type {?} */\n        var timeoutId;\n        /** @type {?} */\n        var finishDetach = (/**\n         * @return {?}\n         */\n        function () {\n            // It may not be attached to anything in certain cases (e.g. unit tests).\n            if (backdropToDetach && backdropToDetach.parentNode) {\n                backdropToDetach.parentNode.removeChild(backdropToDetach);\n            }\n            // It is possible that a new portal has been attached to this overlay since we started\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\n            // is still the same instance that we started to remove.\n            if (_this._backdropElement == backdropToDetach) {\n                _this._backdropElement = null;\n            }\n            if (_this._config.backdropClass) {\n                _this._toggleClasses((/** @type {?} */ (backdropToDetach)), _this._config.backdropClass, false);\n            }\n            clearTimeout(timeoutId);\n        });\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\n        }));\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\n        // In this case we make it unclickable and we try to remove it after a delay.\n        backdropToDetach.style.pointerEvents = 'none';\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\n        // either async or fakeAsync.\n        timeoutId = this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () { return setTimeout(finishDetach, 500); }));\n    };\n    /** Toggles a single CSS class or an array of classes on an element. */\n    /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    OverlayRef.prototype._toggleClasses = /**\n     * Toggles a single CSS class or an array of classes on an element.\n     * @private\n     * @param {?} element\n     * @param {?} cssClasses\n     * @param {?} isAdd\n     * @return {?}\n     */\n    function (element, cssClasses, isAdd) {\n        /** @type {?} */\n        var classList = element.classList;\n        coerceArray(cssClasses).forEach((/**\n         * @param {?} cssClass\n         * @return {?}\n         */\n        function (cssClass) {\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\n            isAdd ? classList.add(cssClass) : classList.remove(cssClass);\n        }));\n    };\n    /** Detaches the overlay content next time the zone stabilizes. */\n    /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    OverlayRef.prototype._detachContentWhenStable = /**\n     * Detaches the overlay content next time the zone stabilizes.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\n        // be patched to run inside the zone, which will throw us into an infinite loop.\n        this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        function () {\n            // We can't remove the host here immediately, because the overlay pane's content\n            // might still be animating. This stream helps us avoid interrupting the animation\n            // by waiting for the pane to become empty.\n            /** @type {?} */\n            var subscription = _this._ngZone.onStable\n                .asObservable()\n                .pipe(takeUntil(merge(_this._attachments, _this._detachments)))\n                .subscribe((/**\n             * @return {?}\n             */\n            function () {\n                // Needs a couple of checks for the pane and host, because\n                // they may have been removed by the time the zone stabilizes.\n                if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\n                    if (_this._pane && _this._config.panelClass) {\n                        _this._toggleClasses(_this._pane, _this._config.panelClass, false);\n                    }\n                    if (_this._host && _this._host.parentElement) {\n                        _this._previousHostParent = _this._host.parentElement;\n                        _this._previousHostParent.removeChild(_this._host);\n                    }\n                    subscription.unsubscribe();\n                }\n            }));\n        }));\n    };\n    /** Disposes of a scroll strategy. */\n    /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n    OverlayRef.prototype._disposeScrollStrategy = /**\n     * Disposes of a scroll strategy.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var scrollStrategy = this._scrollStrategy;\n        if (scrollStrategy) {\n            scrollStrategy.disable();\n            if (scrollStrategy.detach) {\n                scrollStrategy.detach();\n            }\n        }\n    };\n    return OverlayRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\n/**\n * Class to be added to the overlay bounding box.\n * @type {?}\n */\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n */\nFlexibleConnectedPositionStrategy = /** @class */ (function () {\n    function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\n        var _this = this;\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n        /**\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\n         */\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\n        /**\n         * Whether the overlay was pushed in a previous positioning.\n         */\n        this._isPushed = false;\n        /**\n         * Whether the overlay can be pushed on-screen on the initial open.\n         */\n        this._canPush = true;\n        /**\n         * Whether the overlay can grow via flexible width/height after the initial open.\n         */\n        this._growAfterOpen = false;\n        /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         */\n        this._hasFlexibleDimensions = true;\n        /**\n         * Whether the overlay position is locked.\n         */\n        this._positionLocked = false;\n        /**\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\n         */\n        this._viewportMargin = 0;\n        /**\n         * The Scrollable containers used to check scrollable view properties on position change.\n         */\n        this.scrollables = [];\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        /**\n         * Subject that emits whenever the position changes.\n         */\n        this._positionChanges = new Subject();\n        /**\n         * Subscription to viewport size changes.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Default offset for the overlay along the x axis.\n         */\n        this._offsetX = 0;\n        /**\n         * Default offset for the overlay along the y axis.\n         */\n        this._offsetY = 0;\n        /**\n         * Amount of subscribers to the `positionChanges` stream.\n         */\n        this._positionChangeSubscriptions = 0;\n        /**\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\n         */\n        this._appliedPanelClasses = [];\n        /**\n         * Observable sequence of position changes.\n         */\n        this.positionChanges = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        function (observer) {\n            /** @type {?} */\n            var subscription = _this._positionChanges.subscribe(observer);\n            _this._positionChangeSubscriptions++;\n            return (/**\n             * @return {?}\n             */\n            function () {\n                subscription.unsubscribe();\n                _this._positionChangeSubscriptions--;\n            });\n        }));\n        this.setOrigin(connectedTo);\n    }\n    Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attaches this position strategy to an overlay. */\n    /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.attach = /**\n     * Attaches this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        var _this = this;\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\n            throw Error('This position strategy is already attached to an overlay');\n        }\n        this._validatePositions();\n        overlayRef.hostElement.classList.add(boundingBoxClass);\n        this._overlayRef = overlayRef;\n        this._boundingBox = overlayRef.hostElement;\n        this._pane = overlayRef.overlayElement;\n        this._isDisposed = false;\n        this._isInitialRender = true;\n        this._lastPosition = null;\n        this._resizeSubscription.unsubscribe();\n        this._resizeSubscription = this._viewportRuler.change().subscribe((/**\n         * @return {?}\n         */\n        function () {\n            // When the window is resized, we want to trigger the next reposition as if it\n            // was an initial render, in order for the strategy to pick a new optimal position,\n            // otherwise position locking will cause it to stay at the old one.\n            _this._isInitialRender = true;\n            _this.apply();\n        }));\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin best fits on-screen.\n     *\n     * The selection of a position goes as follows:\n     *  - If any positions fit completely within the viewport as-is,\n     *      choose the first position that does so.\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\n     *      choose the position with the greatest available size modified by the positions' weight.\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\n     *      on-screen.\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\n        if (this._isDisposed || !this._platform.isBrowser) {\n            return;\n        }\n        // If the position has been applied already (e.g. when the overlay was opened) and the\n        // consumer opted into locking in the position, re-use the old position, in order to\n        // prevent the overlay from jumping around.\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\n            this.reapplyLastPosition();\n            return;\n        }\n        this._clearPanelClasses();\n        this._resetOverlayElementStyles();\n        this._resetBoundingBoxStyles();\n        // We need the bounding rects for the origin and the overlay to determine how to position\n        // the overlay relative to the origin.\n        // We use the viewport rect to determine whether a position would go off-screen.\n        this._viewportRect = this._getNarrowedViewportRect();\n        this._originRect = this._getOriginRect();\n        this._overlayRect = this._pane.getBoundingClientRect();\n        /** @type {?} */\n        var originRect = this._originRect;\n        /** @type {?} */\n        var overlayRect = this._overlayRect;\n        /** @type {?} */\n        var viewportRect = this._viewportRect;\n        // Positions where the overlay will fit with flexible dimensions.\n        /** @type {?} */\n        var flexibleFits = [];\n        // Fallback if none of the preferred positions fit within the viewport.\n        /** @type {?} */\n        var fallback;\n        // Go through each of the preferred positions looking for a good fit.\n        // If a good fit is found, it will be applied immediately.\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\n            var pos = _a[_i];\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\n            /** @type {?} */\n            var originPoint = this._getOriginPoint(originRect, pos);\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\n            // overlay in this position. We use the top-left corner for calculations and later translate\n            // this into an appropriate (top, left, bottom, right) style.\n            /** @type {?} */\n            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\n            // Calculate how well the overlay would fit into the viewport with this point.\n            /** @type {?} */\n            var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\n            // If the overlay, without any further work, fits into the viewport, use this position.\n            if (overlayFit.isCompletelyWithinViewport) {\n                this._isPushed = false;\n                this._applyPosition(pos, originPoint);\n                return;\n            }\n            // If the overlay has flexible dimensions, we can use this position\n            // so long as there's enough space for the minimum dimensions.\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\n                // if none of the positions fit *without* flexible dimensions.\n                flexibleFits.push({\n                    position: pos,\n                    origin: originPoint,\n                    overlayRect: overlayRect,\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\n                });\n                continue;\n            }\n            // If the current preferred position does not fit on the screen, remember the position\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\n            // position.\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\n                fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\n            }\n        }\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\n        // one that has the greatest area available modified by the position's weight\n        if (flexibleFits.length) {\n            /** @type {?} */\n            var bestFit = null;\n            /** @type {?} */\n            var bestScore = -1;\n            for (var _b = 0, flexibleFits_1 = flexibleFits; _b < flexibleFits_1.length; _b++) {\n                var fit = flexibleFits_1[_b];\n                /** @type {?} */\n                var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\n                if (score > bestScore) {\n                    bestScore = score;\n                    bestFit = fit;\n                }\n            }\n            this._isPushed = false;\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\n            return;\n        }\n        // When none of the preferred positions fit within the viewport, take the position\n        // that went off-screen the least and attempt to push it on-screen.\n        if (this._canPush) {\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\n            this._isPushed = true;\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n            return;\n        }\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\n        // position that went off-screen the least.\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\n    };\n    /**\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.detach = /**\n     * @return {?}\n     */\n    function () {\n        this._clearPanelClasses();\n        this._lastPosition = null;\n        this._previousPushAmount = null;\n        this._resizeSubscription.unsubscribe();\n    };\n    /** Cleanup after the element gets destroyed. */\n    /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.dispose = /**\n     * Cleanup after the element gets destroyed.\n     * @return {?}\n     */\n    function () {\n        if (this._isDisposed) {\n            return;\n        }\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\n        // some properties to zero, rather than removing them.\n        if (this._boundingBox) {\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\n                top: '',\n                left: '',\n                right: '',\n                bottom: '',\n                height: '',\n                width: '',\n                alignItems: '',\n                justifyContent: '',\n            })));\n        }\n        if (this._pane) {\n            this._resetOverlayElementStyles();\n        }\n        if (this._overlayRef) {\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\n        }\n        this.detach();\n        this._positionChanges.complete();\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    };\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = /**\n     * This re-aligns the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\n            this._originRect = this._getOriginRect();\n            this._overlayRect = this._pane.getBoundingClientRect();\n            this._viewportRect = this._getNarrowedViewportRect();\n            /** @type {?} */\n            var lastPosition = this._lastPosition || this._preferredPositions[0];\n            /** @type {?} */\n            var originPoint = this._getOriginPoint(this._originRect, lastPosition);\n            this._applyPosition(lastPosition, originPoint);\n        }\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} scrollables\n     * @return {THIS}\n     */\n    function (scrollables) {\n        (/** @type {?} */ (this)).scrollables = scrollables;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Adds new preferred positions.\n     * @param positions List of positions options for this overlay.\n     */\n    /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPositions = /**\n     * Adds new preferred positions.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions List of positions options for this overlay.\n     * @return {THIS}\n     */\n    function (positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions;\n        // If the last calculated position object isn't part of the positions anymore, clear\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\n            (/** @type {?} */ (this))._lastPosition = null;\n        }\n        (/** @type {?} */ (this))._validatePositions();\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\n     */\n    /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withViewportMargin = /**\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\n     * @return {THIS}\n     */\n    function (margin) {\n        (/** @type {?} */ (this))._viewportMargin = margin;\n        return (/** @type {?} */ (this));\n    };\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\n    /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = /**\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} flexibleDimensions\n     * @return {THIS}\n     */\n    function (flexibleDimensions) {\n        if (flexibleDimensions === void 0) { flexibleDimensions = true; }\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\n        return (/** @type {?} */ (this));\n    };\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\n    /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = /**\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} growAfterOpen\n     * @return {THIS}\n     */\n    function (growAfterOpen) {\n        if (growAfterOpen === void 0) { growAfterOpen = true; }\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\n        return (/** @type {?} */ (this));\n    };\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\n    /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withPush = /**\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} canPush\n     * @return {THIS}\n     */\n    function (canPush) {\n        if (canPush === void 0) { canPush = true; }\n        (/** @type {?} */ (this))._canPush = canPush;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    function (isLocked) {\n        if (isLocked === void 0) { isLocked = true; }\n        (/** @type {?} */ (this))._positionLocked = isLocked;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @param origin Reference to the new origin.\n     */\n    /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin, relative to which to position the overlay.\n     * Using an element origin is useful for building components that need to be positioned\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\n     * used for cases like contextual menus which open relative to the user's pointer.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin.\n     * @return {THIS}\n     */\n    function (origin) {\n        (/** @type {?} */ (this))._origin = origin;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = /**\n     * Sets the default offset for the overlay's connection point on the x-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    function (offset) {\n        (/** @type {?} */ (this))._offsetX = offset;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @param offset New offset in the Y axis.\n     */\n    /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = /**\n     * Sets the default offset for the overlay's connection point on the y-axis.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    function (offset) {\n        (/** @type {?} */ (this))._offsetY = offset;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @param selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     */\n    /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = /**\n     * Configures that the position strategy should set a `transform-origin` on some elements\n     * inside the overlay, depending on the current position that is being applied. This is\n     * useful for the cases where the origin of an animation can change depending on the\n     * alignment of the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} selector CSS selector that will be used to find the target\n     *    elements onto which to set the transform origin.\n     * @return {THIS}\n     */\n    function (selector) {\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     */\n    /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOriginPoint = /**\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\n     * @private\n     * @param {?} originRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originRect, pos) {\n        /** @type {?} */\n        var x;\n        if (pos.originX == 'center') {\n            // Note: when centering we should always use the `left`\n            // offset, otherwise the position will be wrong in RTL.\n            x = originRect.left + (originRect.width / 2);\n        }\n        else {\n            /** @type {?} */\n            var startX = this._isRtl() ? originRect.right : originRect.left;\n            /** @type {?} */\n            var endX = this._isRtl() ? originRect.left : originRect.right;\n            x = pos.originX == 'start' ? startX : endX;\n        }\n        /** @type {?} */\n        var y;\n        if (pos.originY == 'center') {\n            y = originRect.top + (originRect.height / 2);\n        }\n        else {\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\n        }\n        return { x: x, y: y };\n    };\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     */\n    /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = /**\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\n     * origin point to which the overlay should be connected.\n     * @private\n     * @param {?} originPoint\n     * @param {?} overlayRect\n     * @param {?} pos\n     * @return {?}\n     */\n    function (originPoint, overlayRect, pos) {\n        // Calculate the (overlayStartX, overlayStartY), the start of the\n        // potential overlay position relative to the origin point.\n        /** @type {?} */\n        var overlayStartX;\n        if (pos.overlayX == 'center') {\n            overlayStartX = -overlayRect.width / 2;\n        }\n        else if (pos.overlayX === 'start') {\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\n        }\n        else {\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\n        }\n        /** @type {?} */\n        var overlayStartY;\n        if (pos.overlayY == 'center') {\n            overlayStartY = -overlayRect.height / 2;\n        }\n        else {\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\n        }\n        // The (x, y) coordinates of the overlay.\n        return {\n            x: originPoint.x + overlayStartX,\n            y: originPoint.y + overlayStartY,\n        };\n    };\n    /** Gets how well an overlay at the given point will fit within the viewport. */\n    /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOverlayFit = /**\n     * Gets how well an overlay at the given point will fit within the viewport.\n     * @private\n     * @param {?} point\n     * @param {?} overlay\n     * @param {?} viewport\n     * @param {?} position\n     * @return {?}\n     */\n    function (point, overlay, viewport, position) {\n        var x = point.x, y = point.y;\n        /** @type {?} */\n        var offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        var offsetY = this._getOffset(position, 'y');\n        // Account for the offsets since they could push the overlay out of the viewport.\n        if (offsetX) {\n            x += offsetX;\n        }\n        if (offsetY) {\n            y += offsetY;\n        }\n        // How much the overlay would overflow at this position, on each side.\n        /** @type {?} */\n        var leftOverflow = 0 - x;\n        /** @type {?} */\n        var rightOverflow = (x + overlay.width) - viewport.width;\n        /** @type {?} */\n        var topOverflow = 0 - y;\n        /** @type {?} */\n        var bottomOverflow = (y + overlay.height) - viewport.height;\n        // Visible parts of the element on each axis.\n        /** @type {?} */\n        var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\n        /** @type {?} */\n        var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\n        /** @type {?} */\n        var visibleArea = visibleWidth * visibleHeight;\n        return {\n            visibleArea: visibleArea,\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\n            fitsInViewportVertically: visibleHeight === overlay.height,\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\n        };\n    };\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @param fit How well the overlay fits in the viewport at some position.\n     * @param point The (x, y) coordinates of the overlat at some position.\n     * @param viewport The geometry of the viewport.\n     */\n    /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = /**\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\n     * @private\n     * @param {?} fit How well the overlay fits in the viewport at some position.\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\n     * @param {?} viewport The geometry of the viewport.\n     * @return {?}\n     */\n    function (fit, point, viewport) {\n        if (this._hasFlexibleDimensions) {\n            /** @type {?} */\n            var availableHeight = viewport.bottom - point.y;\n            /** @type {?} */\n            var availableWidth = viewport.right - point.x;\n            /** @type {?} */\n            var minHeight = this._overlayRef.getConfig().minHeight;\n            /** @type {?} */\n            var minWidth = this._overlayRef.getConfig().minWidth;\n            /** @type {?} */\n            var verticalFit = fit.fitsInViewportVertically ||\n                (minHeight != null && minHeight <= availableHeight);\n            /** @type {?} */\n            var horizontalFit = fit.fitsInViewportHorizontally ||\n                (minWidth != null && minWidth <= availableWidth);\n            return verticalFit && horizontalFit;\n        }\n    };\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @param start Starting point from which the overlay is pushed.\n     * @param overlay Dimensions of the overlay.\n     * @param scrollPosition Current viewport scroll position.\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = /**\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\n     * right and bottom).\n     *\n     * @private\n     * @param {?} start Starting point from which the overlay is pushed.\n     * @param {?} overlay Dimensions of the overlay.\n     * @param {?} scrollPosition Current viewport scroll position.\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\n     *     originPoint.\n     */\n    function (start, overlay, scrollPosition) {\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\n        if (this._previousPushAmount && this._positionLocked) {\n            return {\n                x: start.x + this._previousPushAmount.x,\n                y: start.y + this._previousPushAmount.y\n            };\n        }\n        /** @type {?} */\n        var viewport = this._viewportRect;\n        // Determine how much the overlay goes outside the viewport on each\n        // side, which we'll use to decide which direction to push it.\n        /** @type {?} */\n        var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\n        /** @type {?} */\n        var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\n        /** @type {?} */\n        var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\n        /** @type {?} */\n        var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\n        /** @type {?} */\n        var pushX = 0;\n        /** @type {?} */\n        var pushY = 0;\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\n        if (overlay.width <= viewport.width) {\n            pushX = overflowLeft || -overflowRight;\n        }\n        else {\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\n        }\n        if (overlay.height <= viewport.height) {\n            pushY = overflowTop || -overflowBottom;\n        }\n        else {\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\n        }\n        this._previousPushAmount = { x: pushX, y: pushY };\n        return {\n            x: start.x + pushX,\n            y: start.y + pushY,\n        };\n    };\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @param position The position preference\n     * @param originPoint The point on the origin element where the overlay is connected.\n     */\n    /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._applyPosition = /**\n     * Applies a computed position to the overlay and emits a position change.\n     * @private\n     * @param {?} position The position preference\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\n     * @return {?}\n     */\n    function (position, originPoint) {\n        this._setTransformOrigin(position);\n        this._setOverlayElementStyles(originPoint, position);\n        this._setBoundingBoxStyles(originPoint, position);\n        if (position.panelClass) {\n            this._addPanelClasses(position.panelClass);\n        }\n        // Save the last connected position in case the position needs to be re-calculated.\n        this._lastPosition = position;\n        // Notify that the position has been changed along with its change properties.\n        // We only emit if we've got any subscriptions, because the scroll visibility\n        // calculcations can be somewhat expensive.\n        if (this._positionChangeSubscriptions > 0) {\n            /** @type {?} */\n            var scrollableViewProperties = this._getScrollVisibility();\n            /** @type {?} */\n            var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\n            this._positionChanges.next(changeEvent);\n        }\n        this._isInitialRender = false;\n    };\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\n    /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = /**\n     * Sets the transform origin based on the configured selector and the passed-in position.\n     * @private\n     * @param {?} position\n     * @return {?}\n     */\n    function (position) {\n        if (!this._transformOriginSelector) {\n            return;\n        }\n        /** @type {?} */\n        var elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\n        /** @type {?} */\n        var xOrigin;\n        /** @type {?} */\n        var yOrigin = position.overlayY;\n        if (position.overlayX === 'center') {\n            xOrigin = 'center';\n        }\n        else if (this._isRtl()) {\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\n        }\n        else {\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\n        }\n        for (var i = 0; i < elements.length; i++) {\n            elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\n        }\n    };\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     */\n    /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = /**\n     * Gets the position and size of the overlay's sizing container.\n     *\n     * This method does no measuring and applies no styles so that we can cheaply compute the\n     * bounds for all positions and choose the best fit based on these results.\n     * @private\n     * @param {?} origin\n     * @param {?} position\n     * @return {?}\n     */\n    function (origin, position) {\n        /** @type {?} */\n        var viewport = this._viewportRect;\n        /** @type {?} */\n        var isRtl = this._isRtl();\n        /** @type {?} */\n        var height;\n        /** @type {?} */\n        var top;\n        /** @type {?} */\n        var bottom;\n        if (position.overlayY === 'top') {\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\n            top = origin.y;\n            height = viewport.height - top + this._viewportMargin;\n        }\n        else if (position.overlayY === 'bottom') {\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\n            height = viewport.height - bottom + this._viewportMargin;\n        }\n        else {\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\n            // `origin.y - viewport.top`.\n            /** @type {?} */\n            var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\n            /** @type {?} */\n            var previousHeight = this._lastBoundingBoxSize.height;\n            height = smallestDistanceToViewportEdge * 2;\n            top = origin.y - smallestDistanceToViewportEdge;\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\n                top = origin.y - (previousHeight / 2);\n            }\n        }\n        // The overlay is opening 'right-ward' (the content flows to the right).\n        /** @type {?} */\n        var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\n            (position.overlayX === 'end' && isRtl);\n        // The overlay is opening 'left-ward' (the content flows to the left).\n        /** @type {?} */\n        var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\n            (position.overlayX === 'start' && isRtl);\n        /** @type {?} */\n        var width;\n        /** @type {?} */\n        var left;\n        /** @type {?} */\n        var right;\n        if (isBoundedByLeftViewportEdge) {\n            right = viewport.right - origin.x + this._viewportMargin;\n            width = origin.x - viewport.left;\n        }\n        else if (isBoundedByRightViewportEdge) {\n            left = origin.x;\n            width = viewport.right - origin.x;\n        }\n        else {\n            // If neither start nor end, it means that the overlay is horizontally centered on the\n            // origin point. Note that we want the position relative to the viewport, rather than\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\n            // `origin.x - viewport.left`.\n            /** @type {?} */\n            var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\n            /** @type {?} */\n            var previousWidth = this._lastBoundingBoxSize.width;\n            width = smallestDistanceToViewportEdge * 2;\n            left = origin.x - smallestDistanceToViewportEdge;\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\n                left = origin.x - (previousWidth / 2);\n            }\n        }\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width: width, height: height };\n    };\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @param origin The point on the origin element where the overlay is connected.\n     * @param position The position preference\n     */\n    /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = /**\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\n     * origin's connection point and stetches to the bounds of the viewport.\n     *\n     * @private\n     * @param {?} origin The point on the origin element where the overlay is connected.\n     * @param {?} position The position preference\n     * @return {?}\n     */\n    function (origin, position) {\n        /** @type {?} */\n        var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\n        // when applying a new size.\n        if (!this._isInitialRender && !this._growAfterOpen) {\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\n        }\n        /** @type {?} */\n        var styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            styles.top = styles.left = '0';\n            styles.bottom = styles.right = '';\n            styles.width = styles.height = '100%';\n        }\n        else {\n            /** @type {?} */\n            var maxHeight = this._overlayRef.getConfig().maxHeight;\n            /** @type {?} */\n            var maxWidth = this._overlayRef.getConfig().maxWidth;\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\n            // Push the pane content towards the proper direction.\n            if (position.overlayX === 'center') {\n                styles.alignItems = 'center';\n            }\n            else {\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\n            }\n            if (position.overlayY === 'center') {\n                styles.justifyContent = 'center';\n            }\n            else {\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\n            }\n            if (maxHeight) {\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\n            }\n            if (maxWidth) {\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\n            }\n        }\n        this._lastBoundingBoxSize = boundingBoxRect;\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\n    };\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\n    /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = /**\n     * Resets the styles for the bounding box so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    function () {\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\n            top: '0',\n            left: '0',\n            right: '0',\n            bottom: '0',\n            height: '',\n            width: '',\n            alignItems: '',\n            justifyContent: '',\n        })));\n    };\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\n    /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = /**\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\n     * @private\n     * @return {?}\n     */\n    function () {\n        extendStyles(this._pane.style, (/** @type {?} */ ({\n            top: '',\n            left: '',\n            bottom: '',\n            right: '',\n            position: '',\n            transform: '',\n        })));\n    };\n    /** Sets positioning styles to the overlay element. */\n    /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = /**\n     * Sets positioning styles to the overlay element.\n     * @private\n     * @param {?} originPoint\n     * @param {?} position\n     * @return {?}\n     */\n    function (originPoint, position) {\n        /** @type {?} */\n        var styles = (/** @type {?} */ ({}));\n        if (this._hasExactPosition()) {\n            /** @type {?} */\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\n        }\n        else {\n            styles.position = 'static';\n        }\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\n        // off the position. We also can't use margins, because they won't have an effect in some\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\n        // better both with flexible and non-flexible positioning.\n        /** @type {?} */\n        var transformString = '';\n        /** @type {?} */\n        var offsetX = this._getOffset(position, 'x');\n        /** @type {?} */\n        var offsetY = this._getOffset(position, 'y');\n        if (offsetX) {\n            transformString += \"translateX(\" + offsetX + \"px) \";\n        }\n        if (offsetY) {\n            transformString += \"translateY(\" + offsetY + \"px)\";\n        }\n        styles.transform = transformString.trim();\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\n            styles.maxHeight = '';\n        }\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\n            styles.maxWidth = '';\n        }\n        extendStyles(this._pane.style, styles);\n    };\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\n    /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = /**\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    function (position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the\n        // preferred position has changed since the last `apply`.\n        /** @type {?} */\n        var styles = (/** @type {?} */ ({ top: null, bottom: null }));\n        /** @type {?} */\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        /** @type {?} */\n        var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\n        // otherwise our positioning will be thrown off.\n        overlayPoint.y -= virtualKeyboardOffset;\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\n        // above or below the origin and the direction in which the element will expand.\n        if (position.overlayY === 'bottom') {\n            // When using `bottom`, we adjust the y position such that it is the distance\n            // from the bottom of the viewport rather than the top.\n            /** @type {?} */\n            var documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n            styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\n        }\n        else {\n            styles.top = coerceCssPixelValue(overlayPoint.y);\n        }\n        return styles;\n    };\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\n    /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = /**\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\n     * @private\n     * @param {?} position\n     * @param {?} originPoint\n     * @param {?} scrollPosition\n     * @return {?}\n     */\n    function (position, originPoint, scrollPosition) {\n        // Reset any existing styles. This is necessary in case the preferred position has\n        // changed since the last `apply`.\n        /** @type {?} */\n        var styles = (/** @type {?} */ ({ left: null, right: null }));\n        /** @type {?} */\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\n        if (this._isPushed) {\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\n        }\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\n        // or \"after\" the origin, which determines the direction in which the element will expand.\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\n        // page is in RTL or LTR.\n        /** @type {?} */\n        var horizontalStyleProperty;\n        if (this._isRtl()) {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\n        }\n        else {\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\n        }\n        // When we're setting `right`, we adjust the x position such that it is the distance\n        // from the right edge of the viewport rather than the left edge.\n        if (horizontalStyleProperty === 'right') {\n            /** @type {?} */\n            var documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n            styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\n        }\n        else {\n            styles.left = coerceCssPixelValue(overlayPoint.x);\n        }\n        return styles;\n    };\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     */\n    /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = /**\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\n     * or completely outside the view of any of the strategy's scrollables.\n     * @private\n     * @return {?}\n     */\n    function () {\n        // Note: needs fresh rects since the position could've changed.\n        /** @type {?} */\n        var originBounds = this._getOriginRect();\n        /** @type {?} */\n        var overlayBounds = this._pane.getBoundingClientRect();\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\n        // every time, we should be able to use the scrollTop of the containers if the size of those\n        // containers hasn't changed.\n        /** @type {?} */\n        var scrollContainerBounds = this.scrollables.map((/**\n         * @param {?} scrollable\n         * @return {?}\n         */\n        function (scrollable) {\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\n        }));\n        return {\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\n        };\n    };\n    /** Subtracts the amount that an element is overflowing on an axis from it's length. */\n    /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._subtractOverflows = /**\n     * Subtracts the amount that an element is overflowing on an axis from it's length.\n     * @private\n     * @param {?} length\n     * @param {...?} overflows\n     * @return {?}\n     */\n    function (length) {\n        var overflows = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            overflows[_i - 1] = arguments[_i];\n        }\n        return overflows.reduce((/**\n         * @param {?} currentValue\n         * @param {?} currentOverflow\n         * @return {?}\n         */\n        function (currentValue, currentOverflow) {\n            return currentValue - Math.max(currentOverflow, 0);\n        }), length);\n    };\n    /** Narrows the given viewport rect by the current _viewportMargin. */\n    /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = /**\n     * Narrows the given viewport rect by the current _viewportMargin.\n     * @private\n     * @return {?}\n     */\n    function () {\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\n        // 100% `width` and `height` which don't include the scrollbar either.\n        /** @type {?} */\n        var width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\n        /** @type {?} */\n        var height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\n        /** @type {?} */\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        return {\n            top: scrollPosition.top + this._viewportMargin,\n            left: scrollPosition.left + this._viewportMargin,\n            right: scrollPosition.left + width - this._viewportMargin,\n            bottom: scrollPosition.top + height - this._viewportMargin,\n            width: width - (2 * this._viewportMargin),\n            height: height - (2 * this._viewportMargin),\n        };\n    };\n    /** Whether the we're dealing with an RTL context */\n    /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._isRtl = /**\n     * Whether the we're dealing with an RTL context\n     * @private\n     * @return {?}\n     */\n    function () {\n        return this._overlayRef.getDirection() === 'rtl';\n    };\n    /** Determines whether the overlay uses exact or flexible positioning. */\n    /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._hasExactPosition = /**\n     * Determines whether the overlay uses exact or flexible positioning.\n     * @private\n     * @return {?}\n     */\n    function () {\n        return !this._hasFlexibleDimensions || this._isPushed;\n    };\n    /** Retrieves the offset of a position along the x or y axis. */\n    /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOffset = /**\n     * Retrieves the offset of a position along the x or y axis.\n     * @private\n     * @param {?} position\n     * @param {?} axis\n     * @return {?}\n     */\n    function (position, axis) {\n        if (axis === 'x') {\n            // We don't do something like `position['offset' + axis]` in\n            // order to avoid breking minifiers that rename properties.\n            return position.offsetX == null ? this._offsetX : position.offsetX;\n        }\n        return position.offsetY == null ? this._offsetY : position.offsetY;\n    };\n    /** Validates that the current position match the expected values. */\n    /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._validatePositions = /**\n     * Validates that the current position match the expected values.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._preferredPositions.length) {\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\n        }\n        // TODO(crisbeto): remove these once Angular's template type\n        // checking is advanced enough to catch these cases.\n        this._preferredPositions.forEach((/**\n         * @param {?} pair\n         * @return {?}\n         */\n        function (pair) {\n            validateHorizontalPosition('originX', pair.originX);\n            validateVerticalPosition('originY', pair.originY);\n            validateHorizontalPosition('overlayX', pair.overlayX);\n            validateVerticalPosition('overlayY', pair.overlayY);\n        }));\n    };\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\n    /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._addPanelClasses = /**\n     * Adds a single CSS class or an array of classes on the overlay panel.\n     * @private\n     * @param {?} cssClasses\n     * @return {?}\n     */\n    function (cssClasses) {\n        var _this = this;\n        if (this._pane) {\n            coerceArray(cssClasses).forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            function (cssClass) {\n                if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\n                    _this._appliedPanelClasses.push(cssClass);\n                    _this._pane.classList.add(cssClass);\n                }\n            }));\n        }\n    };\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\n    /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = /**\n     * Clears the classes that the position strategy has applied from the overlay panel.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._pane) {\n            this._appliedPanelClasses.forEach((/**\n             * @param {?} cssClass\n             * @return {?}\n             */\n            function (cssClass) {\n                _this._pane.classList.remove(cssClass);\n            }));\n            this._appliedPanelClasses = [];\n        }\n    };\n    /** Returns the ClientRect of the current origin. */\n    /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    FlexibleConnectedPositionStrategy.prototype._getOriginRect = /**\n     * Returns the ClientRect of the current origin.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var origin = this._origin;\n        if (origin instanceof ElementRef) {\n            return origin.nativeElement.getBoundingClientRect();\n        }\n        if (origin instanceof HTMLElement) {\n            return origin.getBoundingClientRect();\n        }\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\n        return {\n            top: origin.y,\n            bottom: origin.y,\n            left: origin.x,\n            right: origin.x,\n            height: 0,\n            width: 0\n        };\n    };\n    return FlexibleConnectedPositionStrategy;\n}());\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * implicit position relative to some origin element. The relative position is defined in terms of\n * a point on the origin element that is connected to a point on the overlay element. For example,\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\n * of the overlay.\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\n * \\@breaking-change 8.0.0\n */\nConnectedPositionStrategy = /** @class */ (function () {\n    function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\n        /**\n         * Ordered list of preferred positions, from most to least desirable.\n         */\n        this._preferredPositions = [];\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\n        // the extra logic, we create an instance of the positioning strategy that has some\n        // defaults that make it behave as the old position strategy and to which we'll\n        // proxy all of the API calls.\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withViewportMargin(0);\n        this.withFallbackPosition(originPos, overlayPos);\n    }\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\n        /** Whether the we're dealing with an RTL context */\n        get: /**\n         * Whether the we're dealing with an RTL context\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef.getDirection() === 'rtl';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\n        /** Emits an event when the connection point changes. */\n        get: /**\n         * Emits an event when the connection point changes.\n         * @return {?}\n         */\n        function () {\n            return this._positionStrategy.positionChanges;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\n        /** Ordered list of preferred positions, from most to least desirable. */\n        get: /**\n         * Ordered list of preferred positions, from most to least desirable.\n         * @return {?}\n         */\n        function () {\n            return this._preferredPositions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Attach this position strategy to an overlay. */\n    /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.attach = /**\n     * Attach this position strategy to an overlay.\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        this._overlayRef = overlayRef;\n        this._positionStrategy.attach(overlayRef);\n        if (this._direction) {\n            overlayRef.setDirection(this._direction);\n            this._direction = null;\n        }\n    };\n    /** Disposes all resources used by the position strategy. */\n    /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.dispose = /**\n     * Disposes all resources used by the position strategy.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.dispose();\n    };\n    /** @docs-private */\n    /**\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.detach = /**\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.detach();\n    };\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * @docs-private\n     */\n    /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.apply = /**\n     * Updates the position of the overlay element, using whichever preferred position relative\n     * to the origin fits on-screen.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.apply();\n    };\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     */\n    /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = /**\n     * Re-positions the overlay element with the trigger in its last calculated position,\n     * even if a position higher in the \"preferred positions\" list would now fit. This\n     * allows one to re-align the panel without changing the orientation of the panel.\n     * @return {?}\n     */\n    function () {\n        this._positionStrategy.reapplyLastPosition();\n    };\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     */\n    /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    ConnectedPositionStrategy.prototype.withScrollableContainers = /**\n     * Sets the list of Scrollable containers that host the origin element so that\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\n     * Scrollable must be an ancestor element of the strategy's origin element.\n     * @param {?} scrollables\n     * @return {?}\n     */\n    function (scrollables) {\n        this._positionStrategy.withScrollableContainers(scrollables);\n    };\n    /**\n     * Adds a new preferred fallback position.\n     * @param originPos\n     * @param overlayPos\n     */\n    /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.withFallbackPosition = /**\n     * Adds a new preferred fallback position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @param {?=} offsetX\n     * @param {?=} offsetY\n     * @return {THIS}\n     */\n    function (originPos, overlayPos, offsetX, offsetY) {\n        /** @type {?} */\n        var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\n        (/** @type {?} */ (this))._preferredPositions.push(position);\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @param dir New layout direction.\n     */\n    /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.withDirection = /**\n     * Sets the layout direction so the overlay's position can be adjusted to match.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} dir New layout direction.\n     * @return {THIS}\n     */\n    function (dir) {\n        // Since the direction might be declared before the strategy is attached,\n        // we save the value in a temporary property and we'll transfer it to the\n        // overlay ref on attachment.\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\n        }\n        else {\n            (/** @type {?} */ (this))._direction = dir;\n        }\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @param offset New offset in the X axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetX = /**\n     * Sets an offset for the overlay's connection point on the x-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the X axis.\n     * @return {THIS}\n     */\n    function (offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @param  offset New offset in the Y axis.\n     */\n    /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.withOffsetY = /**\n     * Sets an offset for the overlay's connection point on the y-axis\n     * @template THIS\n     * @this {THIS}\n     * @param {?} offset New offset in the Y axis.\n     * @return {THIS}\n     */\n    function (offset) {\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @param isLocked Whether the overlay should locked in.\n     */\n    /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.withLockedPosition = /**\n     * Sets whether the overlay's position should be locked in after it is positioned\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\n     * when the position is re-applied (e.g. when the user scrolls away).\n     * @template THIS\n     * @this {THIS}\n     * @param {?} isLocked Whether the overlay should locked in.\n     * @return {THIS}\n     */\n    function (isLocked) {\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @param positions Position pairs to be set on the strategy.\n     */\n    /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.withPositions = /**\n     * Overwrites the current set of positions with an array of new ones.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} positions Position pairs to be set on the strategy.\n     * @return {THIS}\n     */\n    function (positions) {\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @param origin Reference to the new origin element.\n     */\n    /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    ConnectedPositionStrategy.prototype.setOrigin = /**\n     * Sets the origin element, relative to which to position the overlay.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} origin Reference to the new origin element.\n     * @return {THIS}\n     */\n    function (origin) {\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\n        return (/** @type {?} */ (this));\n    };\n    return ConnectedPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Class to be added to the overlay pane wrapper.\n * @type {?}\n */\nvar wrapperClass = 'cdk-global-overlay-wrapper';\n/**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nvar  /**\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\n * explicit position relative to the browser's viewport. We use flexbox, instead of\n * transforms, in order to avoid issues with subpixel rendering which can cause the\n * element to become blurry.\n */\nGlobalPositionStrategy = /** @class */ (function () {\n    function GlobalPositionStrategy() {\n        this._cssPosition = 'static';\n        this._topOffset = '';\n        this._bottomOffset = '';\n        this._leftOffset = '';\n        this._rightOffset = '';\n        this._alignItems = '';\n        this._justifyContent = '';\n        this._width = '';\n        this._height = '';\n    }\n    /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.attach = /**\n     * @param {?} overlayRef\n     * @return {?}\n     */\n    function (overlayRef) {\n        /** @type {?} */\n        var config = overlayRef.getConfig();\n        this._overlayRef = overlayRef;\n        if (this._width && !config.width) {\n            overlayRef.updateSize({ width: this._width });\n        }\n        if (this._height && !config.height) {\n            overlayRef.updateSize({ height: this._height });\n        }\n        overlayRef.hostElement.classList.add(wrapperClass);\n        this._isDisposed = false;\n    };\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @param value New top offset.\n     */\n    /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.top = /**\n     * Sets the top position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New top offset.\n     * @return {THIS}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        (/** @type {?} */ (this))._bottomOffset = '';\n        (/** @type {?} */ (this))._topOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @param value New left offset.\n     */\n    /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.left = /**\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New left offset.\n     * @return {THIS}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        (/** @type {?} */ (this))._rightOffset = '';\n        (/** @type {?} */ (this))._leftOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @param value New bottom offset.\n     */\n    /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.bottom = /**\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New bottom offset.\n     * @return {THIS}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        (/** @type {?} */ (this))._topOffset = '';\n        (/** @type {?} */ (this))._bottomOffset = value;\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @param value New right offset.\n     */\n    /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.right = /**\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New right offset.\n     * @return {THIS}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        (/** @type {?} */ (this))._leftOffset = '';\n        (/** @type {?} */ (this))._rightOffset = value;\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @param value New width for the overlay\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.width = /**\n     * Sets the overlay width and clears any previously set width.\n     * @deprecated Pass the `width` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New width for the overlay\n     * @return {THIS}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\n        }\n        else {\n            (/** @type {?} */ (this))._width = value;\n        }\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @param value New height for the overlay\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.height = /**\n     * Sets the overlay height and clears any previously set height.\n     * @deprecated Pass the `height` through the `OverlayConfig`.\n     * \\@breaking-change 8.0.0\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} value New height for the overlay\n     * @return {THIS}\n     */\n    function (value) {\n        if (value === void 0) { value = ''; }\n        if ((/** @type {?} */ (this))._overlayRef) {\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\n        }\n        else {\n            (/** @type {?} */ (this))._height = value;\n        }\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @param offset Overlay offset from the horizontal center.\n     */\n    /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.centerHorizontally = /**\n     * Centers the overlay horizontally with an optional offset.\n     * Clears any previously set horizontal position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the horizontal center.\n     * @return {THIS}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        (/** @type {?} */ (this)).left(offset);\n        (/** @type {?} */ (this))._justifyContent = 'center';\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @param offset Overlay offset from the vertical center.\n     */\n    /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    GlobalPositionStrategy.prototype.centerVertically = /**\n     * Centers the overlay vertically with an optional offset.\n     * Clears any previously set vertical position.\n     *\n     * @template THIS\n     * @this {THIS}\n     * @param {?=} offset Overlay offset from the vertical center.\n     * @return {THIS}\n     */\n    function (offset) {\n        if (offset === void 0) { offset = ''; }\n        (/** @type {?} */ (this)).top(offset);\n        (/** @type {?} */ (this))._alignItems = 'center';\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Apply the position to the element.\n     * @docs-private\n     */\n    /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.apply = /**\n     * Apply the position to the element.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        // Since the overlay ref applies the strategy asynchronously, it could\n        // have been disposed before it ends up being applied. If that is the\n        // case, we shouldn't do anything.\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n            return;\n        }\n        /** @type {?} */\n        var styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        var parentStyles = this._overlayRef.hostElement.style;\n        /** @type {?} */\n        var config = this._overlayRef.getConfig();\n        styles.position = this._cssPosition;\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\n        styles.marginBottom = this._bottomOffset;\n        styles.marginRight = this._rightOffset;\n        if (config.width === '100%') {\n            parentStyles.justifyContent = 'flex-start';\n        }\n        else if (this._justifyContent === 'center') {\n            parentStyles.justifyContent = 'center';\n        }\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\n            // don't want that because our positioning is explicitly `left` and `right`, hence\n            // why we do another inversion to ensure that the overlay stays in the same position.\n            // TODO: reconsider this if we add `start` and `end` methods.\n            if (this._justifyContent === 'flex-start') {\n                parentStyles.justifyContent = 'flex-end';\n            }\n            else if (this._justifyContent === 'flex-end') {\n                parentStyles.justifyContent = 'flex-start';\n            }\n        }\n        else {\n            parentStyles.justifyContent = this._justifyContent;\n        }\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\n    };\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * @docs-private\n     */\n    /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    GlobalPositionStrategy.prototype.dispose = /**\n     * Cleans up the DOM changes from the position strategy.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () {\n        if (this._isDisposed || !this._overlayRef) {\n            return;\n        }\n        /** @type {?} */\n        var styles = this._overlayRef.overlayElement.style;\n        /** @type {?} */\n        var parent = this._overlayRef.hostElement;\n        /** @type {?} */\n        var parentStyles = parent.style;\n        parent.classList.remove(wrapperClass);\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\n        this._overlayRef = (/** @type {?} */ (null));\n        this._isDisposed = true;\n    };\n    return GlobalPositionStrategy;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Builder for overlay position strategy.\n */\nvar OverlayPositionBuilder = /** @class */ (function () {\n    function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\n        this._viewportRuler = _viewportRuler;\n        this._document = _document;\n        this._platform = _platform;\n        this._overlayContainer = _overlayContainer;\n    }\n    /**\n     * Creates a global position strategy.\n     */\n    /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.global = /**\n     * Creates a global position strategy.\n     * @return {?}\n     */\n    function () {\n        return new GlobalPositionStrategy();\n    };\n    /**\n     * Creates a relative position strategy.\n     * @param elementRef\n     * @param originPos\n     * @param overlayPos\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.connectedTo = /**\n     * Creates a relative position strategy.\n     * @deprecated Use `flexibleConnectedTo` instead.\n     * \\@breaking-change 8.0.0\n     * @param {?} elementRef\n     * @param {?} originPos\n     * @param {?} overlayPos\n     * @return {?}\n     */\n    function (elementRef, originPos, overlayPos) {\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    /**\n     * Creates a flexible position strategy.\n     * @param origin Origin relative to which to position the overlay.\n     */\n    /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    OverlayPositionBuilder.prototype.flexibleConnectedTo = /**\n     * Creates a flexible position strategy.\n     * @param {?} origin Origin relative to which to position the overlay.\n     * @return {?}\n     */\n    function (origin) {\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\n    };\n    OverlayPositionBuilder.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    OverlayPositionBuilder.ctorParameters = function () { return [\n        { type: ViewportRuler },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Platform },\n        { type: OverlayContainer }\n    ]; };\n    /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\n    return OverlayPositionBuilder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Next overlay unique ID.\n * @type {?}\n */\nvar nextUniqueId = 0;\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\n// it needs is different based on where OverlayModule is imported.\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\n */\nvar Overlay = /** @class */ (function () {\n    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\n        this.scrollStrategies = scrollStrategies;\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._positionBuilder = _positionBuilder;\n        this._keyboardDispatcher = _keyboardDispatcher;\n        this._injector = _injector;\n        this._ngZone = _ngZone;\n        this._document = _document;\n        this._directionality = _directionality;\n        this._location = _location;\n    }\n    /**\n     * Creates an overlay.\n     * @param config Configuration applied to the overlay.\n     * @returns Reference to the created overlay.\n     */\n    /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    Overlay.prototype.create = /**\n     * Creates an overlay.\n     * @param {?=} config Configuration applied to the overlay.\n     * @return {?} Reference to the created overlay.\n     */\n    function (config) {\n        /** @type {?} */\n        var host = this._createHostElement();\n        /** @type {?} */\n        var pane = this._createPaneElement(host);\n        /** @type {?} */\n        var portalOutlet = this._createPortalOutlet(pane);\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig(config);\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\n    };\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @returns An overlay position builder.\n     */\n    /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    Overlay.prototype.position = /**\n     * Gets a position builder that can be used, via fluent API,\n     * to construct and configure a position strategy.\n     * @return {?} An overlay position builder.\n     */\n    function () {\n        return this._positionBuilder;\n    };\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    Overlay.prototype._createPaneElement = /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @private\n     * @param {?} host\n     * @return {?} Newly-created pane element\n     */\n    function (host) {\n        /** @type {?} */\n        var pane = this._document.createElement('div');\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\n        pane.classList.add('cdk-overlay-pane');\n        host.appendChild(pane);\n        return pane;\n    };\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @returns Newly-create host element.\n     */\n    /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    Overlay.prototype._createHostElement = /**\n     * Creates the host element that wraps around an overlay\n     * and can be used for advanced positioning.\n     * @private\n     * @return {?} Newly-create host element.\n     */\n    function () {\n        /** @type {?} */\n        var host = this._document.createElement('div');\n        this._overlayContainer.getContainerElement().appendChild(host);\n        return host;\n    };\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal outlet.\n     * @returns A portal outlet for the given DOM element.\n     */\n    /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    Overlay.prototype._createPortalOutlet = /**\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\n     * @private\n     * @param {?} pane The DOM element to turn into a portal outlet.\n     * @return {?} A portal outlet for the given DOM element.\n     */\n    function (pane) {\n        // We have to resolve the ApplicationRef later in order to allow people\n        // to use overlay-based providers during app initialization.\n        if (!this._appRef) {\n            this._appRef = this._injector.get(ApplicationRef);\n        }\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\n    };\n    Overlay.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    Overlay.ctorParameters = function () { return [\n        { type: ScrollStrategyOptions },\n        { type: OverlayContainer },\n        { type: ComponentFactoryResolver },\n        { type: OverlayPositionBuilder },\n        { type: OverlayKeyboardDispatcher },\n        { type: Injector },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: Directionality },\n        { type: Location, decorators: [{ type: Optional }] }\n    ]; };\n    return Overlay;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\n * @type {?}\n */\nvar defaultPositionList = [\n    {\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    {\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    }\n];\n/**\n * Injection token that determines the scroll handling while the connected overlay is open.\n * @type {?}\n */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\n/**\n * Directive applied to an element to make it usable as an origin for an Overlay using a\n * ConnectedPositionStrategy.\n */\nvar CdkOverlayOrigin = /** @class */ (function () {\n    function CdkOverlayOrigin(elementRef) {\n        this.elementRef = elementRef;\n    }\n    CdkOverlayOrigin.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\n                    exportAs: 'cdkOverlayOrigin',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkOverlayOrigin.ctorParameters = function () { return [\n        { type: ElementRef }\n    ]; };\n    return CdkOverlayOrigin;\n}());\n/**\n * Directive to facilitate declarative creation of an\n * Overlay using a FlexibleConnectedPositionStrategy.\n */\nvar CdkConnectedOverlay = /** @class */ (function () {\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\n    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\n        this._overlay = _overlay;\n        this._dir = _dir;\n        this._hasBackdrop = false;\n        this._lockPosition = false;\n        this._growAfterOpen = false;\n        this._flexibleDimensions = false;\n        this._push = false;\n        this._backdropSubscription = Subscription.EMPTY;\n        /**\n         * Margin between the overlay and the viewport edges.\n         */\n        this.viewportMargin = 0;\n        /**\n         * Whether the overlay is open.\n         */\n        this.open = false;\n        /**\n         * Event emitted when the backdrop is clicked.\n         */\n        this.backdropClick = new EventEmitter();\n        /**\n         * Event emitted when the position has changed.\n         */\n        this.positionChange = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been attached.\n         */\n        this.attach = new EventEmitter();\n        /**\n         * Event emitted when the overlay has been detached.\n         */\n        this.detach = new EventEmitter();\n        /**\n         * Emits when there are keyboard events that are targeted at the overlay.\n         */\n        this.overlayKeydown = new EventEmitter();\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this.scrollStrategy = this._scrollStrategyFactory();\n    }\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\n        /** The offset in pixels for the overlay connection point on the x-axis */\n        get: /**\n         * The offset in pixels for the overlay connection point on the x-axis\n         * @return {?}\n         */\n        function () { return this._offsetX; },\n        set: /**\n         * @param {?} offsetX\n         * @return {?}\n         */\n        function (offsetX) {\n            this._offsetX = offsetX;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\n        /** The offset in pixels for the overlay connection point on the y-axis */\n        get: /**\n         * The offset in pixels for the overlay connection point on the y-axis\n         * @return {?}\n         */\n        function () { return this._offsetY; },\n        set: /**\n         * @param {?} offsetY\n         * @return {?}\n         */\n        function (offsetY) {\n            this._offsetY = offsetY;\n            if (this._position) {\n                this._updatePositionStrategy(this._position);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\n        /** Whether or not the overlay should attach a backdrop. */\n        get: /**\n         * Whether or not the overlay should attach a backdrop.\n         * @return {?}\n         */\n        function () { return this._hasBackdrop; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._hasBackdrop = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\n        /** Whether or not the overlay should be locked when scrolling. */\n        get: /**\n         * Whether or not the overlay should be locked when scrolling.\n         * @return {?}\n         */\n        function () { return this._lockPosition; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._lockPosition = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\n        get: /**\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\n         * @return {?}\n         */\n        function () { return this._flexibleDimensions; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._flexibleDimensions = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\n        get: /**\n         * Whether the overlay can grow after the initial open when flexible positioning is turned on.\n         * @return {?}\n         */\n        function () { return this._growAfterOpen; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._growAfterOpen = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\n        get: /**\n         * Whether the overlay can be pushed on-screen if none of the provided positions fit.\n         * @return {?}\n         */\n        function () { return this._push; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._push = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\n        /** The associated overlay reference. */\n        get: /**\n         * The associated overlay reference.\n         * @return {?}\n         */\n        function () {\n            return this._overlayRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\n        /** The element's layout direction. */\n        get: /**\n         * The element's layout direction.\n         * @return {?}\n         */\n        function () {\n            return this._dir ? this._dir.value : 'ltr';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        if (this._position) {\n            this._updatePositionStrategy(this._position);\n            this._overlayRef.updateSize({\n                width: this.width,\n                minWidth: this.minWidth,\n                height: this.height,\n                minHeight: this.minHeight,\n            });\n            if (changes['origin'] && this.open) {\n                this._position.apply();\n            }\n        }\n        if (changes['open']) {\n            this.open ? this._attachOverlay() : this._detachOverlay();\n        }\n    };\n    /** Creates an overlay */\n    /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createOverlay = /**\n     * Creates an overlay\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.positions || !this.positions.length) {\n            this.positions = defaultPositionList;\n        }\n        this._overlayRef = this._overlay.create(this._buildConfig());\n        this._overlayRef.keydownEvents().subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        function (event) {\n            _this.overlayKeydown.next(event);\n            if (event.keyCode === ESCAPE) {\n                _this._detachOverlay();\n            }\n        }));\n    };\n    /** Builds the overlay config based on the directive's inputs */\n    /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._buildConfig = /**\n     * Builds the overlay config based on the directive's inputs\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var positionStrategy = this._position = this._createPositionStrategy();\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig({\n            direction: this._dir,\n            positionStrategy: positionStrategy,\n            scrollStrategy: this.scrollStrategy,\n            hasBackdrop: this.hasBackdrop\n        });\n        if (this.width || this.width === 0) {\n            overlayConfig.width = this.width;\n        }\n        if (this.height || this.height === 0) {\n            overlayConfig.height = this.height;\n        }\n        if (this.minWidth || this.minWidth === 0) {\n            overlayConfig.minWidth = this.minWidth;\n        }\n        if (this.minHeight || this.minHeight === 0) {\n            overlayConfig.minHeight = this.minHeight;\n        }\n        if (this.backdropClass) {\n            overlayConfig.backdropClass = this.backdropClass;\n        }\n        if (this.panelClass) {\n            overlayConfig.panelClass = this.panelClass;\n        }\n        return overlayConfig;\n    };\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\n    /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._updatePositionStrategy = /**\n     * Updates the state of a position strategy, based on the values of the directive inputs.\n     * @private\n     * @param {?} positionStrategy\n     * @return {?}\n     */\n    function (positionStrategy) {\n        var _this = this;\n        /** @type {?} */\n        var positions = this.positions.map((/**\n         * @param {?} currentPosition\n         * @return {?}\n         */\n        function (currentPosition) { return ({\n            originX: currentPosition.originX,\n            originY: currentPosition.originY,\n            overlayX: currentPosition.overlayX,\n            overlayY: currentPosition.overlayY,\n            offsetX: currentPosition.offsetX || _this.offsetX,\n            offsetY: currentPosition.offsetY || _this.offsetY\n        }); }));\n        return positionStrategy\n            .setOrigin(this.origin.elementRef)\n            .withPositions(positions)\n            .withFlexibleDimensions(this.flexibleDimensions)\n            .withPush(this.push)\n            .withGrowAfterOpen(this.growAfterOpen)\n            .withViewportMargin(this.viewportMargin)\n            .withLockedPosition(this.lockPosition);\n    };\n    /** Returns the position strategy of the overlay to be set on the overlay config */\n    /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._createPositionStrategy = /**\n     * Returns the position strategy of the overlay to be set on the overlay config\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        /** @type {?} */\n        var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\n        this._updatePositionStrategy(strategy);\n        strategy.positionChanges.subscribe((/**\n         * @param {?} p\n         * @return {?}\n         */\n        function (p) { return _this.positionChange.emit(p); }));\n        return strategy;\n    };\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\n    /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._attachOverlay = /**\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this._overlayRef) {\n            this._createOverlay();\n        }\n        else {\n            // Update the overlay size, in case the directive's inputs have changed\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\n        }\n        if (!this._overlayRef.hasAttached()) {\n            this._overlayRef.attach(this._templatePortal);\n            this.attach.emit();\n        }\n        if (this.hasBackdrop) {\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((/**\n             * @param {?} event\n             * @return {?}\n             */\n            function (event) {\n                _this.backdropClick.emit(event);\n            }));\n        }\n        else {\n            this._backdropSubscription.unsubscribe();\n        }\n    };\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\n    /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    CdkConnectedOverlay.prototype._detachOverlay = /**\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._overlayRef) {\n            this._overlayRef.detach();\n            this.detach.emit();\n        }\n        this._backdropSubscription.unsubscribe();\n    };\n    CdkConnectedOverlay.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\n                    exportAs: 'cdkConnectedOverlay'\n                },] },\n    ];\n    /** @nocollapse */\n    CdkConnectedOverlay.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: TemplateRef },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    CdkConnectedOverlay.propDecorators = {\n        origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\n        positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\n        offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\n        offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\n        width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\n        height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\n        minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\n        minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\n        backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\n        panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\n        viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\n        scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\n        open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\n        hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\n        lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\n        flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\n        growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\n        push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\n        backdropClick: [{ type: Output }],\n        positionChange: [{ type: Output }],\n        attach: [{ type: Output }],\n        detach: [{ type: Output }],\n        overlayKeydown: [{ type: Output }]\n    };\n    return CdkConnectedOverlay;\n}());\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    function () { return overlay.scrollStrategies.reposition(); });\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar OverlayModule = /** @class */ (function () {\n    function OverlayModule() {\n    }\n    OverlayModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [BidiModule, PortalModule, ScrollingModule],\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\n                    providers: [\n                        Overlay,\n                        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n                    ],\n                },] },\n    ];\n    return OverlayModule;\n}());\n/**\n * @deprecated Use `OverlayModule` instead.\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nvar OVERLAY_PROVIDERS = [\n    Overlay,\n    OverlayPositionBuilder,\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\n    VIEWPORT_RULER_PROVIDER,\n    OVERLAY_CONTAINER_PROVIDER,\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\n * Fullscreen mode\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\n *\n * Should be provided in the root component.\n */\nvar FullscreenOverlayContainer = /** @class */ (function (_super) {\n    __extends(FullscreenOverlayContainer, _super);\n    function FullscreenOverlayContainer(_document) {\n        return _super.call(this, _document) || this;\n    }\n    /**\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        _super.prototype.ngOnDestroy.call(this);\n        if (this._fullScreenEventName && this._fullScreenListener) {\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\n        }\n    };\n    /**\n     * @protected\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._createContainer = /**\n     * @protected\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        _super.prototype._createContainer.call(this);\n        this._adjustParentForFullscreenChange();\n        this._addFullscreenChangeListener((/**\n         * @return {?}\n         */\n        function () { return _this._adjustParentForFullscreenChange(); }));\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._containerElement) {\n            return;\n        }\n        /** @type {?} */\n        var fullscreenElement = this.getFullscreenElement();\n        /** @type {?} */\n        var parent = fullscreenElement || this._document.body;\n        parent.appendChild(this._containerElement);\n    };\n    /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = /**\n     * @private\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) {\n        /** @type {?} */\n        var eventName = this._getEventName();\n        if (eventName) {\n            if (this._fullScreenListener) {\n                this._document.removeEventListener(eventName, this._fullScreenListener);\n            }\n            this._document.addEventListener(eventName, fn);\n            this._fullScreenListener = fn;\n        }\n    };\n    /**\n     * @private\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype._getEventName = /**\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (!this._fullScreenEventName) {\n            if (this._document.fullscreenEnabled) {\n                this._fullScreenEventName = 'fullscreenchange';\n            }\n            else if (this._document.webkitFullscreenEnabled) {\n                this._fullScreenEventName = 'webkitfullscreenchange';\n            }\n            else if (((/** @type {?} */ (this._document))).mozFullScreenEnabled) {\n                this._fullScreenEventName = 'mozfullscreenchange';\n            }\n            else if (((/** @type {?} */ (this._document))).msFullscreenEnabled) {\n                this._fullScreenEventName = 'MSFullscreenChange';\n            }\n        }\n        return this._fullScreenEventName;\n    };\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     */\n    /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    FullscreenOverlayContainer.prototype.getFullscreenElement = /**\n     * When the page is put into fullscreen mode, a specific element is specified.\n     * Only that element and its children are visible when in fullscreen mode.\n     * @return {?}\n     */\n    function () {\n        return this._document.fullscreenElement ||\n            this._document.webkitFullscreenElement ||\n            ((/** @type {?} */ (this._document))).mozFullScreenElement ||\n            ((/** @type {?} */ (this._document))).msFullscreenElement ||\n            null;\n    };\n    FullscreenOverlayContainer.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    FullscreenOverlayContainer.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    /** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\n    return FullscreenOverlayContainer;\n}(OverlayContainer));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\n//# sourceMappingURL=overlay.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, Observable, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar LayoutModule = /** @class */ (function () {\n    function LayoutModule() {\n    }\n    LayoutModule.decorators = [\n        { type: NgModule, args: [{},] },\n    ];\n    return LayoutModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\nvar mediaQueriesForWebkitCompatibility = new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\nvar mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\nvar MediaMatcher = /** @class */ (function () {\n    function MediaMatcher(platform) {\n        this.platform = platform;\n        this._matchMedia = this.platform.isBrowser && window.matchMedia ?\n            // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n            // call it from a different scope.\n            window.matchMedia.bind(window) :\n            noopMatchMedia;\n    }\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     */\n    /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    MediaMatcher.prototype.matchMedia = /**\n     * Evaluates the given media query and returns the native MediaQueryList from which results\n     * can be retrieved.\n     * Confirms the layout engine will trigger for the selector query provided and returns the\n     * MediaQueryList for the query provided.\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        if (this.platform.WEBKIT) {\n            createEmptyStyleRule(query);\n        }\n        return this._matchMedia(query);\n    };\n    MediaMatcher.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    MediaMatcher.ctorParameters = function () { return [\n        { type: Platform }\n    ]; };\n    /** @nocollapse */ MediaMatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function MediaMatcher_Factory() { return new MediaMatcher(ɵɵinject(Platform)); }, token: MediaMatcher, providedIn: \"root\" });\n    return MediaMatcher;\n}());\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\nfunction createEmptyStyleRule(query) {\n    if (mediaQueriesForWebkitCompatibility.has(query)) {\n        return;\n    }\n    try {\n        if (!mediaQueryStyleNode) {\n            mediaQueryStyleNode = document.createElement('style');\n            mediaQueryStyleNode.setAttribute('type', 'text/css');\n            (/** @type {?} */ (document.head)).appendChild(mediaQueryStyleNode);\n        }\n        if (mediaQueryStyleNode.sheet) {\n            ((/** @type {?} */ (mediaQueryStyleNode.sheet)))\n                .insertRule(\"@media \" + query + \" {.fx-query-test{ }}\", 0);\n            mediaQueriesForWebkitCompatibility.add(query);\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\nfunction noopMatchMedia(query) {\n    // Use `as any` here to avoid adding additional necessary properties for\n    // the noop matcher.\n    return (/** @type {?} */ ({\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: (/**\n         * @return {?}\n         */\n        function () { }),\n        removeListener: (/**\n         * @return {?}\n         */\n        function () { })\n    }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Utility for checking the matching state of \\@media queries.\n */\nvar BreakpointObserver = /** @class */ (function () {\n    function BreakpointObserver(mediaMatcher, zone) {\n        this.mediaMatcher = mediaMatcher;\n        this.zone = zone;\n        /**\n         * A map of all media queries currently being listened for.\n         */\n        this._queries = new Map();\n        /**\n         * A subject for all other observables to takeUntil based on.\n         */\n        this._destroySubject = new Subject();\n    }\n    /** Completes the active subject, signalling to all other observables to complete. */\n    /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    BreakpointObserver.prototype.ngOnDestroy = /**\n     * Completes the active subject, signalling to all other observables to complete.\n     * @return {?}\n     */\n    function () {\n        this._destroySubject.next();\n        this._destroySubject.complete();\n    };\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param value One or more media queries to check.\n     * @returns Whether any of the media queries match.\n     */\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    BreakpointObserver.prototype.isMatched = /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var queries = splitQueries(coerceArray(value));\n        return queries.some((/**\n         * @param {?} mediaQuery\n         * @return {?}\n         */\n        function (mediaQuery) { return _this._registerQuery(mediaQuery).mql.matches; }));\n    };\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param value One or more media queries to check.\n     * @returns A stream of matches for the given queries.\n     */\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    BreakpointObserver.prototype.observe = /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n    function (value) {\n        var _this = this;\n        /** @type {?} */\n        var queries = splitQueries(coerceArray(value));\n        /** @type {?} */\n        var observables = queries.map((/**\n         * @param {?} query\n         * @return {?}\n         */\n        function (query) { return _this._registerQuery(query).observable; }));\n        return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map((/**\n         * @param {?} breakpointStates\n         * @return {?}\n         */\n        function (breakpointStates) {\n            /** @type {?} */\n            var response = {\n                matches: false,\n                breakpoints: {},\n            };\n            breakpointStates.forEach((/**\n             * @param {?} state\n             * @return {?}\n             */\n            function (state) {\n                response.matches = response.matches || state.matches;\n                response.breakpoints[state.query] = state.matches;\n            }));\n            return response;\n        })));\n    };\n    /** Registers a specific query to be listened for. */\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    BreakpointObserver.prototype._registerQuery = /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) {\n        var _this = this;\n        // Only set up a new MediaQueryList if it is not already being listened for.\n        if (this._queries.has(query)) {\n            return (/** @type {?} */ (this._queries.get(query)));\n        }\n        /** @type {?} */\n        var mql = this.mediaMatcher.matchMedia(query);\n        // Create callback for match changes and add it is as a listener.\n        /** @type {?} */\n        var queryObservable = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        function (observer) {\n            // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n            // back into the zone because matchMedia is only included in Zone.js by loading the\n            // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n            // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n            // patches it.\n            /** @type {?} */\n            var handler = (/**\n             * @param {?} e\n             * @return {?}\n             */\n            function (e) { return _this.zone.run((/**\n             * @return {?}\n             */\n            function () { return observer.next(e); })); });\n            mql.addListener(handler);\n            return (/**\n             * @return {?}\n             */\n            function () {\n                mql.removeListener(handler);\n            });\n        })).pipe(startWith(mql), map((/**\n         * @param {?} nextMql\n         * @return {?}\n         */\n        function (nextMql) { return ({ query: query, matches: nextMql.matches }); })), takeUntil(this._destroySubject));\n        // Add the MediaQueryList to the set of queries.\n        /** @type {?} */\n        var output = { observable: queryObservable, mql: mql };\n        this._queries.set(query, output);\n        return output;\n    };\n    BreakpointObserver.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    BreakpointObserver.ctorParameters = function () { return [\n        { type: MediaMatcher },\n        { type: NgZone }\n    ]; };\n    /** @nocollapse */ BreakpointObserver.ngInjectableDef = ɵɵdefineInjectable({ factory: function BreakpointObserver_Factory() { return new BreakpointObserver(ɵɵinject(MediaMatcher), ɵɵinject(NgZone)); }, token: BreakpointObserver, providedIn: \"root\" });\n    return BreakpointObserver;\n}());\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\nfunction splitQueries(queries) {\n    return queries.map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) { return query.split(','); }))\n        .reduce((/**\n     * @param {?} a1\n     * @param {?} a2\n     * @return {?}\n     */\n    function (a1, a2) { return a1.concat(a2); }))\n        .map((/**\n     * @param {?} query\n     * @return {?}\n     */\n    function (query) { return query.trim(); }));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\nvar Breakpoints = {\n    XSmall: '(max-width: 599.99px)',\n    Small: '(min-width: 600px) and (max-width: 959.99px)',\n    Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n    Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n    XLarge: '(min-width: 1920px)',\n    Handset: '(max-width: 599.99px) and (orientation: portrait), ' +\n        '(max-width: 959.99px) and (orientation: landscape)',\n    Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' +\n        '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    Web: '(min-width: 840px) and (orientation: portrait), ' +\n        '(min-width: 1280px) and (orientation: landscape)',\n    HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n    TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n    WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n    HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n    TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n    WebLandscape: '(min-width: 1280px) and (orientation: landscape)',\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher };\n//# sourceMappingURL=layout.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Subject } from 'rxjs';\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends, __assign } from 'tslib';\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { MatCommonModule } from '@angular/material/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nvar  /**\n * Reference to a snack bar dispatched from the snack bar service.\n * @template T\n */\nMatSnackBarRef = /** @class */ (function () {\n    function MatSnackBarRef(containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the snack bar has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        /**\n         * Subject for notifying the user that the snack bar action was called.\n         */\n        this._onAction = new Subject();\n        /**\n         * Whether the snack bar was dismissed using the action button.\n         */\n        this._dismissedByAction = false;\n        this.containerInstance = containerInstance;\n        // Dismiss snackbar on action.\n        this.onAction().subscribe((/**\n         * @return {?}\n         */\n        function () { return _this.dismiss(); }));\n        containerInstance._onExit.subscribe((/**\n         * @return {?}\n         */\n        function () { return _this._finishDismiss(); }));\n    }\n    /** Dismisses the snack bar. */\n    /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismiss = /**\n     * Dismisses the snack bar.\n     * @return {?}\n     */\n    function () {\n        if (!this._afterDismissed.closed) {\n            this.containerInstance.exit();\n        }\n        clearTimeout(this._durationTimeoutId);\n    };\n    /** Marks the snackbar action clicked. */\n    /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.dismissWithAction = /**\n     * Marks the snackbar action clicked.\n     * @return {?}\n     */\n    function () {\n        if (!this._onAction.closed) {\n            this._dismissedByAction = true;\n            this._onAction.next();\n            this._onAction.complete();\n        }\n    };\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * @breaking-change 8.0.0\n     */\n    /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.closeWithAction = /**\n     * Marks the snackbar action clicked.\n     * @deprecated Use `dismissWithAction` instead.\n     * \\@breaking-change 8.0.0\n     * @return {?}\n     */\n    function () {\n        this.dismissWithAction();\n    };\n    /** Dismisses the snack bar after some duration */\n    /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._dismissAfter = /**\n     * Dismisses the snack bar after some duration\n     * @param {?} duration\n     * @return {?}\n     */\n    function (duration) {\n        var _this = this;\n        this._durationTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        function () { return _this.dismiss(); }), duration);\n    };\n    /** Marks the snackbar as opened */\n    /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._open = /**\n     * Marks the snackbar as opened\n     * @return {?}\n     */\n    function () {\n        if (!this._afterOpened.closed) {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        }\n    };\n    /** Cleans up the DOM after closing. */\n    /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    MatSnackBarRef.prototype._finishDismiss = /**\n     * Cleans up the DOM after closing.\n     * @private\n     * @return {?}\n     */\n    function () {\n        this._overlayRef.dispose();\n        if (!this._onAction.closed) {\n            this._onAction.complete();\n        }\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\n        this._afterDismissed.complete();\n        this._dismissedByAction = false;\n    };\n    /** Gets an observable that is notified when the snack bar is finished closing. */\n    /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterDismissed = /**\n     * Gets an observable that is notified when the snack bar is finished closing.\n     * @return {?}\n     */\n    function () {\n        return this._afterDismissed.asObservable();\n    };\n    /** Gets an observable that is notified when the snack bar has opened and appeared. */\n    /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.afterOpened = /**\n     * Gets an observable that is notified when the snack bar has opened and appeared.\n     * @return {?}\n     */\n    function () {\n        return this.containerInstance._onEnter;\n    };\n    /** Gets an observable that is notified when the snack bar action is called. */\n    /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    MatSnackBarRef.prototype.onAction = /**\n     * Gets an observable that is notified when the snack bar action is called.\n     * @return {?}\n     */\n    function () {\n        return this._onAction.asObservable();\n    };\n    return MatSnackBarRef;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a snack bar.\n * @type {?}\n */\nvar MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\n/**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nvar  /**\n * Configuration used when opening a snack-bar.\n * @template D\n */\nMatSnackBarConfig = /** @class */ (function () {\n    function MatSnackBarConfig() {\n        /**\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\n         */\n        this.politeness = 'assertive';\n        /**\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n         * component or template, the announcement message will default to the specified message.\n         */\n        this.announcementMessage = '';\n        /**\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\n         */\n        this.duration = 0;\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * The horizontal position to place the snack bar.\n         */\n        this.horizontalPosition = 'center';\n        /**\n         * The vertical position to place the snack bar.\n         */\n        this.verticalPosition = 'bottom';\n    }\n    return MatSnackBarConfig;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\nvar SimpleSnackBar = /** @class */ (function () {\n    function SimpleSnackBar(snackBarRef, data) {\n        this.snackBarRef = snackBarRef;\n        this.data = data;\n    }\n    /** Performs the action on the snack bar. */\n    /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    SimpleSnackBar.prototype.action = /**\n     * Performs the action on the snack bar.\n     * @return {?}\n     */\n    function () {\n        this.snackBarRef.dismissWithAction();\n    };\n    Object.defineProperty(SimpleSnackBar.prototype, \"hasAction\", {\n        /** If the action button should be shown. */\n        get: /**\n         * If the action button should be shown.\n         * @return {?}\n         */\n        function () {\n            return !!this.data.action;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SimpleSnackBar.decorators = [\n        { type: Component, args: [{selector: 'simple-snack-bar',\n                    template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\n                    styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        'class': 'mat-simple-snackbar',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    SimpleSnackBar.ctorParameters = function () { return [\n        { type: MatSnackBarRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\n    ]; };\n    return SimpleSnackBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by the Material snack bar.\n * \\@docs-private\n * @type {?}\n */\nvar matSnackBarAnimations = {\n    /**\n     * Animation that shows and hides a snack bar.\n     */\n    snackBarState: trigger('state', [\n        state('void, hidden', style({\n            transform: 'scale(0.8)',\n            opacity: 0,\n        })),\n        state('visible', style({\n            transform: 'scale(1)',\n            opacity: 1,\n        })),\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n            opacity: 0\n        }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Internal component that wraps user-provided snack bar content.\n * \\@docs-private\n */\nvar MatSnackBarContainer = /** @class */ (function (_super) {\n    __extends(MatSnackBarContainer, _super);\n    function MatSnackBarContainer(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\n        var _this = _super.call(this) || this;\n        _this._ngZone = _ngZone;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.snackBarConfig = snackBarConfig;\n        /**\n         * Whether the component has been destroyed.\n         */\n        _this._destroyed = false;\n        /**\n         * Subject for notifying that the snack bar has exited from view.\n         */\n        _this._onExit = new Subject();\n        /**\n         * Subject for notifying that the snack bar has finished entering the view.\n         */\n        _this._onEnter = new Subject();\n        /**\n         * The state of the snack bar animations.\n         */\n        _this._animationState = 'void';\n        // Based on the ARIA spec, `alert` and `status` roles have an\n        // implicit `assertive` and `polite` politeness respectively.\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n            _this._role = 'alert';\n        }\n        else if (snackBarConfig.politeness === 'off') {\n            _this._role = null;\n        }\n        else {\n            _this._role = 'status';\n        }\n        return _this;\n    }\n    /** Attach a component portal as content to this snack bar container. */\n    /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachComponentPortal = /**\n     * Attach a component portal as content to this snack bar container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachComponentPortal(portal);\n    };\n    /** Attach a template portal as content to this snack bar container. */\n    /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.attachTemplatePortal = /**\n     * Attach a template portal as content to this snack bar container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    function (portal) {\n        this._assertNotAttached();\n        this._applySnackBarClasses();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    };\n    /** Handle end of animations, updating the state of the snackbar. */\n    /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.onAnimationEnd = /**\n     * Handle end of animations, updating the state of the snackbar.\n     * @param {?} event\n     * @return {?}\n     */\n    function (event) {\n        var fromState = event.fromState, toState = event.toState;\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n            this._completeExit();\n        }\n        if (toState === 'visible') {\n            // Note: we shouldn't use `this` inside the zone callback,\n            // because it can cause a memory leak.\n            /** @type {?} */\n            var onEnter_1 = this._onEnter;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            function () {\n                onEnter_1.next();\n                onEnter_1.complete();\n            }));\n        }\n    };\n    /** Begin animation of snack bar entrance into view. */\n    /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.enter = /**\n     * Begin animation of snack bar entrance into view.\n     * @return {?}\n     */\n    function () {\n        if (!this._destroyed) {\n            this._animationState = 'visible';\n            this._changeDetectorRef.detectChanges();\n        }\n    };\n    /** Begin animation of the snack bar exiting from view. */\n    /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.exit = /**\n     * Begin animation of the snack bar exiting from view.\n     * @return {?}\n     */\n    function () {\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n        // `MatSnackBar.open`).\n        this._animationState = 'hidden';\n        return this._onExit;\n    };\n    /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n    /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype.ngOnDestroy = /**\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\n     * @return {?}\n     */\n    function () {\n        this._destroyed = true;\n        this._completeExit();\n    };\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     */\n    /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._completeExit = /**\n     * Waits for the zone to settle before removing the element. Helps prevent\n     * errors where we end up removing an element which is in the middle of an animation.\n     * @private\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\n         * @return {?}\n         */\n        function () {\n            _this._onExit.next();\n            _this._onExit.complete();\n        }));\n    };\n    /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n    /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._applySnackBarClasses = /**\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\n     * @private\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        /** @type {?} */\n        var panelClasses = this.snackBarConfig.panelClass;\n        if (panelClasses) {\n            if (Array.isArray(panelClasses)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClasses.forEach((/**\n                 * @param {?} cssClass\n                 * @return {?}\n                 */\n                function (cssClass) { return element.classList.add(cssClass); }));\n            }\n            else {\n                element.classList.add(panelClasses);\n            }\n        }\n        if (this.snackBarConfig.horizontalPosition === 'center') {\n            element.classList.add('mat-snack-bar-center');\n        }\n        if (this.snackBarConfig.verticalPosition === 'top') {\n            element.classList.add('mat-snack-bar-top');\n        }\n    };\n    /** Asserts that no content is already attached to the container. */\n    /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    MatSnackBarContainer.prototype._assertNotAttached = /**\n     * Asserts that no content is already attached to the container.\n     * @private\n     * @return {?}\n     */\n    function () {\n        if (this._portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach snack bar content after content is already attached');\n        }\n    };\n    MatSnackBarContainer.decorators = [\n        { type: Component, args: [{selector: 'snack-bar-container',\n                    template: \"<ng-template cdkPortalOutlet></ng-template>\",\n                    styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\n                    // In Ivy embedded views will be change detected from their declaration place, rather than\n                    // where they were stamped out. This means that we can't have the snack bar container be OnPush,\n                    // because it might cause snack bars that were opened from a template not to be out of date.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    animations: [matSnackBarAnimations.snackBarState],\n                    host: {\n                        '[attr.role]': '_role',\n                        'class': 'mat-snack-bar-container',\n                        '[@state]': '_animationState',\n                        '(@state.done)': 'onAnimationEnd($event)'\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatSnackBarContainer.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: ElementRef },\n        { type: ChangeDetectorRef },\n        { type: MatSnackBarConfig }\n    ]; };\n    MatSnackBarContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n    };\n    return MatSnackBarContainer;\n}(BasePortalOutlet));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar MatSnackBarModule = /** @class */ (function () {\n    function MatSnackBarModule() {\n    }\n    MatSnackBarModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [\n                        OverlayModule,\n                        PortalModule,\n                        CommonModule,\n                        MatButtonModule,\n                        MatCommonModule,\n                    ],\n                    exports: [MatSnackBarContainer, MatCommonModule],\n                    declarations: [MatSnackBarContainer, SimpleSnackBar],\n                    entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n                },] },\n    ];\n    return MatSnackBarModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to specify default snack bar.\n * @type {?}\n */\nvar MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\n    providedIn: 'root',\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\n    return new MatSnackBarConfig();\n}\n/**\n * Service to dispatch Material Design snack bar messages.\n */\nvar MatSnackBar = /** @class */ (function () {\n    function MatSnackBar(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\n        this._overlay = _overlay;\n        this._live = _live;\n        this._injector = _injector;\n        this._breakpointObserver = _breakpointObserver;\n        this._parentSnackBar = _parentSnackBar;\n        this._defaultConfig = _defaultConfig;\n        /**\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n         * If there is a parent snack-bar service, all operations should delegate to that parent\n         * via `_openedSnackBarRef`.\n         */\n        this._snackBarRefAtThisLevel = null;\n    }\n    Object.defineProperty(MatSnackBar.prototype, \"_openedSnackBarRef\", {\n        /** Reference to the currently opened snackbar at *any* level. */\n        get: /**\n         * Reference to the currently opened snackbar at *any* level.\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var parent = this._parentSnackBar;\n            return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (this._parentSnackBar) {\n                this._parentSnackBar._openedSnackBarRef = value;\n            }\n            else {\n                this._snackBarRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param component Component to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromComponent = /**\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\n     * currently opened snack bars.\n     *\n     * @template T\n     * @param {?} component Component to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    function (component, config) {\n        return (/** @type {?} */ (this._attach(component, config)));\n    };\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param template Template to be instantiated.\n     * @param config Extra configuration for the snack bar.\n     */\n    /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.openFromTemplate = /**\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\n     * currently opened snack bars.\n     *\n     * @param {?} template Template to be instantiated.\n     * @param {?=} config Extra configuration for the snack bar.\n     * @return {?}\n     */\n    function (template, config) {\n        return this._attach(template, config);\n    };\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param message The message to show in the snackbar.\n     * @param action The label for the snackbar action.\n     * @param config Additional configuration options for the snackbar.\n     */\n    /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.open = /**\n     * Opens a snackbar with a message and an optional action.\n     * @param {?} message The message to show in the snackbar.\n     * @param {?=} action The label for the snackbar action.\n     * @param {?=} config Additional configuration options for the snackbar.\n     * @return {?}\n     */\n    function (message, action, config) {\n        if (action === void 0) { action = ''; }\n        /** @type {?} */\n        var _config = __assign({}, this._defaultConfig, config);\n        // Since the user doesn't have access to the component, we can\n        // override the data to pass in our own message and action.\n        _config.data = { message: message, action: action };\n        if (!_config.announcementMessage) {\n            _config.announcementMessage = message;\n        }\n        return this.openFromComponent(SimpleSnackBar, _config);\n    };\n    /**\n     * Dismisses the currently-visible snack bar.\n     */\n    /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype.dismiss = /**\n     * Dismisses the currently-visible snack bar.\n     * @return {?}\n     */\n    function () {\n        if (this._openedSnackBarRef) {\n            this._openedSnackBarRef.dismiss();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatSnackBar.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        // Only dismiss the snack bar at the current level on destroy.\n        if (this._snackBarRefAtThisLevel) {\n            this._snackBarRefAtThisLevel.dismiss();\n        }\n    };\n    /**\n     * Attaches the snack bar container component to the overlay.\n     */\n    /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._attachSnackBarContainer = /**\n     * Attaches the snack bar container component to the overlay.\n     * @private\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    function (overlayRef, config) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        /** @type {?} */\n        var injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarConfig, config]\n        ]));\n        /** @type {?} */\n        var containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n        /** @type {?} */\n        var containerRef = overlayRef.attach(containerPortal);\n        containerRef.instance.snackBarConfig = config;\n        return containerRef.instance;\n    };\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     */\n    /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    MatSnackBar.prototype._attach = /**\n     * Places a new component or a template as the content of the snack bar container.\n     * @private\n     * @template T\n     * @param {?} content\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    function (content, userConfig) {\n        /** @type {?} */\n        var config = __assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\n        /** @type {?} */\n        var overlayRef = this._createOverlay(config);\n        /** @type {?} */\n        var container = this._attachSnackBarContainer(overlayRef, config);\n        /** @type {?} */\n        var snackBarRef = new MatSnackBarRef(container, overlayRef);\n        if (content instanceof TemplateRef) {\n            /** @type {?} */\n            var portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\n                $implicit: config.data,\n                snackBarRef: snackBarRef\n            })));\n            snackBarRef.instance = container.attachTemplatePortal(portal);\n        }\n        else {\n            /** @type {?} */\n            var injector = this._createInjector(config, snackBarRef);\n            /** @type {?} */\n            var portal = new ComponentPortal(content, undefined, injector);\n            /** @type {?} */\n            var contentRef = container.attachComponentPortal(portal);\n            // We can't pass this via the injector, because the injector is created earlier.\n            snackBarRef.instance = contentRef.instance;\n        }\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\n        // fill the width of the screen for full width snackbars.\n        this._breakpointObserver.observe(Breakpoints.Handset).pipe(takeUntil(overlayRef.detachments().pipe(take(1)))).subscribe((/**\n         * @param {?} state\n         * @return {?}\n         */\n        function (state$$1) {\n            if (state$$1.matches) {\n                overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n            }\n            else {\n                overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n            }\n        }));\n        this._animateSnackBar(snackBarRef, config);\n        this._openedSnackBarRef = snackBarRef;\n        return this._openedSnackBarRef;\n    };\n    /** Animates the old snack bar out and the new one in. */\n    /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatSnackBar.prototype._animateSnackBar = /**\n     * Animates the old snack bar out and the new one in.\n     * @private\n     * @param {?} snackBarRef\n     * @param {?} config\n     * @return {?}\n     */\n    function (snackBarRef, config) {\n        var _this = this;\n        // When the snackbar is dismissed, clear the reference to it.\n        snackBarRef.afterDismissed().subscribe((/**\n         * @return {?}\n         */\n        function () {\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n            if (_this._openedSnackBarRef == snackBarRef) {\n                _this._openedSnackBarRef = null;\n            }\n            if (config.announcementMessage) {\n                _this._live.clear();\n            }\n        }));\n        if (this._openedSnackBarRef) {\n            // If a snack bar is already in view, dismiss it and enter the\n            // new snack bar after exit animation is complete.\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\n             * @return {?}\n             */\n            function () {\n                snackBarRef.containerInstance.enter();\n            }));\n            this._openedSnackBarRef.dismiss();\n        }\n        else {\n            // If no snack bar is in view, enter the new snack bar.\n            snackBarRef.containerInstance.enter();\n        }\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n        if (config.duration && config.duration > 0) {\n            snackBarRef.afterOpened().subscribe((/**\n             * @return {?}\n             */\n            function () { return snackBarRef._dismissAfter((/** @type {?} */ (config.duration))); }));\n        }\n        if (config.announcementMessage) {\n            this._live.announce(config.announcementMessage, config.politeness);\n        }\n    };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified snack bar config.\n     */\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createOverlay = /**\n     * Creates a new overlay and places it in the correct location.\n     * @private\n     * @param {?} config The user-specified snack bar config.\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var overlayConfig = new OverlayConfig();\n        overlayConfig.direction = config.direction;\n        /** @type {?} */\n        var positionStrategy = this._overlay.position().global();\n        // Set horizontal position.\n        /** @type {?} */\n        var isRtl = config.direction === 'rtl';\n        /** @type {?} */\n        var isLeft = (config.horizontalPosition === 'left' ||\n            (config.horizontalPosition === 'start' && !isRtl) ||\n            (config.horizontalPosition === 'end' && isRtl));\n        /** @type {?} */\n        var isRight = !isLeft && config.horizontalPosition !== 'center';\n        if (isLeft) {\n            positionStrategy.left('0');\n        }\n        else if (isRight) {\n            positionStrategy.right('0');\n        }\n        else {\n            positionStrategy.centerHorizontally();\n        }\n        // Set horizontal position.\n        if (config.verticalPosition === 'top') {\n            positionStrategy.top('0');\n        }\n        else {\n            positionStrategy.bottom('0');\n        }\n        overlayConfig.positionStrategy = positionStrategy;\n        return this._overlay.create(overlayConfig);\n    };\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @param config Config that was used to create the snack bar.\n     * @param snackBarRef Reference to the snack bar.\n     */\n    /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    MatSnackBar.prototype._createInjector = /**\n     * Creates an injector to be used inside of a snack bar component.\n     * @private\n     * @template T\n     * @param {?} config Config that was used to create the snack bar.\n     * @param {?} snackBarRef Reference to the snack bar.\n     * @return {?}\n     */\n    function (config, snackBarRef) {\n        /** @type {?} */\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\n            [MatSnackBarRef, snackBarRef],\n            [MAT_SNACK_BAR_DATA, config.data]\n        ]));\n    };\n    MatSnackBar.decorators = [\n        { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\n    ];\n    /** @nocollapse */\n    MatSnackBar.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: LiveAnnouncer },\n        { type: Injector },\n        { type: BreakpointObserver },\n        { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n    ]; };\n    /** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\n    return MatSnackBar;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\n//# sourceMappingURL=snack-bar.es5.js.map\n","import { Injectable } from '@angular/core';\n\nimport { from, Observable } from 'rxjs';\nimport { first, map, share } from 'rxjs/operators';\n\nimport { Logger } from 'app/shared/logger.service';\n\ndeclare const System: {\n  import(name: string): Promise<any>;\n};\n\ntype PrettyPrintOne = (code: string, language?: string, linenums?: number | boolean) => string;\n\n/**\n * Wrapper around the prettify.js library\n */\n@Injectable()\nexport class PrettyPrinter {\n\n  private prettyPrintOne: Observable<PrettyPrintOne>;\n\n  constructor(private logger: Logger) {\n    this.prettyPrintOne = from(this.getPrettyPrintOne()).pipe(share());\n  }\n\n  private getPrettyPrintOne(): Promise<PrettyPrintOne> {\n    const ppo = (window as any)['prettyPrintOne'];\n    return ppo ? Promise.resolve(ppo) :\n      // prettify.js is not in window global; load it with webpack loader\n      System.import('assets/js/prettify.js')\n        .then(\n          () => (window as any)['prettyPrintOne'],\n          err => {\n            const msg = `Cannot get prettify.js from server: ${err.message}`;\n            this.logger.error(new Error(msg));\n            // return a pretty print fn that always fails.\n            return () => { throw new Error(msg); };\n          });\n  }\n\n  /**\n   * Format code snippet as HTML\n   * @param {string} code - the code snippet to format; should already be HTML encoded\n   * @param {string} [language] - The language of the code to render (could be javascript, html, typescript, etc)\n   * @param {string|number} [linenums] - Whether to display line numbers:\n   *  - false: don't display\n   *  - true: do display\n   *  - number: do display but start at the given number\n   * @returns Observable<string> - Observable of formatted code\n   */\n  formatCode(code: string, language?: string, linenums?: number | boolean) {\n    return this.prettyPrintOne.pipe(\n      map(ppo => {\n        try {\n          return ppo(code, language, linenums);\n        } catch (err) {\n          const msg = `Could not format code that begins '${code.substr(0, 50)}...'.`;\n          console.error(msg, err);\n          throw new Error(msg);\n        }\n      }),\n      first(),  // complete immediately\n    );\n  }\n}\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/snack-bar\";\nimport * as i2 from \"@angular/cdk/overlay\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/cdk/bidi\";\nimport * as i5 from \"@angular/cdk/portal\";\nimport * as i6 from \"@angular/cdk/platform\";\nimport * as i7 from \"@angular/cdk/scrolling\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/platform-browser\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"../../button/typings/index.ngfactory\";\nimport * as i12 from \"@angular/cdk/a11y\";\nimport * as i13 from \"@angular/platform-browser/animations\";\nvar MatSnackBarModuleNgFactory = i0.ɵcmf(i1.MatSnackBarModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [MatSnackBarContainerNgFactory, SimpleSnackBarNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.Overlay, i2.Overlay, [i2.ScrollStrategyOptions, i2.OverlayContainer, i0.ComponentFactoryResolver, i2.OverlayPositionBuilder, i2.OverlayKeyboardDispatcher, i0.Injector, i0.NgZone, i3.DOCUMENT, i4.Directionality, [2, i3.Location]]), i0.ɵmpd(5120, i2.ɵc, i2.ɵd, [i2.Overlay]), i0.ɵmpd(4608, i3.NgLocalization, i3.NgLocaleLocalization, [i0.LOCALE_ID, [2, i3.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i4.BidiModule, i4.BidiModule, []), i0.ɵmpd(1073742336, i5.PortalModule, i5.PortalModule, []), i0.ɵmpd(1073742336, i6.PlatformModule, i6.PlatformModule, []), i0.ɵmpd(1073742336, i7.ScrollingModule, i7.ScrollingModule, []), i0.ɵmpd(1073742336, i2.OverlayModule, i2.OverlayModule, []), i0.ɵmpd(1073742336, i3.CommonModule, i3.CommonModule, []), i0.ɵmpd(1073742336, i8.MatCommonModule, i8.MatCommonModule, [[2, i8.MATERIAL_SANITY_CHECKS], [2, i9.HAMMER_LOADER]]), i0.ɵmpd(1073742336, i8.MatRippleModule, i8.MatRippleModule, []), i0.ɵmpd(1073742336, i10.MatButtonModule, i10.MatButtonModule, []), i0.ɵmpd(1073742336, i1.MatSnackBarModule, i1.MatSnackBarModule, [])]); });\nexport { MatSnackBarModuleNgFactory as MatSnackBarModuleNgFactory };\nvar styles_MatSnackBarContainer = [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"];\nvar RenderType_MatSnackBarContainer = i0.ɵcrt({ encapsulation: 2, styles: styles_MatSnackBarContainer, data: { \"animation\": [{ type: 7, name: \"state\", definitions: [{ type: 0, name: \"void, hidden\", styles: { type: 6, styles: { transform: \"scale(0.8)\", opacity: 0 }, offset: null }, options: undefined }, { type: 0, name: \"visible\", styles: { type: 6, styles: { transform: \"scale(1)\", opacity: 1 }, offset: null }, options: undefined }, { type: 1, expr: \"* => visible\", animation: { type: 4, styles: null, timings: \"150ms cubic-bezier(0, 0, 0.2, 1)\" }, options: null }, { type: 1, expr: \"* => void, * => hidden\", animation: { type: 4, styles: { type: 6, styles: { opacity: 0 }, offset: null }, timings: \"75ms cubic-bezier(0.4, 0.0, 1, 1)\" }, options: null }], options: {} }] } });\nexport { RenderType_MatSnackBarContainer as RenderType_MatSnackBarContainer };\nfunction View_MatSnackBarContainer_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nexport function View_MatSnackBarContainer_0(_l) { return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { _portalOutlet: 0 }), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatSnackBarContainer_1)), i0.ɵdid(2, 212992, [[1, 4]], 0, i5.CdkPortalOutlet, [i0.ComponentFactoryResolver, i0.ViewContainerRef], { portal: [0, \"portal\"] }, null)], function (_ck, _v) { var currVal_0 = \"\"; _ck(_v, 2, 0, currVal_0); }, null); }\nexport function View_MatSnackBarContainer_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"snack-bar-container\", [[\"class\", \"mat-snack-bar-container\"]], [[1, \"role\", 0], [40, \"@state\", 0]], [[\"component\", \"@state.done\"]], function (_v, en, $event) { var ad = true; if ((\"component:@state.done\" === en)) {\n        var pd_0 = (i0.ɵnov(_v, 1).onAnimationEnd($event) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, View_MatSnackBarContainer_0, RenderType_MatSnackBarContainer)), i0.ɵdid(1, 180224, null, 0, i1.MatSnackBarContainer, [i0.NgZone, i0.ElementRef, i0.ChangeDetectorRef, i1.MatSnackBarConfig], null, null)], null, function (_ck, _v) { var currVal_0 = i0.ɵnov(_v, 1)._role; var currVal_1 = i0.ɵnov(_v, 1)._animationState; _ck(_v, 0, 0, currVal_0, currVal_1); }); }\nvar MatSnackBarContainerNgFactory = i0.ɵccf(\"snack-bar-container\", i1.MatSnackBarContainer, View_MatSnackBarContainer_Host_0, {}, {}, []);\nexport { MatSnackBarContainerNgFactory as MatSnackBarContainerNgFactory };\nvar styles_SimpleSnackBar = [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;height:100%;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"];\nvar RenderType_SimpleSnackBar = i0.ɵcrt({ encapsulation: 2, styles: styles_SimpleSnackBar, data: {} });\nexport { RenderType_SimpleSnackBar as RenderType_SimpleSnackBar };\nfunction View_SimpleSnackBar_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 3, \"div\", [[\"class\", \"mat-simple-snackbar-action\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 2, \"button\", [[\"mat-button\", \"\"]], [[1, \"disabled\", 0], [2, \"_mat-animation-noopable\", null]], [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = (_co.action() !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, i11.View_MatButton_0, i11.RenderType_MatButton)), i0.ɵdid(2, 180224, null, 0, i10.MatButton, [i0.ElementRef, i12.FocusMonitor, [2, i13.ANIMATION_MODULE_TYPE]], null, null), (_l()(), i0.ɵted(3, 0, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (i0.ɵnov(_v, 2).disabled || null); var currVal_1 = (i0.ɵnov(_v, 2)._animationMode === \"NoopAnimations\"); _ck(_v, 1, 0, currVal_0, currVal_1); var currVal_2 = _co.data.action; _ck(_v, 3, 0, currVal_2); }); }\nexport function View_SimpleSnackBar_0(_l) { return i0.ɵvid(2, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [], null, null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_SimpleSnackBar_1)), i0.ɵdid(3, 16384, null, 0, i3.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_1 = _co.hasAction; _ck(_v, 3, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co.data.message; _ck(_v, 1, 0, currVal_0); }); }\nexport function View_SimpleSnackBar_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"simple-snack-bar\", [[\"class\", \"mat-simple-snackbar\"]], null, null, null, View_SimpleSnackBar_0, RenderType_SimpleSnackBar)), i0.ɵdid(1, 49152, null, 0, i1.SimpleSnackBar, [i1.MatSnackBarRef, i1.MAT_SNACK_BAR_DATA], null, null)], null, null); }\nvar SimpleSnackBarNgFactory = i0.ɵccf(\"simple-snack-bar\", i1.SimpleSnackBar, View_SimpleSnackBar_Host_0, {}, {}, []);\nexport { SimpleSnackBarNgFactory as SimpleSnackBarNgFactory };\n","<ng-template cdkPortalOutlet></ng-template>","<span>{{data.message}}</span><div class=\"mat-simple-snackbar-action\" *ngIf=\"hasAction\"><button mat-button (click)=\"action()\">{{data.action}}</button></div>"],"sourceRoot":""}